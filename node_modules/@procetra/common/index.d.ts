// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../@tuval/forms
//   ../../@tuval/core

import { KeyFrameCollection } from '@tuval/forms';
import { UIView } from '@tuval/forms';
import { UITextClass } from '@tuval/forms';
import { UIView, UIController } from '@tuval/forms';
import { int } from '@tuval/core';
import { UIButtonClass } from '@tuval/forms';

class ListBounce extends KeyFrameCollection {
    constructor();
}
export const ListBounceAnimation: ListBounce;
export {};

export function CalculationMethodText(value: string): UIView;

export function DesktopPageTitle(icon: string, text: string): UIView;

export function Headline4(value: string): UITextClass;

export function Headline5(value: string): UIView;

export function PageTitle(icon: string, text: string): UIView;

export function PortalPageTitle(icon: string, text: string): UIView;

export interface PortalSideMenuParams {
    items: MVIPortalSideMenuItem[];
    selectedAction: (index: int) => void;
    second?: boolean;
}
export interface MVIPortalSideMenuItem {
    name: string;
    icon: string;
    controller: UIController;
    isVisible: () => boolean;
}
export function PortalSideMenu(params: PortalSideMenuParams): UIView;

export function RegularText(value: string): UITextClass;

export function SectionContent(value: string): UIView;

export function SectionHeadline(value: string): UIView;

export function SectionSubHeadline(value: string): UIView;

export function SectionTitle(value: string): UIView;

export function TileBox(...content: any[]): UIView;

export function TileBoxHeaderText(value: string): UIView;

export interface IPortalFilterBarWidgetParams {
    value: int;
}
export function PortalFilterBarWidget(params: IPortalFilterBarWidgetParams): UIView;

export function PageButton(value: string): UIButtonClass;

export function Badge(text: string, color: string, backColor: string): import("@tuval/forms").UITextClass;

export const CancelButton: (text: string) => import("@tuval/forms").UIButtonClass;

export const FormView: ({ content }: {
    content: UIView;
}) => import("@tuval/forms").UISceneClass;

export function SelectAnalysisView(project: IProjectModel): import("@tuval/forms").VStackClass;

/***
  * Proje sayfalarının başlığı, menulerin sorumlusu
  */
export const ProjectMainMenu: (project_name: string, model_name: string, eventCount: int, caseCount: int, miningModels: any[], OnMiningModelChanged: Function, menu: any[], modelMenu: any[], queryMenu: any[]) => import("@tuval/forms").VStackClass;

export interface IProjectModel {
    project_id: string;
    project_name: string;
    admin: string;
    isPublic: boolean;
    diableCache: boolean;
    is_data_loaded: boolean;
    case_count: int;
    event_count: int;
}

export interface IMiningModelModel {
    project_id: string;
    model_id: string;
    model_name: string;
}

export interface MIHappyPath {
    caseDuration_max: int;
    caseDuration_mean: int;
    caseDuration_min: int;
    caseDuration_sum: int;
    caseDuration_all_sum: int;
    caseDuration_all_mean: int;
    count: int;
    count_sum: int;
    rate_count: int;
    rate_duration: int;
    variant: string;
}

export class ConfigService {
    static GetEbaBrokerUrl(): string;
    static GetEnsembleUrl(): string;
    static GetSymbolBrokerUrl(): string;
    static GetMiningBrokerUrl(): string;
}

type IDataSet = any;
type IProject = any;
type IActivityInfo = any;
type MIProjectItem = any;
export class BrokerProjectService {
    CreateProject(name: string, admin: string, isPublic?: boolean, disableCache?: boolean): Promise<IProjectModel>;
    AddDataSet(dataset: IDataSet): Promise<any>;
    DataSetFromCvs(projectId: string, datasetId: string, datasetName: string, csv: string, case_column: string, activity_column: string, time_stamp: string, start_date: string, date_format: string): Promise<IDataSet>;
    DataSetFromXes(projectId: string, datasetName: string, xes: string): Promise<any>;
    CloneDataSet(projectId: string, datasetName: string): Promise<any>;
    GetDatasetById(projectId: string, id: string): Promise<any>;
    SaveProject(projectId: string): Promise<any>;
    GetProjectListFromStorage(): Promise<string[]>;
    LoadProject(name: string): Promise<IProject>;
    CloseProject(id: string): Promise<any>;
    ConvertCsvToJson(csv: string): Promise<string>;
    GetDatasetAsData(projectId: string, datasetId: string): Promise<any>;
    GetDatasetEventCount(projectId: string, datasetId: string): Promise<any>;
    CasesStartedPerDay(projectId: string, datasetId: string): Promise<any>;
    ActivitiesStartedPerDay(projectId: string, datasetId: string): Promise<any>;
    ActivitiesPerCase(projectId: string, datasetId: string): Promise<any>;
    GetVariantsInfo(projectId: string, datasetId: string): Promise<any>;
    GetEventsOverTime(projectId: string, datasetId: string): Promise<any>;
    GetStartEvents(projectId: string, datasetId: string): Promise<any>;
    GetEndEvents(projectId: string, datasetId: string): Promise<any>;
    GetTraceCount(projectId: string, datasetId: string): Promise<any>;
    GetEventCount(projectId: string, datasetId: string): Promise<any>;
    GetActivities(projectId: string, datasetId: string): Promise<any>;
    GetMedianCaseDuration(projectId: string, datasetId: string): Promise<any>;
    GetMeanCaseDuration(projectId: string, datasetId: string): Promise<any>;
    GetDatasetName(projectId: string, datasetId: string): Promise<any>;
    SetActivityInfo(projectId: string, datasetId: string, activityInfos: IActivityInfo[]): Promise<any>;
    GetActivityInfo(projectId: string, datasetId: string): Promise<any>;
    GetAverageCostOfDataset(projectId: string, datasetId: string): Promise<any>;
    GetTotalCostOfDataset(projectId: string, datasetId: string): Promise<any>;
    SetDatasetFilteredData(projectId: string, datasetId: string, filteredData: any[]): Promise<any>;
    SetDatasetCondition(projectId: string, datasetId: string, condition: string): Promise<any>;
    GetProjects(session_id: string): Promise<IProjectModel[]>;
    GetProjectItems(project_id: string): Promise<MIProjectItem[]>;
    GetProjectById(project_id: string): Promise<any>;
    CreateAnalyseModel(project_id: string, analyse_model_name: string): Promise<IMiningModelModel>;
    GetAnalyseModels(project_id: string): Promise<IMiningModelModel[]>;
    CreateMapping(project_id: string, mapping_name: string, mapping_file_name: string, mapping_data: string): Promise<string>;
}
export {};

type IDataSet = any;
type IProject = any;
type IActivityInfo = any;
type IActivityInfoBag = any;
export type ThreadResult<T> = any;
export interface IProjectService {
    CreateProject(name: string): Promise<IProjectModel>;
    GetProjectById(session_id: string, org_name: string, project_id: string): Promise<any>;
    AddDataSet(dataset: IDataSet): void;
    DataSetFromCvs(projectId: string, datasetId: string, datasetName: string, csv: string, case_column: string, activity_column: string, time_stamp: string, start_date: string, date_format: string): Promise<IDataSet>;
    DataSetFromXes(projectId: string, datasetName: string, xes: string): ThreadResult<IDataSet>;
    CloneDataSet(projectId: string, datasetName: string): ThreadResult<IDataSet>;
    GetDatasetById(projectId: string, id: string): ThreadResult<IDataSet>;
    SaveProject(projectId: string): ThreadResult<string>;
    GetProjectListFromStorage(): Promise<string[]>;
    LoadProject(name: string): Promise<IProject>;
    CloseProject(id: string): void;
    ConvertCsvToJson(csv: string): ThreadResult<any>;
    GetDatasetAsData(projectId: string, datasetId: string): ThreadResult<any>;
    GetDatasetEventCount(projectId: string, datasetId: string): ThreadResult<int>;
    CasesStartedPerDay(projectId: string, datasetId: string): ThreadResult<int>;
    ActivitiesStartedPerDay(projectId: string, datasetId: string): ThreadResult<int>;
    ActivitiesPerCase(projectId: string, datasetId: string): ThreadResult<int>;
    GetVariantsInfo(projectId: string, datasetId: string): ThreadResult<any>;
    GetEventsOverTime(projectId: string, datasetId: string): ThreadResult<any>;
    GetStartEvents(projectId: string, datasetId: string): ThreadResult<any>;
    GetEndEvents(projectId: string, datasetId: string): ThreadResult<any>;
    GetTraceCount(projectId: string, datasetId: string): ThreadResult<any>;
    GetEventCount(projectId: string, datasetId: string): ThreadResult<any>;
    GetActivities(projectId: string, datasetId: string): ThreadResult<any>;
    GetMedianCaseDuration(projectId: string, datasetId: string): ThreadResult<any>;
    GetMeanCaseDuration(projectId: string, datasetId: string): ThreadResult<any>;
    GetDatasetName(projectId: string, datasetId: string): ThreadResult<any>;
    SetActivityInfo(projectId: string, datasetId: string, activityInfos: IActivityInfo[]): ThreadResult<any>;
    GetActivityInfo(projectId: string, datasetId: string): ThreadResult<IActivityInfoBag>;
    GetAverageCostOfDataset(projectId: string, datasetId: string): ThreadResult<any>;
    GetTotalCostOfDataset(projectId: string, datasetId: string): ThreadResult<any>;
    SetDatasetFilteredData(projectId: string, datasetId: string, filteredData: any[]): ThreadResult<boolean>;
    SetDatasetCondition(projectId: string, datasetId: string, condition: string): ThreadResult<boolean>;
}
export {};

export class Services {
    static get ProjectService(): BrokerProjectService;
    static get StateService(): IStateService;
}
export interface IStateService {
    GetSessionId(): string;
    SetSessionId(value: string): void;
}

export interface ICreateProjectResponse {
    project_id: string;
    project_name: string;
    admin: string;
    is_public: boolean;
    disable_cache: boolean;
    is_data_loaded: boolean;
}
export class MiningBrokerClient {
    static LoadCsv(csv: string, case_id: string, activity_key: string, timestamp_key: string, start_timestamp_key: string, resource_key: string, cost_key: string): Promise<any[]>;
    static ImportCsvFile(project_id: string, csv: string, case_column_name: string, activity_column_name: string, timestamp_key: string, start_timestamp_key: string, resource_key: string, cost_key: string): Promise<any[]>;
    static GetStatistics(log_id: string, activity_name: string): Promise<any[]>;
    static GetActivityOverview(log_id: string): Promise<any[]>;
    static GetItemOverview(log_id: string, item_name: string): Promise<any[]>;
    static GetStartActivities(project_id: string): Promise<any>;
    static GetStartItems(log_id: string, item_name: string): Promise<any>;
    static GetEndActivities(project_id: string): Promise<any>;
    static GetEndItems(log_id: string, item_name: string): Promise<any>;
    static GetAllVariants(project_id: string, max_no_variants: int): Promise<any>;
    static GetVariants(project_id: string, max_no_variants: int): Promise<any>;
    static GetEventsPerTime(project_id: string): Promise<any>;
    static GetHappyPath(project_id: string): Promise<any>;
    static GetActivities(project_id: string, activity_key: string): Promise<any>;
    static GetThroughputTimes(project_id: string, activity_key: string): Promise<any>;
    static GetLogSummary(project_id: string): Promise<any>;
    static GetAllVariantsAndCases(project_id: string): Promise<any>;
    static GetAllPaths(project_id: string): Promise<any>;
    static GetAttributeValues(project_id: string): Promise<any>;
    static GetDailyCasesPerMonth(project_id: string): Promise<any>;
    static GetProcessSchema(project_id: string): Promise<any>;
    static GetLog(log_id: string): Promise<any>;
    static GetEventsOverTime(log_id: string): Promise<any>;
    static GetEventDataInfo(project_id: string): Promise<any>;
    static LoadEventData(project_id: string): Promise<any>;
    static GetResourceOverview(log_id: string): Promise<ICreateProjectResponse>;
    static Login(user: string, password: string): Promise<string>;
    static CreateProject(project_name: string, admin: string, is_public: boolean, disable_cache: boolean): Promise<any>;
    static GetProjects(): Promise<IProjectModel[]>;
    static GetProjectById(project_id: string): Promise<IProjectModel>;
    static CreateProjectItem(project_id: string, model_id: string, item_id: string): Promise<any>;
    static GetProjectItems(project_id: string, model_id: string): Promise<any>;
    static CreateAnalyseModel(project_id: string, analyse_model_name: string): Promise<IMiningModelModel>;
    static GetAnalyseModelById(project_id: string, model_id: string): Promise<GetAnalyseModelsResponse>;
    static DeleteAnalyseModelById(project_id: string, model_id: string): Promise<boolean>;
    static GetAnalyseModels(project_id: string): Promise<GetAnalyseModelsResponse[]>;
    static CreateMapping(project_id: string, mapping_name: string, mapping_file_name: string, mapping_data: string): Promise<string>;
    static GetCaseCount(project_id: string): Promise<int>;
    static GetEventCount(project_id: string): Promise<int>;
}

export interface GetAnalyseModelsResponse {
    project_id: string;
    model_id: string;
    model_name: string;
}

