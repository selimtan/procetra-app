// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../@tuval/core
//   ../../@tuval/cg
//   ../../@tuval/graphics
//   ../../@tuval/forms

import { float, List, Type, ICollection } from '@tuval/core';
import { CGRectangle, CGPoint, CGSize, CGColor } from '@tuval/cg';
import { CompositingQuality, SmoothingMode, TextRenderingHint, InterpolationMode, Bitmap } from '@tuval/graphics';
import { Control, TComponent } from '@tuval/forms';
import { SolidBrush, Pen, DashStyle, Graphics, Brush } from '@tuval/graphics';
import { int } from '@tuval/core';
import { CGColor, CGPoint, CGRectangle, CGSize } from '@tuval/cg';
import { float } from '@tuval/core';
import { GraphicsPath, Brush, Pen } from '@tuval/graphics';
import { CGPoint } from '@tuval/cg';
import { Graphics } from '@tuval/graphics';
import { Brush, Pen, Graphics } from '@tuval/graphics';
import { CGRectangle, CGPoint, CGSize } from '@tuval/cg';
import { TComponent } from '@tuval/forms';
import { Event, float, Out } from '@tuval/core';
import { float, byte } from '@tuval/core';
import { Font, StringTrimming, Graphics } from '@tuval/graphics';
import { CGColor, CGPoint, CGSize, CGRectangle } from '@tuval/cg';
import { CGPoint, CGRectangle } from '@tuval/cg';
import { Type } from '@tuval/core';
import { IEnumerable, ICollection } from '@tuval/core';
import { float, DisposableBase, IEnumerator, Event, IEnumerableOrArray } from '@tuval/core';
import { CGSize, CGPoint, CGColor, CGRectangle } from '@tuval/cg';
import { CGPoint, CGRectangle, CGSize } from '@tuval/cg';
import { DashStyle, Graphics, Brush } from '@tuval/graphics';
import { CGRectangle, CGSize, CGColor } from '@tuval/cg';
import { Brush } from '@tuval/graphics';
import { CGRectangle } from '@tuval/cg';
import { Dictionary, Type } from '@tuval/core';
import { CGSize, CGPoint } from '@tuval/cg';
import { ICollection, IEnumerable, IEnumerableOrArray, IEnumerator } from '@tuval/core';
import { List, IEnumerator, IEnumerableOrArray } from '@tuval/core';
import { Brush, Pen } from '@tuval/graphics';
import { CGColor, CGPoint, CGRectangle } from '@tuval/cg';
import { ICollection, List, int, IComparer, IEnumerableOrArray, IEnumerator, IList } from '@tuval/core';
import { Dictionary } from '@tuval/core';
import { IEnumerable } from '@tuval/core';
import { Event } from '@tuval/core';
import { List } from '@tuval/core';
import { Delegate } from '@tuval/core';
import { Control } from '@tuval/forms';
import { CGRectangle, CGColor, CGSize, CGPoint } from '@tuval/cg';
import { GraphicsPath, Brush, Pen, Graphics, HatchStyle } from '@tuval/graphics';
import { float, Out } from '@tuval/core';
import { Dictionary, IEnumerableOrArray, Out, IEnumerator } from "@tuval/core";
import { CGRectangle, CGPoint } from "@tuval/cg";
import { DisposableBase, IEnumerator, IEnumerable, List, IIteratorResult } from '@tuval/core';
import { IList, IEnumerable } from '@tuval/core';
import { ICollection, IEnumerable, IEnumerator, IEnumerableOrArray } from '@tuval/core';
import { CGRectangle, CGSize, CGPoint } from '@tuval/cg';
import { Pen, GraphicsPath, Brush, Graphics } from '@tuval/graphics';
import { CGPoint, CGColor, CGRectangle, CGSize } from '@tuval/cg';
import { CGImage, CGPoint, CGRectangle, CGSize } from '@tuval/cg';
import { DisposableBase, IEnumerator, List, IIteratorResult } from '@tuval/core';
import { CGColor } from '@tuval/cg';
import { Pen } from '@tuval/graphics';
import { CGColor, CGPoint } from '@tuval/cg';
import { IEnumerator, IEnumerable, List, IIteratorResult } from '@tuval/core';
import { IList } from '@tuval/core';

/**
  * Diagram component exported items
  */
import './SvgMesurements';
import './exports';

type ImageList = any;
type ToolTip = any;
type TuButtonElement = any;
type Slider = any;
type Subscription = any;
export class TuView extends TComponent implements ITuLayerCollectionContainer, ITuLayerAbilities {
        get FrameWidth(): int;
        set FrameWidth(value: int);
        get FrameHeight(): int;
        set FrameHeight(value: int);
        get RenderingMode(): ViewRenderingMode;
        set RenderingMode(value: ViewRenderingMode);
        get BackColor(): CGColor;
        set BackColor(value: CGColor);
        Ref: HTMLOrSVGElement;
        CreateElements(): any;
        static myVersion: float;
        static myVersionMajor: number;
        static myVersionMinor: number;
        static myVersionAssembly: string;
        static myCAN: string;
        protected myDocumentChangedSubscription: Subscription;
        myPaintEventArgs: PaintEventArgs;
        get BorderSize(): CGSize;
        set BorderSize(value: CGSize);
        protected myDocChangedEventHandler: TuChangedEventHandler;
        myBuffer: Bitmap;
        get BackgroundBrush(): SolidBrush;
        set BackgroundBrush(value: SolidBrush);
        get ClientRectangle(): CGRectangle;
        get Visible(): boolean;
        set Visible(value: boolean);
        get Width(): int;
        set Width(value: int);
        get Height(): int;
        set Height(value: int);
        get Controls(): List<TComponent>;
        set Controls(value: List<TComponent>);
        get Cursor(): Cursor;
        set Cursor(value: Cursor);
        get DefaultCursor(): Cursor;
        set DefaultCursor(value: Cursor);
        get DisplayRectangle(): CGRectangle;
        get AllowCopy(): boolean;
        set AllowCopy(value: boolean);
        /**
         * @hidden
         */
        protected getAllowCopy(): boolean;
        /**
         * @hidden
         */
        protected setAllowCopy(value: boolean): void;
        get AllowDelete(): boolean;
        set AllowDelete(value: boolean);
        /**
         * @hidden
         */
        protected getAllowDelete(): boolean;
        /**
         * @hidden
         */
        protected setAllowDelete(value: boolean): void;
        get AllowDragOut(): boolean;
        set AllowDragOut(value: boolean);
        /**
         * @hidden
         */
        protected getAllowDragOut(): boolean;
        /**
         * @hidden
         */
        protected setAllowDragOut(value: boolean): void;
        get AllowDrop(): boolean;
        set AllowDrop(value: boolean);
        /**
         * @hidden
         */
        protected getAllowDrop(): boolean;
        /**
         * @hidden
         */
        protected setAllowDrop(value: boolean): void;
        get AllowEdit(): boolean;
        set AllowEdit(value: boolean);
        /**
         * @hidden
         */
        protected getAllowEdit(): boolean;
        /**
         * @hidden
         */
        protected setAllowEdit(value: boolean): void;
        get AllowInsert(): boolean;
        set AllowInsert(value: boolean);
        /**
         * @hidden
         */
        protected getAllowInsert(): boolean;
        /**
         * @hidden
         */
        protected setAllowInsert(value: boolean): void;
        get AllowKey(): boolean;
        set AllowKey(value: boolean);
        /**
         * @hidden
         */
        protected getAllowKey(): boolean;
        /**
         * @hidden
         */
        protected setAllowKey(value: boolean): void;
        get AllowLink(): boolean;
        set AllowLink(value: boolean);
        /**
         * @hidden
         */
        protected getAllowLink(): boolean;
        /**
         * @hidden
         */
        protected setAllowLink(value: boolean): void;
        get AllowMouse(): boolean;
        set AllowMouse(value: boolean);
        /**
         * @hidden
         */
        protected getAllowMouse(): boolean;
        /**
         * @hidden
         */
        protected setAllowMouse(value: boolean): void;
        get AllowMove(): boolean;
        set AllowMove(value: boolean);
        /**
         * @hidden
         */
        protected getAllowMove(): boolean;
        /**
         * @hidden
         */
        protected setAllowMove(value: boolean): void;
        get AllowReshape(): boolean;
        set AllowReshape(value: boolean);
        /**
         * @hidden
         */
        protected getAllowReshape(): boolean;
        /**
         * @hidden
         */
        protected setAllowReshape(value: boolean): void;
        get AllowResize(): boolean;
        set AllowResize(value: boolean);
        /**
         * @hidden
         */
        protected getAllowResize(): boolean;
        /**
         * @hidden
         */
        protected setAllowResize(value: boolean): void;
        get AllowSelect(): boolean;
        set AllowSelect(value: boolean);
        /**
         * @hidden
         */
        protected getAllowSelect(): boolean;
        /**
         * @hidden
         */
        protected setAllowSelect(value: boolean): void;
        get ArrowMoveLarge(): float;
        set ArrowMoveLarge(value: float);
        /**
         * @hidden
         */
        protected getArrowMoveLarge(): float;
        /**
         * @hidden
         */
        protected setArrowMoveLarge(value: float): void;
        get ArrowMoveSmall(): float;
        set ArrowMoveSmall(value: float);
        /**
         * @hidden
         */
        protected getArrowMoveSmall(): float;
        /**
         * @hidden
         */
        protected setArrowMoveSmall(value: float): void;
        get AutoPanRegion(): CGSize;
        set AutoPanRegion(value: CGSize);
        /**
         * @hidden
         */
        protected getAutoPanRegion(): CGSize;
        /**
         * @hidden
         */
        protected setAutoPanRegion(value: CGSize): void;
        get AutoScrollDelay(): number;
        set AutoScrollDelay(value: number);
        /**
         * @hidden
         */
        protected getAutoScrollDelay(): number;
        /**
         * @hidden
         */
        protected setAutoScrollDelay(value: number): void;
        get AutoScrollRegion(): CGSize;
        set AutoScrollRegion(value: CGSize);
        /**
         * @hidden
         */
        protected getAutoScrollRegion(): CGSize;
        /**
         * @hidden
         */
        protected setAutoScrollRegion(value: CGSize): void;
        get AutoScrollTime(): number;
        set AutoScrollTime(value: number);
        /**
         * @hidden
         */
        protected getAutoScrollTime(): number;
        /**
         * @hidden
         */
        protected setAutoScrollTime(value: number): void;
        get BackgroundGrid(): TuGrid;
        set BackgroundGrid(value: TuGrid);
        /**
         * @hidden
         */
        protected getBackgroundGrid(): TuGrid;
        /**
         * @hidden
         */
        protected setBackgroundGrid(value: TuGrid): void;
        get BackgroundHasSheet(): boolean;
        set BackgroundHasSheet(value: boolean);
        /**
         * @hidden
         */
        protected getBackgroundHasSheet(): boolean;
        /**
         * @hidden
         */
        protected setBackgroundHasSheet(value: boolean): void;
        get BackgroundLayer(): TuLayer;
        set BackgroundLayer(value: TuLayer);
        /**
         * @hidden
         */
        protected getBackgroundLayer(): TuLayer;
        /**
         * @hidden
         */
        protected setBackgroundLayer(value: TuLayer): void;
        get Border3DStyle(): Border3DStyle;
        set Border3DStyle(value: Border3DStyle);
        /**
            * @hidden
            */
        protected getBorder3DStyle(): Border3DStyle;
        /**
            * @hidden
            * @param style
            */
        protected setBorder3DStyle(value: Border3DStyle): void;
        get BorderStyle(): BorderStyle;
        set BorderStyle(value: BorderStyle);
        /**
            * @hidden
            */
        protected getBorderStyle(): BorderStyle;
        /**
            * @hidden
            * @param style
            */
        protected setBorderStyle(value: BorderStyle): void;
        get BottomBar(): Control;
        set BottomBar(value: Control);
        /**
            * @hidden
            */
        protected getBottomBar(): Control;
        /**
            * @hidden
            * @param style
            */
        protected setBottomBar(value: Control): void;
        get BottomLeftCorner(): Control;
        set BottomLeftCorner(value: Control);
        /**
            * @hidden
            */
        protected getBottomLeftCorner(): Control;
        /**
            * @hidden
            * @param style
            */
        protected setBottomLeftCorner(value: Control): void;
        get BottomRightCorner(): Control;
        set BottomRightCorner(value: Control);
        /**
            * @hidden
            */
        protected getBottomRightCorner(): Control;
        /**
            * @hidden
            * @param style
            */
        protected setBottomRightCorner(value: Control): void;
        get BoundingHandlePenWidth(): float;
        set BoundingHandlePenWidth(value: float);
        /**
            * @hidden
            */
        protected getBoundingHandlePenWidth(): float;
        /**
            * @hidden
            * @param style
            */
        protected setBoundingHandlePenWidth(value: float): void;
        get CompositingQuality(): CompositingQuality;
        set CompositingQuality(value: CompositingQuality);
        /**
            * @hidden
            */
        protected getCompositingQuality(): CompositingQuality;
        /**
            * @hidden
            * @param style
            */
        protected setCompositingQuality(value: CompositingQuality): void;
        get ContextClickSingleSelection(): boolean;
        set ContextClickSingleSelection(value: boolean);
        /**
            * @hidden
            */
        protected getContextClickSingleSelection(): boolean;
        /**
            * @hidden
            * @param style
            */
        protected setContextClickSingleSelection(value: boolean): void;
        get CursorName(): string;
        set CursorName(value: string);
        /**
            * @hidden
            */
        getCursorName(): string;
        /**
            * @hidden
            * @param style
            */
        protected setCursorName(value: string): void;
        /**
     * @hidden
     */
        protected getDefaultCursor(): Cursor;
        /**
            * @hidden
            * @param style
            */
        protected setDefaultCursor(value: Cursor): void;
        get DefaultTool(): ITuTool;
        set DefaultTool(value: ITuTool);
        /**
            * @hidden
            */
        protected getDefaultTool(): ITuTool;
        /**
            * @hidden
            * @param style
            */
        protected setDefaultTool(value: ITuTool): void;
        get DisableKeys(): TuViewDisableKeys;
        set DisableKeys(value: TuViewDisableKeys);
        /**
            * @hidden
            */
        protected getDisableKeys(): TuViewDisableKeys;
        /**
            * @hidden
            * @param style
            */
        protected setDisableKeys(value: TuViewDisableKeys): void;
        /**
            * @hidden
            */
        protected getDisplayRectangle(): CGRectangle;
        get DocExtent(): CGRectangle;
        /**
            * @hidden
            */
        protected getDocExtent(): CGRectangle;
        get DocExtentCenter(): CGPoint;
        set DocExtentCenter(value: CGPoint);
        /**
            * @hidden
            */
        protected getDocExtentCenter(): CGPoint;
        /**
            * @hidden
            * @param style
            */
        protected setDocExtentCenter(value: CGPoint): void;
        get DocExtentSize(): CGSize;
        /**
            * @hidden
            */
        protected getDocExtentSize(): CGSize;
        get DocPosition(): CGPoint;
        set DocPosition(value: CGPoint);
        /**
            * @hidden
            */
        protected getDocPosition(): CGPoint;
        /**
            * @hidden
            * @param style
            */
        protected setDocPosition(value: CGPoint): void;
        get DocScale(): float;
        set DocScale(value: float);
        /**
            * @hidden
            */
        protected getDocScale(): float;
        /**
            * @hidden
            * @param style
            */
        protected setDocScale(value: float): void;
        get Document(): TuDocument;
        set Document(value: TuDocument);
        /**
            * @hidden
            */
        protected getDocument(): TuDocument;
        /**
            * @hidden
            * @param style
            */
        protected setDocument(value: TuDocument): void;
        get DocumentSize(): CGSize;
        /**
            * @hidden
            */
        protected getDocumentSize(): CGSize;
        get DocumentTopLeft(): CGPoint;
        /**
            * @hidden
            */
        protected getDocumentTopLeft(): CGPoint;
        get DragRoutesRealtime(): boolean;
        set DragRoutesRealtime(value: boolean);
        /**
            * @hidden
            */
        protected getDragRoutesRealtime(): boolean;
        /**
            * @hidden
            * @param style
            */
        protected setDragRoutesRealtime(value: boolean): void;
        get DragsRealtime(): boolean;
        set DragsRealtime(value: boolean);
        /**
            * @hidden
            */
        protected getDragsRealtime(): boolean;
        /**
            * @hidden
            * @param style
            */
        protected setDragsRealtime(value: boolean): void;
        get DrawsXorMode(): boolean;
        set DrawsXorMode(value: boolean);
        /**
            * @hidden
            */
        protected getDrawsXorMode(): boolean;
        /**
            * @hidden
            * @param style
            */
        protected setDrawsXorMode(value: boolean): void;
        get EditControl(): TuControl;
        set EditControl(value: TuControl);
        /**
            * @hidden
            */
        protected getEditControl(): TuControl;
        /**
            * @hidden
            * @param style
            */
        protected setEditControl(value: TuControl): void;
        get ExternalDragDropsOnEnter(): boolean;
        set ExternalDragDropsOnEnter(value: boolean);
        /**
            * @hidden
            */
        protected getExternalDragDropsOnEnter(): boolean;
        /**
            * @hidden
            * @param style
            */
        protected setExternalDragDropsOnEnter(value: boolean): void;
        get FirstInput(): TuInputEventArgs;
        /**
            * @hidden
            */
        protected getFirstInput(): TuInputEventArgs;
        get Grid(): TuGrid;
        set Grid(value: TuGrid);
        /**
            * @hidden
            */
        protected getGrid(): TuGrid;
        /**
            * @hidden
            * @param style
            */
        protected setGrid(value: TuGrid): void;
        get GridCellSize(): CGSize;
        set GridCellSize(value: CGSize);
        /**
            * @hidden
            */
        protected getGridCellSize(): CGSize;
        /**
            * @hidden
            * @param style
            */
        protected setGridCellSize(value: CGSize): void;
        get GridCellSizeHeight(): float;
        set GridCellSizeHeight(value: float);
        /**
            * @hidden
            */
        protected getGridCellSizeHeight(): float;
        /**
            * @hidden
            * @param style
            */
        protected setGridCellSizeHeight(value: float): void;
        get GridCellSizeWidth(): float;
        set GridCellSizeWidth(value: float);
        /**
            * @hidden
            */
        protected getGridCellSizeWidth(): float;
        /**
            * @hidden
            * @param style
            */
        protected setGridCellSizeWidth(value: float): void;
        get GridLineColor(): CGColor;
        set GridLineColor(value: CGColor);
        /**
            * @hidden
            */
        protected getGridLineColor(): CGColor;
        /**
            * @hidden
            * @param style
            */
        protected setGridLineColor(value: CGColor): void;
        get GridLineDashPattern(): float[];
        set GridLineDashPattern(value: float[]);
        /**
            * @hidden
            */
        protected getGridLineDashPattern(): float[];
        /**
            * @hidden
            * @param style
            */
        protected setGridLineDashPattern(value: float[]): void;
        get GridLineDashStyle(): DashStyle;
        set GridLineDashStyle(value: DashStyle);
        /**
            * @hidden
            */
        protected getGridLineDashStyle(): DashStyle;
        /**
            * @hidden
            * @param style
            */
        protected setGridLineDashStyle(value: DashStyle): void;
        get GridLineWidth(): float;
        set GridLineWidth(value: float);
        /**
            * @hidden
            */
        protected getGridLineWidth(): float;
        /**
            * @hidden
            * @param style
            */
        protected setGridLineWidth(value: float): void;
        get GridMajorLineColor(): CGColor;
        set GridMajorLineColor(value: CGColor);
        /**
            * @hidden
            */
        protected getGridMajorLineColor(): CGColor;
        /**
            * @hidden
            * @param style
            */
        protected setGridMajorLineColor(value: CGColor): void;
        get GridMajorLineDashPattern(): float[];
        set GridMajorLineDashPattern(value: float[]);
        /**
            * @hidden
            */
        protected getGridMajorLineDashPattern(): float[];
        /**
            * @hidden
            * @param style
            */
        protected setGridMajorLineDashPattern(value: float[]): void;
        get GridMajorLineDashStyle(): DashStyle;
        set GridMajorLineDashStyle(value: DashStyle);
        /**
            * @hidden
            */
        protected getGridMajorLineDashStyle(): DashStyle;
        /**
            * @hidden
            * @param style
            */
        protected setGridMajorLineDashStyle(value: DashStyle): void;
        get GridMajorLineFrequency(): CGSize;
        set GridMajorLineFrequency(value: CGSize);
        /**
            * @hidden
            */
        protected getGridMajorLineFrequency(): CGSize;
        /**
            * @hidden
            * @param style
            */
        protected setGridMajorLineFrequency(value: CGSize): void;
        get GridMajorLineWidth(): float;
        set GridMajorLineWidth(value: float);
        /**
            * @hidden
            */
        protected getGridMajorLineWidth(): float;
        /**
            * @hidden
            * @param style
            */
        protected setGridMajorLineWidth(value: float): void;
        get GridOrigin(): CGPoint;
        set GridOrigin(value: CGPoint);
        /**
            * @hidden
            */
        protected getGridOrigin(): CGPoint;
        /**
            * @hidden
            * @param style
            */
        protected setGridOrigin(value: CGPoint): void;
        get GridOriginRelative(): boolean;
        set GridOriginRelative(value: boolean);
        /**
            * @hidden
            */
        protected getGridOriginRelative(): boolean;
        /**
            * @hidden
            * @param style
            */
        protected setGridOriginRelative(value: boolean): void;
        get GridOriginX(): float;
        set GridOriginX(value: float);
        /**
            * @hidden
            */
        protected getGridOriginX(): float;
        /**
            * @hidden
            * @param style
            */
        protected setGridOriginX(value: float): void;
        get GridOriginY(): float;
        set GridOriginY(value: float);
        /**
            * @hidden
            */
        protected getGridOriginY(): float;
        /**
            * @hidden
            * @param style
            */
        protected setGridOriginY(value: float): void;
        get GridSnapCellSpot(): Spot;
        set GridSnapCellSpot(value: Spot);
        /**
            * @hidden
            */
        protected getGridSnapCellSpot(): Spot;
        /**
            * @hidden
            * @param style
            */
        protected setGridSnapCellSpot(value: Spot): void;
        get GridSnapDrag(): TuViewSnapStyle;
        set GridSnapDrag(value: TuViewSnapStyle);
        /**
            * @hidden
            */
        protected getGridSnapDrag(): TuViewSnapStyle;
        /**
            * @hidden
            * @param style
            */
        protected setGridSnapDrag(value: TuViewSnapStyle): void;
        get GridSnapOpaque(): boolean;
        set GridSnapOpaque(value: boolean);
        /**
            * @hidden
            */
        protected getGridSnapOpaque(): boolean;
        /**
            * @hidden
            * @param style
            */
        protected setGridSnapOpaque(value: boolean): void;
        get GridSnapResize(): TuViewSnapStyle;
        set GridSnapResize(value: TuViewSnapStyle);
        /**
            * @hidden
            */
        protected getGridSnapResize(): TuViewSnapStyle;
        /**
            * @hidden
            * @param style
            */
        protected setGridSnapResize(value: TuViewSnapStyle): void;
        get GridStyle(): TuViewGridStyle;
        set GridStyle(value: TuViewGridStyle);
        /**
            * @hidden
            */
        protected getGridStyle(): TuViewGridStyle;
        /**
            * @hidden
            * @param style
            */
        protected setGridStyle(value: TuViewGridStyle): void;
        get GridUnboundedSpots(): Spot;
        set GridUnboundedSpots(value: Spot);
        /**
            * @hidden
            */
        protected getGridUnboundedSpots(): Spot;
        /**
            * @hidden
            * @param style
            */
        protected setGridUnboundedSpots(value: Spot): void;
        get HidesSelection(): boolean;
        set HidesSelection(value: boolean);
        /**
            * @hidden
            */
        protected getHidesSelection(): boolean;
        /**
            * @hidden
            * @param style
            */
        protected setHidesSelection(value: boolean): void;
        get HorizontalScrollBar(): Slider;
        set HorizontalScrollBar(value: Slider);
        /**
            * @hidden
            */
        protected getHorizontalScrollBar(): Slider;
        /**
            * @hidden
            * @param style
            */
        protected setHorizontalScrollBar(value: Slider): void;
        get HoverDelay(): number;
        set HoverDelay(value: number);
        /**
            * @hidden
            */
        protected getHoverDelay(): number;
        /**
            * @hidden
            * @param style
            */
        protected setHoverDelay(value: number): void;
        get ImageList(): ImageList;
        set ImageList(value: ImageList);
        /**
            * @hidden
            */
        protected getImageList(): ImageList;
        /**
            * @hidden
            * @param style
            */
        protected setImageList(value: ImageList): void;
        get InterpolationMode(): InterpolationMode;
        set InterpolationMode(value: InterpolationMode);
        /**
            * @hidden
            */
        protected getInterpolationMode(): InterpolationMode;
        /**
            * @hidden
            * @param style
            */
        protected setInterpolationMode(value: InterpolationMode): void;
        get IsEditing(): boolean;
        /**
            * @hidden
            */
        protected getIsEditing(): boolean;
        get IsPrinting(): boolean;
        /**
            * @hidden
            */
        protected getIsPrinting(): boolean;
        get IsRenderingBitmap(): boolean;
        /**
            * @hidden
            */
        protected getIsRenderingBitmap(): boolean;
        get LastInput(): TuInputEventArgs;
        /**
            * @hidden
            */
        protected getLastInput(): TuInputEventArgs;
        get Layers(): TuLayerCollection;
        /**
            * @hidden
            */
        protected getLayers(): TuLayerCollection;
        get LeftBar(): Control;
        set LeftBar(value: Control);
        /**
            * @hidden
            */
        protected getLeftBar(): Control;
        /**
            * @hidden
            * @param style
            */
        protected setLeftBar(value: Control): void;
        get MaximumSelectionCount(): number;
        set MaximumSelectionCount(value: number);
        /**
            * @hidden
            */
        protected getMaximumSelectionCount(): number;
        /**
            * @hidden
            * @param style
            */
        protected setMaximumSelectionCount(value: number): void;
        get MouseDownTools(): List<ITuTool>;
        /**
            * @hidden
            */
        protected getMouseDownTools(): List<ITuTool>;
        get MouseMoveTools(): List<ITuTool>;
        /**
            * @hidden
            */
        protected getMouseMoveTools(): List<ITuTool>;
        get MouseUpTools(): List<ITuTool>;
        /**
            * @hidden
            */
        protected getMouseUpTools(): List<ITuTool>;
        get NewGoLabeledLink(): TuLabeledLink;
        set NewGoLabeledLink(value: TuLabeledLink);
        /**
            * @hidden
            */
        protected getNewGoLabeledLink(): TuLabeledLink;
        /**
            * @hidden
            * @param style
            */
        protected setNewGoLabeledLink(value: TuLabeledLink): void;
        get NewGoLink(): TuLink;
        set NewGoLink(value: TuLink);
        /**
            * @hidden
            */
        protected getNewGoLink(): TuLink;
        /**
            * @hidden
            * @param style
            */
        protected setNewGoLink(value: TuLink): void;
        get NewLinkClass(): Type;
        set NewLinkClass(value: Type);
        /**
            * @hidden
            */
        protected getNewLinkClass(): Type;
        /**
            * @hidden
            * @param style
            */
        protected setNewLinkClass(value: Type): void;
        get NewLinkPrototype(): TuObject;
        set NewLinkPrototype(value: TuObject);
        /**
            * @hidden
            */
        protected getNewLinkPrototype(): TuObject;
        /**
            * @hidden
            * @param style
            */
        protected setNewLinkPrototype(value: TuObject): void;
        get NoFocusSelectionColor(): CGColor;
        set NoFocusSelectionColor(value: CGColor);
        /**
            * @hidden
            */
        protected getNoFocusSelectionColor(): CGColor;
        /**
            * @hidden
            * @param style
            */
        protected setNoFocusSelectionColor(value: CGColor): void;
        get PaintGreekScale(): float;
        set PaintGreekScale(value: float);
        /**
            * @hidden
            */
        protected getPaintGreekScale(): float;
        /**
            * @hidden
            * @param style
            */
        protected setPaintGreekScale(value: float): void;
        get PaintNothingScale(): float;
        set PaintNothingScale(value: float);
        /**
            * @hidden
            */
        protected getPaintNothingScale(): float;
        /**
            * @hidden
            * @param style
            */
        protected setPaintNothingScale(value: float): void;
        get PixelOffsetMode(): float;
        set PixelOffsetMode(value: float);
        /**
            * @hidden
            */
        protected getPixelOffsetMode(): float;
        /**
            * @hidden
            * @param style
            */
        protected setPixelOffsetMode(value: float): void;
        get PortGravity(): float;
        set PortGravity(value: float);
        /**
            * @hidden
            */
        protected getPortGravity(): float;
        /**
            * @hidden
            * @param style
            */
        protected setPortGravity(value: float): void;
        get PretendsInternalDrag(): boolean;
        set PretendsInternalDrag(value: boolean);
        get PrimarySelectionColor(): CGColor;
        set PrimarySelectionColor(value: CGColor);
        /**
            * @hidden
            */
        protected getPrimarySelectionColor(): CGColor;
        /**
            * @hidden
            * @param style
            */
        protected setPrimarySelectionColor(value: CGColor): void;
        get PrintDocumentSize(): CGSize;
        /**
            * @hidden
            */
        protected getPrintDocumentSize(): CGSize;
        get PrintDocumentTopLeft(): CGPoint;
        /**
            * @hidden
            */
        protected getPrintDocumentTopLeft(): CGPoint;
        get PrintScale(): float;
        set PrintScale(value: float);
        /**
            * @hidden
            */
        protected getPrintScale(): float;
        /**
            * @hidden
            * @param style
            */
        protected setPrintScale(value: float): void;
        get PrintsViewObjects(): boolean;
        set PrintsViewObjects(value: boolean);
        /**
            * @hidden
            */
        protected getPrintsViewObjects(): boolean;
        /**
            * @hidden
            * @param style
            */
        protected setPrintsViewObjects(value: boolean): void;
        get ResizeHandleHeight(): float;
        set ResizeHandleHeight(value: float);
        /**
            * @hidden
            */
        protected getResizeHandleHeight(): float;
        /**
            * @hidden
            * @param style
            */
        protected setResizeHandleHeight(value: float): void;
        get ResizeHandlePenWidth(): float;
        set ResizeHandlePenWidth(value: float);
        /**
            * @hidden
            */
        protected getResizeHandlePenWidth(): float;
        /**
            * @hidden
            * @param style
            */
        protected setResizeHandlePenWidth(value: float): void;
        get ResizeHandleSize(): CGSize;
        set ResizeHandleSize(value: CGSize);
        /**
            * @hidden
            */
        protected getResizeHandleSize(): CGSize;
        /**
            * @hidden
            * @param style
            */
        protected setResizeHandleSize(value: CGSize): void;
        get ResizeHandleWidth(): float;
        set ResizeHandleWidth(value: float);
        /**
            * @hidden
            */
        protected getResizeHandleWidth(): float;
        /**
            * @hidden
            * @param style
            */
        protected setResizeHandleWidth(value: float): void;
        get RightBar(): Control;
        set RightBar(value: Control);
        /**
            * @hidden
            */
        protected getRightBar(): Control;
        /**
            * @hidden
            * @param style
            */
        protected setRightBar(value: Control): void;
        get ScrollSmallChange(): CGSize;
        set ScrollSmallChange(value: CGSize);
        /**
            * @hidden
            */
        protected getScrollSmallChange(): CGSize;
        /**
            * @hidden
            * @param style
            */
        protected setScrollSmallChange(value: CGSize): void;
        get SecondarySelectionColor(): CGColor;
        set SecondarySelectionColor(value: CGColor);
        /**
            * @hidden
            */
        protected getSecondarySelectionColor(): CGColor;
        /**
            * @hidden
            * @param style
            */
        protected setSecondarySelectionColor(value: CGColor): void;
        get SelectInRectangleStyle(): TuPickInRectangleStyle;
        set SelectInRectangleStyle(value: TuPickInRectangleStyle);
        /**
            * @hidden
            */
        protected getSelectInRectangleStyle(): TuPickInRectangleStyle;
        /**
            * @hidden
            * @param style
            */
        protected setSelectInRectangleStyle(value: TuPickInRectangleStyle): void;
        protected selectInRectangleStyle(value?: TuPickInRectangleStyle): TuPickInRectangleStyle;
        get Selection(): TuSelection;
        /**
            * @hidden
            */
        protected getSelection(): TuSelection;
        get ShadowColor(): CGColor;
        set ShadowColor(value: CGColor);
        /**
            * @hidden
            */
        protected getShadowColor(): CGColor;
        /**
            * @hidden
            * @param style
            */
        protected setShadowColor(value: CGColor): void;
        get ShadowHeight(): float;
        set ShadowHeight(value: float);
        /**
            * @hidden
            */
        protected getShadowHeight(): float;
        /**
            * @hidden
            * @param style
            */
        protected setShadowHeight(value: float): void;
        get ShadowOffset(): CGSize;
        set ShadowOffset(value: CGSize);
        /**
            * @hidden
            */
        getShadowOffset(): CGSize;
        /**
            * @hidden
            * @param style
            */
        protected setShadowOffset(value: CGSize): void;
        get ShadowWidth(): float;
        set ShadowWidth(value: float);
        /**
            * @hidden
            */
        protected getShadowWidth(): float;
        /**
            * @hidden
            * @param style
            */
        protected setShadowWidth(value: float): void;
        get Sheet(): TuSheet;
        set Sheet(value: TuSheet);
        /**
            * @hidden
            */
        protected getSheet(): TuSheet;
        /**
            * @hidden
            * @param style
            */
        protected setSheet(value: TuSheet): void;
        get SheetBackgroundImageSpot(): Spot;
        set SheetBackgroundImageSpot(value: Spot);
        /**
            * @hidden
            */
        protected getSheetBackgroundImageSpot(): Spot;
        /**
            * @hidden
            * @param style
            */
        protected setSheetBackgroundImageSpot(value: Spot): void;
        get SheetBottomRightMargin(): CGSize;
        set SheetBottomRightMargin(value: CGSize);
        /**
            * @hidden
            */
        protected getSheetBottomRightMargin(): CGSize;
        /**
            * @hidden
            * @param style
            */
        protected setSheetBottomRightMargin(value: CGSize): void;
        get SheetMarginBounds(): CGRectangle;
        /**
            * @hidden
            */
        protected getSheetMarginBounds(): CGRectangle;
        get SheetMarginColor(): CGColor;
        set SheetMarginColor(value: CGColor);
        /**
            * @hidden
            */
        protected getSheetMarginColor(): CGColor;
        /**
            * @hidden
            * @param style
            */
        protected setSheetMarginColor(value: CGColor): void;
        get SheetPaperBounds(): CGRectangle;
        set SheetPaperBounds(value: CGRectangle);
        /**
            * @hidden
            */
        protected getSheetPaperBounds(): CGRectangle;
        /**
            * @hidden
            * @param style
            */
        protected setSheetPaperBounds(value: CGRectangle): void;
        get SheetRoom(): CGSize;
        set SheetRoom(value: CGSize);
        /**
            * @hidden
            */
        protected getSheetRoom(): CGSize;
        /**
            * @hidden
            * @param style
            */
        protected setSheetRoom(value: CGSize): void;
        get SheetShowsMargins(): boolean;
        set SheetShowsMargins(value: boolean);
        /**
            * @hidden
            */
        protected getSheetShowsMargins(): boolean;
        /**
            * @hidden
            * @param style
            */
        protected setSheetShowsMargins(value: boolean): void;
        get SheetStyle(): TuViewSheetStyle;
        set SheetStyle(value: TuViewSheetStyle);
        /**
            * @hidden
            */
        protected getSheetStyle(): TuViewSheetStyle;
        /**
            * @hidden
            * @param style
            */
        protected setSheetStyle(value: TuViewSheetStyle): void;
        get SheetTopLeftMargin(): CGSize;
        set SheetTopLeftMargin(value: CGSize);
        /**
            * @hidden
            */
        protected getSheetTopLeftMargin(): CGSize;
        /**
            * @hidden
            * @param style
            */
        protected setSheetTopLeftMargin(value: CGSize): void;
        get ShowHorizontalScrollBar(): TuViewScrollBarVisibility;
        set ShowHorizontalScrollBar(value: TuViewScrollBarVisibility);
        /**
            * @hidden
            */
        protected getShowHorizontalScrollBar(): TuViewScrollBarVisibility;
        /**
            * @hidden
            * @param style
            */
        protected setShowHorizontalScrollBar(value: TuViewScrollBarVisibility): void;
        get ShowsNegativeCoordinates(): boolean;
        set ShowsNegativeCoordinates(value: boolean);
        /**
            * @hidden
            */
        protected getShowsNegativeCoordinates(): boolean;
        /**
            * @hidden
            * @param style
            */
        protected setShowsNegativeCoordinates(value: boolean): void;
        get ShowVerticalScrollBar(): TuViewScrollBarVisibility;
        set ShowVerticalScrollBar(value: TuViewScrollBarVisibility);
        /**
            * @hidden
            */
        protected getShowVerticalScrollBar(): TuViewScrollBarVisibility;
        /**
            * @hidden
            * @param style
            */
        protected setShowVerticalScrollBar(value: TuViewScrollBarVisibility): void;
        get SmoothingMode(): SmoothingMode;
        set SmoothingMode(value: SmoothingMode);
        /**
            * @hidden
            */
        protected getSmoothingMode(): SmoothingMode;
        /**
            * @hidden
            * @param style
            */
        protected setSmoothingMode(value: SmoothingMode): void;
        get TextRenderingHint(): TextRenderingHint;
        set TextRenderingHint(value: TextRenderingHint);
        /**
            * @hidden
            */
        protected getTextRenderingHint(): TextRenderingHint;
        /**
            * @hidden
            * @param style
            */
        protected setTextRenderingHint(value: TextRenderingHint): void;
        protected textRenderingHint(value?: TextRenderingHint): TextRenderingHint;
        get Tool(): ITuTool;
        set Tool(value: ITuTool);
        /**
            * @hidden
            */
        protected getTool(): ITuTool;
        /**
            * @hidden
            * @param style
            */
        protected setTool(value: ITuTool): void;
        get ToolTip(): ToolTip;
        set ToolTip(value: ToolTip);
        /**
            * @hidden
            */
        protected _getToolTip(): ToolTip;
        /**
            * @hidden
            * @param style
            */
        protected _setToolTip(value: ToolTip): void;
        get ToolTipText(): string;
        set ToolTipText(value: string);
        /**
            * @hidden
            */
        protected _getToolTipText(): string;
        /**
            * @hidden
            * @param style
            */
        protected _setToolTipText(value: string): void;
        get TopBar(): Control;
        set TopBar(value: Control);
        /**
            * @hidden
            */
        protected getTopBar(): Control;
        /**
            * @hidden
            * @param style
            */
        protected setTopBar(value: Control): void;
        get TopLeftCorner(): Control;
        set TopLeftCorner(value: Control);
        /**
            * @hidden
            */
        protected getTopLeftCorner(): Control;
        /**
            * @hidden
            * @param style
            */
        protected setTopLeftCorner(value: Control): void;
        get TopRightCorner(): Control;
        set TopRightCorner(value: Control);
        /**
            * @hidden
            */
        protected getTopRightCorner(): Control;
        /**
            * @hidden
            * @param style
            */
        protected setTopRightCorner(value: Control): void;
        static get Version(): float;
        static get VersionName(): string;
        get VerticalScrollBar(): Slider;
        set VerticalScrollBar(value: Slider);
        /**
            * @hidden
            */
        protected getVerticalScrollBar(): Slider;
        /**
            * @hidden
            * @param style
            */
        protected setVerticalScrollBar(value: Slider): void;
        get WorldScale(): CGSize;
        protected SetupControlDefaults(): void;
        AbortTransaction(): boolean;
        addTuControl(g: TuControl, c: Control): void;
        allocTempPointArray(len: number): CGPoint[];
        beginUpdate(): void;
        CanCopyObjects(): boolean;
        CanDeleteObjects(): boolean;
        canEditCopy(): boolean;
        canEditCut(): boolean;
        canEditDelete(): boolean;
        canEditEdit(): boolean;
        CanEditObjects(): boolean;
        canEditPaste(): boolean;
        CanInsertObjects(): boolean;
        CanLinkObjects(): boolean;
        CanMoveObjects(): boolean;
        canRedo(): boolean;
        CanReshapeObjects(): boolean;
        CanResizeObjects(): boolean;
        canScroll(down: boolean, vertical: boolean): boolean;
        CanSelectObjects(): boolean;
        canUndo(): boolean;
        computeAutoPanDocPosition(originPnt: CGPoint, viewPnt: CGPoint): CGPoint;
        computeAutoScrollDocPosition(viewPnt: CGPoint): CGPoint;
        computeDocumentBounds(): CGRectangle;
        convertDocToView(p: CGSize): CGSize;
        convertDocToView(p: CGPoint): CGPoint;
        convertDocToView(p: CGRectangle): CGRectangle;
        convertViewToDoc(p: CGSize): CGSize;
        convertViewToDoc(p: CGPoint): CGPoint;
        convertViewToDoc(p: CGRectangle): CGRectangle;
        copySelection(sel: TuSelection, offset: CGSize, grid: boolean): void;
        copyToClipboard(coll: TuCollection): void;
        protected createDataObject(coll: ITuCollection, clipdoc: TuDocument): DataObject;
        createDefaultTool(): ITuTool;
        createDocument(): TuDocument;
        createGrid(): TuGrid;
        createLink(fromPort: ITuPort, toPort: ITuPort): ITuLink;
        createSelection(): TuSelection;
        createSheet(): TuSheet;
        deleteSelection(sel: TuSelection): void;
        detectHover(viewPnt: CGPoint): void;
        dispose(disposing?: boolean): void;
        doAutoAction(): void;
        doAutoPan(originPnt: CGPoint, viewPnt: CGPoint): void;
        doAutoScroll(viewPnt: CGPoint): void;
        doBackgroundMouseOver(evt: TuInputEventArgs): void;
        doCancelMouse(): void;
        doContextClick(evt: TuInputEventArgs): boolean;
        doDoubleClick(evt: TuInputEventArgs): boolean;
        doEndEdit(): void;
        protected doExternalDrag(evt: DragEventArgs): void;
        protected DoExternalDrop(evt: DragEventArgs): ITuCollection;
        doHover(evt: TuInputEventArgs): boolean;
        protected doInternalDrag(evt: DragEventArgs): void;
        protected doInternalDrop(evt: DragEventArgs): void;
        doKeyDown(): void;
        doMouseDown(): void;
        doMouseHover(): void;
        doMouseMove(): void;
        doMouseOver(evt: TuInputEventArgs): boolean;
        doMouseUp(): void;
        doMouseWheel(): void;
        doObjectEnterLeave(from: TuObject, to: TuObject, evt: TuInputEventArgs): void;
        doSelectionDropped(evt: TuInputEventArgs): boolean;
        doSelectionDropReject(evt: TuInputEventArgs): boolean;
        doSingleClick(evt: TuInputEventArgs): boolean;
        doToolTipObject(obj: TuObject): void;
        /**
            * Perform the standard mouse wheel behavior for views.
            * @param evt
            * @description
            * <p>When the Control key is held down, rotating the mouse wheel changes the
            * [[TuView.DocScale]] to "zoom" the view in or out at the current mouse point.
            * Otherwise rotating the mouse wheel scrolls the view by calling @see [[TuView.ScrollLine]].
            * If the Shift key is held down, the scrolling is horizontal instead of vertical.</p>
            * <p>This is normally called from the @see [[TuToolManager]]. @see [[ToolManager.DoMouseWheel]]
            * method, to handle mouse wheel turns in the standard manner.</p>
            */
        doWheel(evt: TuInputEventArgs): void;
        /**
            * This convenience method erases any previous XOR-drawn rectangle and then
            * may draw a new one with the given dimensions.
            * @param rect
            * @param drawnew
            * @description
            * <p> This always erases any earlier rectangle drawn by this method.
            * It only draws a new rectangle if [[drawnew]] is true.</p>
            * <p>If [[TuView.DrawsXorMode]] is false, this draws a rectangle using a
            * checkerboard pen, instead of drawing in XOR mode.</p>
            */
        drawXorBox(rect: CGRectangle, drawnew: boolean): void;
        pointToScreen(p: CGPoint): CGPoint;
        rectangleToScreen(r: CGRectangle): CGRectangle;
        /**
            * Draw a line on the screen in XOR mode.
            * @param ax
            * @param ay
            * @param bx
            * @param by
            * @description
            * The parameters are all in view coordinates.
            * You should call this method twice for each set of argument values--
            * once to draw the line and once to restore the original screen image.
            */
        drawXorLine(ax: number, ay: number, bx: number, by: number): void;
        /**
            * Draw a rectangle on the screen in XOR mode.
            * @param rect
            * @description
            * The parameter is in view coordinates.
            * You should call this method twice for each set of rectangular coordinates--
            * once to draw the rectangle and once to restore the original screen image.
            */
        drawXorRectangle(rect: CGRectangle): void;
        /**
            * Copy the [[TuView.Selection]] to the clipboard.
            * @description
            * <p>This method does nothing if @see [[TuView.CanCopyObjects]] is false.
            * After calling [[TuView.CopyToClipboard]], this calls [[TuView.raiseClipboardCopied]].
            * All the actions occur within a transaction.</p>
            * <p>All of the objects in the selection will be copied by serializing them.
            * If any of the objects, or any of the objects that they refer to, are not
            * serializable, there will be a serialization exception, and the clipboard
            * might not a copy of the selection.
            * @see [[TuView.CopyToClipboard]] will log any exceptions to any trace listeners.
            * The User Guide discusses serialization and deserialization in more detail.</p>
            * @see [[TuView.CanEditCopy]]
            * @see [[TuView.DisableKeys]]
            */
        editCopy(): void;
        /**
            * Copy the current @see [[TuView.Selection]] to the clipboard and then delete it.
            * @description
            * This method does nothing if @see [[TuView.canCopyObjects]] or  @see [[TuView.canDeleteObjects]] is false.
            * After calling @see [[TuView.copyToClipboard]] and @see [[Tuiew.deleteSelection]] , this calls @see [[TuView.raiseClipboardCopied]]".
            * All the actions occur within a transaction.
            * @see [[TuView.CanEditCut]]
            * @see [[TuView.DisableKeys]]
            */
        editCut(): void;
        editDelete(): void;
        editEdit(): void;
        editObject(obj: TuObject): void;
        editPaste(): void;
        endUpdate(): void;
        findMouseTool(tooltype: Type, subclass?: boolean): ITuTool;
        findNearestGridPoint(p: CGPoint): CGPoint;
        finishTransaction(tname: string): boolean;
        freeTempPointArray(a: CGPoint[]): void;
        getBitmap(): Bitmap;
        getBitmapFromCollection(coll: ITuCollection, bounds: CGRectangle, scale: float, paper: boolean): Bitmap;
        getBitmapFromCollection(coll: ITuCollection, bounds: CGRectangle, paper: boolean): Bitmap;
        getBitmapFromCollection(coll: ITuCollection): Bitmap;
        protected getExternalDragImage(evt: DragEventArgs): TuObject;
        getShadowBrush(obj: TuObject): Brush;
        getShadowPen(obj: TuObject, width: float): Pen;
        handleScroll(sender: any, e: ScrollEventArgs): void;
        initAllowDrop(dnd: boolean): boolean;
        initializeLayersFromDocument(): void;
        protected isInputKey(k: Keys): boolean;
        isInternalDragDrop(evt: DragEventArgs): boolean;
        layoutScrollBars(update: boolean): void;
        limitDocPosition(p: CGPoint): CGPoint;
        limitDocScale(s: float): float;
        matchesNodeLabel(part: ITuLabeledPart, c: string): boolean;
        moveSelection(sel: TuSelection, offset: CGSize, grid: boolean): void;
        protected onBackColorChanged(evt: EventArgs): void;
        protected onBackgroundContextClicked(evt: TuInputEventArgs): void;
        protected onBackgroundDoubleClicked(evt: TuInputEventArgs): void;
        protected onBackgroundHover(evt: TuInputEventArgs): void;
        protected onBackgroundImageChanged(evt: EventArgs): void;
        protected onBackgroundSelectionDropped(evt: TuInputEventArgs): void;
        protected onBackgroundSelectionDropReject(evt: TuInputEventArgs): void;
        protected onBackgroundSingleClicked(evt: TuInputEventArgs): void;
        protected onClipboardCopied(evt: EventArgs): void;
        protected onClipboardPasted(evt: EventArgs): void;
        protected onCreateControl(): void;
        protected onDocumentChanged(sender: any, e: TuChangedEventArgs): void;
        protected OnDoubleClick(evt: EventArgs): void;
        protected onDragDrop(evt: DragEventArgs): void;
        protected onDragEnter(evt: DragEventArgs): void;
        protected onDragLeave(e: EventArgs): void;
        protected onDragOver(evt: DragEventArgs): void;
        protected onExternalObjectsDropped(evt: TuInputEventArgs): void;
        protected onGotFocus(evt: EventArgs): void;
        protected onKeyDown(evt: KeyEventArgs): void;
        protected onLinkCreated(evt: TuSelectionEventArgs): void;
        protected onLinkRelinked(evt: TuSelectionEventArgs): void;
        protected onLostFocus(evt: EventArgs): void;
        protected onMouseDown(evt: MouseEventArgs): void;
        protected onMouseEnter(e: EventArgs): void;
        protected onMouseLeave(e: EventArgs): void;
        protected onMouseMove(evt: MouseEventArgs): void;
        protected onMouseUp(evt: MouseEventArgs): void;
        protected onMouseWheel(evt: MouseEventArgs): void;
        protected onObjectContextClicked(evt: TuObjectEventArgs): void;
        protected onObjectDoubleClicked(evt: TuObjectEventArgs): void;
        protected onObjectEdited(evt: TuSelectionEventArgs): void;
        protected onObjectEnterLeave(evt: TuObjectEnterLeaveEventArgs): void;
        protected onObjectGotSelection(evt: TuSelectionEventArgs): void;
        protected onObjectHover(evt: TuObjectEventArgs): void;
        protected onObjectLostSelection(evt: TuSelectionEventArgs): void;
        protected onObjectResized(evt: TuSelectionEventArgs): void;
        protected onObjectSelectionDropped(evt: TuObjectEventArgs): void;
        protected onObjectSelectionDropReject(evt: TuObjectEventArgs): void;
        protected onObjectSingleClicked(evt: TuObjectEventArgs): void;
        protected onPaint(evt: PaintEventArgs): void;
        protected onPropertyChanged(evt: PropertyChangedEventArgs): void;
        protected onQueryContinueDrag(evt: any): void;
        protected onSelectionCopied(evt: EventArgs): void;
        protected onSelectionDeleted(evt: EventArgs): void;
        protected onSelectionDeleting(evt: CancelEventArgs): void;
        protected onSelectionFinished(evt: EventArgs): void;
        protected onSelectionMoved(evt: EventArgs): void;
        protected onSelectionStarting(evt: EventArgs): void;
        protected onSizeChanged(evt: EventArgs): void;
        protected onStyleChanged(evt: EventArgs): void;
        protected onSystemColorsChanged(evt: EventArgs): void;
        protected onVisibleChanged(evt: EventArgs): void;
        protected renderBackgroundDecoration(result: any[], clipRect: CGRectangle): void;
        protected paintBackgroundDecoration(g: Graphics, clipRect: CGRectangle): void;
        protected paintObjects(doc: boolean, view: boolean, g: Graphics, clipRect: CGRectangle): void;
        protected renderPaperColor(result: any[], clipRect: CGRectangle): void;
        protected paintPaperColor(g: Graphics, clipRect: CGRectangle): void;
        protected paintView(g: Graphics, clipRect: CGRectangle): void;
        pasteFromClipboard(): TuCopyDictionary;
        pickObject(doc: boolean, view: boolean, p: CGPoint, selectableOnly: boolean): TuObject;
        pickObjectExcluding(doc: boolean, view: boolean, p: CGPoint, selectableOnly: boolean, ignore: ITuCollection): TuObject;
        pickObjects(doc: boolean, view: boolean, p: CGPoint, selectableOnly: boolean, coll: ITuCollection, max: number): ICollection<TuObject>;
        pickObjectsInRectangle(doc: boolean, view: boolean, rect: CGRectangle, pickstyle: TuPickInRectangleStyle, coll: ITuCollection, max: number): ICollection<TuObject>;
        print(): void;
        protected printDecoration(g: Graphics, e: PrintPageEventArgs, hpnum: number, hpmax: number, vpnum: number, vpmax: number): void;
        printDocumentPage(sender: any, e: PrintPageEventArgs): void;
        printPregetView(): void;
        protected printPreviewShowDialog(pd: PrintDocument): void;
        protected printShowDialog(pd: PrintDocument): DialogResult;
        protected printView(g: Graphics, clipRect: CGRectangle): void;
        raiseBackgroundContextClicked(evt: TuInputEventArgs): void;
        raiseBackgroundDoubleClicked(evt: TuInputEventArgs): void;
        raiseBackgroundHover(evt: TuInputEventArgs): void;
        raiseBackgroundSelectionDropped(evt: TuInputEventArgs): void;
        raiseBackgroundSelectionDropReject(evt: TuInputEventArgs): void;
        raiseBackgroundSingleClicked(evt: TuInputEventArgs): void;
        RaiseChanged(hint: number, subhint: number, x: any, oldI: number, oldVal: any, oldRect: CGRectangle, newI: number, newVal: any, newRect: CGRectangle): void;
        raiseClipboardCopied(): void;
        raiseClipboardPasted(): void;
        raiseExternalObjectsDropped(evt: TuInputEventArgs): void;
        raiseLinkCreated(obj: TuObject): void;
        raiseLinkRelinked(obj: TuObject): void;
        raiseObjectContextClicked(obj: TuObject, evt: TuInputEventArgs): void;
        raiseObjectDoubleClicked(obj: TuObject, evt: TuInputEventArgs): void;
        raiseObjectEdited(obj: TuObject): void;
        raiseObjectEnterLeave(from: TuObject, to: TuObject, evt: TuInputEventArgs): void;
        raiseObjectGotSelection(obj: TuObject): void;
        raiseObjectHover(obj: TuObject, evt: TuInputEventArgs): void;
        raiseObjectLostSelection(obj: TuObject): void;
        raiseObjectResized(obj: TuObject): void;
        raiseObjectSelectionDropped(obj: TuObject, evt: TuInputEventArgs): void;
        raiseObjectSelectionDropReject(evt: TuObjectEventArgs): void;
        raiseObjectSingleClicked(obj: TuObject, evt: TuInputEventArgs): void;
        raisePropertyChangedEvent(propname: string): void;
        raiseSelectionCopied(): void;
        raiseSelectionDeleted(): void;
        raiseSelectionDeleting(evt: CancelEventArgs): void;
        raiseSelectionFinished(): void;
        raiseSelectionMoved(): void;
        raiseSelectionStarting(): void;
        redo(): void;
        removeAllTuControls(layer: TuLayer, remove: boolean): void;
        removeTuControl(g: TuControl, c: Control): void;
        replaceMouseTool(tooltype: Type, newtool: ITuTool): ITuTool;
        requestFocus(): void;
        rescaleToFit(): void;
        rescaleWithCenter(newscale: float, docPt: CGPoint): void;
        protected safeOnDocumentChanged(e: TuChangedEventArgs): void;
        scrollLine(dx: float, dy: float): void;
        scrollPage(dx: float, dy: float): void;
        scrollRectangleToVisible(contentRect: CGRectangle): void;
        selectAll(): void;
        selectInRectangle(rect: CGRectangle): void;
        selectNextNode(c: string): boolean;
        SetModifiable(b: boolean): void;
        snapPoint(p: CGPoint, obj: TuObject): CGPoint;
        standardizeCursorName(s: string): string;
        startTransaction(): boolean;
        stopAutoScroll(): void;
        translateTransform(g: Graphics, w: float, h: float): void;
        undo(): void;
        updateExtent(): void;
        updateScrollBars(): void;
        updateView(): void;
        invalidateRects: TuInvalidateCollection;
        invalidate(rect?: CGRectangle): void;
        drawView(forceInvalidate?: boolean): void;
        invalidateMe(rect?: CGRectangle): void;
        protected setHeight(value: number): void;
        protected setWidth(value: number): void;
        protected graphics: Graphics;
        protected canvasElement: HTMLCanvasElement;
        batchDraw(rect?: CGRectangle): void;
        loopDraw(): this;
        resizeView(size: CGSize): void;
        createButton(label: string, value: string): TuButtonElement;
}
export {};

export enum ViewRenderingMode {
    Canvas = 0,
    Svg = 1,
    Html = 2
}

export enum TuViewSnapStyle {
    None = 0,
    Jump = 1,
    After = 2
}

export abstract class TuHtmlRenderer<T extends TuObject> extends TuXmlTransformer<T> {
    TranslateAlpha(c: CGColor): float;
    TranslateColor(c: CGColor): string;
    TranslateGraphicsPath(path: GraphicsPath): string;
    WriteBrushAttributes(brush: Brush): void;
    WriteEllipse(p: Pen, b: Brush, r: CGRectangle): void;
    WriteLine(p: Pen, a: CGPoint, b: CGPoint): void;
    WriteLines(p: Pen, v: CGPoint[]): void;
    WritePath(p: Pen, b: Brush, pathdesc: string): void;
    WritePenAttributes(pen: Pen): void;
    WritePolygon(p: Pen, b: Brush, poly: CGPoint[]): void;
    WriteRectangle(p: Pen, b: Brush, r: CGRectangle, corner: CGSize): void;
}

export class TuInputEventArgs {
    get Alt(): boolean;
    getAlt(): boolean;
    get Buttons(): MouseButtons;
    set Buttons(value: MouseButtons);
    getButtons(): MouseButtons;
    setButtons(value: MouseButtons): void;
    get Control(): boolean;
    getControl(): boolean;
    get Delta(): number;
    set Delta(value: number);
    getDelta(): number;
    setDelta(value: number): void;
    get DocPoint(): CGPoint;
    set DocPoint(value: CGPoint);
    getDocPoint(): CGPoint;
    setDocPoint(value: CGPoint): void;
    get DoubleClick(): boolean;
    set DoubleClick(value: boolean);
    getDoubleClick(): boolean;
    setDoubleClick(value: boolean): void;
    get DragEventArgs(): DragEventArgs;
    set DragEventArgs(value: DragEventArgs);
    getDragEventArgs(): DragEventArgs;
    setDragEventArgs(value: DragEventArgs): void;
    get InputState(): TuInputState;
    set InputState(value: TuInputState);
    getInputState(): TuInputState;
    setInputState(value: TuInputState): void;
    get IsContextButton(): boolean;
    isContextButton(): boolean;
    get Key(): Keys;
    set Key(value: Keys);
    getKey(): Keys;
    setKey(value: Keys): void;
    get KeyEventArgs(): KeyEventArgs;
    set KeyEventArgs(value: KeyEventArgs);
    getKeyEventArgs(): KeyEventArgs;
    setKeyEventArgs(value: KeyEventArgs): void;
    get Modifiers(): Keys;
    set Modifiers(value: Keys);
    getModifiers(): Keys;
    setModifiers(value: Keys): void;
    get MouseEventArgs(): MouseEventArgs;
    set MouseEventArgs(value: MouseEventArgs);
    getMouseEventArgs(): MouseEventArgs;
    setMouseEventArgs(value: MouseEventArgs): void;
    get Shift(): boolean;
    getShift(): boolean;
    get StagePoint(): CGPoint;
    set StagePoint(value: CGPoint);
    getStagePoint(): CGPoint;
    setStagePoint(value: CGPoint): void;
    get ViewPoint(): CGPoint;
    set ViewPoint(value: CGPoint);
    getViewPoint(): CGPoint;
    setViewPoint(value: CGPoint): void;
    constructor(evt?: TuInputEventArgs);
}

export class TuRectangle extends TuShape {
    Paint(g: Graphics, view: TuView): void;
}

export enum TuViewGridStyle {
    None = 0,
    Dot = 1,
    Cross = 2,
    Line = 3,
    HorizontalLine = 4,
    VerticalLine = 5
}

type ContextMenu = any;
export abstract class TuObject extends TComponent {
        protected SetupControlDefaults(): void;
        get SvgRenderer(): TuSvgRenderer<TuObject>;
        set SvgRenderer(value: TuSvgRenderer<TuObject>);
        get HtmlRenderer(): TuHtmlRenderer<TuObject>;
        set HtmlRenderer(value: TuHtmlRenderer<TuObject>);
        CreateElements(param?: any): any[];
        get AutoRescales(): boolean;
        set AutoRescales(value: boolean);
        protected getAutoRescales(): boolean;
        protected setAutoRescales(value: boolean): void;
        get BeingRemoved(): boolean;
        get Bottom(): number;
        set Bottom(value: number);
        /**
            * @hidden
            */
        protected getBottom(): number;
        /**
            * @hidden
            * @param value
            */
        protected setBottom(value: number): void;
        get Bounds(): CGRectangle;
        set Bounds(value: CGRectangle);
        protected getBounds(): CGRectangle;
        protected setBounds(value: CGRectangle): void;
        get Center(): CGPoint;
        set Center(value: CGPoint);
        /**
            * @hidden
            */
        protected getCenter(): CGPoint;
        /**
            * @hidden
            * @param value
            */
        protected setCenter(value: CGPoint): void;
        get Copyable(): boolean;
        set Copyable(value: boolean);
        protected getCopyable(): boolean;
        protected setCopyable(value: boolean): void;
        get Deletable(): boolean;
        set Deletable(value: boolean);
        /**
         * @hidden
         */
        protected getDeletable(): boolean;
        /**
         * @hidden
         */
        protected setDeletable(value: boolean): void;
        get Document(): TuDocument;
        /**
            * @hidden
            */
        protected getDocument(): TuDocument;
        get DraggingObject(): TuObject;
        /**
            * @hidden
            */
        protected getDraggingObject(): TuObject;
        get DragsNode(): boolean;
        set DragsNode(value: boolean);
        /**
         * @hidden
         */
        protected getDragsNode(): boolean;
        /**
         * @hidden
         */
        protected setDragsNode(value: boolean): void;
        get Editable(): boolean;
        set Editable(value: boolean);
        /**
         * @hidden
         */
        protected getEditable(): boolean;
        /**
         * @hidden
         */
        protected setEditable(value: boolean): void;
        get Editor(): TuControl;
        /**
         * @hidden
         */
        protected getEditor(): TuControl;
        get Height(): float;
        set Height(value: float);
        /**
         * @hidden
         */
        protected getHeight(): float;
        /**
         * @hidden
         */
        protected setHeight(value: float): void;
        get Initializing(): boolean;
        set Initializing(value: boolean);
        /**
         * @hidden
         */
        protected getInitializing(): boolean;
        /**
         * @hidden
         */
        protected setInitializing(value: boolean): void;
        protected get InternalFlags(): number;
        protected set InternalFlags(value: number);
        get InvalidBounds(): boolean;
        set InvalidBounds(value: boolean);
        /**
         * @hidden
         */
        protected getInvalidBounds(): boolean;
        /**
         * @hidden
         */
        protected setInvalidBounds(value: boolean): void;
        get IsInDocument(): boolean;
        /**
         * @hidden
         */
        protected getIsInDocument(): boolean;
        get IsInView(): boolean;
        /**
         * @hidden
         */
        protected getIsInView(): boolean;
        get IsTopLevel(): boolean;
        /**
         * @hidden
         */
        protected getIsTopLevel(): boolean;
        get Layer(): TuLayer;
        /**
         * @hidden
         */
        protected getLayer(): TuLayer;
        get LayerIndex(): number;
        set LayerIndex(value: number);
        /**
         * @hidden
         */
        protected getLayerIndex(): number;
        protected setLayerIndex(value: number): number;
        get Left(): float;
        set Left(value: float);
        /**
            * @hidden
            */
        protected getLeft(): float;
        /**
            * @hidden
            * @param value
            */
        protected setLeft(value: float): void;
        get Location(): CGPoint;
        set Location(value: CGPoint);
        /**
            * @hidden
            */
        protected getLocation(): CGPoint;
        /**
            * @hidden
            * @param value
            */
        protected setLocation(value: CGPoint): void;
        get Movable(): boolean;
        set Movable(value: boolean);
        /**
         * @hidden
         */
        protected getMovable(): boolean;
        /**
         * @hidden
         */
        protected setMovable(value: boolean): void;
        get Observers(): TuCollectionEnumerator;
        /**
         * @hidden
         */
        protected getObservers(): TuCollectionEnumerator;
        get Parent(): TuGroup;
        /**
         * @hidden
         */
        protected getParent(): TuGroup;
        get ParentNode(): TuObject;
        /**
         * @hidden
         */
        protected getParentNode(): TuObject;
        get Position(): CGPoint;
        set Position(value: CGPoint);
        /**
            * @hidden
            */
        protected getPosition(): CGPoint;
        /**
            * @hidden
            * @param value
            */
        protected setPosition(value: CGPoint): void;
        get Printable(): boolean;
        set Printable(value: boolean);
        /**
         * @hidden
         */
        protected getPrintable(): boolean;
        /**
         * @hidden
         */
        protected setPrintable(value: boolean): void;
        get Reshapable(): boolean;
        set Reshapable(value: boolean);
        /**
         * @hidden
         */
        protected getReshapable(): boolean;
        /**
         * @hidden
         */
        protected setReshapable(value: boolean): void;
        get Resizable(): boolean;
        set Resizable(value: boolean);
        /**
         * @hidden
         */
        protected getResizable(): boolean;
        /**
         * @hidden
         */
        protected setResizable(value: boolean): void;
        get ResizesRealtime(): boolean;
        set ResizesRealtime(value: boolean);
        /**
         * @hidden
         */
        protected getResizesRealtime(): boolean;
        /**
         * @hidden
         */
        protected setResizesRealtime(value: boolean): void;
        get Right(): float;
        set Right(value: float);
        /**
            * @hidden
            */
        protected getRight(): float;
        /**
            * @hidden
            * @param value
            */
        protected setRight(value: float): void;
        get Selectable(): boolean;
        set Selectable(value: boolean);
        /**
         * @hidden
         */
        protected getSelectable(): boolean;
        /**
         * @hidden
         */
        protected setSelectable(value: boolean): void;
        get SelectionObject(): TuObject;
        /**
         * @hidden
         */
        protected getSelectionObject(): TuObject;
        get Shadowed(): boolean;
        set Shadowed(value: boolean);
        /**
         * @hidden
         */
        protected getShadowed(): boolean;
        /**
         * @hidden
         */
        protected setShadowed(value: boolean): void;
        get Size(): CGSize;
        set Size(value: CGSize);
        /**
         * @hidden
         */
        protected getSize(): CGSize;
        /**
         * @hidden
         */
        protected setSize(value: CGSize): void;
        get SkipsBoundsChanged(): boolean;
        set SkipsBoundsChanged(value: boolean);
        /**
         * @hidden
         */
        protected getSkipsBoundsChanged(): boolean;
        /**
         * @hidden
         */
        protected setSkipsBoundsChanged(value: boolean): void;
        get SkipsUndoManager(): boolean;
        set SkipsUndoManager(value: boolean);
        /**
         * @hidden
         */
        protected getSkipsUndoManager(): boolean;
        /**
         * @hidden
         */
        protected setSkipsUndoManager(value: boolean): void;
        get SuspendsUpdates(): boolean;
        set SuspendsUpdates(value: boolean);
        /**
         * @hidden
         */
        protected getSuspendsUpdates(): boolean;
        /**
         * @hidden
         */
        protected setSuspendsUpdates(value: boolean): void;
        get Top(): float;
        set Top(value: float);
        /**
            * @hidden
            */
        protected getTop(): float;
        /**
            * @hidden
            * @param value
            */
        protected setTop(value: float): void;
        get TopLevelObject(): TuObject;
        /**
            * @hidden
            */
        protected getTopLevelObject(): TuObject;
        get View(): TuView;
        /**
            * @hidden
            */
        protected getView(): TuView;
        get Visible(): boolean;
        set Visible(value: boolean);
        /**
         * @hidden
         */
        protected getVisible(): boolean;
        /**
         * @hidden
         */
        protected setVisible(value: boolean): void;
        get Width(): float;
        set Width(value: float);
        /**
         * @hidden
         */
        protected getWidth(): float;
        /**
         * @hidden
         */
        protected setWidth(value: float): void;
        get BoundsChanged$(): Event<EventHandler<CGRectangle>>;
        set BoundsChanged$(value: Event<EventHandler<CGRectangle>>);
        protected getBoundsChanged$(): Event<EventHandler<CGRectangle>>;
        protected setBoundsChanged$(value: Event<EventHandler<CGRectangle>>): void;
        AddObserver(obj: TuObject): void;
        AddSelectionHandles(sel: TuSelection, selectedObj: TuObject): void;
        CanCopy(): boolean;
        CanDelete(): boolean;
        CanEdit(): boolean;
        canMove(): boolean;
        CanPrint(): boolean;
        CanReshape(): boolean;
        CanResize(): boolean;
        CanSelect(): boolean;
        CanView(): boolean;
        Changed(subhint: number, oldI: number, oldVal: any, oldRect: CGRectangle, newI: number, newVal: any, newRect: CGRectangle): void;
        ChangeValue(e: TuChangedEventArgs, undo: boolean): void;
        Changing(subhint: number): void;
        protected ComputeBounds(): CGRectangle;
        ComputeMove(origLoc: CGPoint, newLoc: CGPoint): CGPoint;
        ComputeResize(origRect: CGRectangle, newPoint: CGPoint, handle: number, min: CGSize, max: CGSize, reshape: boolean): CGRectangle;
        ContainedByRectangle(r: CGRectangle): boolean;
        ContainsPoint(p: CGPoint): boolean;
        Copy(): TuObject;
        CopyNewValueForRedo(e: TuChangedEventArgs): void;
        CopyObject(env: TuCopyDictionary): TuObject;
        CopyObjectDelayed(env: TuCopyDictionary, newobj: TuObject): void;
        CopyOldValueForUndo(e: TuChangedEventArgs): void;
        CreateBoundingHandle(): ITuHandle;
        CreateEditor(view: TuView): TuControl;
        CreateResizeHandle(handleid: number): ITuHandle;
        DoBeginEdit(view: TuView): void;
        DoEndEdit(view: TuView): void;
        DoMove(view: TuView, origLoc: CGPoint, newLoc: CGPoint): void;
        DoResize(view: TuView, origRect: CGRectangle, newPoint: CGPoint, whichHandle: number, evttype: TuInputState, min: CGSize, max: CGSize): void;
        ExpandPaintBounds(rect: CGRectangle, view: TuView): CGRectangle;
        static FindCommonParent(a: TuObject, b: TuObject): TuObject;
        GetContextMenu(view: TuView): ContextMenu;
        GetContextMenuStrip(view: TuView): ContextMenu;
        GetCursorName(view: TuView): string;
        GetNearestIntersectionPoint(p1: CGPoint, p2: CGPoint, result: Out<CGPoint>): boolean;
        GetPartInfo(view: TuView, renderer: ITuPartInfoRenderer): TuPartInfo;
        GetRectangleSpotLocation(r: CGRectangle, spot: Spot): CGPoint;
        GetShadowBrush(view: TuView): Brush;
        GetShadowOffset(view: TuView): CGSize;
        GetShadowPen(view: TuView, width: float): Pen;
        GetSpotLocation(spot: Spot): CGPoint;
        GetToolTip(view: TuView): string;
        InvalidateViews(): void;
        IsApprox(x: float, y: float): boolean;
        isChildOf(obj: TuObject): boolean;
        MakeDiamondResizeHandle(handle: ITuHandle, spot: Spot): void;
        protected OnBoundsChanged(old: CGRectangle): void;
        OnContextClick(evt: TuInputEventArgs, view: TuView): boolean;
        OnDoubleClick(evt: TuInputEventArgs, view: TuView): boolean;
        OnEnterLeave(from: TuObject, to: TuObject, view: TuView): boolean;
        OnGotSelection(sel: TuSelection): void;
        OnHover(evt: TuInputEventArgs, view: TuView): boolean;
        protected OnLayerChanged(oldlayer: TuLayer, newlayer: TuLayer, mainObj: TuObject): void;
        OnLostSelection(sel: TuSelection): void;
        OnMouseOver(evt: TuInputEventArgs, view: TuView): boolean;
        protected OnObservedChanged(observed: TuObject, subhint: number, oldI: number, oldVal: any, oldRect: CGRectangle, newI: number, newVal: any, newRect: CGRectangle): void;
        protected OnParentChanged(oldgroup: TuGroup, newgroup: TuGroup): void;
        OnSelectionDropped(evt: TuObjectEventArgs, view: TuView): boolean;
        OnSelectionDropReject(evt: TuObjectEventArgs, view: TuView): boolean;
        OnSingleClick(evt: TuInputEventArgs, view: TuView): boolean;
        Paint(g: Graphics, view: TuView): void;
        Pick(p: CGPoint, selectableOnly: boolean): TuObject;
        Remove(obj?: TuObject): boolean;
        removeObserver(obj: TuObject): void;
        RemoveSelectionHandles(sel: TuSelection): void;
        setBeingRemoved(value: boolean): void;
        setLayer(value: TuLayer, mainObj: TuObject, undoing: boolean): void;
        setParent(value: TuGroup, undoing: boolean): void;
        setRectangleSpotLocation(r: CGRectangle, spot: Spot, p: CGPoint): CGRectangle;
        setSizeKeepingLocation(s: CGSize): void;
        setSpotLocation(spot: Spot, newp: CGPoint): void;
        setSpotLocation(spot: Spot, obj: TuObject, otherSpot: Spot): void;
        setSpotLocation(spot: Spot, obj: TuObject, otherSpot: Spot, offset: CGSize): void;
        setSpotLocation(spot: Spot, obj: TuObject, otherSpot: Spot, dx: float, dy: float): void;
        spotOpposite(spot: Spot): Spot;
        GetType(): any;
        InvalidateCache(): void;
        ForceUpdate(): void;
}
export {};

interface TValue<T> {
    (): T;
}
export type TProperty<T> = T | TValue<T>;
export function ValueOf<T>(value: TProperty<T>): T;
export const Types: {
    TextBoxControl: symbol;
    ComboBoxControl: symbol;
    TuOverviewRectangle: symbol;
    TuMultiTextNodeListGroup: symbol;
    TuLayerCache: symbol;
    TuDrawingData: symbol;
    TuHandleRotated: symbol;
    TuRoundedRectangle: symbol;
    TuCollapsibleHandle: symbol;
    TuCopyDelayedsCollection: symbol;
    TuToolZooming: symbol;
    TuToolRubberBanding: symbol;
    TuToolRelinking: symbol;
    TuToolPanning: symbol;
    TuToolLinkingNew: symbol;
    TuView: symbol;
    TuPort: symbol;
    TuLink: symbol;
    ITuLink: symbol;
    TuBalloon: symbol;
    TuDocument: symbol;
    TuObject: symbol;
    TuShape: symbol;
    TuGroup: symbol;
    TuControl: symbol;
    ITuNode: symbol;
    ITuDragSnapper: symbol;
    ITuIdentifiablePart: symbol;
    ITuRoutable: symbol;
    ITuLabeledPart: symbol;
    TuSubGraphBase: symbol;
    TuLayer: symbol;
    DisposableBase: symbol;
    ITuCollection: symbol;
    ITuLayerCollectionContainer: symbol;
    ITuLayerAbilities: symbol;
    TuLabeledLink: symbol;
    ICollection: symbol;
    TuLayerCollection: symbol;
    TuHScrollBarElement: symbol;
    Slider: symbol;
    Control: symbol;
    TuElement: symbol;
    TuHandle: symbol;
    ITuTool: symbol;
    TuTriangle: symbol;
    TuToolDragging: symbol;
    TuDrawing: symbol;
    TuFigureDrawing: symbol;
    IActionObject: symbol;
    TuTool: symbol;
    TuToolAction: symbol;
    TuToolContext: symbol;
    TuToolCreating: symbol;
    TuToolSelecting: symbol;
    ITuHandle: symbol;
    TuToolResizing: symbol;
    TuGrid: symbol;
    ITuControlObject: symbol;
    TuOverview: symbol;
    TuSheet: symbol;
    TuSelection: symbol;
    TuNode: symbol;
    ITuGraphPart: symbol;
    ITuLabeledNode: symbol;
    TuNodeLinkEnumerator: symbol;
    TuNodeNodeEnumerator: symbol;
    TuNodePortEnumerator: symbol;
    ITuPort: symbol;
    TuText: symbol;
    TuBasicNode: symbol;
    TuEllipse: symbol;
    TuPortFilteredLinkEnumerator: symbol;
    TuPortLinkEnumerator: symbol;
    TuSubGraph: symbol;
    TuGeneralNode: symbol;
    TuMultiTextNode: symbol;
    TuGeneralNodePort: symbol;
    TuBoxPort: symbol;
    TuCollection: symbol;
    TuCollectionEnumerator: symbol;
    TuCube: symbol;
    TuCylinder: symbol;
    TuUndoManager: symbol;
    TuUndoManagerCompoundEdit: symbol;
    TuGroupEnumerator: symbol;
    TuLayerCollectionEnumerator: symbol;
    TuLayerCollectionObjectEnumerator: symbol;
    TuLayerEnumerator: symbol;
    Animation: symbol;
    TuPenInfo: symbol;
    TuStroke: symbol;
    TemporaryPort: symbol;
    TuToolManager: symbol;
    ITuCollapsible: symbol;
    TuSubGraphHandle: symbol;
    TuArc: symbol;
    TuComment: symbol;
    TuPolygon: symbol;
    TuBoxNode: symbol;
    TuGeneralNodePortLabel: symbol;
    ITuNodeIconConstraint: symbol;
    TuImage: symbol;
    TuNodeIcon: symbol;
    TuBrushInfo: symbol;
    TuListGroup: symbol;
    BrushInfoEx: symbol;
    TuPenInfoEx: symbol;
    TuRectangle: symbol;
    TuPartInfo: symbol;
    TuDragImage: symbol;
    TuImageInfo: symbol;
    TuToolLinking: symbol;
};
export {};

export class TuText extends TuObject {
    protected SetupControlDefaults(): void;
    get Alignment(): Spot;
    set Alignment(value: Spot);
    protected getAlignment(): Spot;
    protected setAlignment(value: Spot): void;
    get AutoResizes(): boolean;
    set AutoResizes(value: boolean);
    protected getAutoResizes(): boolean;
    protected setAutoResizes(value: boolean): void;
    get BackgroundColor(): CGColor;
    set BackgroundColor(value: CGColor);
    protected getBackgroundColor(): CGColor;
    protected setBackgroundColor(value: CGColor): void;
    get BackgroundOpaqueWhenSelected(): boolean;
    set BackgroundOpaqueWhenSelected(value: boolean);
    protected getBackgroundOpaqueWhenSelected(): boolean;
    protected setBackgroundOpaqueWhenSelected(value: boolean): void;
    get Bold(): boolean;
    set Bold(value: boolean);
    protected getBold(): boolean;
    protected setBold(value: boolean): void;
    get Bordered(): boolean;
    set Bordered(value: boolean);
    protected getBordered(): boolean;
    protected setBordered(value: boolean): void;
    get Choices(): any[];
    set Choices(value: any[]);
    protected getChoices(): any[];
    protected setChoices(value: any[]): void;
    get Clipping(): boolean;
    set Clipping(value: boolean);
    protected getClipping(): boolean;
    protected setClipping(value: boolean): void;
    static get DefaultFontFamilyName(): string;
    set DefaultFontFamilyName(value: string);
    static get DefaultFontSize(): float;
    set DefaultFontSize(value: float);
    get DropDownList(): boolean;
    set DropDownList(value: boolean);
    protected getDropDownList(): boolean;
    protected setDropDownList(value: boolean): void;
    get EditableWhenSelected(): boolean;
    set EditableWhenSelected(value: boolean);
    protected getEditableWhenSelected(): boolean;
    protected setEditableWhenSelected(value: boolean): void;
    static get Editor(): TuControl;
    get EditorStyle(): TuTextEditorStyle;
    set EditorStyle(value: TuTextEditorStyle);
    protected getEditorStyle(): TuTextEditorStyle;
    protected setEditorStyle(value: TuTextEditorStyle): void;
    get FamilyName(): string;
    set FamilyName(value: string);
    protected getFamilyName(): string;
    protected setFamilyName(value: string): void;
    get Font(): Font;
    set Font(value: Font);
    protected getFont(): Font;
    protected setFont(value: Font): void;
    get FontSize(): float;
    set FontSize(value: float);
    protected getFontSize(): float;
    protected setFontSize(value: float): void;
    get GdiCharSet(): byte;
    set GdiCharSet(value: byte);
    protected getGdiCharSet(): byte;
    protected setGdiCharSet(value: byte): void;
    get InternalTextFlags(): number;
    set InternalTextFlags(value: number);
    get Italic(): boolean;
    set Italic(value: boolean);
    protected getItalic(): boolean;
    protected setItalic(value: boolean): void;
    get LineCount(): number;
    getLocation(): CGPoint;
    setLocation(value: CGPoint): void;
    get Maximum(): number;
    set Maximum(value: number);
    protected getMaximum(): number;
    protected setMaximum(value: number): void;
    get Minimum(): number;
    set Minimum(value: number);
    protected getMinimum(): number;
    protected setMinimum(value: number): void;
    get Multiline(): boolean;
    set Multiline(value: boolean);
    protected getMultiline(): boolean;
    protected setMultiline(value: boolean): void;
    get RightToLeft(): boolean;
    set RightToLeft(value: boolean);
    protected getRightToLeft(): boolean;
    protected setRightToLeft(value: boolean): void;
    get RightToLeftFromgetView(): boolean;
    set RightToLeftFromView(value: boolean);
    protected getRightToLeftFromgetView(): boolean;
    protected setRightToLeftFromView(value: boolean): void;
    get StrikeThrough(): boolean;
    set StrikeThrough(value: boolean);
    protected getStrikeThrough(): boolean;
    protected setStrikeThrough(value: boolean): void;
    get StringTrimming(): StringTrimming;
    set StringTrimming(value: StringTrimming);
    protected getStringTrimming(): StringTrimming;
    protected setStringTrimming(value: StringTrimming): void;
    get Text(): string;
    set Text(value: string);
    protected getText(): string;
    protected setText(value: string): void;
    get TextColor(): CGColor;
    set TextColor(value: CGColor);
    protected getTextColor(): CGColor;
    protected setTextColor(value: CGColor): void;
    get TransparentBackground(): boolean;
    set TransparentBackground(value: boolean);
    protected getTransparentBackground(): boolean;
    protected setTransparentBackground(value: boolean): void;
    protected transparentBackground(value?: boolean): boolean;
    get Underline(): boolean;
    set Underline(value: boolean);
    protected getUnderline(): boolean;
    protected setUnderline(value: boolean): void;
    get Wrapping(): boolean;
    set Wrapping(value: boolean);
    protected getWrapping(): boolean;
    protected setWrapping(value: boolean): void;
    protected wrapping(value?: boolean): boolean;
    get WrappingWidth(): float;
    set WrappingWidth(value: float);
    protected getWrappingWidth(): float;
    protected setWrappingWidth(value: float): void;
    AddSelectionHandles(sel: TuSelection, selectedObj: TuObject): void;
    ChangeValue(e: TuChangedEventArgs, undo: boolean): void;
    computeEdit(oldtext: string, newtext: string): string;
    copyObject(env: TuCopyDictionary): TuObject;
    CreateEditor(view: TuView): TuControl;
    DoBeginEdit(view: TuView): void;
    doEdit(view: TuView, oldtext: string, newtext: string): boolean;
    DoEndEdit(view: TuView): void;
    ExpandPaintBounds(rect: CGRectangle, view: TuView): CGRectangle;
    protected OnBoundsChanged(old: CGRectangle): void;
    protected OnLayerChanged(oldlayer: TuLayer, newlayer: TuLayer, mainObj: TuObject): void;
    OnSingleClick(evt: TuInputEventArgs, view: TuView): boolean;
    Paint(g: Graphics, view: TuView): void;
    paintGreek(g: Graphics, view: TuView): boolean;
    removeSelectionHandles(sel: TuSelection): void;
    setSizeKeepingLocation(s: CGSize): void;
    updateSize(): void;
}

export class Spot {
        xFactor: number;
        yFactor: number;
        static readonly None: Spot;
        get ID(): number;
        set ID(value: number);
        constructor(xFactor: number, yFactor: number, myID?: number);
        getSpotLocation(rect: CGRectangle): CGPoint;
        equals(spot: Spot): boolean;
        notEquals(spot: Spot): boolean;
        static FromID(id: number): Spot;
}
export const NoSpot: Spot;
/**
 * Nesnenin tam ortasını temsil eder.
 * <pre>
 * ------------------
 * -                -
 * -       O        -
 * -                -
 * ------------------
 * </pre>
 */
export const Middle: Spot;
export const MiddleCenter: Spot;
/**
 * Nesnenin sol köşesini temsil eder.
 * <pre>
 * 0=================
 * |                |
 * |                |
 * |                |
 * ==================
 * </pre>
 */
export const TopLeft: Spot;
/**
 * Nesnenin sağ üst köşesini temsil eder.
 * <pre>
 * =================0
 * |                |
 * |                |
 * |                |
 * ==================
 * </pre>
 */
export const TopRight: Spot;
/**
 * This represents a corner po in the object's bounds.
 */
export const BottomRight: Spot;
/**
 * This represents a corner po in the object's bounds.
 */
export const BottomLeft: Spot;
/**
    * Nesnenin üst ortasını temsil eder.
    * <pre>
    * --------O---------
    * -                -
    * -                -
    * -                -
    * ------------------
    * </pre>
    */
export const MiddleTop: Spot;
/**
 * Nesnenin üst ortasını temsil eder.
 * <pre>
 * --------O---------
 * -                -
 * -                -
 * -                -
 * ------------------
 * </pre>
 * [[MiddleTop]]
 * [[GetSpotLocation]]
 */
export const TopCenter: Spot;
/**
 * Nesnenin sağ ortasını temsil eder.
 * <pre>
 * ------------------
 * -                -
 * -                O
 * -                -
 * ------------------
 * </pre>
 */
export const MiddleRight: Spot;
/**
 * Nesnenin alt ortasını temsil eder.
 * <pre>
 * ------------------
 * -                -
 * -                -
 * -                -
 * --------O---------
 * </pre>
 */
export const MiddleBottom: Spot;
/**
    * This represents a po in the object's bounds.
    */
export const BottomCenter: Spot;
/**
 * Nesnenin sol ortasını temsil eder.
 * <pre>
 * ------------------
 * -                -
 * O                -
 * -                -
 * ------------------
 * </pre>
 */
export const MiddleLeft: Spot;

export class DragEventArgs extends EventArgs {
    get AllowedEffect(): DragDropEffects;
    get Data(): IDataObject;
    get Effect(): DragDropEffects;
    set Effect(value: DragDropEffects);
    get KeyState(): number;
    get X(): number;
    get Y(): number;
    constructor(data: IDataObject, keyState: number, x: float, y: float, allowedEffect: DragDropEffects, effect: DragDropEffects);
}

export abstract class IDataObject {
    abstract GetData(format: string): any;
    abstract GetData(format: Type): any;
    abstract GetData(format: string, autoConvert: boolean): any;
    abstract GetDataPresent(format: string): boolean;
    abstract GetDataPresent(format: Type): boolean;
    abstract GetDataPresent(format: string, autoConvert: boolean): boolean;
    abstract GetFormats(): string[];
    abstract GetFormats(autoConvert: boolean): string[];
    abstract SetData(data: any): void;
    abstract SetData(format: string, data: any): void;
    abstract SetData(format: Type, data: any): void;
    abstract SetData(format: string, autoConvert: boolean, data: any): void;
}

export interface ITuCollection extends ICollection<TuObject>, IEnumerable<TuObject> {
    get Backwards(): IEnumerable<TuObject>;
    get IsEmpty(): boolean;
    CopyArray(): TuObject[];
}

export class TuRectangleButton extends TuRectangle {
    button: any;
    protected SetupControlDefaults(): void;
    CreateElements(param: any): any[];
    Paint(g: Graphics, view: TuView): void;
}

export class DataObject implements IDataObject {
    static CurrentDataObject: IDataObject;
    constructor();
    constructor(id: string, dataTransfer: DataTransfer);
    constructor(dataTransfer: DataTransfer);
    GetData(format: string): void;
    GetData(format: Type): void;
    GetData(format: string, autoConvert: boolean): void;
    GetDataPresent(format: string): boolean;
    GetDataPresent(format: Type): boolean;
    GetDataPresent(format: string, autoConvert: boolean): boolean;
    GetFormats(): string[];
    GetFormats(autoConvert: boolean): string[];
    SetData(data: any): void;
    SetData(format: string, data: any): void;
    SetData(format: Type, data: any): void;
    SetData(format: string, autoConvert: boolean, data: any): void;
}

export class TuDocument extends DisposableBase implements ITuCollection, ITuLayerCollectionContainer, ITuLayerAbilities {
    static myCaching: boolean;
    get AllowCopy(): boolean;
    set AllowCopy(value: boolean);
    protected getAllowCopy(): boolean;
    protected setAllowCopy(value: boolean): void;
    get AllowDelete(): boolean;
    set AllowDelete(value: boolean);
    protected getAllowDelete(): boolean;
    protected setAllowDelete(value: boolean): void;
    get AllowEdit(): boolean;
    set AllowEdit(value: boolean);
    protected getAllowEdit(): boolean;
    protected setAllowEdit(value: boolean): void;
    get AllowInsert(): boolean;
    set AllowInsert(value: boolean);
    protected getAllowInsert(): boolean;
    protected setAllowInsert(value: boolean): void;
    get AllowLink(): boolean;
    set AllowLink(value: boolean);
    protected getAllowLink(): boolean;
    protected setAllowLink(value: boolean): void;
    get AllowMove(): boolean;
    set AllowMove(value: boolean);
    protected getAllowMove(): boolean;
    protected setAllowMove(value: boolean): void;
    get AllowReshape(): boolean;
    set AllowReshape(value: boolean);
    protected getAllowReshape(): boolean;
    protected setAllowReshape(value: boolean): void;
    get AllowResize(): boolean;
    set AllowResize(value: boolean);
    protected getAllowResize(): boolean;
    protected setAllowResize(value: boolean): void;
    get AllowSelect(): boolean;
    set AllowSelect(value: boolean);
    protected getAllowSelect(): boolean;
    protected setAllowSelect(value: boolean): void;
    get Backwards(): TuLayerCollectionObjectEnumerator;
    get Bounds(): CGRectangle;
    set Bounds(value: CGRectangle);
    protected getBounds(): CGRectangle;
    protected setBounds(value: CGRectangle): void;
    get Count(): number;
    protected getCount(): number;
    get DataFormat(): string;
    set DataFormat(value: string);
    protected getDataFormat(): string;
    protected setDataFormat(value: string): void;
    get DefaultLayer(): TuLayer;
    set DefaultLayer(value: TuLayer);
    protected getDefaultLayer(): TuLayer;
    protected setDefaultLayer(value: TuLayer): void;
    get DelayedRoutings(): TuCopyDelayedsCollection;
    get FixedSize(): boolean;
    set FixedSize(value: boolean);
    protected getFixedSize(): boolean;
    protected setFixedSize(value: boolean): void;
    get Initializing(): boolean;
    set Initializing(value: boolean);
    protected getInitializing(): boolean;
    protected setInitializing(value: boolean): void;
    get IsEmpty(): boolean;
    get IsModified(): boolean;
    set IsModified(value: boolean);
    protected getIsModified(): boolean;
    protected setIsModified(value: boolean): void;
    get IsReadOnly(): boolean;
    get LastPartID(): number;
    set LastPartID(value: number);
    protected getLastPartID(): number;
    protected setLastPartID(value: number): void;
    get Layers(): TuLayerCollection;
    get LinksLayer(): TuLayer;
    set LinksLayer(value: TuLayer);
    protected getLinksLayer(): TuLayer;
    protected setLinksLayer(value: TuLayer): void;
    get MaintainsPartID(): boolean;
    set MaintainsPartID(value: boolean);
    protected getMaintainsPartID(): boolean;
    protected setMaintainsPartID(value: boolean): void;
    get Name(): string;
    set Name(value: string);
    protected getName(): string;
    protected setName(value: string): void;
    get PaperColor(): CGColor;
    set PaperColor(value: CGColor);
    protected getPaperColor(): CGColor;
    protected setPaperColor(value: CGColor): void;
    get RoutingTime(): TuRoutingTime;
    set RoutingTime(value: TuRoutingTime);
    protected getRoutingTime(): TuRoutingTime;
    protected setRoutingTime(value: TuRoutingTime): void;
    get SerializesUndoManager(): boolean;
    set SerializesUndoManager(value: boolean);
    protected getSerializesUndoManager(): boolean;
    protected setSerializesUndoManager(value: boolean): void;
    get Size(): CGSize;
    set Size(value: CGSize);
    protected getSize(): CGSize;
    protected setSize(value: CGSize): void;
    get SkipsUndoManager(): boolean;
    set SkipsUndoManager(value: boolean);
    protected getSkipsUndoManager(): boolean;
    protected setSkipsUndoManager(value: boolean): void;
    get SuspendsRouting(): boolean;
    set SuspendsRouting(value: boolean);
    protected getSuspendsRouting(): boolean;
    protected setSuspendsRouting(value: boolean): void;
    get SuspendsUpdates(): boolean;
    set SuspendsUpdates(value: boolean);
    protected getSuspendsUpdates(): boolean;
    protected setSuspendsUpdates(value: boolean): void;
    get TopLeft(): CGPoint;
    set TopLeft(value: CGPoint);
    protected getTopLeft(): CGPoint;
    protected setTopLeft(value: CGPoint): void;
    get UndoManager(): TuUndoManager;
    set UndoManager(value: TuUndoManager);
    protected getUndoManager(): TuUndoManager;
    protected setUndoManager(value: TuUndoManager): void;
    get UserFlags(): number;
    set UserFlags(value: number);
    protected getUserFlags(): number;
    protected setUserFlags(value: number): void;
    get UserObject(): any;
    set UserObject(value: any);
    protected getUserObject(): any;
    protected setUserObject(value: any): void;
    get ValidCycle(): TuDocumentValidCycle;
    set ValidCycle(value: TuDocumentValidCycle);
    protected getValidCycle(): TuDocumentValidCycle;
    protected setValidCycle(value: TuDocumentValidCycle): void;
    get WorldEpsilon(): float;
    get WorldScale(): CGSize;
    set WorldScale(value: CGSize);
    constructor();
    AbortTransaction(): boolean;
    Add(obj: TuObject): this;
    addAllParts(obj: TuObject): void;
    addCopy(obj: TuObject, loc: CGPoint): TuObject;
    addPart(p: ITuIdentifiablePart): void;
    beginUpdateViews(): void;
    CanCopyObjects(): boolean;
    CanDeleteObjects(): boolean;
    CanEditObjects(): boolean;
    CanInsertObjects(): boolean;
    CanLinkObjects(): boolean;
    CanMoveObjects(): boolean;
    CanRedo(): boolean;
    CanReshapeObjects(): boolean;
    CanResizeObjects(): boolean;
    CanSelectObjects(): boolean;
    CanUndo(): boolean;
    ChangeValue(e: TuChangedEventArgs, undo: boolean): void;
    Clear(): number;
    static ComputeBounds(coll: ITuCollection, view: TuView): CGRectangle;
    computeBounds(): CGRectangle;
    Contains(obj: TuObject): boolean;
    copy(): TuDocument;
    CopyArray(): TuObject[];
    CopyFromCollection(coll: ITuCollection, copyableOnly: boolean, dragging: boolean, offset: CGSize, env: TuCopyDictionary): TuCopyDictionary;
    CopyFromCollection(coll: ITuCollection): TuCopyDictionary;
    copyNewValueForRedo(e: TuChangedEventArgs): void;
    copyOldValueForUndo(e: TuChangedEventArgs): void;
    CopyTo(array: TuObject[], index: number): TuObject[];
    createCopyDictionary(): TuCopyDictionary;
    DoDelayedRouting(moved: ITuCollection): void;
    endUpdateViews(): void;
    ensureUniquePartID(): void;
    findNode(s: string): TuObject;
    findNode(s: string, prefix: boolean, ignorecase: boolean): TuObject;
    findNode(s: string, prefix: boolean, ignorecase: boolean, insidesubgraph: boolean): TuObject;
    findPart(id: number): ITuIdentifiablePart;
    finishTransaction(tname: string): boolean;
    getAvoidableRectangle(obj: TuObject): CGRectangle;
    GetEnumerator(): TuLayerCollectionObjectEnumerator;
    getPositions(): TuPositionArray;
    getPositions(clearunoccupied: boolean, skip: TuObject): TuPositionArray;
    InvalidateViews(): void;
    isAvoidable(obj: TuObject): boolean;
    isUnoccupied(r: CGRectangle, skip: TuObject): boolean;
    static MakesDirectedCycle(a: ITuNode, b: ITuNode): boolean;
    static MakesDirectedCycleFast(a: ITuNode, b: ITuNode): boolean;
    static MakesUndirectedCycle(a: ITuNode, b: ITuNode): boolean;
    maxPartID(obj: TuObject): number;
    MergeLayersFrom(other: TuDocument): void;
    protected onChanged(evt: TuChangedEventArgs): void;
    pickObject(p: CGPoint, selectableOnly: boolean): TuObject;
    pickObjects(p: CGPoint, selectableOnly: boolean, coll: ITuCollection, max: number): ITuCollection;
    pickObjectsInRectangle(rect: CGRectangle, pickstyle: TuPickInRectangleStyle, coll: ITuCollection, max: number): ITuCollection;
    static PickStyleAny(s: TuPickInRectangleStyle): boolean;
    static PickStyleContained(s: TuPickInRectangleStyle): boolean;
    static PickStyleIntersectsBounds(s: TuPickInRectangleStyle): boolean;
    static PickStyleSelectableOnly(s: TuPickInRectangleStyle): boolean;
    RaiseChanged(hint: number, subhint: number, obj: any, oldI: number, oldVal: any, oldRect: CGRectangle, newI: number, newVal: any, newRect: CGRectangle): void;
    RaiseChanging(hint: number, subhint: number, obj: any): void;
    Redo(): void;
    Remove(obj?: TuObject): boolean;
    removeAllParts(obj: TuObject): void;
    removePart(p: ITuIdentifiablePart): void;
    ResumeRouting(old: boolean, moved: ITuCollection): void;
    SetModifiable(b: boolean): void;
    StartTransaction(): boolean;
    testSerialization(): TuDocument;
    Undo(): void;
    updateDocumentBounds(obj: TuObject): void;
    UpdateRoute(obj: ITuRoutable): void;
    updateViews(): void;
    get Changed$(): Event<EventHandler<TuChangedEventArgs>>;
    set Changed$(value: Event<EventHandler<TuChangedEventArgs>>);
    importEntries(entries: IEnumerableOrArray<TuObject> | IEnumerator<TuObject>): number;
    toArray(): TuObject[];
    removeAt(index: number): void;
}

export class TuLink extends TuStroke implements ITuLink, ITuGraphPart, ITuIdentifiablePart, ITuRoutable {
    get AbstractLink(): ITuLink;
    set AbstractLink(value: ITuLink);
    protected getAbstractLink(): ITuLink;
    protected setAbstractLink(value: ITuLink): void;
    get AdjustingStyle(): TuLinkAdjustingStyle;
    set AdjustingStyle(value: TuLinkAdjustingStyle);
    protected getAdjustingStyle(): TuLinkAdjustingStyle;
    protected setAdjustingStyle(value: TuLinkAdjustingStyle): void;
    get AvoidsNodes(): boolean;
    set AvoidsNodes(value: boolean);
    protected getAvoidsNodes(): boolean;
    protected setAvoidsNodes(value: boolean): void;
    get DraggableOrthogonalSegments(): boolean;
    set DraggableOrthogonalSegments(value: boolean);
    protected getDraggableOrthogonalSegments(): boolean;
    protected setDraggableOrthogonalSegments(value: boolean): void;
    protected getFirstPickIndex(): number;
    get FromNode(): ITuNode;
    protected getFromNode(): ITuNode;
    get FromPort(): ITuPort;
    set FromPort(value: ITuPort);
    protected getFromPort(): ITuPort;
    protected setFromPort(value: ITuPort): void;
    get TuObject(): TuObject;
    get IsSelfLoop(): boolean;
    protected getIsSelfLoop(): boolean;
    protected getLastPickIndex(): number;
    get NoClearPorts(): boolean;
    set NoClearPorts(value: boolean);
    getNoClearPorts(): boolean;
    setNoClearPorts(value: boolean): void;
    get Orthogonal(): boolean;
    set Orthogonal(value: boolean);
    protected getOrthogonal(): boolean;
    protected setOrthogonal(value: boolean): void;
    get PartID(): number;
    set PartID(value: number);
    protected getPartID(): number;
    protected setPartID(value: number): void;
    get Relinkable(): boolean;
    set Relinkable(value: boolean);
    protected getRelinkable(): boolean;
    protected setRelinkable(value: boolean): void;
    get Style(): TuStrokeStyle;
    set Style(value: TuStrokeStyle);
    protected getStyle(): TuStrokeStyle;
    protected setStyle(value: TuStrokeStyle): void;
    get ToNode(): ITuNode;
    protected getToNode(): ITuNode;
    get ToolTipText(): string;
    set ToolTipText(value: string);
    protected getToolTipText(): string;
    protected setToolTipText(value: string): void;
    get ToPort(): ITuPort;
    set ToPort(value: ITuPort);
    protected getToPort(): ITuPort;
    protected setToPort(value: ITuPort): void;
    get UserFlags(): number;
    set UserFlags(value: number);
    protected getUserFlags(): number;
    protected setUserFlags(value: number): void;
    get UserObject(): any;
    set UserObject(value: any);
    protected getUserObject(): any;
    protected setUserObject(value: any): void;
    constructor();
    protected addOrthoPoints(startFrom: CGPoint, fromDir: float, endTo: CGPoint, toDir: float): void;
    AddSelectionHandles(sel: TuSelection, selectedObj: TuObject): void;
    protected adjustPoints(startIndex: number, newFromPoint: CGPoint, endIndex: number, newToPoint: CGPoint): boolean;
    calculateRoute(): void;
    calculateStroke(): void;
    Changed(subhint: number, oldI: number, oldVal: any, oldRect: CGRectangle, newI: number, newVal: any, newRect: CGRectangle): void;
    ChangeValue(e: TuChangedEventArgs, undo: boolean): void;
    copyObject(env: TuCopyDictionary): TuObject;
    CopyObjectDelayed(env: TuCopyDictionary, newobj: TuObject): void;
    DoResize(view: TuView, origRect: CGRectangle, newPoint: CGPoint, whichHandle: number, evttype: TuInputState, min: CGSize, max: CGSize): void;
    protected getMidOrthoPosition(fromPosition: float, toPosition: float, vertical: boolean): float;
    getOtherNode(n: ITuNode): ITuNode;
    static GetOtherNode(l: ITuLink, n: ITuNode): ITuNode;
    getOtherPort(p: ITuPort): ITuPort;
    static GetOtherPort(l: ITuLink, p: ITuPort): ITuPort;
    GetToolTip(view: TuView): string;
    static isOrtho(link: ITuLink): boolean;
    protected modifyEndPoints(startIndex: number, newFromPoint: CGPoint, endIndex: number, newToPoint: CGPoint): boolean;
    protected OnLayerChanged(oldlayer: TuLayer, newlayer: TuLayer, mainObj: TuObject): void;
    onPortChanged(port: ITuPort, subhint: number, oldI: number, oldVal: number, oldRect: CGRectangle, newI: number, newVal: any, newRect: CGRectangle): void;
    portsOnLinkChanged(subhint: number, oldI: number, oldVal: any, oldRect: CGRectangle, newI: number, newVal: any, newRect: CGRectangle): void;
    protected rescalePoints(startIndex: number, newFromPoint: CGPoint, endIndex: number, newToPoint: CGPoint): boolean;
    protected stretchPoints(startIndex: number, newFromPoint: CGPoint, endIndex: number, newToPoint: CGPoint): boolean;
    unlink(): void;
    updateRoute(): void;
}

export interface ITuTool {
    View: TuView;
    canStart(): boolean;
    doCancelMouse(): void;
    doKeyDown(): void;
    doMouseDown(): void;
    doMouseHover(): void;
    doMouseMove(): void;
    doMouseUp(): void;
    doMouseWheel(): void;
    start(): void;
    stop(): void;
    GetType(): Type;
}

export enum TuViewSheetStyle {
    None = 0,
    Sheet = 1,
    WholeSheet = 2,
    SheetWidth = 3,
    SheetHeight = 4
}

export interface TuGridConfig {
    [key: string]: any;
}
export class TuGrid extends TuRectangle implements ITuDragSnapper {
    static readonly DefaultLineDashPattern: float[];
    static readonly DefaultMajorLineDashPattern: float[];
    get CellColors(): CGColor[][];
    set CellColors(value: CGColor[][]);
    protected getCellColors(): CGColor[][];
    protected setCellColors(value: CGColor[][]): void;
    get CellSize(): CGSize;
    set CellSize(value: CGSize);
    protected getCellSize(): CGSize;
    protected setCellSize(value: CGSize): void;
    get Extent(): CGRectangle;
    get IsUnbounded(): boolean;
    get LineColor(): CGColor;
    set LineColor(value: CGColor);
    protected getLineColor(): CGColor;
    protected setLineColor(value: CGColor): void;
    get LineDashPattern(): float[];
    set LineDashPattern(value: float[]);
    protected getLineDashPattern(): float[];
    protected setLineDashPattern(value: float[]): void;
    get LineDashStyle(): DashStyle;
    set LineDashStyle(value: DashStyle);
    protected getLineDashStyle(): DashStyle;
    protected setLineDashStyle(value: DashStyle): void;
    get LineWidth(): DashStyle;
    set LineWidth(value: DashStyle);
    protected getLineWidth(): DashStyle;
    protected setLineWidth(value: DashStyle): void;
    get MajorLineColor(): CGColor;
    set MajorLineColor(value: CGColor);
    protected getMajorLineColor(): CGColor;
    protected setMajorLineColor(value: CGColor): void;
    get MajorLineDashPattern(): float[];
    set MajorLineDashPattern(value: float[]);
    protected getMajorLineDashPattern(): float[];
    protected setMajorLineDashPattern(value: float[]): void;
    get MajorLineDashStyle(): DashStyle;
    set MajorLineDashStyle(value: DashStyle);
    protected getMajorLineDashStyle(): DashStyle;
    protected setMajorLineDashStyle(value: DashStyle): void;
    get MajorLineFrequency(): CGSize;
    set MajorLineFrequency(value: CGSize);
    protected getMajorLineFrequency(): CGSize;
    protected setMajorLineFrequency(value: CGSize): void;
    get MajorLineWidth(): float;
    set MajorLineWidth(value: float);
    protected getMajorLineWidth(): float;
    protected setMajorLineWidth(value: float): void;
    get Origin(): CGPoint;
    set Origin(value: CGPoint);
    protected getOrigin(): CGPoint;
    protected setOrigin(value: CGPoint): void;
    get OriginRelative(): boolean;
    set OriginRelative(value: boolean);
    protected getOriginRelative(): boolean;
    protected setOriginRelative(value: boolean): void;
    get PaintMinorScale(): float;
    set PaintMinorScale(value: float);
    protected getPaintMinorScale(): float;
    protected setPaintMinorScale(value: float): void;
    get SnapCellSpot(): Spot;
    set SnapCellSpot(value: Spot);
    protected getSnapCellSpot(): Spot;
    protected setSnapCellSpot(value: Spot): void;
    get SnapDrag(): TuViewSnapStyle;
    set SnapDrag(value: TuViewSnapStyle);
    protected getSnapDrag(): TuViewSnapStyle;
    protected setSnapDrag(value: TuViewSnapStyle): void;
    get SnapDragWhole(): boolean;
    set SnapDragWhole(value: boolean);
    protected getSnapDragWhole(): boolean;
    protected setSnapDragWhole(value: boolean): void;
    get SnapOpaque(): boolean;
    set SnapOpaque(value: boolean);
    protected getSnapOpaque(): boolean;
    protected setSnapOpaque(value: boolean): void;
    get SnapResize(): TuViewSnapStyle;
    set SnapResize(value: TuViewSnapStyle);
    protected getSnapResize(): TuViewSnapStyle;
    protected setSnapResize(value: TuViewSnapStyle): void;
    get Style(): TuViewGridStyle;
    set Style(value: TuViewGridStyle);
    protected getStyle(): TuViewGridStyle;
    protected setStyle(value: TuViewGridStyle): void;
    protected style(value?: TuViewGridStyle): TuViewGridStyle;
    get UnboundedSpots(): Spot;
    set UnboundedSpots(value: Spot);
    protected getUnboundedSpots(): Spot;
    protected setUnboundedSpots(value: Spot): void;
    protected unboundedSpots(value?: Spot): Spot;
    protected SetupControlDefaults(): void;
    canSnapPoint(p: CGPoint, obj: TuObject, view: TuView): boolean;
    ChangeValue(e: TuChangedEventArgs, undo: boolean): void;
    protected drawGridCrosses(g: Graphics, view: TuView, cross: CGSize, clipRect: CGRectangle): void;
    protected drawGridDots(g: Graphics, view: TuView, clipRect: CGRectangle): void;
    protected drawGridLines(g: Graphics, view: TuView, clipRect: CGRectangle): void;
    ExpandPaintBounds(rect: CGRectangle, view: TuView): CGRectangle;
    protected fillGrid(g: Graphics, view: TuView, clipRect: CGRectangle): void;
    findNearestGridPoint(p: CGPoint, obj: TuObject): CGPoint;
    GetShadowBrush(view: TuView): Brush;
    CreateElements(param: any): any[];
    Paint(g: Graphics, view: TuView): void;
    snapPoint(p: CGPoint, obj: TuObject, view: TuView): CGPoint;
}

type PageSettings = any;
export class TuSheet extends TuGroup {
    static readonly DefaultMarginColor: CGColor;
    get BackgroundImage(): TuImage;
    set BackgroundImage(value: TuImage);
    protected getBackgroundImage(): TuImage;
    protected setBackgroundImage(value: TuImage): void;
    get BackgroundImageSpot(): Spot;
    set BackgroundImageSpot(value: Spot);
    protected getBackgroundImageSpot(): Spot;
    protected setBackgroundImageSpot(value: Spot): void;
    get BottomRightMargin(): CGSize;
    set BottomRightMargin(value: CGSize);
    protected getBottomRightMargin(): CGSize;
    protected setBottomRightMargin(value: CGSize): void;
    get Grid(): TuGrid;
    set Grid(value: TuGrid);
    protected getGrid(): TuGrid;
    protected setGrid(value: TuGrid): void;
    get MarginBounds(): CGRectangle;
    protected getMarginBounds(): CGRectangle;
    get MarginColor(): CGColor;
    set MarginColor(value: CGColor);
    protected getMarginColor(): CGColor;
    protected setMarginColor(value: CGColor): void;
    get Paper(): TuRectangle;
    set Paper(value: TuRectangle);
    protected getPaper(): TuRectangle;
    protected setPaper(value: TuRectangle): void;
    get ShowsMargins(): boolean;
    set ShowsMargins(value: boolean);
    protected getShowsMargins(): boolean;
    protected setShowsMargins(value: boolean): void;
    get TopLeftMargin(): CGSize;
    set TopLeftMargin(value: CGSize);
    protected getTopLeftMargin(): CGSize;
    protected setTopLeftMargin(value: CGSize): void;
    constructor();
    ChangeValue(e: TuChangedEventArgs, undo: boolean): void;
    protected copyChildren(newgroup: TuGroup, env: TuCopyDictionary): void;
    protected createBackgroundImage(): TuImage;
    protected createGrid(): TuGrid;
    protected createPaper(): TuRectangle;
    ExpandPaintBounds(rect: CGRectangle, view: TuView): CGRectangle;
    findChild(name: string): TuObject;
    findName(child: TuObject): string;
    GetShadowBrush(view: TuView): Brush;
    layoutChildren(childchanged: TuObject): void;
    Remove(obj?: TuObject): boolean;
    updateBounds(ps: PageSettings, viewscale: float): void;
}
export {};

export interface ITuLayerCollectionContainer extends ITuLayerAbilities {
    Layers: TuLayerCollection;
    RaiseChanged(hint: number, subhint: number, obj: any, oldI: number, oldVal: any, oldRect: CGRectangle, newI: number, newVal: any, newRect: CGRectangle): void;
}

type Control = any;
export class TuControl extends TuObject {
    get ControlType(): Type;
    set ControlType(value: Type);
    protected getControlType(): Type;
    protected setControlType(value: Type): void;
    get EditedObject(): TuObject;
    set EditedObject(value: TuObject);
    protected getEditedObject(): TuObject;
    protected setEditedObject(value: TuObject): void;
    get Map(): Dictionary<TuView, Control>;
    Changed(subhint: number, oldI: number, oldVal: any, oldRect: CGRectangle, newI: number, newVal: any, newRect: CGRectangle): void;
    ChangeValue(e: TuChangedEventArgs, undo: boolean): void;
    copyObject(env: TuCopyDictionary): TuObject;
    createControl(view: TuView): Control;
    disposeControl(comp: Control, view: TuView): void;
    DoEndEdit(view: TuView): void;
    findControl(view: TuView): Control;
    getControl(view: TuView): Control;
    protected OnLayerChanged(oldlayer: TuLayer, newlayer: TuLayer, mainObj: TuObject): void;
    Paint(g: Graphics, view: TuView): void;
}
export {};

export class TuSelection extends TuCollection {
    GetType(): any;
    get Focused(): boolean;
    set Focused(value: boolean);
    protected getFocused(): boolean;
    protected setFocused(value: boolean): void;
    get HotSpot(): CGSize;
    set HotSpot(value: CGSize);
    protected getHotSpot(): CGSize;
    protected setHotSpot(value: CGSize): void;
    get Primary(): TuObject;
    protected getPrimary(): TuObject;
    get View(): TuView;
    protected getView(): TuView;
    constructor(view: TuView);
    Add(obj: TuObject): this;
    addAllSelectionHandles(): void;
    addHandle(obj: TuObject, handle: ITuHandle): void;
    addRange(coll: ITuCollection): this;
    Clear(): number;
    Contains(obj: TuObject): boolean;
    createBoundingHandle(obj: TuObject, selectedObj: TuObject): ITuHandle;
    createResizeHandle(obj: TuObject, selectedObj: TuObject, loc: CGPoint, handleid: number, filled: boolean): ITuHandle;
    findHandleByID(obj: TuObject, id: number): ITuHandle;
    getAnExistingHandle(obj: TuObject): ITuHandle;
    getHandleCount(obj: TuObject): number;
    onGotFocus(): void;
    onLostFocus(): void;
    Remove(obj?: TuObject): boolean;
    removeAllSelectionHandles(): void;
    removeHandles(obj: TuObject): void;
    select(obj: TuObject): TuObject;
    setView(stage: TuView): void;
    toggle(obj: TuObject): void;
}

export enum TuPickInRectangleStyle {
    AnyContained = 1,
    AnyIntersectsBounds = 2,
    SelectableOnlyContained = 257,
    SelectableOnlyIntersectsBounds = 258
}

export enum TuViewDisableKeys {
    None = 0,
    ArrowMove = 1,
    CancelDeselects = 2,
    SelectAll = 4,
    SelectsByFirstChar = 8,
    Delete = 16,
    Clipboard = 32,
    Edit = 64,
    Page = 128,
    Home = 256,
    End = 512,
    Undo = 1024,
    ArrowScroll = 2048,
    All = 4095
}

export class TuLayerCollectionEvents {
    static readonly InsertedLayer = 801;
    static readonly RemovedLayer = 802;
    static readonly MovedLayer = 803;
    static readonly ChangedDefault = 804;
    static readonly 801 = "InsertedLayer";
    static readonly 802 = "RemovedLayer";
    static readonly 803 = "MovedLayer";
    static readonly 804 = "ChangedDefault";
}
export class TuLayerCollection implements ICollection<TuLayer>, IEnumerable<TuLayer> {
    get Backwards(): TuLayerCollectionEnumerator;
    /**
     * @hidden
     */
    protected GetBackwards(): TuLayerCollectionEnumerator;
    get Bottom(): TuLayer;
    /**
     * @hidden
     */
    protected GetBottom(): TuLayer;
    get Count(): number;
    /**
     * @hidden
     */
    protected GetCount(): number;
    get Default(): TuLayer;
    set Default(value: TuLayer);
    /**
     * @hidden
     */
    protected GetDefault(): TuLayer;
    /**
     * @hidden
     */
    protected SetDefault(value: TuLayer): void;
    get Document(): TuDocument;
    /**
     * @hidden
     */
    protected GetDocument(): TuDocument;
    get IsInDocument(): boolean;
    get IsReadOnly(): boolean;
    get LayerCollectionContainer(): ITuLayerCollectionContainer;
    get Top(): TuLayer;
    get View(): TuView;
    Add(layer: TuLayer): this;
    Clear(): number;
    Contains(layer: TuLayer): boolean;
    CopyArray(): TuLayer[];
    CopyTo(array: TuLayer[], index?: number): TuLayer[];
    createNewLayerAfter(dest: TuLayer): TuLayer;
    CreateNewLayerBefore(dest: TuLayer): TuLayer;
    Find(identifier: any): TuLayer;
    GetEnumerator(): TuLayerCollectionEnumerator;
    GetObjectEnumerator(forward: boolean): TuLayerCollectionObjectEnumerator;
    IndexOf(layer: TuLayer): number;
    InsertAfter(dest: TuLayer, newlayer: TuLayer): void;
    InsertBefore(dest: TuLayer, newlayer: TuLayer): void;
    InsertDocumentLayerAfter(dest: TuLayer, doclayer: TuLayer): void;
    InsertDocumentLayerBefore(dest: TuLayer, doclayer: TuLayer): void;
    init(lcc: ITuLayerCollectionContainer): void;
    LayerAt(i: number): TuLayer;
    MoveAfter(dest: TuLayer, moving: TuLayer): void;
    MoveBefore(dest: TuLayer, moving: TuLayer): void;
    MoveInCollection(newidx: number, moving: TuLayer, oldidx: number, undoing: boolean): void;
    NextLayer(layer: TuLayer, relativeZorder: number): TuLayer;
    Remove(layer: TuLayer): boolean;
    SortByZOrder(c: TuCollection): void;
    SortByZOrder(a: TuObject[]): void;
    importEntries(entries: IEnumerableOrArray<TuLayer> | IEnumerator<TuLayer>): number;
    toArray(): TuLayer[];
    removeAt(index: number): void;
}

export enum TuPickInRectangleStyle {
    AnyContained = 1,
    AnyIntersectsBounds = 2,
    SelectableOnlyContained = 257,
    SelectableOnlyIntersectsBounds = 258
}
export class TuLayer extends TComponent implements ITuCollection {
    protected SetupControlDefaults(): void;
    get AllowCopy(): boolean;
    set AllowCopy(value: boolean);
    /**
     * @hidden
     */
    protected GetAllowCopy(): boolean;
    /**
     * @hidden
     */
    protected SetAllowCopy(value: boolean): void;
    get AllowDelete(): boolean;
    set AllowDelete(value: boolean);
    /**
     * @hidden
     */
    protected GetAllowDelete(): boolean;
    /**
     * @hidden
     */
    protected SetAllowDelete(value: boolean): void;
    get AllowEdit(): boolean;
    set AllowEdit(value: boolean);
    /**
     * @hidden
     */
    protected GetAllowEdit(): boolean;
    /**
     * @hidden
     */
    protected SetAllowEdit(value: boolean): void;
    get AllowInsert(): boolean;
    set AllowInsert(value: boolean);
    /**
     * @hidden
     */
    protected GetAllowInsert(): boolean;
    /**
     * @hidden
     */
    protected SetAllowInsert(value: boolean): void;
    get AllowLink(): boolean;
    set AllowLink(value: boolean);
    /**
     * @hidden
     */
    protected GetAllowLink(): boolean;
    /**
     * @hidden
     */
    protected SetAllowLink(value: boolean): void;
    get AllowMove(): boolean;
    set AllowMove(value: boolean);
    /**
     * @hidden
     */
    protected GetAllowMove(): boolean;
    /**
     * @hidden
     */
    protected SetAllowMove(value: boolean): void;
    get AllowPrint(): boolean;
    set AllowPrint(value: boolean);
    /**
     * @hidden
     */
    protected GetAllowPrint(): boolean;
    /**
     * @hidden
     */
    protected SetAllowPrint(value: boolean): void;
    get AllowReshape(): boolean;
    set AllowReshape(value: boolean);
    /**
     * @hidden
     */
    protected GetAllowReshape(): boolean;
    /**
     * @hidden
     */
    protected SetAllowReshape(value: boolean): void;
    get AllowResize(): boolean;
    set AllowResize(value: boolean);
    /**
     * @hidden
     */
    protected GetAllowResize(): boolean;
    /**
     * @hidden
     */
    protected SetAllowResize(value: boolean): void;
    get AllowSelect(): boolean;
    set AllowSelect(value: boolean);
    /**
     * @hidden
     */
    protected GetAllowSelect(): boolean;
    /**
     * @hidden
     */
    protected SetAllowSelect(value: boolean): void;
    get AllowView(): boolean;
    set AllowView(value: boolean);
    /**
     * @hidden
     */
    protected GetAllowView(): boolean;
    /**
     * @hidden
     */
    protected SetAllowView(value: boolean): void;
    get Backwards(): TuLayerEnumerator;
    /**
     * @hidden
     */
    protected GetBackwards(): TuLayerEnumerator;
    get Caches(): List<TuLayerCache>;
    get Count(): number;
    get Document(): TuDocument;
    get Identifier(): any;
    set Identifier(value: any);
    get IsEmpty(): boolean;
    get IsInDocument(): boolean;
    get IsInView(): boolean;
    get IsReadOnly(): boolean;
    get LayerCollectionContainer(): ITuLayerCollectionContainer;
    get LayerCollectionIndex(): number;
    set LayerCollectionIndex(value: number);
    get View(): TuView;
    Add(obj: TuObject): this;
    AddCollection(coll: ITuCollection, reparentLinks: boolean): ITuCollection;
    AddToLayer(obj: TuObject, undoing: boolean): void;
    CanCopyObjects(): boolean;
    CanDeleteObjects(): boolean;
    CanEditObjects(): boolean;
    CanInsertObjects(): boolean;
    CanLinkObjects(): boolean;
    CanMoveObjects(): boolean;
    CanPrintObjects(): boolean;
    CanReshapeObjects(): boolean;
    CanResizeObjects(): boolean;
    CanSelectObjects(): boolean;
    CanViewObjects(): boolean;
    ChangeLayer(obj: TuObject, oldLayer: TuLayer, undoing: boolean): void;
    Clear(): boolean;
    Contains(obj: TuObject): boolean;
    CopyArray(): TuObject[];
    CopyTo(array: TuObject[], index: number): TuObject[];
    FindCache(view: TuView): TuLayerCache;
    FindCache(r: CGRectangle): TuLayerCache;
    FindCache(r: CGPoint): TuLayerCache;
    GetEnumerator(): TuLayerEnumerator;
    IndexOf(obj: TuObject): number;
    InitializeIndices(): void;
    InsertIntoCaches(obj: TuObject): void;
    Init(lcc: ITuLayerCollectionContainer): void;
    MoveAfter(dest: TuObject, moving: TuObject): void;
    MoveBefore(dest: TuObject, moving: TuObject): void;
    MoveInLayer(newidx: number, obj: TuObject, oldidx: number, undoing: boolean): void;
    MoveInLayerInternal(newidx: number, obj: TuObject, oldidx: number): void;
    NextObject(obj: TuObject, relativeZorder: number): TuObject;
    CreateElements(params: any): any[];
    Paint(g: Graphics, view: TuView, clipRect: CGRectangle): void;
    PickObject(p: CGPoint, selectableOnly: boolean): TuObject;
    PickObjects(p: CGPoint, selectableOnly: boolean, coll: ITuCollection, max: number): ITuCollection;
    PickObjectsInRectangle(rect: CGRectangle, pickstyle: TuPickInRectangleStyle, coll: ITuCollection, max: number): ITuCollection;
    Remove(obj: TuObject): boolean;
    removeFromCaches(obj: TuObject): void;
    removeFromLayer(obj: TuObject, undoing: boolean): void;
    ResetCaches(): void;
    resetPickCache(): void;
    SetModifiable(b: boolean): void;
    updateCaches(obj: TuObject, evt: TuChangedEventArgs): void;
    importEntries(entries: IEnumerableOrArray<TuObject> | IEnumerator<TuObject>): number;
    ToArray(): TuObject[];
    RemoveAt(index: number): void;
}

export type PaintEventHandler = (sender: any, e: PaintEventArgs) => void;
export class PaintEventArgs {
    get ClipRectangle(): CGRectangle;
    set ClipRectangle(value: CGRectangle);
    protected getClipRectangle(): CGRectangle;
    protected setClipRectangle(value: CGRectangle): void;
    get Graphics(): Graphics;
    set Graphics(value: Graphics);
    protected getGraphics(): Graphics;
    protected setGraphics(value: Graphics): void;
    constructor(graphics: Graphics, clipRect: CGRectangle);
}
export class TuToolPanning extends TuTool {
    GetType(): Type;
    get Active(): boolean;
    set Active(value: boolean);
    protected getActive(): boolean;
    protected setActive(value: boolean): void;
    get AutoPan(): boolean;
    set AutoPan(value: boolean);
    protected getAutoPan(): boolean;
    protected setAutoPan(value: boolean): void;
    get Modal(): boolean;
    set Modal(value: boolean);
    protected getModal(): boolean;
    protected setModal(value: boolean): void;
    get Origin(): CGPoint;
    set Origin(value: CGPoint);
    protected getOrigin(): CGPoint;
    protected setOrigin(value: CGPoint): void;
    get OriginRect(): CGRectangle;
    protected getOriginRect(): CGRectangle;
    canStart(): boolean;
    doKeyDown(): void;
    doMouseDown(): void;
    doMouseMove(): void;
    doMouseUp(): void;
    doMouseWheel(): void;
    start(): void;
    stop(): void;
}

export class TuLabeledLink extends TuGroup implements ITuLink, ITuGraphPart, ITuIdentifiablePart, ITuRoutable {
    get AdjustingStyle(): TuLinkAdjustingStyle;
    set AdjustingStyle(value: TuLinkAdjustingStyle);
    protected getAdjustingStyle(): TuLinkAdjustingStyle;
    protected setAdjustingStyle(value: TuLinkAdjustingStyle): void;
    get AvoidsNodes(): boolean;
    set AvoidsNodes(value: boolean);
    protected getAvoidsNodes(): boolean;
    protected setAvoidsNodes(value: boolean): void;
    get Brush(): Brush;
    set Brush(value: Brush);
    protected getBrush(): Brush;
    protected setBrush(value: Brush): void;
    get Curviness(): float;
    set Curviness(value: float);
    protected getCurviness(): float;
    protected setCurviness(value: float): void;
    get FromArrow(): boolean;
    set FromArrow(value: boolean);
    protected getFromArrow(): boolean;
    protected setFromArrow(value: boolean): void;
    get FromArrowFilled(): boolean;
    set FromArrowFilled(value: boolean);
    protected getFromArrowFilled(): boolean;
    protected setFromArrowFilled(value: boolean): void;
    get FromArrowLength(): float;
    set FromArrowLength(value: float);
    protected getFromArrowLength(): float;
    protected setFromArrowLength(value: float): void;
    get FromArrowStyle(): TuStrokeArrowheadStyle;
    set FromArrowStyle(value: TuStrokeArrowheadStyle);
    protected getFromArrowStyle(): TuStrokeArrowheadStyle;
    protected setFromArrowStyle(value: TuStrokeArrowheadStyle): void;
    get FromArrowWidth(): float;
    set FromArrowWidth(value: float);
    protected getFromArrowWidth(): float;
    protected setFromArrowWidth(value: float): void;
    get FromLabel(): TuObject;
    set FromLabel(value: TuObject);
    protected getFromLabel(): TuObject;
    protected setFromLabel(value: TuObject): void;
    get FromLabelCentered(): boolean;
    set FromLabelCentered(value: boolean);
    protected getFromLabelCentered(): boolean;
    protected setFromLabelCentered(value: boolean): void;
    get FromNode(): ITuNode;
    protected getFromNode(): ITuNode;
    get FromPort(): ITuPort;
    set FromPort(value: ITuPort);
    protected getFromPort(): ITuPort;
    protected setFromPort(value: ITuPort): void;
    get TuObject(): TuObject;
    get Highlight(): boolean;
    set Highlight(value: boolean);
    protected getHighlight(): boolean;
    protected setHighlight(value: boolean): void;
    get HighlightPen(): Pen;
    set HighlightPen(value: Pen);
    protected getHighlightPen(): Pen;
    protected setHighlightPen(value: Pen): void;
    get HighlightPenColor(): CGColor;
    set HighlightPenColor(value: CGColor);
    protected getHighlightPenColor(): CGColor;
    protected setHighlightPenColor(value: CGColor): void;
    get HighlightPenWidth(): float;
    set HighlightPenWidth(value: float);
    protected getHighlightPenWidth(): float;
    protected setHighlightPenWidth(value: float): void;
    get HighlightWhenSelected(): boolean;
    set HighlightWhenSelected(value: boolean);
    protected getHighlightWhenSelected(): boolean;
    protected setHighlightWhenSelected(value: boolean): void;
    get MidLabel(): TuObject;
    set MidLabel(value: TuObject);
    protected getMidLabel(): TuObject;
    protected setMidLabel(value: TuObject): void;
    get MidLabelCentered(): boolean;
    set MidLabelCentered(value: boolean);
    protected getMidLabelCentered(): boolean;
    protected setMidLabelCentered(value: boolean): void;
    get Orthogonal(): boolean;
    set Orthogonal(value: boolean);
    protected getOrthogonal(): boolean;
    protected setOrthogonal(value: boolean): void;
    get PartID(): number;
    set PartID(value: number);
    protected getPartID(): number;
    protected setPartID(value: number): void;
    get Pen(): Pen;
    set Pen(value: Pen);
    protected getPen(): Pen;
    protected setPen(value: Pen): void;
    get PenColor(): CGColor;
    set PenColor(value: CGColor);
    protected getPenColor(): CGColor;
    protected setPenColor(value: CGColor): void;
    get PenWidth(): float;
    set PenWidth(value: float);
    protected getPenWidth(): float;
    protected setPenWidth(value: float): void;
    get RealLink(): TuLink;
    set RealLink(value: TuLink);
    protected getRealLink(): TuLink;
    protected setRealLink(value: TuLink): void;
    get Relinkable(): boolean;
    set Relinkable(value: boolean);
    protected getRelinkable(): boolean;
    protected setRelinkable(value: boolean): void;
    protected getReshapable(): boolean;
    protected setReshapable(value: boolean): this;
    protected getResizable(): boolean;
    protected setResizable(value: boolean): this;
    protected getSelectionObject(): TuObject;
    protected getShadowed(): boolean;
    protected setShadowed(value: boolean): this;
    get Style(): TuStrokeStyle;
    set Style(value: TuStrokeStyle);
    protected getStyle(): TuStrokeStyle;
    protected setStyle(value: TuStrokeStyle): void;
    get ToArrow(): boolean;
    set ToArrow(value: boolean);
    protected getToArrow(): boolean;
    protected setToArrow(value: boolean): void;
    get ToArrowFilled(): boolean;
    set ToArrowFilled(value: boolean);
    protected getToArrowFilled(): boolean;
    protected setToArrowFilled(value: boolean): void;
    get ToArrowLength(): float;
    set ToArrowLength(value: float);
    protected getToArrowLength(): float;
    protected setToArrowLength(value: float): void;
    get ToArrowShaftLength(): float;
    set ToArrowShaftLength(value: float);
    protected getToArrowShaftLength(): float;
    protected setToArrowShaftLength(value: float): void;
    get ToArrowStyle(): TuStrokeArrowheadStyle;
    set ToArrowStyle(value: TuStrokeArrowheadStyle);
    protected getToArrowStyle(): TuStrokeArrowheadStyle;
    protected setToArrowStyle(value: TuStrokeArrowheadStyle): void;
    get ToArrowWidth(): float;
    set ToArrowWidth(value: float);
    protected getToArrowWidth(): float;
    protected setToArrowWidth(value: float): void;
    get ToLabel(): TuObject;
    set ToLabel(value: TuObject);
    protected getToLabel(): TuObject;
    protected setToLabel(value: TuObject): void;
    get ToLabelCentered(): boolean;
    set ToLabelCentered(value: boolean);
    protected getToLabelCentered(): boolean;
    protected setToLabelCentered(value: boolean): void;
    get ToNode(): ITuNode;
    protected getToNode(): ITuNode;
    get ToolTipText(): string;
    set ToolTipText(value: string);
    protected getToolTipText(): string;
    protected setToolTipText(value: string): void;
    get ToPort(): ITuPort;
    set ToPort(value: ITuPort);
    protected getToPort(): ITuPort;
    protected setToPort(value: ITuPort): void;
    get UserFlags(): number;
    set UserFlags(value: number);
    protected getUserFlags(): number;
    protected setUserFlags(value: number): void;
    get UserObject(): any;
    set UserObject(value: any);
    protected getUserObject(): any;
    protected setUserObject(value: any): void;
    constructor();
    calculateRoute(): void;
    calculateStroke(): void;
    ChangeValue(e: TuChangedEventArgs, undo: boolean): void;
    protected copyChildren(newgroup: TuGroup, env: TuCopyDictionary): void;
    createRealLink(): TuLink;
    findChild(name: string): TuObject;
    findName(child: TuObject): string;
    getOtherNode(n: ITuNode): ITuNode;
    getOtherPort(p: ITuPort): ITuPort;
    GetToolTip(view: TuView): string;
    layoutChildren(childchanged: TuObject): void;
    protected layoutMidLabel(childchanged: TuObject): void;
    protected moveChildren(old: CGRectangle): void;
    onPortChanged(port: ITuPort, subhint: number, oldI: number, oldVal: any, oldRect: CGRectangle, newI: number, newVal: any, newRect: CGRectangle): void;
    Pick(p: CGPoint, selectableOnly: boolean): TuObject;
    protected positionEndLabel(lab: TuObject, atEnd: boolean, a: CGPoint, b: CGPoint, c: CGPoint): void;
    protected positionMidLabel(lab: TuObject, a: CGPoint, b: CGPoint): void;
    Remove(obj: TuObject): boolean;
    unlink(): void;
    updateRoute(): void;
}

export interface ITuLink extends ITuGraphPart {
    FromNode: ITuNode;
    FromPort: ITuPort;
    ToNode: ITuNode;
    ToPort: ITuPort;
    getOtherNode(n: ITuNode): ITuNode;
    getOtherPort(p: ITuPort): ITuPort;
    onPortChanged(port: ITuPort, subhint: number, oldI: number, oldVal: any, oldRect: CGRectangle, newI: number, newVal: any, newRect: CGRectangle): void;
    unlink(): void;
}

export enum TuViewScrollBarVisibility {
    Hide = 0,
    Show = 1,
    IfNeeded = 2
}

export interface TuCollectionConfig {
    internalChecksForDuplicates?: boolean;
    entries?: TuObject[];
}
export class TuCollection implements ICollection<TuObject>, ITuCollection, IList<TuObject> {
    myChanges: number;
    constructor(config?: TuCollectionConfig);
    Get(index: number): TuObject;
    Set(index: number, value: TuObject): void;
    IndexOf(item: TuObject): number;
    Insert(index: number, item: TuObject): void;
    RemoveAt(index: number): void;
    IsEndless?: boolean;
    importEntries(entries: IEnumerableOrArray<TuObject> | IEnumerator<TuObject>): number;
    get Backwards(): TuCollectionEnumerator;
    protected GetBackwards(): TuCollectionEnumerator;
    get Count(): int;
    get First(): TuObject;
    get InternalChecksForDuplicates(): boolean;
    set InternalChecksForDuplicates(value: boolean);
    get IsEmpty(): boolean;
    get IsReadOnly(): boolean;
    get Last(): TuObject;
    Add(obj: TuObject): this;
    AddRange(coll: ITuCollection): this;
    Clear(): number;
    Contains(obj: TuObject): boolean;
    CopyArray(): TuObject[];
    CopyTo(array: TuObject[], index: int): void;
    static FastRemove<T>(a: List<T>, o: T): number;
    GetEnumerator(): TuCollectionEnumerator;
    Remove(obj: TuObject): boolean;
    Sort(comp: IComparer<TuObject>): void;
}

interface TuCopyDictionaryConfig {
    [key: string]: any;
}
export class TuCopyDictionary extends Dictionary<any, any> {
    get Delayeds(): TuCopyDelayedsCollection;
    protected getDelayeds(): TuCopyDelayedsCollection;
    get DestinationDocument(): TuDocument;
    protected getDestinationDocument(): TuDocument;
    set DestinationDocument(value: TuDocument);
    protected setDestinationDocument(value: TuDocument): void;
    get SourceCollection(): ITuCollection;
    protected getSourceCollection(): ITuCollection;
    set SourceCollection(value: ITuCollection);
    protected setSourceCollection(value: ITuCollection): void;
    constructor(config?: TuCopyDictionaryConfig);
    copy(obj: TuObject): TuObject;
    CopyComplete(obj: TuObject): TuObject;
    finishDelayedCopies(): void;
    Get(key: any): any;
}
export {};

export interface ITuLabeledPart {
    Text: string;
}

export interface ITuPort extends ITuGraphPart {
    DestinationLinks: IEnumerable<ITuLink>;
    DestinationLinksCount: number;
    Links: IEnumerable<ITuLink>;
    LinksCount: number;
    Node: ITuNode;
    SourceLinks: IEnumerable<ITuLink>;
    SourceLinksCount: number;
    addDestinationLink(l: ITuLink): void;
    addSourceLink(l: ITuLink): void;
    canLinkFrom(): boolean;
    canLinkTo(): boolean;
    clearLinks(): void;
    containsLink(l: ITuLink): boolean;
    copyLinksArray(): ITuLink[];
    isValidLink(toPort: ITuPort): boolean;
    onLinkChanged(link: ITuLink, subhint: number, oldI: number, oldVal: number, oldRect: CGRectangle, newI: number, newVal: any, newRect: CGRectangle): void;
    removeLink(l: ITuLink): void;
}

export class TuObjectEventArgs extends TuInputEventArgs {
    get TuObject(): TuObject;
    set TuObject(value: TuObject);
    constructor(obj: TuObject, evt: TuInputEventArgs);
}

export class TuChangedEventArgs implements ITuUndoableEdit {
        get Document(): TuDocument;
        set Document(value: TuDocument);
        /**
            * @hidden
            */
        protected GetDocument(): TuDocument;
        /**
            * @hidden
            * @param value
            */
        protected SetDocument(value: TuDocument): void;
        get TuObject(): TuObject;
        /**
            * @hidden
            */
        protected GetTuObject(): TuObject;
        get Hint(): number;
        set Hint(value: number);
        /**
            * @hidden
            */
        protected GetEvent(): number;
        /**
            * @hidden
            * @param value
            */
        protected SetEvent(value: number): void;
        get IsBeforeChanging(): boolean;
        set IsBeforeChanging(value: boolean);
        /**
            * @hidden
            */
        protected GetIsBeforeChanging(): boolean;
        /**
            * @hidden
            * @param value
            */
        protected SetIsBeforeChanging(value: boolean): void;
        get NewInt(): number;
        set NewInt(value: number);
        /**
            * @hidden
            */
        protected GetNewInt(): number;
        /**
            * @hidden
            * @param value
            */
        protected SetNewInt(value: number): void;
        get NewRect(): CGRectangle;
        set NewRect(value: CGRectangle);
        /**
            * @hidden
            */
        protected getNewRect(): CGRectangle;
        /**
            * @hidden
            * @param value
            */
        protected setNewRect(value: CGRectangle): void;
        get NewValue(): any;
        set NewValue(value: any);
        /**
            * @hidden
            */
        protected getNewValue(): any;
        /**
            * @hidden
            * @param value
            */
        protected setNewValue(value: any): void;
        get Object(): any;
        set Object(value: any);
        /**
            * @hidden
            */
        protected getObject(): any;
        /**
            * @hidden
            * @param value
            */
        protected setObject(value: any): void;
        get OldInt(): number;
        set OldInt(value: number);
        /**
            * @hidden
            */
        protected getOldInt(): number;
        /**
            * @hidden
            * @param value
            */
        protected setOldInt(value: number): void;
        get OldRect(): CGRectangle;
        set OldRect(value: CGRectangle);
        /**
            * @hidden
            */
        protected getOldRect(): CGRectangle;
        /**
            * @hidden
            * @param value
            */
        protected setOldRect(value: CGRectangle): void;
        get OldValue(): any;
        set OldValue(value: any);
        /**
            * @hidden
            */
        protected getOldValue(): any;
        /**
            * @hidden
            * @param value
            */
        protected setOldValue(value: any): void;
        get PresentationName(): string;
        /**
            * @hidden
            */
        protected getPresentationName(): string;
        get SubHint(): number;
        set SubHint(value: number);
        /**
            * @hidden
            */
        protected getSubEvent(): number;
        /**
            * @hidden
            * @param value
            */
        protected setSubEvent(value: number): void;
        constructor(e?: TuChangedEventArgs);
        CanRedo(): boolean;
        CanUndo(): boolean;
        Clear(): void;
        FindBeforeChangingEdit(): TuChangedEventArgs;
        getFloat(undo: boolean): float;
        getInt(undo: boolean): number;
        getPoint(undo: boolean): CGPoint;
        getRect(undo: boolean): CGRectangle;
        getSize(undo: boolean): CGSize;
        getValue<T>(undo: boolean): T;
        Redo(): void;
        Undo(): void;
}

export class TuSelectionEventArgs {
    get TuObject(): TuObject;
    set TuObject(value: TuObject);
    constructor(obj: TuObject);
}

export class EventArgs {
    static readonly Empty: EventArgs;
    constructor();
}

export class ScrollEventArgs extends EventArgs {
    NewValue: number;
    OldValue: number;
    ScrollOrientation: ScrollOrientation;
    Type: ScrollEventType;
    constructor(type: ScrollEventType, newValue: number);
    constructor(type: ScrollEventType, newValue: number, scroll: ScrollOrientation);
    constructor(type: ScrollEventType, oldValue: number, newValue: number);
    constructor(type: ScrollEventType, oldValue: number, newValue: number, scroll: ScrollOrientation);
}

export interface ITuLayerAbilities {
    AllowCopy: boolean;
    AllowDelete: boolean;
    AllowEdit: boolean;
    AllowInsert: boolean;
    AllowLink: boolean;
    AllowMove: boolean;
    AllowReshape: boolean;
    AllowResize: boolean;
    AllowSelect: boolean;
    CanCopyObjects(): boolean;
    CanDeleteObjects(): boolean;
    CanEditObjects(): boolean;
    CanInsertObjects(): boolean;
    CanLinkObjects(): boolean;
    CanMoveObjects(): boolean;
    CanReshapeObjects(): boolean;
    CanResizeObjects(): boolean;
    CanSelectObjects(): boolean;
    SetModifiable(b: boolean): void;
}

export enum Border3DStyle {
    RaisedOuter = 1,
    SunkenOuter = 2,
    RaisedInner = 4,
    Raised = 5,
    Etched = 6,
    SunkenInner = 8,
    Bump = 9,
    Sunken = 10,
    Adjust = 8192,
    Flat = 16394
}

export class Cursor {
    static Position: CGPoint;
    static Current: Cursor;
    static Clip: CGRectangle;
    get Name(): string;
    constructor(name: string);
}

export enum BorderStyle {
    None = 0,
    FixedSingle = 1,
    Fixed3D = 2
}

export class PrintDocument {
    PrintPage: Event<PrintPageEventHandler>;
    DocumentName: string;
    DefaultPageSettings: PageSettings;
    print(): void;
}

export class CancelEventArgs {
    Cancel: boolean;
    constructor(cancel?: boolean);
}

export enum Keys {
    Modifiers = -65536,
    None = 0,
    LButton = 1,
    RButton = 2,
    Cancel = 3,
    MButton = 4,
    XButton1 = 5,
    XButton2 = 6,
    Back = 8,
    Tab = 9,
    LineFeed = 10,
    Clear = 12,
    Return = 13,
    Enter = 13,
    ShiftKey = 16,
    ControlKey = 17,
    Menu = 18,
    Pause = 19,
    Capital = 20,
    CapsLock = 20,
    KanaMode = 21,
    HanguelMode = 21,
    HangulMode = 21,
    JunjaMode = 23,
    FinalMode = 24,
    HanjaMode = 25,
    KanjiMode = 25,
    Escape = 27,
    IMEConvert = 28,
    IMENonconvert = 29,
    IMEAccept = 30,
    IMEAceept = 30,
    IMEModeChange = 31,
    Space = 32,
    Prior = 33,
    PageUp = 33,
    Next = 34,
    PageDown = 34,
    End = 35,
    Home = 36,
    Left = 37,
    Up = 38,
    Right = 39,
    Down = 40,
    Select = 41,
    Print = 42,
    Execute = 43,
    Snapshot = 44,
    PrintScreen = 44,
    Insert = 45,
    Delete = 46,
    Help = 47,
    D0 = 48,
    D1 = 49,
    D2 = 50,
    D3 = 51,
    D4 = 52,
    D5 = 53,
    D6 = 54,
    D7 = 55,
    D8 = 56,
    D9 = 57,
    A = 65,
    B = 66,
    C = 67,
    D = 68,
    E = 69,
    F = 70,
    G = 71,
    H = 72,
    I = 73,
    J = 74,
    K = 75,
    L = 76,
    M = 77,
    N = 78,
    O = 79,
    P = 80,
    Q = 81,
    R = 82,
    S = 83,
    T = 84,
    U = 85,
    V = 86,
    W = 87,
    X = 88,
    Y = 89,
    Z = 90,
    LWin = 91,
    RWin = 92,
    Apps = 93,
    Sleep = 95,
    NumPad0 = 96,
    NumPad1 = 97,
    NumPad2 = 98,
    NumPad3 = 99,
    NumPad4 = 100,
    NumPad5 = 101,
    NumPad6 = 102,
    NumPad7 = 103,
    NumPad8 = 104,
    NumPad9 = 105,
    Multiply = 106,
    Add = 107,
    Separator = 108,
    Subtract = 109,
    Decimal = 110,
    Divide = 111,
    F1 = 112,
    F2 = 113,
    F3 = 114,
    F4 = 115,
    F5 = 116,
    F6 = 117,
    F7 = 118,
    F8 = 119,
    F9 = 120,
    F10 = 121,
    F11 = 122,
    F12 = 123,
    F13 = 124,
    F14 = 125,
    F15 = 126,
    F16 = 127,
    F17 = 128,
    F18 = 129,
    F19 = 130,
    F20 = 131,
    F21 = 132,
    F22 = 133,
    F23 = 134,
    F24 = 135,
    NumLock = 144,
    Scroll = 145,
    LShiftKey = 160,
    RShiftKey = 161,
    LControlKey = 162,
    RControlKey = 163,
    LMenu = 164,
    RMenu = 165,
    BrowserBack = 166,
    BrowserForward = 167,
    BrowserRefresh = 168,
    BrowserStop = 169,
    BrowserSearch = 170,
    BrowserFavorites = 171,
    BrowserHome = 172,
    VolumeMute = 173,
    VolumeDown = 174,
    VolumeUp = 175,
    MediaNextTrack = 176,
    MediaPreviousTrack = 177,
    MediaStop = 178,
    MediaPlayPause = 179,
    LaunchMail = 180,
    SelectMedia = 181,
    LaunchApplication1 = 182,
    LaunchApplication2 = 183,
    OemSemicolon = 186,
    Oem1 = 186,
    Oemplus = 187,
    Oemcomma = 188,
    OemMinus = 189,
    OemPeriod = 190,
    OemQuestion = 191,
    Oem2 = 191,
    Oemtilde = 192,
    Oem3 = 192,
    OemOpenBrackets = 219,
    Oem4 = 219,
    OemPipe = 220,
    Oem5 = 220,
    OemCloseBrackets = 221,
    Oem6 = 221,
    OemQuotes = 222,
    Oem7 = 222,
    Oem8 = 223,
    OemBackslash = 226,
    Oem102 = 226,
    ProcessKey = 229,
    Packet = 231,
    Attn = 246,
    Crsel = 247,
    Exsel = 248,
    EraseEof = 249,
    Play = 250,
    Zoom = 251,
    NoName = 252,
    Pa1 = 253,
    OemClear = 254,
    KeyCode = 65535,
    Shift = 65536,
    Control = 131072,
    Alt = 262144
}

export class MouseEventArgs extends EventArgs {
    constructor(button: MouseButtons, clicks: number, x: float, y: float, delta: float, htmlEventObject?: MouseEvent);
    get Button(): MouseButtons;
    get Clicks(): number;
    get X(): float;
    get Y(): float;
    get Delta(): number;
    get Location(): CGPoint;
    get HtmlEventObject(): MouseEvent;
}

export enum DialogResult {
    None = 0,
    OK = 1,
    Cancel = 2,
    Abort = 3,
    Retry = 4,
    Ignore = 5,
    Yes = 6,
    No = 7
}

export class PrintPageEventArgs extends EventArgs {
    MarginBounds: CGRectangle;
    Graphics: Graphics;
    PageSettings: PageSettings;
    HasMorePages: boolean;
}

export class TuInvalidateCollection extends List<CGRectangle> {
    getInvalidateRectangle(): CGRectangle;
    get IsEmpty(): boolean;
}

export class TuChangedEventHandler extends Delegate<(sender: any, e: TuChangedEventArgs) => void> {
}

export class PropertyChangedEventArgs {
    PropertyName: string;
    constructor(propertyName: string);
}

export class KeyEventArgs extends EventArgs {
    get Alt(): boolean;
    get Control(): boolean;
    get Modifiers(): Keys;
    get Shift(): boolean;
    constructor(keyData: Keys);
    get Handled(): boolean;
    set Handled(value: boolean);
    get KeyCode(): Keys;
    get KeyValue(): number;
    get KeyData(): Keys;
    get SuppressKeyPress(): boolean;
    set SuppressKeyPress(value: boolean);
}

export class TuObjectEnterLeaveEventArgs extends TuInputEventArgs {
    get From(): TuObject;
    get To(): TuObject;
    constructor(from: TuObject, to: TuObject, evt: TuInputEventArgs);
}

export abstract class TuXmlTransformer<T extends TuObject> {
    protected View: TuView;
    protected Object: T;
    constructor();
    WriteStartElement(name: string): void;
    WriteEndElement(): void;
    WriteAttrVal(name: string, val: any): string;
    WriteStyleAttrVal(name: string, val: any): string;
    WriteTextBody(text: string): void;
    WriteControl(control: Control<any>): void;
    WriteComponent(text: any): void;
    InvalidateCache(): void;
    abstract DecideCache(view: TuView, obj: T): void;
    abstract GenerateElement(view: TuView, obj: T): boolean;
    abstract GenerateAttributes(view: TuView, obj: T): void;
    abstract GenerateBody(view: TuView, obj: T): void;
    abstract GenerateElementFinish(view: TuView, obj: T): void;
    Render(result: any[], view: TuView, obj: T): any;
}

export enum MouseButtons {
    None = 0,
    Left = 1048576,
    Right = 2097152,
    Middle = 4194304,
    XButton1 = 8388608,
    XButton2 = 16777216
}

export enum TuInputState {
    Cancel = 0,
    Start = 1,
    Continue = 2,
    Finish = 3
}

export abstract class TuShape extends TuObject {
    static PenInfo_Black: TuPenInfo;
    static BrushInfo_Black: TuBrushInfo;
    static BrushInfo_Gray: TuBrushInfo;
    static BrushInfo_LightGray: TuBrushInfo;
    static BrushInfo_White: TuBrushInfo;
    myPath: GraphicsPath;
    myBrush: Brush;
    protected SetupControlDefaults(): void;
    protected getBounds(): CGRectangle;
    protected setBounds(value: CGRectangle): void;
    get Brush(): Brush;
    set Brush(value: Brush);
    protected getBrush(): Brush;
    protected setBrush(value: Brush): void;
    get BrushColor(): CGColor;
    set BrushColor(value: CGColor);
    protected getBrushColor(): CGColor;
    protected setBrushColor(value: CGColor): void;
    get BrushFocusScales(): CGSize;
    set BrushFocusScales(value: CGSize);
    protected getBrushFocusScales(): CGSize;
    protected setBrushFocusScales(value: CGSize): void;
    get BrushForeColor(): CGColor;
    set BrushForeColor(value: CGColor);
    protected getBrushForeColor(): CGColor;
    protected setBrushForeColor(value: CGColor): void;
    protected getBrushInfo(): TuBrushInfo;
    protected setBrushInfo(value: TuBrushInfo): void;
    get BrushMidColor(): CGColor;
    set BrushMidColor(value: CGColor);
    protected getBrushMidColor(): CGColor;
    protected setBrushMidColor(value: CGColor): void;
    get BrushMidFraction(): float;
    set BrushMidFraction(value: float);
    protected getBrushMidFraction(): float;
    protected setBrushMidFraction(value: float): void;
    get BrushPoint(): CGPoint;
    set BrushPoint(value: CGPoint);
    protected getBrushPoint(): CGPoint;
    protected setBrushPoint(value: CGPoint): void;
    get BrushStartPoint(): CGPoint;
    set BrushStartPoint(value: CGPoint);
    protected getBrushStartPoint(): CGPoint;
    protected setBrushStartPoint(value: CGPoint): void;
    get BrushStyle(): TuBrushStyle;
    set BrushStyle(value: TuBrushStyle);
    protected getBrushStyle(): TuBrushStyle;
    protected setBrushStyle(value: TuBrushStyle): void;
    get Pen(): Pen;
    set Pen(value: Pen);
    protected getPen(): Pen;
    protected setPen(value: Pen): void;
    get PenColor(): CGColor;
    set PenColor(value: CGColor);
    protected getPenColor(): CGColor;
    protected setPenColor(value: CGColor): void;
    get PenInfo(): TuPenInfo;
    set PenInfo(value: TuPenInfo);
    protected getPenInfo(): TuPenInfo;
    protected setPenInfo(value: TuPenInfo): void;
    get PenWidth(): float;
    set PenWidth(value: float);
    protected getPenWidth(): float;
    protected setPenWidth(value: float): void;
    ChangeValue(e: TuChangedEventArgs, undo: boolean): void;
    ContainedByRectangle(r: CGRectangle): boolean;
    containsPoint(p: CGPoint): boolean;
    copyObject(env: TuCopyDictionary): TuObject;
    disposePath(path: GraphicsPath): void;
    static DrawArc(g: Graphics, view: TuView, pen: Pen, x: float, y: float, width: float, height: float, startangle: float, sweepangle: float): void;
    static DrawBezier(g: Graphics, view: TuView, pen: Pen, x1: float, y1: float, x2: float, y2: float, x3: float, y3: float, x4: float, y4: float): void;
    static DrawEllipse(g: Graphics, view: TuView, pen: Pen, brush: Brush, x: float, y: float, width: float, height: float): void;
    static DrawHtmlLine(result: any[], view: TuView, pen: Pen, ax: float, ay: float, bx: float, by: float): void;
    static DrawSvgLine(result: any[], view: TuView, pen: Pen, x1: float, y1: float, x2: float, y2: float): void;
    static DrawLine(g: Graphics, view: TuView, pen: Pen, x1: float, y1: float, x2: float, y2: float): void;
    static DrawLines(g: Graphics, view: TuView, pen: Pen, points: CGPoint[]): void;
    static DrawPath(g: Graphics, view: TuView, pen: Pen, brush: Brush, path: GraphicsPath): void;
    static DrawPie(g: Graphics, view: TuView, pen: Pen, brush: Brush, x: float, y: float, width: float, height: float, startangle: float, sweepangle: float): void;
    static DrawHtmlPolygon(result: any[], view: TuView, pen: Pen, brush: Brush, points: CGPoint[]): void;
    static DrawSvgPolygon(result: any[], view: TuView, pen: Pen, brush: Brush, points: CGPoint[]): void;
    static DrawPolygon(g: Graphics, view: TuView, pen: Pen, brush: Brush, points: CGPoint[]): void;
    static DrawHtmlRectangle(result: any[], view: TuView, pen: Pen, brush: Brush, x: float, y: float, width: float, height: float): void;
    static DrawSvgRectangle(result: any[], view: TuView, pen: Pen, brush: Brush, x: float, y: float, width: float, height: float): void;
    static DrawRectangle(g: Graphics, view: TuView, pen: Pen, brush: Brush, x: float, y: float, width: float, height: float): void;
    static DrawRoundedRectangle(g: Graphics, view: TuView, pen: Pen, brush: Brush, x: float, y: float, w: float, h: float, cw: float, ch: float): void;
    ExpandPaintBounds(rect: CGRectangle, view: TuView): CGRectangle;
    fillDoubleEdge(start: CGColor, center: CGColor, spot: Spot): void;
    fillDoubleEdge(start: CGColor): void;
    fillEllipseGradient(start: CGColor, center: CGColor): void;
    fillEllipseGradient(color: CGColor): void;
    fillHalfGradient(color: CGColor): void;
    fillHalfGradient(color: CGColor, spot: Spot): void;
    fillHalfGradient(start: CGColor, mid: CGColor, spot: Spot): void;
    fillMiddleGradient(color: CGColor): void;
    fillMiddleGradient(color: CGColor, spot: Spot): void;
    fillMiddleGradient(color: CGColor, mid: CGColor, spot: Spot): void;
    fillMiddleGradient(start: CGColor, mid: CGColor, end: CGColor, spot: Spot): void;
    fillRectangleGradient(color: CGColor): void;
    fillRectangleGradient(start: CGColor, center: CGColor): void;
    fillShadedGradient(color: CGColor): void;
    fillShadedGradient(color: CGColor, spot: Spot): void;
    fillShadedGradient(start: CGColor, color: CGColor, spot: Spot): void;
    fillShapeFringe(start: CGColor): void;
    fillShapeFringe(start: CGColor, center: CGColor): void;
    fillShapeGradient(color: CGColor): void;
    fillShapeGradient(start: CGColor, center: CGColor): void;
    fillShapeHighlight(start: CGColor): void;
    fillShapeHighlight(start: CGColor, center: CGColor): void;
    fillSimpleGradient(color: CGColor): void;
    fillSimpleGradient(color: CGColor, spot: Spot): void;
    fillSimpleGradient(start: CGColor, end: CGColor, spot: Spot): void;
    fillSingleEdge(start: CGColor): void;
    fillSingleEdge(start: CGColor, center: CGColor, spot: Spot): void;
    static GetBrushInfo(b: Brush, shapeorpath: TuShape | GraphicsPath): TuBrushInfo;
    GetNearestIntersectionPoint(p1: CGPoint, p2: CGPoint, result: Out<CGPoint>): boolean;
    protected getPath(): GraphicsPath;
    static GetPenColor(p: Pen, def: CGColor): CGColor;
    static GetPenInfo(p: Pen): TuPenInfo;
    static GetPenWidth(pen: Pen, view: TuView): number;
    static GetPenWidth(pen: Pen): number;
    makePath(): GraphicsPath;
    static ModifyBrushStyle(info: TuBrushInfo, style: TuBrushStyle): TuBrushInfo;
    static NewPen(color: CGColor, width: number): Pen;
    Paint(g: Graphics, view: TuView): void;
    paintPath(g: Graphics, view: TuView, path: GraphicsPath): void;
    paintPolygon(g: Graphics, view: TuView, pts: CGPoint[]): void;
    protected resetPath(): void;
    static ToBrushStyle(s: HatchStyle): TuBrushStyle;
    static ToHatchStyle(s: TuBrushStyle): HatchStyle;
}

export class TuPartInfo {
    get ContextClick(): string;
    set ContextClick(value: string);
    get DoubleClick(): string;
    set DoubleClick(value: string);
    get ID(): string;
    set ID(value: string);
    get(p: string): any;
    set(p: string, value: any): void;
    get SingleClick(): string;
    set SingleClick(value: string);
    get Text(): string;
    set Text(value: string);
    static DQuote(s: string): string;
    equals(goPartInfo: TuPartInfo): boolean;
    getProperty(p: string): any;
    static Quote(s: string, quote: string): string;
    setProperty(p: string, v: any): void;
    static SQuote(s: string): string;
    toString(): string;
}

export interface ITuHandle {
    TuObject: TuObject;
    HandledObject: TuObject;
    HandleID: number;
    SelectedObject: TuObject;
}

export class TuGroup extends TuObject implements ITuCollection {
    get Backwards(): TuGroupEnumerator;
    get ChildNames(): Dictionary<any, any>;
    get Count(): number;
    protected getCount(): number;
    get First(): TuObject;
    get IsEmpty(): boolean;
    protected getIsEmpty(): boolean;
    get IsReadOnly(): boolean;
    protected getIsReadOnly(): boolean;
    get(name: string): TuObject;
    get(index: number): TuObject;
    set(name: string, value: TuObject): any;
    set(index: number, value: TuObject): any;
    get Last(): TuObject;
    get PickableBackground(): boolean;
    set PickableBackground(value: boolean);
    /**
     * @hidden
     */
    protected getPickableBackground(): boolean;
    /**
     * @hidden
     */
    protected setPickableBackground(value: boolean): void;
    Add(obj: TuObject): this;
    addChildName(name: string, child: TuObject): void;
    AddCollection(coll: ITuCollection, reparentLinks: boolean): ITuCollection;
    ChangeValue(e: TuChangedEventArgs, undo: boolean): void;
    Clear(): number;
    protected ComputeBounds(): CGRectangle;
    Contains(obj: TuObject): boolean;
    ContainsPoint(p: CGPoint): boolean;
    ToArray(): TuObject[];
    CopyArray(): TuObject[];
    protected copyChildren(newgroup: TuGroup, env: TuCopyDictionary): void;
    CopyObject(env: TuCopyDictionary): TuObject;
    CopyTo(array: TuObject[], index: number): TuObject[];
    ExpandPaintBounds(rect: CGRectangle, view: TuView): CGRectangle;
    findChild(name: string): TuObject;
    findName(child: TuObject): string;
    GetEnumerator(): TuGroupEnumerator;
    GetNearestIntersectionPoint(p1: CGPoint, p2: CGPoint, result: Out<CGPoint>): boolean;
    indexOf(obj: TuObject): number;
    insert(index: number, obj: TuObject): void;
    insertAfter(child: TuObject, newobj: TuObject): void;
    insertBefore(child: TuObject, newobj: TuObject): void;
    invalidatePaintBounds(): void;
    layoutChildren(childchanged: TuObject): void;
    protected moveChildren(old: CGRectangle): void;
    protected OnBoundsChanged(old: CGRectangle): void;
    onChildBoundsChanged(child: TuObject, old: CGRectangle): void;
    Paint(g: Graphics, view: TuView): void;
    Pick(p: CGPoint, selectableOnly: boolean): TuObject;
    pickObjects(p: CGPoint, selectableOnly: boolean, coll: ITuCollection, max: number): ITuCollection;
    Remove(obj?: TuObject): boolean;
    removeAt(index: number): void;
    removeChildName(name: string): void;
    removeChildName(child: TuObject): void;
    protected rescaleChildren(old: CGRectangle): void;
    static SetAllNoClear(obj: TuObject, b: boolean): void;
    importEntries(entries: IEnumerableOrArray<TuObject> | IEnumerator<TuObject>): number;
}

export class EventHandler<T> extends Delegate<(args: T) => void> {
}

export class TuCollectionEnumerator extends DisposableBase implements IEnumerator<TuObject>, IEnumerable<TuObject> {
    static readonly Empty: TuCollectionEnumerator;
    get Current(): TuObject;
    constructor(a: List<TuObject>, forward: boolean);
    GetEnumerator(): TuCollectionEnumerator;
    MoveNext(): boolean;
    Reset(): void;
    TryMoveNext(out: (value: any) => void): boolean;
    End(): void;
    NextValue(value?: any): any | undefined;
    isEndless: boolean;
    Next(value?: any): IIteratorResult<any>;
    'return'?(value?: any): IIteratorResult<any>;
    'throw'?(e?: any): IIteratorResult<any>;
}

export interface ITuPartInfoRenderer {
    addPartInfo(obj: TuObject): void;
    associatePartInfo(obj: TuObject, info: TuPartInfo): any;
    createPartInfo(): TuPartInfo;
    getStandardPartInfo(obj: TuObject): TuPartInfo;
}

export abstract class TuSvgRenderer<T extends TuObject> extends TuXmlTransformer<T> {
    TranslateAlpha(c: CGColor): float;
    TranslateColor(c: CGColor): string;
    TranslateGraphicsPath(path: GraphicsPath): string;
    WriteBrushAttributes(brush: Brush): void;
    WriteEllipse(p: Pen, b: Brush, r: CGRectangle): void;
    WriteLine(p: Pen, a: CGPoint, b: CGPoint): void;
    WriteLines(p: Pen, v: CGPoint[]): void;
    WritePath(p: Pen, b: Brush, pathdesc: string): void;
    WritePenAttributes(pen: Pen): void;
    WritePolygon(p: Pen, b: Brush, poly: CGPoint[]): void;
    WriteRectangle(p: Pen, b: Brush, r: CGRectangle, corner: CGSize): void;
}

export enum TuTextEditorStyle {
    TextBox = 0,
    NumericUpDown = 1,
    ComboBox = 2
}

export enum DragDropEffects {
    Scroll,
    All = -2147483645,
    None = 0,
    Copy = 1,
    Move = 2,
    Link = 4
}

export interface ITuNode extends ITuGraphPart {
    DestinationLinks: IEnumerable<ITuLink>;
    Destinations: IEnumerable<ITuNode>;
    Links: IEnumerable<ITuLink>;
    Nodes: IEnumerable<ITuNode>;
    Ports: IEnumerable<ITuPort>;
    SourceLinks: IEnumerable<ITuLink>;
    Sources: IEnumerable<ITuNode>;
}

type ResourceManager = any;
export class TuUndoManager {
    static readonly CopySelectionName = "Copy Selection";
    static readonly MoveSelectionName = "Move Selection";
    static readonly DeleteSelectionName = "Delete Selection";
    static readonly NewLinkName = "New Link";
    static readonly RelinkName = "Relink";
    static readonly ResizeName = "Resize";
    static readonly CopyName = "Copy";
    static readonly CutName = "Cut";
    static readonly PasteName = "Paste";
    static readonly DropName = "Drop";
    static readonly TextEditName = "Text Edit";
    static readonly CollapsedSubGraphName = "Collapsed SubGraph";
    static readonly ExpandedSubGraphName = "Expanded SubGraph";
    static readonly ExpandedAllSubGraphsName = "Expanded All SubGraphs";
    static readonly CollapsedName = "Collapsed";
    static readonly ExpandedName = "Expanded";
    static readonly DragCreatedName = "Drag Created";
    get AllEdits(): IList<ITuUndoableEdit>;
    protected getAllEdits(): IList<ITuUndoableEdit>;
    get ChecksTransactionLevel(): boolean;
    set ChecksTransactionLevel(value: boolean);
    protected getChecksTransactionLevel(): boolean;
    protected setChecksTransactionLevel(value: boolean): void;
    get CurrentEdit(): TuUndoManagerCompoundEdit;
    set CurrentEdit(value: TuUndoManagerCompoundEdit);
    protected getCurrentEdit(): TuUndoManagerCompoundEdit;
    protected setCurrentEdit(value: TuUndoManagerCompoundEdit): void;
    get Documents(): IEnumerable<TuDocument>;
    protected getDocuments(): IEnumerable<TuDocument>;
    get EditToRedo(): ITuUndoableEdit;
    protected getEditToRedo(): ITuUndoableEdit;
    get EditToUndo(): ITuUndoableEdit;
    protected getEditToUndo(): ITuUndoableEdit;
    get IsRedoing(): boolean;
    protected getIsRedoing(): boolean;
    get IsUndoing(): boolean;
    protected getIsUndoing(): boolean;
    get MaximumEditCount(): number;
    set MaximumEditCount(value: number);
    protected getMaximumEditCount(): number;
    protected setMaximumEditCount(value: number): void;
    get RedoPresentationName(): string;
    protected getRedoPresentationName(): string;
    get ResourceManager(): ResourceManager;
    set ResourceManager(value: ResourceManager);
    protected getResourceManager(): ResourceManager;
    protected setResourceManager(value: ResourceManager): void;
    get TransactionLevel(): number;
    protected getTransactionLevel(): number;
    get UndoEditIndex(): number;
    protected getUndoEditIndex(): number;
    get UndoPresentationName(): string;
    protected getUndoPresentationName(): string;
    AbortTransaction(): boolean;
    AddDocument(doc: TuDocument): void;
    CanRedo(): boolean;
    CanUndo(): boolean;
    Clear(): void;
    commitCompoundEdit(cedit: TuUndoManagerCompoundEdit): TuUndoManagerCompoundEdit;
    documentChanged(sender: any, e: TuChangedEventArgs): void;
    endTransaction(commit: boolean, tname: string, pname: string): boolean;
    finishTransaction(tname: string): boolean;
    getPresentationName(tname: string): string;
    redo(): void;
    RemoveDocument(doc: TuDocument): void;
    SkipEvent(evt: TuChangedEventArgs): boolean;
    StartTransaction(): boolean;
    Undo(): void;
}
export {};

export enum TuDocumentValidCycle {
    All = 0,
    NotDirected = 1,
    NotDirectedFast = 2,
    NotUndirected = 3,
    DestinationTree = 4,
    SourceTree = 5
}

export class TuCopyDelayedsCollection implements ICollection<any>, IEnumerable<any> {
    get Count(): number;
    protected getCount(): number;
    get IsEmpty(): boolean;
    protected getIsEmpty(): boolean;
    get IsReadOnly(): boolean;
    protected getIsReadOnly(): boolean;
    Add(obj: any): this;
    Clear(): void;
    Contains(obj: any): boolean;
    CopyArray(): any[];
    CopyTo(array: any[], index: number): any[];
    GetEnumerator(): IEnumerator<any>;
    Remove(obj: any): boolean;
    importEntries(entries: IEnumerableOrArray<any> | IEnumerator<any>): number;
    toArray(): any[];
    removeAt(index: number): void;
}

export enum TuRoutingTime {
    Immediate = 0,
    Delayed = 1,
    AfterNodesDragged = 3,
    AfterLinksDragged = 5,
    AfterNodesAndLinksDragged = 7
}

export class TuPositionArray {
    static readonly VERT = 1;
    static readonly HORIZ = 2;
    static readonly StartDistance = 1;
    static readonly StepDistance = 1;
    static readonly MaxDistance = 536870911;
    get Abort(): boolean;
    set Abort(value: boolean);
    get Bounds(): CGRectangle;
    get CellSize(): CGSize;
    set CellSize(value: CGSize);
    get Invalid(): boolean;
    set Invalid(value: boolean);
    get LargeMargin(): number;
    set LargeMargin(value: number);
    get SmallMargin(): number;
    set SmallMargin(value: number);
    get WholeDocument(): boolean;
    set WholeDocument(value: boolean);
    clearAllUnoccupied(): void;
    getDist(x: number, y: number): number;
    initialize(rect: CGRectangle): void;
    isOccupied(x: number, y: number): boolean;
    isUnoccupied(x: number, y: number, w: number, h: number): boolean;
    propagate(p1: CGPoint, fromDir: number, p2: CGPoint, toDir: number, bounds: CGRectangle): void;
    setAll(v: number): void;
    setOccupied(x: number, y: number): void;
}

export interface ITuIdentifiablePart {
    PartID: number;
}

export class TuLayerCollectionObjectEnumerator extends DisposableBase implements IEnumerator<TuObject>, IEnumerable<TuObject> {
    constructor(a: List<TuLayer>, forward: boolean);
    get Current(): TuObject;
    GetEnumerator(): TuLayerCollectionObjectEnumerator;
    MoveNext(): boolean;
    Reset(): void;
    TryMoveNext(out: (value: any) => void): boolean;
    End(): void;
    NextValue(value?: any): any | undefined;
    isEndless: boolean;
    Next(value?: any): IIteratorResult<any>;
    'return'?(value?: any): IIteratorResult<any>;
    'throw'?(e?: any): IIteratorResult<any>;
}

export interface ITuRoutable {
    calculateRoute(): void;
    updateRoute(): void;
}

export interface ITuGraphPart {
    TuObject: TuObject;
    UserFlags: number;
    UserObject: any;
}

export class TuStroke extends TuShape {
    get Curviness(): float;
    set Curviness(value: float);
    protected getCurviness(): float;
    protected setCurviness(value: float): void;
    get FirstPickIndex(): number;
    protected getFirstPickIndex(): float;
    get FromArrow(): boolean;
    set FromArrow(value: boolean);
    protected getFromArrow(): boolean;
    protected setFromArrow(value: boolean): void;
    get FromArrowAnchorPoint(): CGPoint;
    protected getFromArrowAnchorPoint(): CGPoint;
    get FromArrowEndPoint(): CGPoint;
    protected getFromArrowEndPoint(): CGPoint;
    get FromArrowFilled(): boolean;
    set FromArrowFilled(value: boolean);
    protected getFromArrowFilled(): boolean;
    protected setFromArrowFilled(value: boolean): void;
    get FromArrowLength(): float;
    set FromArrowLength(value: float);
    protected getFromArrowLength(): float;
    protected setFromArrowLength(value: float): void;
    get FromArrowShaftLength(): float;
    set FromArrowShaftLength(value: float);
    protected getFromArrowShaftLength(): float;
    protected setFromArrowShaftLength(value: float): void;
    get FromArrowStyle(): TuStrokeArrowheadStyle;
    set FromArrowStyle(value: TuStrokeArrowheadStyle);
    protected getFromArrowStyle(): TuStrokeArrowheadStyle;
    protected setFromArrowStyle(value: TuStrokeArrowheadStyle): void;
    get FromArrowWidth(): float;
    set FromArrowWidth(value: float);
    protected getFromArrowWidth(): float;
    protected setFromArrowWidth(value: float): void;
    get Highlight(): boolean;
    set Highlight(value: boolean);
    protected getHighlight(): boolean;
    protected setHighlight(value: boolean): void;
    get HighlightPen(): Pen;
    set HighlightPen(value: Pen);
    protected getHighlightPen(): Pen;
    protected setHighlightPen(value: Pen): void;
    get HighlightPenColor(): CGColor;
    set HighlightPenColor(value: CGColor);
    protected getHighlightPenColor(): CGColor;
    protected setHighlightPenColor(value: CGColor): void;
    get HighlightPenInfo(): TuPenInfo;
    set HighlightPenInfo(value: TuPenInfo);
    protected getHighlightPenInfo(): TuPenInfo;
    protected setHighlightPenInfo(value: TuPenInfo): void;
    get HighlightPenWidth(): float;
    set HighlightPenWidth(value: float);
    protected getHighlightPenWidth(): float;
    protected setHighlightPenWidth(value: float): void;
    get HighlightWhenSelected(): boolean;
    set HighlightWhenSelected(value: boolean);
    protected getHighlightWhenSelected(): boolean;
    protected setHighlightWhenSelected(value: boolean): void;
    get LastPickIndex(): number;
    protected getLastPickIndex(): number;
    get PickMargin(): number;
    protected getPickMargin(): number;
    get PointsCount(): number;
    protected getPointsCount(): number;
    get Style(): TuStrokeStyle;
    set Style(value: TuStrokeStyle);
    protected getStyle(): TuStrokeStyle;
    protected setStyle(value: TuStrokeStyle): void;
    get ToArrow(): boolean;
    set ToArrow(value: boolean);
    protected getToArrow(): boolean;
    protected setToArrow(value: boolean): void;
    get ToArrowAnchorPoint(): CGPoint;
    protected getToArrowAnchorPoint(): CGPoint;
    get ToArrowEndPoint(): CGPoint;
    protected getToArrowEndPoint(): CGPoint;
    get ToArrowFilled(): boolean;
    set ToArrowFilled(value: boolean);
    protected getToArrowFilled(): boolean;
    protected setToArrowFilled(value: boolean): void;
    get ToArrowLength(): float;
    set ToArrowLength(value: float);
    protected getToArrowLength(): float;
    protected setToArrowLength(value: float): void;
    get ToArrowShaftLength(): float;
    set ToArrowShaftLength(value: float);
    protected getToArrowShaftLength(): float;
    protected setToArrowShaftLength(value: float): void;
    get ToArrowStyle(): TuStrokeArrowheadStyle;
    set ToArrowStyle(value: TuStrokeArrowheadStyle);
    protected getToArrowStyle(): TuStrokeArrowheadStyle;
    protected setToArrowStyle(value: TuStrokeArrowheadStyle): void;
    get ToArrowWidth(): TuStrokeArrowheadStyle;
    set ToArrowWidth(value: TuStrokeArrowheadStyle);
    protected getToArrowWidth(): TuStrokeArrowheadStyle;
    protected setToArrowWidth(value: TuStrokeArrowheadStyle): void;
    constructor();
    addPoint(p: CGPoint): number;
    addPoint(x: number, y: float): number;
    AddSelectionHandles(sel: TuSelection, selectedObj: TuObject): void;
    calculateArrowhead(anchor: CGPoint, endPoint: CGPoint, atEnd: boolean, poly: CGPoint[]): void;
    ChangeValue(e: TuChangedEventArgs, undo: boolean): void;
    clearPoints(): void;
    protected ComputeBounds(): CGRectangle;
    containsPoint(p: CGPoint): boolean;
    CopyNewValueForRedo(e: TuChangedEventArgs): void;
    copyObject(env: TuCopyDictionary): TuObject;
    CopyOldValueForUndo(e: TuChangedEventArgs): void;
    copyPointsArray(): CGPoint[];
    DoResize(view: TuView, origRect: CGRectangle, newPoint: CGPoint, whichHandle: number, evttype: TuInputState, min: CGSize, max: CGSize): void;
    protected drawArrowhead(g: Graphics, view: TuView, pen: Pen, brush: Brush, atEnd: boolean, offsetw: float, offseth: float, poly: CGPoint[]): void;
    ExpandPaintBounds(rect: CGRectangle, view: TuView): CGRectangle;
    getArrowheadPointsCount(atEnd: boolean): number;
    GetNearestIntersectionPoint(p1: CGPoint, p2: CGPoint, result: Out<CGPoint>): boolean;
    getPoint(i: number): CGPoint;
    getSegmentNearPoint(pnt: CGPoint): number;
    insertPoint(i: number, p: CGPoint): void;
    static intersectingLines(a1: CGPoint, a2: CGPoint, b1: CGPoint, b2: CGPoint): boolean;
    intersectsRectangle(rect: CGRectangle): boolean;
    intersectsStroke(stroke: TuObject): boolean;
    makePath(): GraphicsPath;
    protected OnBoundsChanged(old: CGRectangle): void;
    Paint(g: Graphics, view: TuView): void;
    removePoint(i: number): void;
    removeSelectionHandles(sel: TuSelection): void;
    setPoint(i: number, p: CGPoint): void;
    setPoints(points: CGPoint[]): void;
    static StrokesIntersect(a: TuObject, b: TuObject, br: CGRectangle): boolean;
}

export enum TuLinkAdjustingStyle {
    Calculate = 0,
    Scale = 1,
    Stretch = 2,
    End = 3
}

export enum TuStrokeStyle {
    Line = 0,
    RoundedLine = 1,
    Bezier = 2,
    RoundedLineWithJumpOvers = 3,
    RoundedLineWithJumpGaps = 4
}

export interface ITuDragSnapper {
    SnapOpaque: boolean;
    canSnapPoint(p: CGPoint, obj: TuObject, view: TuView): boolean;
    snapPoint(p: CGPoint, obj: TuObject, view: TuView): CGPoint;
}

type ImageList = any;
export class TuImage extends TuObject {
        get Alignment(): Spot;
        set Alignment(value: Spot);
        /**
            * @hidden
            */
        protected getAlignment(): Spot;
        /**
            * @hidden
            * @param style
            */
        protected setAlignment(value: Spot): void;
        get AutoResizes(): boolean;
        set AutoResizes(value: boolean);
        /**
            * @hidden
            */
        protected getAutoResizes(): boolean;
        /**
            * @hidden
            * @param style
            */
        protected setAutoResizes(value: boolean): void;
        static get DefaultImageList(): ImageList;
        set DefaultImageList(value: ImageList);
        static get DefaultResourceManager(): ResourceManager;
        set DefaultResourceManager(value: ResourceManager);
        get Image(): CGImage;
        set Image(value: CGImage);
        /**
            * @hidden
            */
        protected getImage(): CGImage;
        /**
            * @hidden
            * @param style
            */
        protected setImage(value: CGImage): void;
        get ImageList(): ImageList;
        set ImageList(value: ImageList);
        /**
            * @hidden
            */
        protected getImageList(): ImageList;
        /**
            * @hidden
            * @param style
            */
        protected setImageList(value: ImageList): void;
        get Index(): number;
        set Index(value: number);
        /**
            * @hidden
            */
        protected getIndex(): number;
        /**
            * @hidden
            * @param style
            */
        protected setIndex(value: number): void;
        /**
            * @hidden
            */
        protected getLocation(): CGPoint;
        /**
            * @hidden
            * @param style
            */
        protected setLocation(value: CGPoint): void;
        get Name(): string;
        set Name(value: string);
        /**
            * @hidden
            */
        getName(): string;
        /**
            * @hidden
            * @param style
            */
        setName(value: string): TuImage;
        get NameIsUri(): boolean;
        set NameIsUri(value: boolean);
        /**
            * @hidden
            */
        protected getNameIsUri(): boolean;
        /**
            * @hidden
            * @param style
            */
        protected setNameIsUri(value: boolean): void;
        get ResourceManager(): ResourceManager;
        set ResourceManager(value: ResourceManager);
        /**
            * @hidden
            */
        protected getResourceManager(): ResourceManager;
        /**
            * @hidden
            * @param style
            */
        protected setResourceManager(value: ResourceManager): void;
        get ThrowsExceptions(): boolean;
        set ThrowsExceptions(value: boolean);
        /**
            * @hidden
            */
        protected getThrowsExceptions(): boolean;
        /**
            * @hidden
            * @param style
            */
        protected setThrowsExceptions(value: boolean): void;
        ChangeValue(e: TuChangedEventArgs, undo: boolean): void;
        static clearCachedImage(path: string): void;
        static clearCachedImage(resmgr: ResourceManager, name: string): void;
        static clearCachedImages(): void;
        ExpandPaintBounds(rect: CGRectangle, view: TuView): CGRectangle;
        loadImage(): CGImage;
        Paint(g: Graphics, view: TuView): void;
        setSizeKeepingLocation(s: CGSize): void;
        unloadImage(): void;
}
export {};

export class TuLayerCollectionEnumerator extends DisposableBase implements IEnumerator<TuLayer>, IEnumerable<TuLayer> {
    get Current(): TuLayer;
    constructor(a: List<TuLayer>, forward: boolean);
    GetEnumerator(): TuLayerCollectionEnumerator;
    MoveNext(): boolean;
    Reset(): void;
    TryMoveNext(out: (value: any) => void): boolean;
    End(): void;
    NextValue(value?: any): any | undefined;
    isEndless: boolean;
    Next(value?: any): IIteratorResult<any>;
    'return'?(value?: any): IIteratorResult<any>;
    'throw'?(e?: any): IIteratorResult<any>;
}

export class TuLayerEnumerator extends DisposableBase implements IEnumerator<TuObject> {
        static Empty: TuLayerEnumerator;
        constructor(a: List<TuObject>, forward: boolean);
        CanMoveNext?: boolean;
        End(): void;
        NextValue(value?: any): TuObject;
        IsEndless?: boolean;
        Next(value?: any): IIteratorResult<TuObject>;
        /**
            * Gets the current object in the layer.
            */
        get Current(): TuObject;
        /**
            * Gets an enumerator for iterating over the GoObjects in this layer.
            */
        GetEnumerator(): TuLayerEnumerator;
        MoveNext(): boolean;
        Reset(): void;
        TryMoveNext(out: (value: TuObject) => void): boolean;
        end(): void;
        nextValue(value?: any): TuObject | undefined;
        isEndless: boolean;
        next(value?: any): IIteratorResult<TuObject>;
        'return'?<TuObject>(value?: TuObject): IIteratorResult<TuObject>;
        'throw'?(e?: any): IIteratorResult<TuObject>;
}

type TuStroke = any;
type ITuDragSnapper = any;
export class TuLayerCache {
    get Objects(): List<TuObject>;
    get Rect(): CGRectangle;
    set Rect(value: CGRectangle);
    get Snappers(): List<ITuDragSnapper>;
    set Snappers(value: List<ITuDragSnapper>);
    get Strokes(): List<TuStroke>;
    set Strokes(value: List<TuStroke>);
    get View(): TuView;
    constructor(view: TuView);
    reset(): void;
}
export {};

export abstract class TuTool implements ITuTool {
        /**
            * Gets or sets this tool's CurrentObject property.
            * <h4>Description</h4>
            * Often different methods of a tool will need to deal with the "current"
            * [[Node]] that the user is working with. This property is provided so each
            * tool doesn't need to define it. Not every tool uses this property.
            */
        get CurrentObject(): TuObject;
        set CurrentObject(value: TuObject);
        protected getCurrentObject(): TuObject;
        protected setCurrentObject(value: TuObject): void;
        get CurrentObjectWasSelected(): boolean;
        set CurrentObjectWasSelected(value: boolean);
        protected getCurrentObjectWasSelected(): boolean;
        protected setCurrentObjectWasSelected(value: boolean): void;
        /**
            *  Gets or sets the dimensions, in pixels, of the rectangle that a drag operation must extend
            * to be considered a drag operation.
            * This <c>Size</c> is in view coordinates, not in document coordinates.
            * The default value is 4x4.
            * The rectangle is centered on the mouse-down point.
            */
        static get DragSize(): CGSize;
        static set DragSize(value: CGSize);
        /**
            * Gets this view's FirstInput property.
            */
        get FirstInput(): TuInputEventArgs;
        get LastInput(): TuInputEventArgs;
        get Selection(): TuSelection;
        get View(): TuView;
        set View(value: TuView);
        protected getView(): TuView;
        protected setView(value: TuView): void;
        get TransactionResult(): string;
        set TransactionResult(value: string);
        protected getTransactionResult(): string;
        protected setTransactionResult(value: string): void;
        constructor(view: TuView);
        abstract GetType(): Type;
        canStart(): boolean;
        doCancelMouse(): void;
        doClick(evt: TuInputEventArgs): boolean;
        doKeyDown(): void;
        doMouseDown(): void;
        doMouseHover(): void;
        doMouseMove(): void;
        doMouseUp(): void;
        doMouseWheel(): void;
        doSelect(evt: TuInputEventArgs): void;
        isBeyondDragSize(): boolean;
        start(): void;
        startTransaction(): boolean;
        stop(): void;
        stopTool(): void;
        stopTransaction(): boolean;
        static SubtractPoints(a: CGPoint, b: CGPoint): CGSize;
        static SubtractPoints(a: CGPoint, b: CGSize): CGSize;
        static SubtractPoints(a: CGSize, b: CGPoint): CGSize;
}

export interface ITuGraphPart {
    TuObject: TuObject;
    UserFlags: number;
    UserObject: any;
}

export enum TuStrokeArrowheadStyle {
    Polygon = 0,
    Circle = 1,
    Cross = 2,
    Slash = 3,
    BackSlash = 4,
    X = 5
}

export interface ITuUndoableEdit {
    PresentationName: string;
    CanRedo(): boolean;
    CanUndo(): boolean;
    Clear(): void;
    Redo(): void;
    Undo(): void;
}

export enum ScrollEventType {
    SmallDecrement = 0,
    SmallIncrement = 1,
    LargeDecrement = 2,
    LargeIncrement = 3,
    ThumbPosition = 4,
    ThumbTrack = 5,
    First = 6,
    Last = 7,
    EndScroll = 8
}

export enum ScrollOrientation {
    HorizontalScroll = 0,
    VerticalScroll = 1
}

export class PageSettings {
    PrinterSettings: any;
}

export class PrintPageEventHandler extends Delegate<(sender: any, e: PrintPageEventArgs) => void> {
}

export class TuPenInfo {
    get Color(): CGColor;
    set Color(value: CGColor);
    get MiterLimit(): float;
    get Width(): float;
    set Width(value: float);
    constructor();
    constructor(pen: Pen);
    constructor(other: TuPenInfo);
    getPen(): Pen;
    setPen(p: Pen): boolean;
    equals(penInfo: TuPenInfo): boolean;
}

export class TuBrushInfo {
    get BrushStyle(): TuBrushStyle;
    set BrushStyle(value: TuBrushStyle);
    get BrushType(): TuBrushType;
    get Color(): CGColor;
    set Color(value: CGColor);
    get ForeColor(): CGColor;
    set ForeColor(value: CGColor);
    get HasBrush(): boolean;
    get MidBlendFactor(): float;
    set MidBlendFactor(value: float);
    get MidColor(): CGColor;
    set MidColor(value: CGColor);
    get MidFraction(): float;
    set MidFraction(value: float);
    get Point(): CGPoint;
    set Point(value: CGPoint);
    get StartOrFocusScales(): CGPoint;
    set StartOrFocusScales(value: CGPoint);
    constructor();
    constructor(b: Brush);
    constructor(other: TuBrushInfo);
    equals(obj: TuBrushInfo): boolean;
    getBrush(shapeorpath: any): Brush;
    setBrush(b: Brush, shapeorpath: any): void;
}

export enum TuBrushStyle {
    None = 0,
    Solid = 1,
    SimpleGradientVertical = 2,
    SimpleGradientHorizontal = 3,
    SimpleGradientForwardDiagonal = 4,
    SimpleGradientBackwardDiagonal = 5,
    MiddleGradientVertical = 6,
    MiddleGradientHorizontal = 7,
    MiddleGradientForwardDiagonal = 8,
    MiddleGradientBackwardDiagonal = 9,
    SingleEdgeGradientTop = 10,
    SingleEdgeGradientLeft = 11,
    SingleEdgeGradientRight = 12,
    SingleEdgeGradientBottom = 13,
    DoubleEdgeGradientVertical = 14,
    DoubleEdgeGradientHorizontal = 15,
    DoubleEdgeGradientForwardDiagonal = 16,
    DoubleEdgeGradientBackwardDiagonal = 17,
    ShapeSimpleGradient = 18,
    ShapeFringeGradient = 19,
    ShapeHighlightGradient = 20,
    RectangleGradient = 21,
    EllipseGradient = 22,
    Texture = 253,
    CustomLinearGradient = 254,
    CustomPathGradient = 255,
    HatchHorizontal = 256,
    HatchVertical = 257,
    HatchForwardDiagonal = 258,
    HatchBackwardDiagonal = 259,
    HatchCross = 260,
    HatchDiagonalCross = 261,
    HatchPercent05 = 262,
    HatchPercent10 = 263,
    HatchPercent20 = 264,
    HatchPercent25 = 265,
    HatchPercent30 = 266,
    HatchPercent40 = 267,
    HatchPercent50 = 268,
    HatchPercent60 = 269,
    HatchPercent70 = 270,
    HatchPercent75 = 271,
    HatchPercent80 = 272,
    HatchPercent90 = 273,
    HatchLightDownwardDiagonal = 274,
    HatchLightUpwardDiagonal = 275,
    HatchDarkDownwardDiagonal = 276,
    HatchDarkUpwardDiagonal = 277,
    HatchWideDownwardDiagonal = 278,
    HatchWideUpwardDiagonal = 279,
    HatchLightVertical = 280,
    HatchLightHorizontal = 281,
    HatchNarrowVertical = 282,
    HatchNarrowHorizontal = 283,
    HatchDarkVertical = 284,
    HatchDarkHorizontal = 285,
    HatchDashedDownwardDiagonal = 286,
    HatchDashedUpwardDiagonal = 287,
    HatchDashedHorizontal = 288,
    HatchDashedVertical = 289,
    HatchSmallConfetti = 290,
    HatchLargeConfetti = 291,
    HatchZigZag = 292,
    HatchWave = 293,
    HatchDiagonalBrick = 294,
    HatchHorizontalBrick = 295,
    HatchWeave = 296,
    HatchPlaid = 297,
    HatchDivot = 298,
    HatchDottedGrid = 299,
    HatchDottedDiamond = 300,
    HatchShingle = 301,
    HatchTrellis = 302,
    HatchSphere = 303,
    HatchSmallGrid = 304,
    HatchSmallCheckerBoard = 305,
    HatchLargeCheckerBoard = 306,
    HatchOutlinedDiamond = 307,
    HatchSolidDiamond = 308
}

export class TuGroupEnumerator implements IEnumerator<TuObject>, IEnumerable<TuObject> {
    get Current(): TuObject;
    constructor(a: List<TuObject>, forward: boolean);
    CanMoveNext?: boolean;
    TryMoveNext(out: (value: TuObject) => void): boolean;
    End(): void;
    NextValue(value?: any): TuObject;
    Next(value?: any): IIteratorResult<TuObject>;
    IsEndless?: boolean;
    Dispose(): void;
    GetEnumerator(): TuGroupEnumerator;
    MoveNext(): boolean;
    Reset(): void;
}

export class TuUndoManagerCompoundEdit implements ITuUndoableEdit {
    get AllEdits(): IList<ITuUndoableEdit>;
    protected getAllEdits(): IList<ITuUndoableEdit>;
    get IsComplete(): boolean;
    set IsComplete(value: boolean);
    protected getIsComplete(): boolean;
    protected setIsComplete(value: boolean): void;
    get PresentationName(): string;
    set PresentationName(value: string);
    protected getPresentationName(): string;
    protected setPresentationName(value: string): void;
    addEdit(edit: ITuUndoableEdit): void;
    CanRedo(): boolean;
    CanUndo(): boolean;
    Clear(): void;
    Redo(): void;
    Undo(): void;
}

export class ResourceManager {
    getString(name: string): string;
    getObject(name: string): string;
}

export enum TuBrushType {
    None = 0,
    Solid = 1,
    Hatch = 2,
    Texture = 3,
    LinearGradient = 4,
    LinearGradientGamma = 5,
    PathGradient = 6
}

