// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../@tuval/forms
//   ../../@tuval/core
//   ../../@realmocean/core
//   ../../@realmocean/data
//   ../../@realmocean/navigations
//   ../../@realmocean/excelexport
//   ../../@realmocean/popups
//   ../../@realmocean/buttons
//   ../../@realmocean/dropdowns
//   ../../@realmocean/inputs
//   ../../@realmocean/calendars
//   ../../@realmocean/pdfexport

import { GridViewBase } from "@tuval/forms";
import { int } from '@tuval/core';
import { Component, ModuleDeclaration, L10n, EmitType } from '@realmocean/core';
import { INotifyPropertyChanged } from '@realmocean/core';
import { EmitType } from '@realmocean/core';
import { ComponentModel } from '@realmocean/core';
import { Component, ModuleDeclaration, ChildProperty, TouchEventArgs } from '@realmocean/core';
import { INotifyPropertyChanged, L10n } from '@realmocean/core';
import { KeyboardEvents, EmitType } from '@realmocean/core';
import { Query, DataManager } from '@realmocean/data';
import { ItemModel, ClickEventArgs } from '@realmocean/navigations';
import { BeforeOpenCloseMenuEventArgs, MenuEventArgs } from '@realmocean/navigations';
import { Workbook } from '@realmocean/excelexport';
import { NumberFormatOptions, DateFormatOptions } from '@realmocean/core';
import { DataManager } from '@realmocean/data';
import { UIView, UIController } from '@tuval/forms';
import { L10n } from '@realmocean/core';
import { Query, Predicate } from '@realmocean/data';
import { Dialog } from '@realmocean/popups';
import { ContextMenu, MenuEventArgs } from '@realmocean/navigations';
import { Component } from '@realmocean/core';
import { DataManager, Deferred } from '@realmocean/data';
import { Component, NumberFormatOptions, DateFormatOptions, EmitType } from '@realmocean/core';
import { KeyboardEventArgs as BaseKeyboardEventArgs, L10n } from '@realmocean/core';
import { Query, DataManager, Group, Predicate } from '@realmocean/data';
import { ItemModel, MenuItemModel, BeforeOpenCloseMenuEventArgs, MenuEventArgs } from '@realmocean/navigations';
import { ButtonModel, CheckBoxModel, SwitchModel } from '@realmocean/buttons';
import { DropDownListModel, MultiSelectModel, ComboBoxModel } from '@realmocean/dropdowns';
import { NumericTextBoxModel, MaskedTextBoxModel } from '@realmocean/inputs';
import { FormValidator } from '@realmocean/inputs';
import { DatePickerModel, DateTimePickerModel, TimePickerModel } from '@realmocean/calendars';
import { PdfStandardFont, PdfTrueTypeFont, PdfGridCell, PdfTextWebLink, PdfImage } from '@realmocean/pdfexport';
import { Dialog, DialogModel } from '@realmocean/popups';
import { PdfPaddings } from '@realmocean/pdfexport';
import { AutoCompleteModel } from '@realmocean/dropdowns';
import { Dialog, Popup } from '@realmocean/popups';
import { Toolbar as tool } from '@realmocean/navigations';
import { Query } from '@realmocean/data';
import { ContextMenu as Menu } from '@realmocean/navigations';
import { Draggable } from '@realmocean/core';
import { AutoComplete } from '@realmocean/dropdowns';
import { AutoComplete, DropDownList, ComboBox, MultiSelect } from '@realmocean/dropdowns';
import { CheckBox, Switch } from '@realmocean/buttons';
import { DatePicker, TimePicker } from '@realmocean/calendars';
import { TextBox, MaskedTextBox } from '@realmocean/inputs';
import { KeyboardEventArgs } from '@realmocean/core';

/**
  * Export Grid components
  */
import './exports';

/**
  * Grid component exported items
  */

/**
  * Pager component exported items
  */

export class GridView extends GridViewBase {
        containerElement: HTMLElement;
        get GridRef(): Grid;
        Cols: ColumnModel[];
        GridLines: GridLine;
        RowHeight: int;
        /**
            *  aggregates: [{
                columns: [{type: 'Sum',field: 'Freight',format: 'C2',footerTemplate: 'Sum: ${Sum}'}]
        }]
            */
        get Aggregates(): AggregateRowModel[];
        set Aggregates(value: AggregateRowModel[]);
        /**
        Grid.Inject(Toolbar, ExcelExport);
        let grid: Grid = new Grid(
        {
                dataSource: orderDetails,
                allowExcelExport: true,
                toolbar: ['ExcelExport'],
        });
            */
        get AllowExcelExport(): boolean;
        set AllowExcelExport(value: boolean);
        get AllowFiltering(): boolean;
        set AllowFiltering(value: boolean);
        get AllowGrouping(): boolean;
        set AllowGrouping(value: boolean);
        get AllowKeyboard(): boolean;
        set AllowKeyboard(value: boolean);
        /**
            * Grid.Inject(Sort);
                let grid: Grid = new Grid(
                {
                        dataSource: categoryData,
                        allowSorting: true,
                        allowMultiSorting: true,
                });
            */
        get AllowMultiSorting(): boolean;
        set AllowMultiSorting(value: boolean);
        get AllowPaging(): boolean;
        set AllowPaging(value: boolean);
        /**
            * Grid.Inject(Toolbar, PdfExport);
                let grid: Grid = new Grid(
                {
                        dataSource: orderDetails,
                        allowPdfExport: true,
                        toolbar: ['PdfExport'],
                });
            */
        get AllowPdfExport(): boolean;
        set AllowPdfExport(value: boolean);
        get AllowReordering(): boolean;
        set AllowReordering(value: boolean);
        get AllowResizing(): boolean;
        set AllowResizing(value: boolean);
        get AllowRowDragAndDrop(): boolean;
        set AllowRowDragAndDrop(value: boolean);
        get AllowSelection(): boolean;
        set AllowSelection(value: boolean);
        get AllowTextWrap(): boolean;
        set AllowTextWrap(value: boolean);
        _GetProperty(name: string): any;
        _SetProperty(name: string, value: any): void;
        get DataSource(): any;
        set DataSource(value: any);
        get RecordDoubleClicked(): any;
        set RecordDoubleClicked(value: any);
        protected RefreshColumnsInternal(): void;
        SetupControlDefaults(): void;
        SetColumns(columns: ColumnModel[]): void;
        componentDidMount(): void;
        componentDidUpdate(): void;
        componentWillUnmount(): void;
        GetSelectedRecords(): Object[];
        CreateElements(): any;
        Refresh(): void;
        RefreshColumns(): void;
        RefreshHeader(): void;
        GetStyleObject(): any;
        ExportCsv(): void;
}

/**
  * Common export
  */

/**
  * Base export
  */

/**
  * Action export
  */

/**
  * Models
  */

/**
  * Models
  */

/**
  * Services
  */

/** @hidden */
export interface IRender {
        render(): void;
        refresh(): void;
}
/**
    * Represents the `Pager` component.
    * ```html
    * <div id="pager"/>
    * ```
    * ```typescript
    * <script>
    *   var pagerObj = new Pager({ totalRecordsCount: 50, pageSize:10 });
    *   pagerObj.appendTo("#pager");
    * </script>
    * ```
    */
export class Pager extends Component<HTMLElement> implements INotifyPropertyChanged {
        /*** @hidden */
        totalPages: number;
        /** @hidden */
        templateFn: Function;
        /** @hidden */
        hasParent: boolean;
        /*** @hidden */
        previousPageNo: number;
        /*** @hidden */
        localeObj: L10n;
        /**
            * `containerModule` is used to manipulate numeric container behavior of Pager.
            */
        containerModule: NumericContainer;
        /**
            * `pagerMessageModule` is used to manipulate pager message of Pager.
            */
        pagerMessageModule: PagerMessage;
        /**
            * `externalMessageModule` is used to manipulate external message of Pager.
            */
        externalMessageModule: ExternalMessage;
        /**
            * @hidden
            * `pagerdropdownModule` is used to manipulate pageSizes of Pager.
            */
        pagerdropdownModule: PagerDropDown;
        /**
            * If `enableQueryString` set to true,
            * then it pass current page information as a query string along with the URL while navigating to other page.
            *
            * @default false
            */
        enableQueryString: boolean;
        /**
            * If `enableExternalMessage` set to true, then it adds the message to Pager.
            *
            * @default false
            */
        enableExternalMessage: boolean;
        /**
            * If `enablePagerMessage` set to true, then it adds the pager information.
            *
            * @default true
            */
        enablePagerMessage: boolean;
        /**
            * Defines the records count of visible page.
            *
            * @default 12
            */
        pageSize: number;
        /**
            * Defines the number of pages to display in pager container.
            *
            * @default 10
            */
        pageCount: number;
        /**
            * Defines the current page number of pager.
            *
            * @default 1
            */
        currentPage: number;
        /**
            * Gets or Sets the total records count which is used to render numeric container.
            *
            * @default null
            */
        totalRecordsCount: number;
        /**
            * Defines the external message of Pager.
            *
            * @default null
            */
        externalMessage: string;
        /**
            * If `pageSizes` set to true or Array of values,
            * It renders DropDownList in the pager which allow us to select pageSize from DropDownList.
            *
            * @default false
            */
        pageSizes: boolean | (number | string)[];
        /**
            *  Defines the template as string or HTML element ID which renders customized elements in pager instead of default elements.
            *
            * @default null
            */
        template: string;
        /**
            * Defines the customized text to append with numeric items.
            *
            * @default null
            */
        customText: string;
        /**
            * Triggers when click on the numeric items.
            *
            * @default null
            */
        click: EmitType<Object>;
        /**
            * Triggers after pageSize is selected in DropDownList.
            *
            * @default null
            */
        dropDownChanged: EmitType<Object>;
        /**
            * Triggers when Pager is created.
            *
            * @default null
            */
        created: EmitType<Object>;
        /**
            * @hidden
            */
        isReact: boolean;
        /**
            * @hidden
            */
        isVue: boolean;
        /**
            * Constructor for creating the component.
            *
            * @param {PagerModel} options - specifies the options
            * @param {string} element - specifies the element
            * @hidden
            */
        constructor(options?: PagerModel, element?: string | HTMLElement);
        /**
            * To provide the array of modules needed for component rendering
            *
            * @returns {ModuleDeclaration[]} returns the modules declaration
            * @hidden
            */
        protected requiredModules(): ModuleDeclaration[];
        /**
            * Initialize the event handler
            *
            * @returns {void}
            * @hidden
            */
        protected preRender(): void;
        /**
            * To Initialize the component rendering
            *
            * @returns {void}
            */
        protected render(): void;
        /**
            * Get the properties to be maintained in the persisted state.
            *
            * @returns {string} returns the persist data
            * @hidden
            */
        getPersistData(): string;
        /**
            * To destroy the Pager component.
            *
            * @method destroy
            * @returns {void}
            */
        destroy(): void;
        /**
            * Destroys the given template reference.
            *
            * @param {string[]} propertyNames - Defines the collection of template name.
            * @param {any} index - Defines the index
            */
        destroyTemplate(propertyNames?: string[], index?: any): void;
        /**
            * For internal use only - Get the module name.
            *
            * @returns {string} returns the module name
            * @private
            */
        protected getModuleName(): string;
        /**
            * Called internally if any of the property value changed.
            *
            * @param {PagerModel} newProp - specifies the new property
            * @param {PagerModel} oldProp - specifies the old propety
            * @returns {void}
            * @hidden
            */
        onPropertyChanged(newProp: PagerModel, oldProp: PagerModel): void;
        /**
            * Gets the localized label by locale keyword.
            *
            * @param  {string} key - specifies the key
            * @returns {string} returns the localized label
            */
        getLocalizedLabel(key: string): string;
        /**
            * Navigate to target page by given number.
            *
            * @param  {number} pageNo - Defines page number.
            * @returns {void}
            */
        goToPage(pageNo: number): void;
        /**
            * @param {number} pageSize - specifies the pagesize
            * @returns {void}
            * @hidden
            */
        setPageSize(pageSize: number): void;
        /**
            * @returns {void}
            * @hidden
            */
        updateTotalPages(): void;
        /**
            * @returns {Function} returns the function
            * @hidden
            */
        getPagerTemplate(): Function;
        /**
            * @param {string} template - specifies the template
            * @returns {Function} returns the function
            * @hidden
            */
        compile(template: string): Function;
        /**
            * Refreshes page count, pager information and external message.
            *
            * @returns {void}
            */
        refresh(): void;
}

/**
    * `ExternalMessage` module is used to display user provided message.
    */
export class ExternalMessage implements IRender {
        /**
            * Constructor for externalMessage module
            *
            * @param {Pager} pagerModule - specifies the pagermodule
            * @hidden
            */
        constructor(pagerModule?: Pager);
        /**
            * For internal use only - Get the module name.
            *
            * @returns {string} returns the module name
            * @private
            */
        protected getModuleName(): string;
        /**
            * The function is used to render pager externalMessage
            *
            * @returns {void}
            * @hidden
            */
        render(): void;
        /**
            * Refreshes the external message of Pager.
            *
            * @returns {void}
            */
        refresh(): void;
        /**
            * Hides the external message of Pager.
            *
            * @returns {void}
            */
        hideMessage(): void;
        /**
            * Shows the external message of the Pager.
            *
            * @returns {void}s
            */
        showMessage(): void;
        /**
            * To destroy the PagerMessage
            *
            * @function destroy
            * @returns {void}
            * @hidden
            */
        destroy(): void;
}

/**
    * `NumericContainer` module handles rendering and refreshing numeric container.
    */
export class NumericContainer implements IRender {
        /**
            * Constructor for numericContainer module
            *
            * @param {Pager} pagerModule - specifies the pagerModule
            * @hidden
            */
        constructor(pagerModule?: Pager);
        /**
            * The function is used to render numericContainer
            *
            * @returns {void}
            * @hidden
            */
        render(): void;
        /**
            * Refreshes the numeric container of Pager.
            *
            * @returns {void}
            */
        refresh(): void;
        /**
            * The function is used to refresh refreshNumericLinks
            *
            * @returns {void}
            * @hidden
            */
        refreshNumericLinks(): void;
        /**
            * Binding events to the element while component creation
            *
            * @returns {void}
            * @hidden
            */
        wireEvents(): void;
        /**
            * Unbinding events from the element while component destroy
            *
            * @returns {void}
            * @hidden
            */
        unwireEvents(): void;
        /**
            * To destroy the PagerMessage
            *
            * @function destroy
            * @returns {void}
            * @hidden
            */
        destroy(): void;
}

/**
    * `PagerMessage` module is used to display pager information.
    */
export class PagerMessage implements IRender {
        /**
            * Constructor for externalMessage module
            *
            * @param {Pager} pagerModule - specifies the pager Module
            * @hidden
            */
        constructor(pagerModule?: Pager);
        /**
            * The function is used to render pager message
            *
            * @returns {void}
            * @hidden
            */
        render(): void;
        /**
            * Refreshes the pager information.
            *
            * @returns {void}
            */
        refresh(): void;
        /**
            * Hides the Pager information.
            *
            * @returns {void}
            */
        hideMessage(): void;
        /**
            * Shows the Pager information.
            *
            * @returns {void}
            */
        showMessage(): void;
        /**
            * To destroy the PagerMessage
            *
            * @function destroy
            * @returns {void}
            * @hidden
            */
        destroy(): void;
}

/**
    * IPager interface
    *
    * @hidden
    */
export interface IPager {
        newProp: {
                value: number | string | boolean;
        };
}
/**
    * `PagerDropDown` module handles selected pageSize from DropDownList.
    */
export class PagerDropDown {
        /**
            * Constructor for pager module
            *
            * @param {Pager} pagerModule - specifies the pagermodule
            * @hidden
            */
        constructor(pagerModule?: Pager);
        /**
            * For internal use only - Get the module name.
            *
            * @returns {string} returns the module name
            * @private
            * @hidden
            */
        protected getModuleName(): string;
        /**
            * The function is used to render pager dropdown
            *
            * @returns {void}
            * @hidden
            */
        render(): void;
        refresh(): void;
        setDropDownValue(prop: string, value: string | number | Object | boolean): void;
        addEventListener(): void;
        removeEventListener(): void;
        /**
            * To destroy the Pagerdropdown
            *
            * @param {string} args - specifies the arguments
            * @param {string} args.requestType - specfies the request type
            * @returns {void}
            * @hidden
            */
        destroy(args?: {
                requestType: string;
        }): void;
}

/**
    * Interface for a class Pager
    */
export interface PagerModel extends ComponentModel {
        /**
            * If `enableQueryString` set to true,
            * then it pass current page information as a query string along with the URL while navigating to other page.
            *
            * @default false
            */
        enableQueryString?: boolean;
        /**
            * If `enableExternalMessage` set to true, then it adds the message to Pager.
            *
            * @default false
            */
        enableExternalMessage?: boolean;
        /**
            * If `enablePagerMessage` set to true, then it adds the pager information.
            *
            * @default true
            */
        enablePagerMessage?: boolean;
        /**
            * Defines the records count of visible page.
            *
            * @default 12
            */
        pageSize?: number;
        /**
            * Defines the number of pages to display in pager container.
            *
            * @default 10
            */
        pageCount?: number;
        /**
            * Defines the current page number of pager.
            *
            * @default 1
            */
        currentPage?: number;
        /**
            * Gets or Sets the total records count which is used to render numeric container.
            *
            * @default null
            */
        totalRecordsCount?: number;
        /**
            * Defines the external message of Pager.
            *
            * @default null
            */
        externalMessage?: string;
        /**
            * If `pageSizes` set to true or Array of values,
            * It renders DropDownList in the pager which allow us to select pageSize from DropDownList.
            *
            * @default false
            */
        pageSizes?: boolean | (number | string)[];
        /**
            *  Defines the template as string or HTML element ID which renders customized elements in pager instead of default elements.
            *
            * @default null
            */
        template?: string;
        /**
            * Defines the customized text to append with numeric items.
            *
            * @default null
            */
        customText?: string;
        /**
            * Triggers when click on the numeric items.
            *
            * @default null
            */
        click?: EmitType<Object>;
        /**
            * Triggers after pageSize is selected in DropDownList.
            *
            * @default null
            */
        dropDownChanged?: EmitType<Object>;
        /**
            * Triggers when Pager is created.
            *
            * @default null
            */
        created?: EmitType<Object>;
}

/**
    * Represents the field name and direction of sort column.
    */
export class SortDescriptor extends ChildProperty<SortDescriptor> {
        /**
            * Defines the field name of sort column.
            *
            * @default ''
            */
        field: string;
        /**
            * Defines the direction of sort column.
            *
            * @default ''
            */
        direction: SortDirection;
        /**
            * @hidden
            * Defines the sorted column whether or from grouping operation.
            *
            * @default false
            */
        isFromGroup: boolean;
}
/**
    * Configures the sorting behavior of Grid.
    */
export class SortSettings extends ChildProperty<SortSettings> {
        /**
            * Specifies the columns to sort at initial rendering of Grid.
            * Also user can get current sorted columns.
            *
            * @default []
            */
        columns: SortDescriptorModel[];
        /**
            * If `allowUnsort` set to false the user can not get the grid in unsorted state by clicking the sorted column header.
            *
            * @default true
            */
        allowUnsort: boolean;
}
/**
    * Represents the predicate for the filter column.
    */
export class Predicate extends ChildProperty<Predicate> {
        /**
            * Defines the field name of the filter column.
            *
            * @default ''
            */
        field: string;
        /**
            * Defines the operator to filter records. The available operators and its supported data types are:
            * <table>
            * <tr>
            * <td colspan=1 rowspan=1>
            * Operator<br/></td><td colspan=1 rowspan=1>
            * Description<br/></td><td colspan=1 rowspan=1>
            * Supported Types<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * startswith<br/></td><td colspan=1 rowspan=1>
            * Checks whether the value begins with the specified value.<br/></td><td colspan=1 rowspan=1>
            * String<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * endswith<br/></td><td colspan=1 rowspan=1>
            * Checks whether the value ends with the specified value.<br/><br/></td><td colspan=1 rowspan=1>
            * <br/>String<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * contains<br/></td><td colspan=1 rowspan=1>
            * Checks whether the value contains the specified value.<br/><br/></td><td colspan=1 rowspan=1>
            * <br/>String<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * equal<br/></td><td colspan=1 rowspan=1>
            * Checks whether the value is equal to the specified value.<br/><br/></td><td colspan=1 rowspan=1>
            * <br/>String | Number | Boolean | Date<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * notequal<br/></td><td colspan=1 rowspan=1>
            * Checks for values that are not equal to the specified value.<br/><br/></td><td colspan=1 rowspan=1>
            * <br/>String | Number | Boolean | Date<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * greaterthan<br/></td><td colspan=1 rowspan=1>
            * Checks whether the value is greater than the specified value.<br/><br/></td><td colspan=1 rowspan=1>
            * Number | Date<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * greaterthanorequal<br/></td><td colspan=1 rowspan=1>
            * Checks whether the value is greater than or equal to the specified value.<br/><br/></td><td colspan=1 rowspan=1>
            * <br/>Number | Date<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * lessthan<br/></td><td colspan=1 rowspan=1>
            * Checks whether the value is less than the specified value.<br/><br/></td><td colspan=1 rowspan=1>
            * <br/>Number | Date<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * lessthanorequal<br/></td><td colspan=1 rowspan=1>
            * Checks whether the value is less than or equal to the specified value.<br/><br/></td><td colspan=1 rowspan=1>
            * <br/>Number | Date<br/></td></tr>
            * </table>
            *
            * @default null
            */
        operator: string;
        /**
            * Defines the value used to filter records.
            *
            * @default ''
            */
        value: string | number | Date | boolean;
        /**
            * If match case set to true, then filter records with exact match or else
            * filter records with case insensitive(uppercase and lowercase letters treated as same).
            *
            * @default null
            */
        matchCase: boolean;
        /**
            * If ignoreAccent is set to true, then filter ignores the diacritic characters or accents while filtering.
            *
            * @default false
            */
        ignoreAccent: boolean;
        /**
            * Defines the relationship between one filter query and another by using AND or OR predicate.
            *
            * @default null
            */
        predicate: string;
        /**
            * @hidden
            * Defines the actual filter value for the filter column.
            */
        actualFilterValue: Object;
        /**
            * @hidden
            * Defines the actual filter operator for the filter column.
            */
        actualOperator: Object;
        /**
            * @hidden
            * Defines the type of the filter column.
            */
        type: string;
        /**
            * @hidden
            * Defines the predicate of filter column.
            */
        ejpredicate: Object;
        /**
            * Defines the UID of filter column.
            */
        uid: string;
        /**
            * @hidden
            * Defines the foreignKey availability in filtered columns.
            */
        isForeignKey: boolean;
}
/**
    * Configures the infinite scroll behavior of Grid.
    */
export class InfiniteScrollSettings extends ChildProperty<InfiniteScrollSettings> {
        /**
            * If `enableCache` is set to true, the Grid will cache the loaded data to be reused next time it is needed.
            *
            * @default false
            */
        enableCache: boolean;
        /**
            * Defines the number of blocks to be maintained in Grid while settings enableCache as true.
            *
            * @default 3
            */
        maxBlocks: number;
        /**
            * Defines the number of blocks will render at the initial Grid rendering while enableCache is enabled.
            *
            * @default 3
            */
        initialBlocks: number;
}
/**
    * Configures the filtering behavior of the Grid.
    */
export class FilterSettings extends ChildProperty<FilterSettings> {
        /**
            * Specifies the columns to be filtered at initial rendering of the Grid. You can also get the columns that were currently filtered.
            *
            * @default []
            */
        columns: PredicateModel[];
        /**
            * Defines options for filtering type. The available options are
            * * `Menu` - Specifies the filter type as menu.
            * * `CheckBox` - Specifies the filter type as checkbox.
            * * `FilterBar` - Specifies the filter type as filterbar.
            * * `Excel` - Specifies the filter type as checkbox.
            *
            * @default FilterBar
            */
        type: FilterType;
        /**
            * Defines the filter bar modes. The available options are,
            * * `OnEnter`: Initiates filter operation after Enter key is pressed.
            * * `Immediate`: Initiates filter operation after a certain time interval. By default, time interval is 1500 ms.
            *
            * @default OnEnter
            */
        mode: FilterBarMode;
        /**
            * Shows or hides the filtered status message on the pager.
            *
            * @default true
            */
        showFilterBarStatus: boolean;
        /**
            * Defines the time delay (in milliseconds) in filtering records when the `Immediate` mode of filter bar is set.
            *
            * @default 1500
            */
        immediateModeDelay: number;
        /**
            * The `operators` is used to override the default operators in filter menu. This should be defined by type wise
            * (string, number, date and boolean). Based on the column type, this customize operator list will render in filter menu.
            *
            * > Check the [`Filter Menu Operator`](../../grid/how-to/#customizing-filter-menu-operators-list/) customization.
            *
            * @default null
            */
        operators: ICustomOptr;
        /**
            * If ignoreAccent set to true, then filter ignores the diacritic characters or accents while filtering.
            *
            * > Check the [`Diacritics`](../../grid/filtering/#diacritics/) filtering.
            *
            * @default false
            */
        ignoreAccent: boolean;
        /**
            * If `enableCaseSensitivity` is set to true then searches grid records with exact match based on the filter
            * operator. It will have no effect on number, boolean and Date fields.
            *
            * @default false
            */
        enableCaseSensitivity: boolean;
        /**
            * If 'showFilterBarOperator' is set to true, then it renders the dropdownlist component to select the operator
            * in filterbar input
            *
            * @default false
            */
        showFilterBarOperator: boolean;
}
/**
    * Configures the selection behavior of the Grid.
    */
export class SelectionSettings extends ChildProperty<SelectionSettings> {
        /**
            * Grid supports row, cell, and both (row and cell) selection mode.
            *
            * @default Row
            */
        mode: SelectionMode;
        /**
            * The cell selection modes are flow and box. It requires the selection
            * [`mode`](grid/#mode-selectionmode/) to be either cell or both.
            * * `Flow`: Selects the range of cells between start index and end index that also includes the other cells of the selected rows.
            * * `Box`: Selects the range of cells within the start and end column indexes that includes in between cells of rows within the range.
            * * `BoxWithBorder`: Selects the range of cells as like Box mode with borders.
            *
            * @default Flow
            */
        cellSelectionMode: CellSelectionMode;
        /**
            * Defines options for selection type. They are
            * * `Single`: Allows selection of only a row or a cell.
            * * `Multiple`: Allows selection of multiple rows or cells.
            *
            * @default Single
            */
        type: SelectionType;
        /**
            * If 'checkboxOnly' set to true, then the Grid selection is allowed only through checkbox.
            *
            * > To enable checkboxOnly selection, should specify the column type as`checkbox`.
            *
            * @default false
            */
        checkboxOnly: boolean;
        /**
            * If 'persistSelection' set to true, then the Grid selection is persisted on all operations.
            * For persisting selection in the Grid, any one of the column should be enabled as a primary key.
            *
            * @default false
            */
        persistSelection: boolean;
        /**
            * Defines options for checkbox selection Mode. They are
            * * `Default`: This is the default value of the checkboxMode. In this mode, user can select multiple rows by clicking rows one by one.
            * * `ResetOnRowClick`: In ResetOnRowClick mode, on clicking a row it will reset previously selected row and also multiple
            *  rows can be selected by using CTRL or SHIFT key.
            *
            * @default Default
            */
        checkboxMode: CheckboxSelectionType;
        /**
            * If 'enableSimpleMultiRowSelection' set to true, then the user can able to perform multiple row selection with single clicks.
            *
            * @default false
            */
        enableSimpleMultiRowSelection: boolean;
        /**
            * If 'enableToggle' set to true, then the user can able to perform toggle for the selected row.
            *
            * @default true
            */
        enableToggle: boolean;
        /**
            * If 'allowColumnSelection' set to true, then the user can able to select the columns.
            *
            * @default false
            */
        allowColumnSelection: boolean;
}
/**
    * Configures the search behavior of the Grid.
    */
export class SearchSettings extends ChildProperty<SearchSettings> {
        /**
            * Specifies the collection of fields included in search operation. By default, bounded columns of the Grid are included.
            *
            * @default []
            */
        fields: string[];
        /**
            * Specifies the key value to search Grid records at initial rendering.
            * You can also get the current search key.
            *
            * @default ''
            */
        key: string;
        /**
            * Defines the operator to search records. The available operators are:
            * <table>
            * <tr>
            * <td colspan=1 rowspan=1>
            * Operator<br/></td><td colspan=1 rowspan=1>
            * Description<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * startswith<br/></td><td colspan=1 rowspan=1>
            * Checks whether the string begins with the specified string.<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * endswith<br/></td><td colspan=1 rowspan=1>
            * Checks whether the string ends with the specified string.<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * contains<br/></td><td colspan=1 rowspan=1>
            * Checks whether the string contains the specified string. <br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * equal<br/></td><td colspan=1 rowspan=1>
            * Checks whether the string is equal to the specified string.<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * notequal<br/></td><td colspan=1 rowspan=1>
            * Checks for strings not equal to the specified string. <br/></td></tr>
            * </table>
            *
            * @default 'contains'
            */
        operator: string;
        /**
            * If `ignoreCase` is set to false, searches records that match exactly, else
            * searches records that are case insensitive(uppercase and lowercase letters treated the same).
            *
            * @default true
            */
        ignoreCase: boolean;
        /**
            * If ignoreAccent set to true, then filter ignores the diacritic characters or accents while filtering.
            *
            * > Check the [`Diacritics`](../../grid/filtering/#diacritics/) filtering.
            *
            * @default false
            */
        ignoreAccent: boolean;
}
/**
    * Configures the row drop settings of the Grid.
    */
export class RowDropSettings extends ChildProperty<RowDropSettings> {
        /**
            * Defines the ID of droppable component on which row drop should occur.
            *
            * @default null
            */
        targetID: string;
}
/**
    * Configures the text wrap settings of the Grid.
    */
export class TextWrapSettings extends ChildProperty<TextWrapSettings> {
        /**
            * Defines the `wrapMode` of the Grid. The available modes are:
            * * `Both`: Wraps both the header and content.
            * * `Content`: Wraps the header alone.
            * * `Header`: Wraps the content alone.
            *
            * @default Both
            */
        wrapMode: WrapMode;
}
/**
    * Configures the resize behavior of the Grid.
    */
export class ResizeSettings extends ChildProperty<ResizeSettings> {
        /**
            * Defines the mode of Grid column resizing. The available modes are:
            * `Normal`: Columns will not be adjusted to fit the remaining space.
            * `Auto`: Resized column width will be adjusted by other columns automatically.
            *
            * @default Normal
            */
        mode: ResizeMode;
}
/**
    * Configures the group behavior of the Grid.
    */
export class GroupSettings extends ChildProperty<GroupSettings> {
        /**
            * If `showDropArea` is set to true, the group drop area element will be visible at the top of the Grid.
            *
            * @default true
            */
        showDropArea: boolean;
        /**
            * If `allowReordering` is set to true, Grid allows the grouped elements to be reordered.
            *
            * @default false
            */
        allowReordering: boolean;
        /**
            * If `showToggleButton` set to true, then the toggle button will be showed in the column headers which can be used to group
            * or ungroup columns by clicking them.
            *
            * @default false
            */
        showToggleButton: boolean;
        /**
            * If `showGroupedColumn` is set to false, it hides the grouped column after grouping.
            *
            * @default false
            */
        showGroupedColumn: boolean;
        /**
            * If `showUngroupButton` set to false, then ungroup button is hidden in dropped element.
            * It can be used to ungroup the grouped column when click on ungroup button.
            *
            * @default true
            */
        showUngroupButton: boolean;
        /**
            * If `disablePageWiseAggregates` set to true, then the group aggregate value will
            * be calculated from the whole data instead of paged data and two requests will be made for each page
            * when Grid bound with remote service.
            *
            * @default false
            */
        disablePageWiseAggregates: boolean;
        /**
            * Specifies the column names to group at initial rendering of the Grid.
            * You can also get the currently grouped columns.
            *
            * @default []
            */
        columns: string[];
        /**
            * The Caption Template allows user to display the string or HTML element in group caption.
            * > It accepts either the
            * [template string](https://ej2.syncfusion.com/documentation/common/template-engine/) or the HTML element ID.
            *
            * @default ''
            */
        captionTemplate: string;
        /**
            * The Lazy load grouping, allows the Grid to render only the initial level caption rows in collapsed state while grouping.
            * The child rows of each caption will render only when we expand the captions.
            *
            * @default false
            */
        enableLazyLoading: boolean;
}
/**
    * Configures the edit behavior of the Grid.
    */
export class EditSettings extends ChildProperty<EditSettings> {
        /**
            * If `allowAdding` is set to true, new records can be added to the Grid.
            *
            * @default false
            */
        allowAdding: boolean;
        /**
            * If `allowEditing` is set to true, values can be updated in the existing record.
            *
            * @default false
            */
        allowEditing: boolean;
        /**
            * If `allowDeleting` is set to true, existing record can be deleted from the Grid.
            *
            * @default false
            */
        allowDeleting: boolean;
        /**
            * Defines the mode to edit. The available editing modes are:
            * * Normal
            * * Dialog
            * * Batch
            *
            * @default Normal
            */
        mode: EditMode;
        /**
            * If `allowEditOnDblClick` is set to false, Grid will not allow editing of a record on double click.
            *
            * @default true
            */
        allowEditOnDblClick: boolean;
        /**
            * if `showConfirmDialog` is set to false, confirm dialog does not show when batch changes are saved or discarded.
            *
            * @default true
            */
        showConfirmDialog: boolean;
        /**
            * If `showDeleteConfirmDialog` is set to true, confirm dialog will show delete action. You can also cancel delete command.
            *
            * @default false
            */
        showDeleteConfirmDialog: boolean;
        /**
            * Defines the custom edit elements for the dialog template.
            *
            * @default ''
            * @aspType string
            */
        template: string | Object;
        /**
            * Defines the custom edit elements for the dialog header template.
            *
            * @default ''
            * @aspType string
            */
        headerTemplate: string | Object;
        /**
            * Defines the custom edit elements for the dialog footer template.
            *
            * @default ''
            * @aspType string
            */
        footerTemplate: string | Object;
        /**
            * Defines the position of adding a new row. The available position are:
            * * Top
            * * Bottom
            *
            * @default Top
            */
        newRowPosition: NewRowPosition;
        /**
            * Defines the dialog params to edit.
            *
            * @default {}
            */
        dialog: IDialogUI;
        /**
            * If allowNextRowEdit is set to true, editing is done to next row. By default allowNextRowEdit is set to false.
            *
            * @default false
            */
        allowNextRowEdit: boolean;
}
/**
    * Represents the Grid component.
    * ```html
    * <div id="grid"></div>
    * <script>
    *  var gridObj = new Grid({ allowPaging: true });
    *  gridObj.appendTo("#grid");
    * </script>
    * ```
    */
export class Grid extends Component<HTMLElement> implements INotifyPropertyChanged {
        isPreventScrollEvent: boolean;
        /** @hidden */
        invokedFromMedia: boolean;
        /** @hidden */
        tableIndex: number;
        /** @hidden */
        recordsCount: number;
        /** @hidden */
        isVirtualAdaptive: boolean;
        /** @hidden */
        vRows: Row<Column>[];
        /** @hidden */
        vcRows: Row<Column>[];
        /** @hidden */
        vGroupOffsets: {
                [x: number]: number;
        };
        /** @hidden */
        isInitialLoad: boolean;
        /**
            * @hidden
            */
        mergeCells: {
                [key: string]: number;
        };
        /**
            * @hidden
            */
        checkAllRows: CheckState;
        /**
            * @hidden
            */
        isCheckBoxSelection: boolean;
        /**
            * @hidden
            */
        isPersistSelection: boolean;
        /**
            * Gets the currently visible records of the Grid.
            */
        currentViewData: Object[];
        /**
            * Gets the parent Grid details.
            */
        parentDetails: ParentDetails;
        /** @hidden */
        isEdit: boolean;
        /** @hidden */
        commonQuery: Query;
        /** @hidden */
        scrollPosition: ScrollPositionType;
        /** @hidden */
        isLastCellPrimaryKey: boolean;
        /** @hidden */
        filterOperators: IFilterOperator;
        /** @hidden */
        localeObj: L10n;
        /** @hidden */
        isManualRefresh: boolean;
        /** @hidden */
        enableDeepCompare: boolean;
        isSelectedRowIndexUpdating: boolean;
        /** @hidden */
        lockcolPositionCount: number;
        /** @hidden */
        prevPageMoving: boolean;
        /** @hidden */
        pageTemplateChange: boolean;
        /** @hidden */
        isAutoGen: boolean;
        /** @hidden */
        commandDelIndex: number;
        /** @hidden */
        asyncTimeOut: number;
        /** @hidden */
        isExportGrid: boolean;
        /**
            * @hidden
            */
        renderModule: Render;
        /**
            * @hidden
            */
        headerModule: IRenderer;
        /**
            * @hidden
            */
        contentModule: IRenderer;
        /**
            * @hidden
            */
        valueFormatterService: IValueFormatter;
        /**
            * @hidden
            */
        serviceLocator: ServiceLocator;
        /**
            * @hidden
            */
        ariaService: AriaService;
        /**
            * The `keyboardModule` is used to manipulate keyboard interactions in the Grid.
            */
        keyboardModule: KeyboardEvents;
        /**
            * @hidden
            */
        widthService: ColumnWidthService;
        /**
            * The `rowDragAndDropModule` is used to manipulate row reordering in the Grid.
            */
        rowDragAndDropModule: RowDD;
        /**
            * The `pagerModule` is used to manipulate paging in the Grid.
            */
        pagerModule: Grid_Page;
        /**
            * The `sortModule` is used to manipulate sorting in the Grid.
            */
        sortModule: Sort;
        /**
            * The `filterModule` is used to manipulate filtering in the Grid.
            */
        filterModule: Filter;
        /**
            * The `selectionModule` is used to manipulate selection behavior in the Grid.
            */
        selectionModule: GridSelection;
        /**
            * The `showHider` is used to manipulate column's show/hide operation in the Grid.
            */
        showHider: ShowHide;
        /**
            * The `searchModule` is used to manipulate searching in the Grid.
            */
        searchModule: Search;
        /**
            * The `scrollModule` is used to manipulate scrolling in the Grid.
            */
        scrollModule: Scroll;
        /**
            * The `infiniteScrollModule` is used to manipulate infinite scrolling in the Grid.
            */
        infiniteScrollModule: InfiniteScroll;
        /**
            * The `reorderModule` is used to manipulate reordering in the Grid.
            */
        reorderModule: Reorder;
        /**
            * `resizeModule` is used to manipulate resizing in the Grid.
            *
            * @hidden
            */
        resizeModule: Resize;
        /**
            * The `groupModule` is used to manipulate grouping behavior in the Grid.
            */
        groupModule: Group;
        /**
            * The `printModule` is used to handle the printing feature of the Grid.
            */
        printModule: Print;
        /**
            * The `excelExportModule` is used to handle Excel exporting feature in the Grid.
            */
        excelExportModule: ExcelExport;
        /**
            * The `pdfExportModule` is used to handle PDF exporting feature in the Grid.
            */
        pdfExportModule: PdfExport;
        /**
            * `detailRowModule` is used to handle detail rows rendering in the Grid.
            *
            * @hidden
            */
        detailRowModule: DetailRow;
        /**
            * The `toolbarModule` is used to manipulate ToolBar items and its action in the Grid.
            */
        toolbarModule: Toolbar;
        /**
            * The `contextMenuModule` is used to handle context menu items and its action in the Grid.
            */
        contextMenuModule: ContextMenu;
        /**
            * The `columnMenuModule` is used to manipulate column menu items and its action in the Grid.
            */
        columnMenuModule: ColumnMenu;
        /**
            * The `editModule` is used to handle Grid content manipulation.
            */
        editModule: Edit;
        /**
            * `clipboardModule` is used to handle Grid copy action.
            */
        clipboardModule: Clipboard;
        /**
            * `columnchooserModule` is used to dynamically show or hide the Grid columns.
            *
            * @hidden
            */
        columnChooserModule: ColumnChooser;
        /**
            * The `aggregateModule` is used to manipulate aggregate functionality in the Grid.
            *
            * @hidden
            */
        aggregateModule: Aggregate;
        /** @hidden */
        focusModule: FocusStrategy;
        adaptiveDlgTarget: HTMLElement;
        protected needsID: boolean;
        /**
            * Defines the schema of dataSource.
            * If the `columns` declaration is empty or undefined then the `columns` are automatically generated from data source.
            * {% codeBlock src='grid/columns/index.md' %}{% endcodeBlock %}
            *
            * @default []
            */
        columns: Column[] | string[] | ColumnModel[];
        /**
            * If `enableAltRow` is set to true, the grid will render with `e-altrow` CSS class to the alternative tr elements.
            * > Check the [`AltRow`](../../grid/row/#styling-alternate-rows/) to customize the styles of alternative rows.
            * {% codeBlock src='grid/enableAltRow/index.md' %}{% endcodeBlock %}
            *
            * @default true
            */
        enableAltRow: boolean;
        /**
            * If `enableHover` is set to true, the row hover is enabled in the Grid.
            * {% codeBlock src='grid/enableHover/index.md' %}{% endcodeBlock %}
            *
            * @default true
            */
        enableHover: boolean;
        /**
            * If `enableAutoFill` is set to true, then the auto fill icon will displayed on cell selection for copy cells.
            * It requires the selection `mode` to be Cell and `cellSelectionMode` to be `Box`.
            * {% codeBlock src='grid/enableAutoFill/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        enableAutoFill: boolean;
        /**
            * Enables or disables the key board interaction of Grid.
            *
            * @default true
            */
        allowKeyboard: boolean;
        /**
            * If 'enableStickyHeader' set to true, then the user can able to make the column headers visible when the document is scrolled.
            *
            * @default false
            */
        enableStickyHeader: boolean;
        /**
            * If `allowTextWrap` set to true,
            * then text content will wrap to the next line when its text content exceeds the width of the Column Cells.
            * {% codeBlock src='grid/allowTextWrap/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        allowTextWrap: boolean;
        /**
            * Configures the text wrap in the Grid.
            * {% codeBlock src='grid/textWrapSettings/index.md' %}{% endcodeBlock %}
            *
            * @default {wrapMode:"Both"}
            */
        textWrapSettings: TextWrapSettingsModel;
        /**
            * Defines the resizing behavior of the Grid.
            *
            * @default {mode:"Normal"}
            */
        resizeSettings: ResizeSettingsModel;
        /**
            * If `allowPaging` is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.
            *
            * > Check the [`Paging`](../../grid/paging/) to configure the grid pager.
            * {% codeBlock src='grid/allowPaging/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        allowPaging: boolean;
        /**
            * Configures the pager in the Grid.
            * {% codeBlock src='grid/pageSettings/index.md' %}{% endcodeBlock %}
            *
            * @default {currentPage: 1, pageSize: 12, pageCount: 8, enableQueryString: false, pageSizes: false, template: null}
            */
        pageSettings: PageSettingsModel;
        /**
            * If `enableVirtualization` set to true, then the Grid will render only the rows visible within the view-port
            * and load subsequent rows on vertical scrolling. This helps to load large dataset in Grid.
            * {% codeBlock src='grid/enableVirtualization/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        enableVirtualization: boolean;
        /**
            * If `enableColumnVirtualization` set to true, then the Grid will render only the columns visible within the view-port
            * and load subsequent columns on horizontal scrolling. This helps to load large dataset of columns in Grid.
            * {% codeBlock src='grid/enableColumnVirtualization/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        enableColumnVirtualization: boolean;
        /**
            * If `enableInfiniteScrolling` set to true, then the data will be loaded in Grid when the scrollbar reaches the end.
            * This helps to load large dataset in Grid.
            * {% codeBlock src='grid/enableInfiniteScrolling/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        enableInfiniteScrolling: boolean;
        /**
            * Configures the search behavior in the Grid.
            * {% codeBlock src='grid/searchSettings/index.md' %}{% endcodeBlock %}
            *
            * @default { ignoreCase: true, fields: [], operator: 'contains', key: '' }
            */
        searchSettings: SearchSettingsModel;
        /**
            * If `allowSorting` is set to true, it allows sorting of grid records when column header is clicked.
            *
            * > Check the [`Sorting`](../../grid/sorting/) to customize its default behavior.
            * {% codeBlock src='grid/allowSorting/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        allowSorting: boolean;
        /**
            *  Defines the mode of clip. The available modes are,
            * `Clip`: Truncates the cell content when it overflows its area.
            * `Ellipsis`: Displays ellipsis when the cell content overflows its area.
            * `EllipsisWithTooltip`:  Displays ellipsis when the cell content overflows its area,
            *  also it will display the tooltip while hover on ellipsis is applied.
            * {% codeBlock src='grid/clipMode/index.md' %}{% endcodeBlock %}
            *
            * @default Ellipsis
            */
        clipMode: ClipMode;
        /**
            * If `allowMultiSorting` set to true, then it will allow the user to sort multiple column in the grid.
            * > `allowSorting` should be true.
            * {% codeBlock src='grid/allowMultiSorting/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        allowMultiSorting: boolean;
        /**
            * If `allowExcelExport` set to true, then it will allow the user to export grid to Excel file.
            *
            * > Check the [`ExcelExport`](../../grid/excel-exporting/) to configure exporting document.
            * {% codeBlock src='grid/allowExcelExport/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        allowExcelExport: boolean;
        /**
            * If `allowPdfExport` set to true, then it will allow the user to export grid to Pdf file.
            *
            * > Check the [`Pdfexport`](../../grid/pdf-export/) to configure the exporting document.
            * {% codeBlock src='grid/allowPdfExport/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        allowPdfExport: boolean;
        /**
            * Configures the sort settings.
            * {% codeBlock src='grid/sortSettings/index.md' %}{% endcodeBlock %}
            *
            * @default {columns:[]}
            */
        sortSettings: SortSettingsModel;
        /**
            * Configures the infinite scroll settings.
            * {% codeBlock src='grid/infiniteScrollSettings/index.md' %}{% endcodeBlock %}
            *
            * @default { enableCache: false, maxBlocks: 5, initialBlocks: 5 }
            */
        infiniteScrollSettings: InfiniteScrollSettingsModel;
        /**
            * If `allowSelection` is set to true, it allows selection of (highlight row) Grid records by clicking it.
            * {% codeBlock src='grid/allowSelection/index.md' %}{% endcodeBlock %}
            *
            * @default true
            */
        allowSelection: boolean;
        /**
            * The `selectedRowIndex` allows you to select a row at initial rendering.
            * You can also get the currently selected row index.
            * {% codeBlock src='grid/selectedRowIndex/index.md' %}{% endcodeBlock %}
            *
            * @default -1
            */
        selectedRowIndex: number;
        /**
            * Configures the selection settings.
            * {% codeBlock src='grid/selectionSettings/index.md' %}{% endcodeBlock %}
            *
            * @default {mode: 'Row', cellSelectionMode: 'Flow', type: 'Single'}
            */
        selectionSettings: SelectionSettingsModel;
        /**
            * If `allowFiltering` set to true the filter bar will be displayed.
            * If set to false the filter bar will not be displayed.
            * Filter bar allows the user to filter grid records with required criteria.
            *
            * > Check the [`Filtering`](../../grid/filtering/) to customize its default behavior.
            * {% codeBlock src='grid/allowFiltering/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        allowFiltering: boolean;
        /**
            * Defines the grid row elements rendering direction. The available directions are,
            * * `Horizontal`: Renders the grid row elements in the horizontal direction
            * * `Vertical`: Renders the grid row elements in the vertical direction
            *
            * @default Horizontal
            */
        rowRenderingMode: RowRenderingDirection;
        /**
            * If `enableAdaptiveUI` set to true the grid filter, sort, and edit dialogs render adaptively.
            *
            * @default false
            */
        enableAdaptiveUI: boolean;
        /**
            * If `allowReordering` is set to true, Grid columns can be reordered.
            * Reordering can be done by drag and drop of a particular column from one index to another index.
            * > If Grid is rendered with stacked headers, reordering is allowed only at the same level as the column headers.
            * {% codeBlock src='grid/allowReordering/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        allowReordering: boolean;
        /**
            * If `allowResizing` is set to true, Grid columns can be resized.
            * {% codeBlock src='grid/allowResizing/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        allowResizing: boolean;
        /**
            * If `allowRowDragAndDrop` is set to true, you can drag and drop grid rows at another grid.
            * {% codeBlock src='grid/allowRowDragAndDrop/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        allowRowDragAndDrop: boolean;
        /**
            * Configures the row drop settings.
            *
            * @default {targetID: ''}
            */
        rowDropSettings: RowDropSettingsModel;
        /**
            * Configures the filter settings of the Grid.
            * {% codeBlock src='grid/filterSettings/index.md' %}{% endcodeBlock %}
            *
            * @default {columns: [], type: 'FilterBar', mode: 'Immediate', showFilterBarStatus: true, immediateModeDelay: 1500 , operators: {}}
            */
        filterSettings: FilterSettingsModel;
        /**
            * If `allowGrouping` set to true, then it will allow the user to dynamically group or ungroup columns.
            * Grouping can be done by drag and drop columns from column header to group drop area.
            *
            * > Check the [`Grouping`](../../grid/grouping/) to customize its default behavior.
            * {% codeBlock src='grid/allowGrouping/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        allowGrouping: boolean;
        /**
            * If `enableImmutableMode`  is set to true, the grid will reuse old rows if it exists in the new result instead of
            * full refresh while performing the grid actions.
            *
            * @default false
            */
        enableImmutableMode: boolean;
        /**
            * If `showColumnMenu` set to true, then it will enable the column menu options in each columns.
            *
            * > Check the [`Column menu`](../../grid/columns/#column-menu/) for its configuration.
            * {% codeBlock src='grid/showColumnMenu/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        showColumnMenu: boolean;
        /**
            * Configures the group settings.
            * {% codeBlock src='grid/groupSettings/index.md' %}{% endcodeBlock %}
            *
            * @default {showDropArea: true, showToggleButton: false, showGroupedColumn: false, showUngroupButton: true, columns: []}
            */
        groupSettings: GroupSettingsModel;
        /**
            * Configures the edit settings.
            * {% codeBlock src='grid/editSettings/index.md' %}{% endcodeBlock %}
            *
            * @default { allowAdding: false, allowEditing: false, allowDeleting: false, mode:'Normal',
            * allowEditOnDblClick: true, showConfirmDialog: true, showDeleteConfirmDialog: false }
            */
        editSettings: EditSettingsModel;
        /**
            * Configures the Grid aggregate rows.
            * {% codeBlock src='grid/aggregates/index.md' %}{% endcodeBlock %}
            * > Check the [`Aggregates`](../../grid/aggregates/) for its configuration.
            *
            * @default []
            */
        aggregates: AggregateRowModel[];
        /**
            * If `showColumnChooser` is set to true, it allows you to dynamically show or hide columns.
            *
            * > Check the [`ColumnChooser`](../../grid/columns/#column-chooser/) for its configuration.
            * {% codeBlock src='grid/showColumnChooser/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        showColumnChooser: boolean;
        /**
            * Configures the column chooser in the Grid.
            *
            * @default { columnChooserOperator: 'startsWith' }
            */
        columnChooserSettings: ColumnChooserSettingsModel;
        /**
            * If `enableHeaderFocus` set to true, then header element will be focused when focus moves to grid.
            *
            * @default false
            */
        enableHeaderFocus: boolean;
        /**
            * Defines the scrollable height of the grid content.
            * {% codeBlock src='grid/height/index.md' %}{% endcodeBlock %}
            *
            * @default 'auto'
            */
        height: string | number;
        /**
            * Defines the Grid width.
            * {% codeBlock src='grid/width/index.md' %}{% endcodeBlock %}
            *
            * @default 'auto'
            */
        width: string | number;
        /**
            * Defines the mode of grid lines. The available modes are,
            * * `Both`: Displays both horizontal and vertical grid lines.
            * * `None`: No grid lines are displayed.
            * * `Horizontal`: Displays the horizontal grid lines only.
            * * `Vertical`: Displays the vertical grid lines only.
            * * `Default`: Displays grid lines based on the theme.
            * {% codeBlock src='grid/gridLines/index.md' %}{% endcodeBlock %}
            *
            * @default Default
            */
        gridLines: GridLine;
        /**
            * The row template that renders customized rows from the given template.
            * By default, Grid renders a table row for every data source item.
            * > * It accepts either [template string](../../common/template-engine/) or HTML element ID.
            * > * The row template must be a table row.
            *
            * > Check the [`Row Template`](../../grid/row/) customization.
            */
        rowTemplate: string;
        /**
            * The detail template allows you to show or hide additional information about a particular row.
            *
            * > It accepts either the [template string](../../common/template-engine/) or the HTML element ID.
            *
            * {% codeBlock src="grid/detail-template-api/index.ts" %}{% endcodeBlock %}
            */
        detailTemplate: string;
        /**
            * Defines Grid options to render child Grid.
            * It requires the [`queryString`](/#querystring) for parent
            * and child relationship.
            *
            * > Check the [`Child Grid`](../../grid/hierarchy-grid/) for its configuration.
            */
        childGrid: GridModel;
        /**
            * Defines the relationship between parent and child datasource. It acts as the foreign key for parent datasource.
            */
        queryString: string;
        /**
            * Defines the print modes. The available print modes are
            * * `AllPages`: Prints all pages of the Grid.
            * * `CurrentPage`: Prints the current page of the Grid.
            * {% codeBlock src='grid/printMode/index.md' %}{% endcodeBlock %}
            *
            * @default AllPages
            */
        printMode: PrintMode;
        /**
            * Defines the hierarchy grid print modes. The available modes are
            * * `Expanded` - Prints the master grid with expanded child grids.
            * * `All` - Prints the master grid with all the child grids.
            * * `None` - Prints the master grid alone.
            *
            * @default Expanded
            */
        hierarchyPrintMode: HierarchyGridPrintMode;
        /**
            * It is used to render grid table rows.
            * If the `dataSource` is an array of JavaScript objects,
            * then Grid will create instance of [`DataManager`](https://ej2.syncfusion.com/documentation/api/data/dataManager/)
            * from this `dataSource`.
            * If the `dataSource` is an existing [`DataManager`](https://ej2.syncfusion.com/documentation/api/data/dataManager/),
            *  the Grid will not initialize a new one.
            *
            * > Check the available [`Adaptors`](../../data/adaptors/) to customize the data operation.
            * {% codeBlock src='grid/dataSource/index.md' %}{% endcodeBlock %}
            *
            * @default []
            * @isGenericType true
            */
        dataSource: Object | DataManager | DataResult;
        /**
            * Defines the height of Grid rows.
            * {% codeBlock src='grid/rowHeight/index.md' %}{% endcodeBlock %}
            *
            * @default null
            */
        rowHeight: number;
        /**
            * Defines the external [`Query`](https://ej2.syncfusion.com/documentation/data/api-query.html)
            * that will be executed along with data processing.
            * {% codeBlock src='grid/query/index.md' %}{% endcodeBlock %}
            *
            * @default null
            */
        query: Query;
        /**
            * `toolbar` defines the ToolBar items of the Grid.
            * It contains built-in and custom toolbar items.
            * If a string value is assigned to the `toolbar` option, it is considered as the template for the whole Grid ToolBar.
            * If an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.
            * <br><br>
            * The available built-in ToolBar items are:
            * * Add: Adds a new record.
            * * Edit: Edits the selected record.
            * * Update: Updates the edited record.
            * * Delete: Deletes the selected record.
            * * Cancel: Cancels the edit state.
            * * Search: Searches records by the given key.
            * * Print: Prints the Grid.
            * * ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)
            * * PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)
            * * CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)<br><br>
            * The following code example implements the custom toolbar items.
            *
            *  > Check the [`Toolbar`](../../grid/tool-bar/#custom-toolbar-items/) to customize its default items.
            *
            * {% codeBlock src="grid/toolbar-api/index.ts" %}{% endcodeBlock %}
            * {% codeBlock src='grid/toolbar/index.md' %}{% endcodeBlock %}
            *
            * @default null
            */
        toolbar: (ToolbarItems | string | ItemModel | ToolbarItem)[];
        /**
            * `contextMenuItems` defines both built-in and custom context menu items.
            * <br><br>
            * The available built-in items are,
            * * `AutoFitAll` - Auto fit the size of all columns.
            * * `AutoFit` - Auto fit the current column.
            * * `Group` - Group by current column.
            * * `Ungroup` - Ungroup by current column.
            * * `Edit` - Edit the current record.
            * * `Delete` - Delete the current record.
            * * `Save` - Save the edited record.
            * * `Cancel` - Cancel the edited state.
            * * `Copy` - Copy the selected records.
            * * `PdfExport` - Export the grid as Pdf format.
            * * `ExcelExport` - Export the grid as Excel format.
            * * `CsvExport` - Export the grid as CSV format.
            * * `SortAscending` - Sort the current column in ascending order.
            * * `SortDescending` - Sort the current column in descending order.
            * * `FirstPage` - Go to the first page.
            * * `PrevPage` - Go to the previous page.
            * * `LastPage` - Go to the last page.
            * * `NextPage` - Go to the next page.
            *
            * @default null
            */
        contextMenuItems: ContextMenuItem[] | ContextMenuItemModel[];
        /**
            * `columnMenuItems` defines both built-in and custom column menu items.
            * <br><br>
            * The available built-in items are,
            * * `AutoFitAll` - Auto fit the size of all columns.
            * * `AutoFit` - Auto fit the current column.
            * * `Group` - Group by current column.
            * * `Ungroup` - Ungroup by current column.
            * * `SortAscending` - Sort the current column in ascending order.
            * * `SortDescending` - Sort the current column in descending order.
            * * `Filter` - Filter options will show based on filterSettings property like checkbox filter, excel filter, menu filter.
            *
            * @default null
            */
        columnMenuItems: ColumnMenuItem[] | ColumnMenuItemModel[];
        /**
            * It used to render toolbar template
            *
            * @default null
            */
        toolbarTemplate: string;
        /**
            * It used to render pager template
            *
            * @default null
            */
        pagerTemplate: string;
        /**
            * Gets or sets the number of frozen rows.
            * {% codeBlock src='grid/frozenRows/index.md' %}{% endcodeBlock %}
            *
            * @default 0
            */
        frozenRows: number;
        /**
            * Gets or sets the number of frozen columns.
            * {% codeBlock src='grid/frozenColumns/index.md' %}{% endcodeBlock %}
            *
            * @default 0
            */
        frozenColumns: number;
        /**
            * `columnQueryMode`provides options to retrive data from the datasource.Their types are
            * * `All`: It Retrives whole datasource.
            * * `Schema`: Retrives data for all the defined columns in grid from the datasource.
            * * `ExcludeHidden`: Retrives data only for visible columns of grid from the dataSource.
            *
            * @default All
            */
        columnQueryMode: ColumnQueryModeType;
        /**
            * Gets or sets the current action details.
            *
            * @default {}
            */
        currentAction: ActionArgs;
        /**
            * Defines the version for Grid persistence.
            */
        ej2StatePersistenceVersion: string;
        /**
            * Triggers when the component is created.
            *
            * @event created
            */
        created: EmitType<Object>;
        /**
            * Triggers when the component is destroyed.
            *
            * @event destroyed
            */
        destroyed: EmitType<Object>;
        /**
            * This event allows customization of Grid properties before rendering.
            *
            * @event load
            */
        load: EmitType<Object>;
        /**
            * Triggered every time a request is made to access row information, element, or data.
            * This will be triggered before the row element is appended to the Grid element.
            *
            * @event rowDataBound
            */
        rowDataBound: EmitType<RowDataBoundEventArgs>;
        /**
            * Triggered every time a request is made to access cell information, element, or data.
            * This will be triggered before the cell element is appended to the Grid element.
            *
            * @event queryCellInfo
            */
        queryCellInfo: EmitType<QueryCellInfoEventArgs>;
        /**
            * Triggered for stacked header.
            *
            * @event headerCellInfo
            */
        headerCellInfo: EmitType<HeaderCellInfoEventArgs>;
        /**
            * Triggers when Grid actions such as sorting, filtering, paging, grouping etc., starts.
            * {% codeBlock src='grid/actionBegin/index.md' %}{% endcodeBlock %}
            *
            * @event actionBegin
            */
        actionBegin: EmitType<PageEventArgs | GroupEventArgs | FilterEventArgs | SearchEventArgs | SortEventArgs | AddEventArgs | SaveEventArgs | EditEventArgs | DeleteEventArgs | ActionEventArgs>;
        /**
            * Triggers when Grid actions such as sorting, filtering, paging, grouping etc. are completed.
            *
            * @event actionComplete
            */
        actionComplete: EmitType<PageEventArgs | GroupEventArgs | FilterEventArgs | SearchEventArgs | SortEventArgs | AddEventArgs | SaveEventArgs | EditEventArgs | DeleteEventArgs | ActionEventArgs>;
        /**
            * Triggers when any Grid action failed to achieve the desired results.
            *
            * @event actionFailure
            */
        actionFailure: EmitType<FailureEventArgs>;
        /**
            * Triggers when data source is populated in the Grid.
            *
            * @event dataBound
            */
        dataBound: EmitType<Object>;
        /**
            * Triggers when record is double clicked.
            *
            * @event recordDoubleClick
            */
        recordDoubleClick: EmitType<RecordDoubleClickEventArgs>;
        /**
            * Triggers when record is clicked.
            *
            * @event recordClick
            */
        recordClick: EmitType<RecordClickEventArgs>;
        /**
            * Triggers before row selection occurs.
            *
            * @event rowSelecting
            */
        rowSelecting: EmitType<RowSelectingEventArgs>;
        /**
            * Triggers after a row is selected.
            *
            * @event rowSelected
            */
        rowSelected: EmitType<RowSelectEventArgs>;
        /**
            * Triggers before deselecting the selected row.
            *
            * @event rowDeselecting
            */
        rowDeselecting: EmitType<RowDeselectEventArgs>;
        /**
            * Triggers when a selected row is deselected.
            *
            * @event rowDeselected
            */
        rowDeselected: EmitType<RowDeselectEventArgs>;
        /**
            * Triggers before any cell selection occurs.
            *
            * @event cellSelecting
            */
        cellSelecting: EmitType<CellSelectingEventArgs>;
        /**
            * Triggers after a cell is selected.
            *
            * @event cellSelected
            */
        cellSelected: EmitType<CellSelectEventArgs>;
        /**
            * Triggers before the selected cell is deselecting.
            *
            * @event cellDeselecting
            */
        cellDeselecting: EmitType<CellDeselectEventArgs>;
        /**
            * Triggers when a particular selected cell is deselected.
            *
            * @event cellDeselected
            */
        cellDeselected: EmitType<CellDeselectEventArgs>;
        /**
            * Triggers before column selection occurs.
            *
            * @event columnSelecting
            */
        columnSelecting: EmitType<ColumnSelectingEventArgs>;
        /**
            * Triggers after a column is selected.
            *
            * @event columnSelected
            */
        columnSelected: EmitType<ColumnSelectEventArgs>;
        /**
            * Triggers before deselecting the selected column.
            *
            * @event columnDeselecting
            */
        columnDeselecting: EmitType<ColumnDeselectEventArgs>;
        /**
            * Triggers when a selected column is deselected.
            *
            * @event columnDeselected
            */
        columnDeselected: EmitType<ColumnDeselectEventArgs>;
        /**
            * Triggers when column header element drag (move) starts.
            *
            * @event columnDragStart
            */
        columnDragStart: EmitType<ColumnDragEventArgs>;
        /**
            * Triggers when column header element is dragged (moved) continuously.
            *
            * @event columnDrag
            */
        columnDrag: EmitType<ColumnDragEventArgs>;
        /**
            * Triggers when a column header element is dropped on the target column.
            *
            * @event columnDrop
            */
        columnDrop: EmitType<ColumnDragEventArgs>;
        /**
            * Triggers after print action is completed.
            *
            * @event printComplete
            */
        printComplete: EmitType<PrintEventArgs>;
        /**
            * Triggers before the print action starts.
            *
            * @event beforePrint
            */
        beforePrint: EmitType<PrintEventArgs>;
        /**
            * Triggers before exporting each cell to PDF document. You can also customize the PDF cells.
            *
            * @event pdfQueryCellInfo
            */
        pdfQueryCellInfo: EmitType<PdfQueryCellInfoEventArgs>;
        /**
            * Triggers before exporting each header cell to PDF document. You can also customize the PDF cells.
            *
            * @event pdfHeaderQueryCellInfo
            */
        pdfHeaderQueryCellInfo: EmitType<PdfHeaderQueryCellInfoEventArgs>;
        /**
            * Triggers before exporting aggregate cell to PDF document. You can also customize the PDF cells.
            *
            * @event pdfAggregateQueryCellInfo
            */
        pdfAggregateQueryCellInfo: EmitType<AggregateQueryCellInfoEventArgs>;
        /**
            * Triggers before exporting aggregate cell to Excel document. You can also customize the PDF cells.
            *
            * @event excelAggregateQueryCellInfo
            */
        excelAggregateQueryCellInfo: EmitType<AggregateQueryCellInfoEventArgs>;
        /**
            * Triggers before exporting each detail Grid to PDF document.
            *
            * @event exportDetailDataBound
            */
        exportDetailDataBound: EmitType<ExportDetailDataBoundEventArgs>;
        /**
            * Triggers before exporting each cell to Excel file.
            * You can also customize the Excel cells.
            *
            * @event excelQueryCellInfo
            */
        excelQueryCellInfo: EmitType<ExcelQueryCellInfoEventArgs>;
        /**
            * Triggers before exporting each header cell to Excel file.
            * You can also customize the Excel cells.
            *
            * @event excelHeaderQueryCellInfo
            */
        excelHeaderQueryCellInfo: EmitType<ExcelHeaderQueryCellInfoEventArgs>;
        /**
            * Triggers before Grid data is exported to Excel file.
            *
            * @event beforeExcelExport
            */
        beforeExcelExport: EmitType<Object>;
        /**
            * Triggers after Grid data is exported to Excel file.
            *
            * @event excelExportComplete
            */
        excelExportComplete: EmitType<ExcelExportCompleteArgs>;
        /**
            * Triggers before Grid data is exported to PDF document.
            *
            * @event beforePdfExport
            */
        beforePdfExport: EmitType<Object>;
        /**
            * Triggers after Grid data is exported to PDF document.
            *
            * @event pdfExportComplete
            */
        pdfExportComplete: EmitType<PdfExportCompleteArgs>;
        /**
            * Triggers when row element's before drag(move).
            *
            * @event rowDragStartHelper
            */
        rowDragStartHelper: EmitType<RowDragEventArgs>;
        /**
            * Triggers after detail row expands.
            * > This event triggers at initial expand.
            *
            * @event detailDataBound
            */
        detailDataBound: EmitType<DetailDataBoundEventArgs>;
        /**
            * Triggers when row element's drag(move) starts.
            *
            * @event rowDragStart
            */
        rowDragStart: EmitType<RowDragEventArgs>;
        /**
            * Triggers when row elements are dragged (moved) continuously.
            *
            * @event rowDrag
            */
        rowDrag: EmitType<RowDragEventArgs>;
        /**
            * Triggers when row elements are dropped on the target row.
            *
            * @event rowDrop
            */
        rowDrop: EmitType<RowDragEventArgs>;
        /**
            * Triggers when toolbar item is clicked.
            *
            * @event toolbarClick
            */
        toolbarClick: EmitType<ClickEventArgs>;
        /**
            * Triggers before the columnChooser open.
            *
            * @event beforeOpenColumnChooser
            */
        beforeOpenColumnChooser: EmitType<ColumnChooserEventArgs>;
        /**
            * Triggers before adaptive filter and sort dialogs open.
            *
            * @event beforeOpenAdaptiveDialog
            */
        beforeOpenAdaptiveDialog: EmitType<AdaptiveDialogEventArgs>;
        /**
            * Triggers when records are added in batch mode.
            *
            * @event batchAdd
            */
        batchAdd: EmitType<BatchAddArgs>;
        /**
            * Triggers when records are deleted in batch mode.
            *
            * @event batchDelete
            */
        batchDelete: EmitType<BatchDeleteArgs>;
        /**
            * Triggers when cancel the batch edit changes batch mode.
            *
            * @event batchCancel
            */
        batchCancel: EmitType<BatchCancelArgs>;
        /**
            * Triggers before records are added in batch mode.
            *
            * @event beforeBatchAdd
            */
        beforeBatchAdd: EmitType<BeforeBatchAddArgs>;
        /**
            * Triggers before records are deleted in batch mode.
            *
            * @event beforeBatchDelete
            */
        beforeBatchDelete: EmitType<BeforeBatchDeleteArgs>;
        /**
            * Triggers before records are saved in batch mode.
            *
            * @event beforeBatchSave
            */
        beforeBatchSave: EmitType<BeforeBatchSaveArgs>;
        /**
            * Triggers before the record is to be edit.
            *
            * @event beginEdit
            */
        beginEdit: EmitType<BeginEditArgs>;
        /**
            * Triggers when command button is clicked.
            *
            * @event commandClick
            */
        commandClick: EmitType<CommandClickEventArgs>;
        /**
            * Triggers when the cell is being edited.
            *
            * @event cellEdit
            */
        cellEdit: EmitType<CellEditArgs>;
        /**
            * Triggers when cell is saved.
            *
            * @event cellSave
            */
        cellSave: EmitType<CellSaveArgs>;
        /**
            * Triggers when cell is saved.
            *
            * @event cellSaved
            */
        cellSaved: EmitType<CellSaveArgs>;
        /**
            * Triggers when column resize starts.
            *
            * @event resizeStart
            */
        resizeStart: EmitType<ResizeArgs>;
        /**
            * Triggers on column resizing.
            *
            * @event resizing
            */
        resizing: EmitType<ResizeArgs>;
        /**
            * Triggers when column resize ends.
            *
            * @event resizeStop
            */
        resizeStop: EmitType<ResizeArgs>;
        /**
            * Triggers when any keyboard keys are pressed inside the grid.
            *
            * @event keyPressed
            */
        keyPressed: EmitType<KeyboardEventArgs>;
        /**
            * Triggers before data is bound to Grid.
            *
            * @event beforeDataBound
            */
        beforeDataBound: EmitType<BeforeDataBoundArgs>;
        /**
            * Triggers before context menu opens.
            *
            * @event contextMenuOpen
            */
        contextMenuOpen: EmitType<BeforeOpenCloseMenuEventArgs>;
        /**
            * Triggers when click on context menu.
            *
            * @event contextMenuClick
            */
        contextMenuClick: EmitType<MenuEventArgs>;
        /**
            * Triggers before column menu opens.
            *
            * @event columnMenuOpen
            */
        columnMenuOpen: EmitType<ColumnMenuOpenEventArgs>;
        /**
            * Triggers when click on column menu.
            *
            * @event columnMenuClick
            */
        columnMenuClick: EmitType<MenuEventArgs>;
        /**
            * Triggers when the check box state change in checkbox column.
            *
            * @event checkBoxChange
            */
        checkBoxChange: EmitType<CheckBoxChangeEventArgs>;
        /**
            * Triggers before Grid copy action.
            *
            * @event beforeCopy
            */
        beforeCopy: EmitType<BeforeCopyEventArgs>;
        /**
            * Triggers before Grid paste action.
            *
            * @event beforePaste
            */
        beforePaste: EmitType<BeforePasteEventArgs>;
        /**
            * Triggers before Grid autoFill action.
            *
            * @event beforeAutoFill
            */
        beforeAutoFill: EmitType<BeforeAutoFillEventArgs>;
        /**
            * Triggers when the grid actions such as Sorting, Paging, Grouping etc., are done to get column `dataSource`.
            * In this event,the current view column data and total record count should be assigned to the column `dataSource` based
            * on the action performed.
            *
            * @event columnDataStateChange
            */
        columnDataStateChange: EmitType<ColumnDataStateChangeEventArgs>;
        /**
            * Triggers when the grid actions such as Sorting, Paging, Grouping etc., are done.
            * In this event,the current view data and total record count should be assigned to the `dataSource` based on the action performed.
            *
            * @event dataStateChange
            */
        dataStateChange: EmitType<DataStateChangeEventArgs>;
        /**
            * Triggers when the grid data is added, deleted and updated.
            * Invoke the done method from the argument to start render after edit operation.
            *
            * @event dataSourceChanged
            */
        dataSourceChanged: EmitType<DataSourceChangedEventArgs>;
        /**
            * Triggers before exporting each caption row to PDF/Excel/CSV document. You can also customize the export caption row values.
            *
            * @event exportGroupCaption
            */
        exportGroupCaption: EmitType<ExportGroupCaptionEventArgs>;
        /**
            * Triggers when expand the caption row in lazy load grouping.
            *
            * @event lazyLoadGroupExpand
            */
        lazyLoadGroupExpand: EmitType<LazyLoadArgs>;
        /**
            * Triggers when collapse the caption row in lazy load grouping.
            *
            * @event lazyLoadGroupCollapse
            */
        lazyLoadGroupCollapse: EmitType<LazyLoadArgs>;
        /**
            * Constructor for creating the component
            *
            * @param {GridModel} options - specifies the options
            * @param {string | HTMLElement} element - specifies the element
            * @hidden
            */
        constructor(options?: GridModel, element?: string | HTMLElement);
        /**
            * Get the properties to be maintained in the persisted state.
            *
            * @returns {string} returns the persist data
            */
        getPersistData(): string;
        /**
            * To provide the array of modules needed for component rendering
            *
            * @returns {ModuleDeclaration[]} Returns the module Declaration
            * @hidden
            */
        requiredModules(): ModuleDeclaration[];
        extendRequiredModules(modules: ModuleDeclaration[]): void;
        /**
            * For internal use only - Initialize the event handler;
            *
            * @returns {void}
            * @private
            */
        protected preRender(): void;
        /**
            * For internal use only - To Initialize the component rendering.
            *
            * @returns {void}
            * @private
            */
        protected render(): void;
        /**
            * By default, grid shows the spinner for all its actions. You can use this method to show spinner at your needed time.
            *
            * @returns {void}
            */
        showSpinner(): void;
        /**
            * By default, grid shows the spinner for all its actions. You can use this method to show spinner at your needed time.
            *
            * @returns {void}
            */
        hideSpinner(): void;
        getMediaColumns(): void;
        /**
            * @param {Column} col - specifies the column
            * @returns {void}
            * @hidden
            */
        updateMediaColumns(col: Column): void;
        /**
            * @param {number} columnIndex - specifies the column index
            * @param {MediaQueryList} e - specifies the MediaQueryList
            * @returns {void}
            * @hidden
            */
        mediaQueryUpdate(columnIndex: number, e?: MediaQueryList): void;
        /**
            * For internal use only - Initialize the event handler
            *
            * @returns {void}
            * @private
            */
        protected eventInitializer(): void;
        /**
            * Destroys the component (detaches/removes all event handlers, attributes, classes, and empties the component element).
            *
            * @function destroy
            * @returns {void}
            */
        destroy(): void;
        /**
            * For internal use only - Get the module name.
            *
            * @returns {string} returns the module name
            * @private
            */
        protected getModuleName(): string;
        /**
            * Called internally if any of the property value changed.
            *
            * @param {GridModel} newProp - Defines new properties
            * @param {GridModel} oldProp - Defines old properties
            * @returns {void}
            * @hidden
            */
        onPropertyChanged(newProp: GridModel, oldProp: GridModel): void;
        /**
            * @param {Object} prop - Defines the property
            * @param {boolean} muteOnChange - Defines the mute on change
            * @returns {void}
            * @private
            */
        setProperties(prop: Object, muteOnChange?: boolean): void;
        /**
            * @hidden
            * @returns {void}
            */
        setTablesCount(): void;
        /**
            * @hidden
            * @returns {number} - Returns the tables count
            */
        getTablesCount(): number;
        /**
            * @hidden
            * @returns {void}
            */
        updateDefaultCursor(): void;
        getFrozenLeftCount(): number;
        isFrozenGrid(): boolean;
        getFrozenMode(): freezeMode;
        /**
            * Gets the columns from the Grid.
            *
            * @param {boolean} isRefresh - Defines the boolean whether to refresh
            * @returns {Column[]} - returns the column
            */
        getColumns(isRefresh?: boolean): Column[];
        /**
            * @private
            * @param {string} stackedHeader - Defines the stacked header
            * @param {Column[]} col - Defines the column
            * @returns {Column} Returns the Column
            */
        getStackedHeaderColumnByHeaderText(stackedHeader: string, col: Column[]): Column;
        /**
            * @private
            * @returns {number[]} Returns the column indexes
            */
        getColumnIndexesInView(): number[];
        /**
            * @private
            * @returns {Query} - returns the query
            */
        getQuery(): Query;
        /**
            * @private
            * @returns {object} - returns the locale constants
            */
        getLocaleConstants(): Object;
        /**
            * @param {number[]} indexes - specifies the indexes
            * @returns {void}
            * @private
            */
        setColumnIndexesInView(indexes: number[]): void;
        /**
            * Gets the visible columns from the Grid.
            *
            * @returns {Column[]} returns the column
            */
        getVisibleColumns(): Column[];
        /**
            * Gets the header div of the Grid.
            *
            * @returns {Element} - Returns the element
            */
        getHeaderContent(): Element;
        /**
            * Sets the header div of the Grid to replace the old header.
            *
            * @param  {Element} element - Specifies the Grid header.
            * @returns {void}
            */
        setGridHeaderContent(element: Element): void;
        /**
            * Gets the content table of the Grid.
            *
            * @returns {Element} - Returns the element
            */
        getContentTable(): Element;
        /**
            * Sets the content table of the Grid to replace the old content table.
            *
            * @param  {Element} element - Specifies the Grid content table.
            * @returns {void}
            */
        setGridContentTable(element: Element): void;
        /**
            * Gets the content div of the Grid.
            *
            * @returns {Element} Returns the element
            */
        getContent(): Element;
        /**
            * Sets the content div of the Grid to replace the old Grid content.
            *
            * @param  {Element} element - Specifies the Grid content.
            * @returns {void}
            */
        setGridContent(element: Element): void;
        /**
            * Gets the header table element of the Grid.
            *
            * @returns {Element} returns the element
            */
        getHeaderTable(): Element;
        /**
            * Sets the header table of the Grid to replace the old one.
            *
            * @param  {Element} element - Specifies the Grid header table.
            * @returns {void}
            */
        setGridHeaderTable(element: Element): void;
        /**
            * Gets the footer div of the Grid.
            *
            * @returns {Element} returns the element
            */
        getFooterContent(): Element;
        /**
            * Gets the footer table element of the Grid.
            *
            * @returns {Element} returns the element
            */
        getFooterContentTable(): Element;
        /**
            * Gets the pager of the Grid.
            *
            * @returns {Element} returns the element
            */
        getPager(): Element;
        /**
            * Sets the pager of the Grid to replace the old pager.
            *
            * @param  {Element} element - Specifies the Grid pager.
            * @returns {void}
            */
        setGridPager(element: Element): void;
        /**
            * Gets a row by index.
            *
            * @param  {number} index - Specifies the row index.
            * @returns {Element} returns the element
            */
        getRowByIndex(index: number): Element;
        /**
            * Gets a movable tables row by index.
            *
            * @param  {number} index - Specifies the row index.
            * @returns {Element} returns the element
            */
        getMovableRowByIndex(index: number): Element;
        /**
            * Gets a frozen tables row by index.
            *
            * @param  {number} index - Specifies the row index.
            * @returns {Element} returns the element
            */
        getFrozenRowByIndex(index: number): Element;
        /**
            * Gets all the data rows of the Grid.
            *
            * @returns {Element[]} returns the element
            */
        getRows(): Element[];
        /**
            * Gets a frozen right tables row element by index.
            *
            * @param  {number} index - Specifies the row index.
            * @returns {Element} returns the element
            */
        getFrozenRightRowByIndex(index: number): Element;
        /**
            * Get a row information based on cell
            *
            * @param {Element | EventTarget} target - specifies the element
            * @returns {RowInfo} returns the row info
            */
        getRowInfo(target: Element | EventTarget): RowInfo;
        /**
            * Gets the Grid's movable content rows from frozen grid.
            *
            * @returns {Element[]} returns the element
            */
        getMovableRows(): Element[];
        /**
            * Gets the Grid's frozen right content rows from frozen grid.
            *
            * @returns {Element[]} returns the element
            */
        getFrozenRightRows(): Element[];
        /**
            * Gets all the Grid's data rows.
            *
            * @returns {Element[]} returns the element
            */
        getDataRows(): Element[];
        /**
            * @param {boolean} includeAdd - specifies includeAdd
            * @returns {Element[]} returns the element
            * @hidden
            */
        getAllDataRows(includeAdd?: boolean): Element[];
        /**
            * @param {HTMLElement[]} fRows - Defines the frozen Rows
            * @param {HTMLElement[]} mrows - Defines the movable Rows
            * @returns {HTMLElement[]} Returns the element
            * @hidden
            */
        addMovableRows(fRows: HTMLElement[], mrows: HTMLElement[]): HTMLElement[];
        /**
            * Gets all the Grid's movable table data rows.
            *
            * @returns {Element[]} Returns the element
            */
        getMovableDataRows(): Element[];
        /**
            * @param {boolean} includeAdd Defines the include add in boolean
            * @returns {Element[]} Returns the element
            * @hidden
            */
        getAllMovableDataRows(includeAdd?: boolean): Element[];
        /**
            * Gets all the Grid's frozen table data rows.
            *
            * @returns {Element[]} returns the element
            */
        getFrozenDataRows(): Element[];
        /**
            * @param {boolean} includeAdd Defines the include add in boolean
            * @returns {Element[]} Returns the element
            * @hidden
            */
        getAllFrozenDataRows(includeAdd?: boolean): Element[];
        /**
            * Gets all the Grid's frozen right table data rows.
            *
            * @returns {Element[]} Returns the Element
            */
        getFrozenRightDataRows(): Element[];
        /**
            * @param {boolean} includeAdd Defines the include add in boolean
            * @returns {Element[]} Returns the element
            * @hidden
            */
        getAllFrozenRightDataRows(includeAdd?: boolean): Element[];
        /**
            * Updates particular cell value based on the given primary key value.
            * > Primary key column must be specified using `columns.isPrimaryKey` property.
            *
            * @param {string| number} key - Specifies the PrimaryKey value of dataSource.
            * @param {string } field - Specifies the field name which you want to update.
            * @param {string | number | boolean | Date} value - To update new value for the particular cell.
            * @returns {void}
            */
        setCellValue(key: string | number, field: string, value: string | number | boolean | Date): void;
        /**
            * @param {string} columnUid - Defines column uid
            * @returns {void}
            * @hidden
            */
        refreshReactColumnTemplateByUid(columnUid: string): void;
        /**
            * Updates and refresh the particular row values based on the given primary key value.
            * > Primary key column must be specified using `columns.isPrimaryKey` property.
            *
            * @param {string| number} key - Specifies the PrimaryKey value of dataSource.
            * @param {Object} rowData - To update new data for the particular row.
            * @returns {void}
            */
        setRowData(key: string | number, rowData?: Object): void;
        /**
            * Gets a cell by row and column index.
            *
            * @param  {number} rowIndex - Specifies the row index.
            * @param  {number} columnIndex - Specifies the column index.
            * @returns {Element} Returns the Element
            */
        getCellFromIndex(rowIndex: number, columnIndex: number): Element;
        /**
            * Gets a movable table cell by row and column index.
            *
            * @param  {number} rowIndex - Specifies the row index.
            * @param  {number} columnIndex - Specifies the column index.
            * @returns {Element} Returns the Element
            */
        getMovableCellFromIndex(rowIndex: number, columnIndex: number): Element;
        /**
            * Gets a frozen right table cell by row and column index.
            *
            * @param  {number} rowIndex - Specifies the row index.
            * @param  {number} columnIndex - Specifies the column index.
            * @returns {Element} Returns the Element
            */
        getFrozenRightCellFromIndex(rowIndex: number, columnIndex: number): Element;
        /**
            * Gets a column header by column index.
            *
            * @param  {number} index - Specifies the column index.
            * @returns {Element} Returns the Element
            */
        getColumnHeaderByIndex(index: number): Element;
        /**
            * Gets a movable column header by column index.
            *
            * @param  {number} index - Specifies the column index.
            * @returns {Element} Returns the Element
            */
        getMovableColumnHeaderByIndex(index: number): Element;
        /**
            * Gets a frozen right column header by column index.
            *
            * @param  {number} index - Specifies the column index.
            * @returns {Element} Returns the Element
            */
        getFrozenRightColumnHeaderByIndex(index: number): Element;
        /**
            * Gets a frozen left column header by column index.
            *
            * @param  {number} index - Specifies the column index.
            * @returns {Element} Returns the Element
            */
        getFrozenLeftColumnHeaderByIndex(index: number): Element;
        /**
            * @param {string} uid - Defines the uid
            * @param {boolean} isMovable - Defines isMovable
            * @param {boolean} isFrozenRight - Defines isFrozenRight
            * @returns {Row<Column>} Returns the row object
            * @hidden
            */
        getRowObjectFromUID(uid: string, isMovable?: boolean, isFrozenRight?: boolean): Row<Column>;
        /**
            * @hidden
            * @returns {Row<Column>[]} Returns the Row object
            */
        getRowsObject(): Row<Column>[];
        /**
            * @hidden
            * @returns {Row<Column>[]} Returns the Row object
            */
        getMovableRowsObject(): Row<Column>[];
        /**
            * @hidden
            * @returns {Row<Column>[]} Returns the Row object
            */
        getFrozenRightRowsObject(): Row<Column>[];
        /**
            * Gets a column header by column name.
            *
            * @param  {string} field - Specifies the column name.
            * @returns {Element} - Returns the element
            */
        getColumnHeaderByField(field: string): Element;
        /**
            * Gets a column header by UID.
            *
            * @param {string} uid - Specifies the column uid.
            * @returns {Element} - Returns the element
            */
        getColumnHeaderByUid(uid: string): Element;
        /**
            * @hidden
            * @param {number} index - Defines the index
            * @returns {Column} Returns the column
            */
        getColumnByIndex(index: number): Column;
        /**
            * Gets a Column by column name.
            *
            * @param  {string} field - Specifies the column name.
            * @returns {Column} Returns the column
            */
        getColumnByField(field: string): Column;
        /**
            * Gets a column index by column name.
            *
            * @param  {string} field - Specifies the column name.
            * @returns {number} Returns the index by field
            */
        getColumnIndexByField(field: string): number;
        /**
            * Gets a column by UID.
            *
            * @param  {string} uid - Specifies the column UID.
            * @returns {Column} Returns the column
            */
        getColumnByUid(uid: string): Column;
        /**
            * @param {Column[]} columns - Defines the columns
            * @param {Column[]} stackedColumn - Defines the stacked columns
            * @returns {Column[]} Returns the columns
            * @hidden
            */
        getStackedColumns(columns: Column[], stackedColumn?: Column[]): Column[];
        /**
            * Gets a column index by UID.
            *
            * @param  {string} uid - Specifies the column UID.
            * @returns {number} Returns the column by index
            */
        getColumnIndexByUid(uid: string): number;
        /**
            * Gets UID by column name.
            *
            * @param  {string} field - Specifies the column name.
            * @returns {string} Returns the column by field
            */
        getUidByColumnField(field: string): string;
        /**
            * Gets column index by column uid value.
            *
            * @private
            * @param  {string} uid - Specifies the column uid.
            * @returns {number} Returns the column by field
            */
        getNormalizedColumnIndex(uid: string): number;
        /**
            * Gets indent cell count.
            *
            * @private
            * @returns {number} Returns the indent count
            */
        getIndentCount(): number;
        /**
            * Gets the collection of column fields.
            *
            * @returns {string[]} Returns the Field names
            */
        getColumnFieldNames(): string[];
        /**
            * Gets a compiled row template.
            *
            * @returns {Function} Returns the row TEmplate
            * @private
            */
        getRowTemplate(): Function;
        /**
            * Gets a compiled detail row template.
            *
            * @private
            * @returns {Function} Returns the Detail template
            */
        getDetailTemplate(): Function;
        /**
            * Gets a compiled detail row template.
            *
            * @private
            * @returns {Function}Returns the Edit template
            */
        getEditTemplate(): Function;
        /**
            * Gets a compiled dialog edit header template.
            *
            * @private
            * @returns {Function} returns template function
            */
        getEditHeaderTemplate(): Function;
        /**
            * Gets a compiled dialog edit footer template.
            *
            * @private
            * @returns {Function} Returns the Footer template
            */
        getEditFooterTemplate(): Function;
        /**
            * Get the names of the primary key columns of the Grid.
            *
            * @returns {string[]} Returns the field names
            */
        getPrimaryKeyFieldNames(): string[];
        /**
            * Refreshes the Grid header and content.
            *
            * @returns {void}
            */
        refresh(): void;
        /**
            * Refreshes the Grid header.
            *
            * @returns {void}
            */
        refreshHeader(): void;
        /**
            * Gets the collection of selected rows.
            *
            * @returns {Element[]} Returns the element
            */
        getSelectedRows(): Element[];
        /**
            * Gets the collection of selected row indexes.
            *
            * @returns {number[]} Returns the Selected row indexes
            */
        getSelectedRowIndexes(): number[];
        /**
            * Gets the collection of selected row and cell indexes.
            *
            * @returns {number[]} Returns the Selected row cell indexes
            */
        getSelectedRowCellIndexes(): ISelectedCell[];
        /**
            * Gets the collection of selected records.
            *
            * @returns {Object[]} Returns the selected records
            * @isGenericType true
            */
        getSelectedRecords(): Object[];
        /**
            * Gets the collection of selected columns uid.
            *
            * @returns {string[]} Returns the selected column uid
            * @isGenericType true
            */
        getSelectedColumnsUid(): string[];
        /**
            * Gets the data module.
            *
            * @returns {Data} Returns the data
            */
        getDataModule(): Data;
        /**
            * Shows a column by its column name.
            *
            * @param  {string|string[]} keys - Defines a single or collection of column names.
            * @param  {string} showBy - Defines the column key either as field name or header text.
            * @returns {void}
            */
        showColumns(keys: string | string[], showBy?: string): void;
        /**
            * Hides a column by column name.
            *
            * @param  {string|string[]} keys - Defines a single or collection of column names.
            * @param  {string} hideBy - Defines the column key either as field name or header text.
            * @returns {void}
            */
        hideColumns(keys: string | string[], hideBy?: string): void;
        /**
            * @hidden
            * @returns {number} Returns the Frozen column
            */
        getFrozenColumns(): number;
        /**
            * @hidden
            * @returns {number} Returns the Frozen Right column count
            */
        getFrozenRightColumnsCount(): number;
        /**
            * @hidden
            * @returns {number} Returns the Frozen Left column
            */
        getFrozenLeftColumnsCount(): number;
        /**
            * @hidden
            * @returns {number} Returns the movable column count
            */
        getMovableColumnsCount(): number;
        /**
            * @hidden
            * @returns {void}
            */
        setFrozenCount(): void;
        /**
            * @hidden
            * @returns {number} Returns the visible Frozen left count
            */
        getVisibleFrozenLeftCount(): number;
        /**
            * @hidden
            * @returns {number} Returns the visible Frozen Right count
            */
        getVisibleFrozenRightCount(): number;
        /**
            * @hidden
            * @returns {number} Returns the visible movable count
            */
        getVisibleMovableCount(): number;
        /**
            * @hidden
            * @returns {Column[]} Returns the column
            */
        getFrozenRightColumns(): Column[];
        /**
            * @hidden
            * @returns {Column[]} Returns the column
            */
        getFrozenLeftColumns(): Column[];
        /**
            * @hidden
            * @returns {Column[]} Returns the column
            */
        getMovableColumns(): Column[];
        /**
            * @hidden
            * @returns {number} Returns the visible frozen columns count
            */
        getVisibleFrozenColumns(): number;
        /**
            * Get the current Filter operator and field.
            *
            * @returns {FilterUI} Returns the filter UI
            */
        getFilterUIInfo(): FilterUI;
        /**
            * Navigates to the specified target page.
            *
            * @param  {number} pageNo - Defines the page number to navigate.
            * @returns {void}
            */
        goToPage(pageNo: number): void;
        /**
            * Defines the text of external message.
            *
            * @param  {string} message - Defines the message to update.
            * @returns {void}
            */
        updateExternalMessage(message: string): void;
        /**
            * Sorts a column with the given options.
            *
            * @param {string} columnName - Defines the column name to be sorted.
            * @param {SortDirection} direction - Defines the direction of sorting field.
            * @param {boolean} isMultiSort - Specifies whether the previous sorted columns are to be maintained.
            * @returns {void}
            */
        sortColumn(columnName: string, direction: SortDirection, isMultiSort?: boolean): void;
        /**
            * Clears all the sorted columns of the Grid.
            *
            * @returns {void}
            */
        clearSorting(): void;
        /**
            * Remove sorted column by field name.
            *
            * @param {string} field - Defines the column field name to remove sort.
            * @returns {void}
            * @hidden
            */
        removeSortColumn(field: string): void;
        /**
            * Filters grid row by column name with the given options.
            *
            * @param  {string} fieldName - Defines the field name of the column.
            * @param  {string} filterOperator - Defines the operator to filter records.
            * @param  {string | number | Date | boolean} filterValue - Defines the value used to filter records.
            * @param  {string} predicate - Defines the relationship between one filter query and another by using AND or OR predicate.
            * @param  {boolean} matchCase - If match case is set to true, the grid filters the records with exact match. if false, it filters case
            * insensitive records (uppercase and lowercase letters treated the same).
            * @param  {boolean} ignoreAccent - If ignoreAccent set to true,
            * then filter ignores the diacritic characters or accents while filtering.
            * @param  {string} actualFilterValue - Defines the actual filter value for the filter column.
            * @param  {string} actualOperator - Defines the actual filter operator for the filter column.
            * @returns {void}
            */
        filterByColumn(fieldName: string, filterOperator: string, filterValue: string | number | Date | boolean | number[] | string[] | Date[] | boolean[], predicate?: string, matchCase?: boolean, ignoreAccent?: boolean, actualFilterValue?: string, actualOperator?: string): void;
        /**
            * Clears all the filtered rows of the Grid.
            *
            * @param {string[]} fields - Defines the Fields
            * @returns {void}
            */
        clearFiltering(fields?: string[]): void;
        /**
            * Removes filtered column by field name.
            *
            * @param  {string} field - Defines column field name to remove filter.
            * @param  {boolean} isClearFilterBar -  Specifies whether the filter bar value needs to be cleared.
            * @returns {void}
            * @hidden
            */
        removeFilteredColsByField(field: string, isClearFilterBar?: boolean): void;
        /**
            * Selects a row by given index.
            *
            * @param  {number} index - Defines the row index.
            * @param  {boolean} isToggle - If set to true, then it toggles the selection.
            * @returns {void}
            */
        selectRow(index: number, isToggle?: boolean): void;
        /**
            * Selects a collection of rows by indexes.
            *
            * @param  {number[]} rowIndexes - Specifies the row indexes.
            * @returns {void}
            */
        selectRows(rowIndexes: number[]): void;
        /**
            * Deselects the current selected rows and cells.
            *
            * @returns {void}
            */
        clearSelection(): void;
        /**
            * Selects a cell by the given index.
            *
            * @param  {IIndex} cellIndex - Defines the row and column indexes.
            * @param  {boolean} isToggle - If set to true, then it toggles the selection.
            * @returns {void}
            */
        selectCell(cellIndex: IIndex, isToggle?: boolean): void;
        /**
            * Selects a range of cells from start and end indexes.
            *
            * @param  {IIndex} startIndex - Specifies the row and column's start index.
            * @param  {IIndex} endIndex - Specifies the row and column's end index.
            * @returns {void}
            */
        selectCellsByRange(startIndex: IIndex, endIndex?: IIndex): void;
        /**
            * Searches Grid records using the given key.
            * You can customize the default search option by using the
            * [`searchSettings`](./#searchsettings/).
            *
            * @param  {string} searchString - Defines the key.
            * @returns {void}
            */
        search(searchString: string): void;
        /**
            * By default, prints all the pages of the Grid and hides the pager.
            * > You can customize print options using the
            * [`printMode`](./#printmode).
            *
            * @returns {void}
            */
        print(): void;
        /**
            * Delete a record with Given options. If fieldname and data is not given then grid will delete the selected record.
            * > `editSettings.allowDeleting` should be true.
            *
            * @param {string} fieldname - Defines the primary key field, 'Name of the column'.
            * @param {Object} data - Defines the JSON data of the record to be deleted.
            * @returns {void}
            */
        deleteRecord(fieldname?: string, data?: Object): void;
        /**
            * Starts edit the selected row. At least one row must be selected before invoking this method.
            * `editSettings.allowEditing` should be true.
            * {% codeBlock src='grid/startEdit/index.md' %}{% endcodeBlock %}
            *
            * @returns {void}
            */
        startEdit(): void;
        /**
            * If Grid is in editable state, you can save a record by invoking endEdit.
            *
            * @returns {void}
            */
        endEdit(): void;
        /**
            * Cancels edited state.
            *
            * @returns {void}
            */
        closeEdit(): void;
        /**
            * Adds a new record to the Grid. Without passing parameters, it adds empty rows.
            * > `editSettings.allowEditing` should be true.
            *
            * @param {Object} data - Defines the new add record data.
            * @param {number} index - Defines the row index to be added
            * @returns {void}
            */
        addRecord(data?: Object, index?: number): void;
        /**
            * Delete any visible row by TR element.
            *
            * @param {HTMLTableRowElement} tr - Defines the table row element.
            * @returns {void}
            */
        deleteRow(tr: HTMLTableRowElement): void;
        /**
            * Changes a particular cell into edited state based on the row index and field name provided in the `batch` mode.
            *
            * @param {number} index - Defines row index to edit a particular cell.
            * @param {string} field - Defines the field name of the column to perform batch edit.
            * @returns {void}
            */
        editCell(index: number, field: string): void;
        /**
            * Saves the cell that is currently edited. It does not save the value to the DataSource.
            *
            * @returns {void}
            * {% codeBlock src='grid/saveCell/index.md' %}{% endcodeBlock %}
            */
        saveCell(): void;
        /**
            * To update the specified cell by given value without changing into edited state.
            *
            * @param {number} rowIndex Defines the row index.
            * @param {string} field Defines the column field.
            * @param {string | number | boolean | Date} value - Defines the value to be changed.
            * @returns {void}
            */
        updateCell(rowIndex: number, field: string, value: string | number | boolean | Date): void;
        /**
            * To update the specified row by given values without changing into edited state.
            *
            * @param {number} index Defines the row index.
            * @param {Object} data Defines the data object to be updated.
            * @returns {void}
            * {% codeBlock src='grid/updateRow/index.md' %}{% endcodeBlock %}
            */
        updateRow(index: number, data: Object): void;
        /**
            * Gets the added, edited,and deleted data before bulk save to the DataSource in batch mode.
            *
            * @returns {Object} Returns the batch changes
            */
        getBatchChanges(): Object;
        /**
            * Enables or disables ToolBar items.
            *
            * @param {string[]} items - Defines the collection of itemID of ToolBar items.
            * @param {boolean} isEnable - Defines the items to be enabled or disabled.
            * @returns {void}
            */
        enableToolbarItems(items: string[], isEnable: boolean): void;
        /**
            * Copy the selected rows or cells data into clipboard.
            *
            * @param {boolean} withHeader - Specifies whether the column header text needs to be copied along with rows or cells.
            * @returns {void}
            */
        copy(withHeader?: boolean): void;
        /**
            * @hidden
            * @returns {void}
            */
        recalcIndentWidth(): void;
        /**
            * @hidden
            * @returns {void}
            */
        resetIndentWidth(): void;
        /**
            * @hidden
            * @returns {boolean} Returns isRowDragable
            */
        isRowDragable(): boolean;
        /**
            * Changes the Grid column positions by field names.
            *
            * @param  {string} fromFName - Defines the origin field name.
            * @param  {string} toFName - Defines the destination field name.
            * @returns {void}
            */
        reorderColumns(fromFName: string | string[], toFName: string): void;
        /**
            * Changes the Grid column positions by field index. If you invoke reorderColumnByIndex multiple times,
            * then you won't get the same results every time.
            *
            * @param  {number} fromIndex - Defines the origin field index.
            * @param  {number} toIndex - Defines the destination field index.
            * @returns {void}
            */
        reorderColumnByIndex(fromIndex: number, toIndex: number): void;
        /**
            * Changes the Grid column positions by field index. If you invoke reorderColumnByTargetIndex multiple times,
            * then you will get the same results every time.
            *
            * @param  {string} fieldName - Defines the field name.
            * @param  {number} toIndex - Defines the destination field index.
            * @returns {void}
            */
        reorderColumnByTargetIndex(fieldName: string | string[], toIndex: number): void;
        /**
            * Changes the Grid Row position with given indexes.
            *
            * @param  {number} fromIndexes - Defines the origin Indexes.
            * @param  {number} toIndex - Defines the destination Index.
            * @returns {void}
            */
        reorderRows(fromIndexes: number[], toIndex: number): void;
        /**
            * @param {ReturnType} e - Defines the Return type
            * @returns {void}
            * @hidden
            */
        refreshDataSource(e: ReturnType): void;
        /**
            * @param {boolean} enable -Defines the enable
            * @returns {void}
            * @hidden
            */
        disableRowDD(enable: boolean): void;
        /**
            * Changes the column width to automatically fit its content to ensure that the width shows the content without wrapping/hiding.
            * > * This method ignores the hidden columns.
            * > * Uses the `autoFitColumns` method in the `dataBound` event to resize at initial rendering.
            *
            * @param  {string |string[]} fieldNames - Defines the column names.
            * @returns {void}
            *
            *
            * ```typescript
            * <div id="Grid"></div>
            * <script>
            * let gridObj: Grid = new Grid({
            *     dataSource: employeeData,
            *     columns: [
            *         { field: 'OrderID', headerText: 'Order ID', width:100 },
            *         { field: 'EmployeeID', headerText: 'Employee ID' }],
            *     dataBound: () => gridObj.autoFitColumns('EmployeeID')
            * });
            * gridObj.appendTo('#Grid');
            * </script>
            * ```
            *
            */
        autoFitColumns(fieldNames?: string | string[]): void;
        /**
            * @param {number} x - Defines the number
            * @param {number} y - Defines the number
            * @param {Element} target - Defines the Element
            * @returns {void}
            * @hidden
            */
        createColumnchooser(x: number, y: number, target: Element): void;
        dataReady(): void;
        /**
            * The function is used to apply text wrap
            *
            * @returns {void}
            * @hidden
            */
        applyTextWrap(): void;
        /**
            * The function is used to remove text wrap
            *
            * @returns {void}
            * @hidden
            */
        removeTextWrap(): void;
        /**
            * The function is used to add Tooltip to the grid cell that has ellipsiswithtooltip clip mode.
            *
            * @returns {void}
            * @hidden
            */
        createTooltip(): void;
        /** @hidden
            * @returns {void}
            */
        freezeRefresh(): void;
        /**
            * @param {MouseEvent} e - Defines the mouse event
            * @returns {void}
            * @hidden
            */
        hoverFrozenRows(e: MouseEvent): void;
        /**
            * To create table for ellipsiswithtooltip
            *
            * @param {Element} table - Defines the table
            * @param {string} tag - Defines the tag
            * @param {string} type - Defines the type
            * @returns {HTMLDivElement} Returns the HTML div ELement
            * @hidden
            */
        protected createTable(table: Element, tag: string, type: string): HTMLDivElement;
        /**
            * Binding events to the element while component creation.
            *
            * @hidden
            * @returns {void}
            */
        wireEvents(): void;
        /**
            * Unbinding events from the element while component destroy.
            *
            * @hidden
            * @returns {void}
            */
        unwireEvents(): void;
        /**
            * @hidden
            * @returns {void}
            */
        addListener(): void;
        /**
            * @hidden
            * @returns {void}
            */
        removeListener(): void;
        /**
            * Get current visible data of grid.
            *
            * @returns {Object[]} Returns the current view records
            * @isGenericType true
            */
        getCurrentViewRecords(): Object[];
        /**
            * @param {Object} persistedData - Defines the persisted data
            * @returns {void}
            * @hidden
            */
        mergePersistGridData(persistedData?: Object): void;
        /**
            * @hidden
            * @returns {boolean} Returns the isDetail
            */
        isDetail(): boolean;
        /**
            * @param {Function[]} modules - Defines the modules
            * @returns {void}
            * @hidden
            */
        setInjectedModules(modules: Function[]): void;
        /**
            * Gets the foreign columns from Grid.
            *
            * @returns {Column[]} Returns Foreign key column
            */
        getForeignKeyColumns(): Column[];
        /**
            * @hidden
            * @returns {number} Returns row height
            */
        getRowHeight(): number;
        /**
            * Refreshes the Grid column changes.
            *
            * @returns {void}
            */
        refreshColumns(): void;
        /**
            * Export Grid data to Excel file(.xlsx).
            *
            * @param  {ExcelExportProperties} excelExportProperties - Defines the export properties of the Grid.
            * @param  {boolean} isMultipleExport - Define to enable multiple export.
            * @param  {Workbook} workbook - Defines the Workbook if multiple export is enabled.
            * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.
            * @returns {Promise<any>} Returns the excelexport
            */
        excelExport(excelExportProperties?: ExcelExportProperties, isMultipleExport?: boolean, workbook?: Workbook, isBlob?: boolean): Promise<any>;
        /**
            * Export Grid data to CSV file.
            *
            * @param  {ExcelExportProperties} excelExportProperties - Defines the export properties of the Grid.
            * @param  {boolean} isMultipleExport - Define to enable multiple export.
            * @param  {Workbook} workbook - Defines the Workbook if multiple export is enabled.
            * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.
            * @returns {Promise<any>} Returns csv export
            */
        csvExport(excelExportProperties?: ExcelExportProperties, isMultipleExport?: boolean, workbook?: Workbook, isBlob?: boolean): Promise<any>;
        /**
            * Export Grid data to PDF document.
            *
            * @param {pdfExportProperties} pdfExportProperties - Defines the export properties of the Grid.
            * @param {isMultipleExport} isMultipleExport - Define to enable multiple export.
            * @param {pdfDoc} pdfDoc - Defined the Pdf Document if multiple export is enabled.
            * @param {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.
            * @returns {Promise<any>} Returns pdfexport
            */
        pdfExport(pdfExportProperties?: PdfExportProperties, isMultipleExport?: boolean, pdfDoc?: Object, isBlob?: boolean): Promise<Object>;
        /**
            * Groups a column by column name.
            *
            * @param  {string} columnName - Defines the column name to group.
            * @returns {void}
            */
        groupColumn(columnName: string): void;
        /**
            * Expands all the grouped rows of the Grid.
            *
            * @returns {void}
            */
        groupExpandAll(): void;
        /**
            * Collapses all the grouped rows of the Grid.
            *
            * @returns {void}
            */
        groupCollapseAll(): void;
        /**
            * Clears all the grouped columns of the Grid.
            *
            * @returns {void}
            */
        clearGrouping(): void;
        /**
            * Ungroups a column by column name.
            *
            * @param  {string} columnName - Defines the column name to ungroup.
            * {% codeBlock src='grid/ungroupColumn/index.md' %}{% endcodeBlock %}
            * @returns {void}
            */
        ungroupColumn(columnName: string): void;
        /**
            * Column chooser can be displayed on screen by given position(X and Y axis).
            *
            * @param {number} x - Defines the X axis.
            * @param {number} y - Defines the Y axis.
            * @returns {void}
            */
        openColumnChooser(x?: number, y?: number): void;
        /**
            * Collapses all the detail rows of the Grid.
            *
            * @returns {void}
            */
        detailCollapseAll(): void;
        /**
            * Expands all the detail rows of the Grid.
            *
            * @returns {void}
            */
        detailExpandAll(): void;
        /**
            * Deselects the currently selected cells.
            *
            * @returns {void}
            */
        clearCellSelection(): void;
        /**
            * Deselects the currently selected rows.
            *
            * @returns {void}
            */
        clearRowSelection(): void;
        /**
            * Selects a collection of cells by row and column indexes.
            *
            * @param  {ISelectedCell[]} rowCellIndexes - Specifies the row and column indexes.
            * @returns {void}
            */
        selectCells(rowCellIndexes: ISelectedCell[]): void;
        /**
            * Selects a range of rows from start and end row indexes.
            *
            * @param  {number} startIndex - Specifies the start row index.
            * @param  {number} endIndex - Specifies the end row index.
            * @returns {void}
            */
        selectRowsByRange(startIndex: number, endIndex?: number): void;
        /**
            * @hidden
            * @returns {boolean} Returns whether context menu is open or not
            */
        isContextMenuOpen(): boolean;
        /**
            * @param {Function} module - Defines the module
            * @returns {boolean} return the injected modules
            * @hidden
            */
        ensureModuleInjected(module: Function): boolean;
        /**
            * Destroys the given template reference.
            *
            * @param {string[]} propertyNames - Defines the collection of template name.
            * @param {any} index - specifies the index
            */
        destroyTemplate(propertyNames?: string[], index?: any): void;
        /**
            * @param {string | string[]} type - Defines the type
            * @param {Object} args - Defines the arguments
            * @returns {void}
            * @hidden
            * @private
            */
        log(type: string | string[], args?: Object): void;
        /**
            * @param {Element} element - Defines the element
            * @returns {void}
            * @hidden
            */
        applyBiggerTheme(element: Element): void;
        /**
            * @hidden
            * @returns {Object} Returns the previous row data
            */
        getPreviousRowData(): Object;
        /**
            * Hides the scrollbar placeholder of Grid content when grid content is not overflown.
            *
            * @returns {void}
            */
        hideScroll(): void;
        /**
            * Get row index by primary key or row data.
            *
            * @param  {string | Object} value - Defines the primary key value.
            * @returns {number} Returns the index
            */
        getRowIndexByPrimaryKey(value: string | Object): number;
        /**
            * @param {string} field - Defines the field name
            * @returns {Column} returns the column
            * @hidden
            */
        grabColumnByFieldFromAllCols(field: string): Column;
        /**
            * @param {string} uid - Defines the uid
            * @returns {Column} returns the column
            * @hidden
            */
        grabColumnByUidFromAllCols(uid: string): Column;
        /**
            * Get all filtered records from the Grid and it returns array of objects for the local dataSource, returns a promise object if the Grid has remote data.
            *
            * @returns {Object[] | Promise<Object>} Returns the filtered records
            */
        getFilteredRecords(): Object[] | Promise<Object>;
        /**
            * @param {TouchEventArgs} e - Defines the TouchEventArgs
            * @returns {void}
            * @hidden
            */
        tapEvent(e: TouchEventArgs): void;
        /**
            * @param {string} prefix - specifies the prefix
            * @returns {string} returns the row uid
            * @hidden
            */
        getRowUid(prefix: string): string;
        /**
            * @hidden
            * @returns {Element} returns the element
            */
        getMovableVirtualContent(): Element;
        /**
            * @hidden
            * @returns {Element} returns the element
            */
        getFrozenVirtualContent(): Element;
        /**
            * @hidden
            * @returns {Element} returns the element
            */
        getMovableVirtualHeader(): Element;
        /**
            * @hidden
            * @returns {Element} returns the element
            */
        getFrozenVirtualHeader(): Element;
        /**
            * @param {string} uid - specifies the uid
            * @returns {Element} returns the element
            * @hidden
            */
        getRowElementByUID(uid: string): Element;
        /**
            * Gets the hidden columns from the Grid.
            *
            * @returns {Column[]} Returns the Column
            */
        getHiddenColumns(): Column[];
        /**
            * calculatePageSizeByParentHeight
            *
            * @param {number | string } containerHeight - specifies the container height
            * @returns {number} returns the page size
            */
        calculatePageSizeByParentHeight(containerHeight: number | string): number;
        /**
            *To perform aggregate operation on a column.
            *
            * @param  {AggregateColumnModel} summaryCol - Pass Aggregate Column details.
            * @param  {Object} summaryData - Pass JSON Array for which its field values to be calculated.
            * @returns {number} returns the summary values
            */
        getSummaryValues(summaryCol: AggregateColumnModel, summaryData: Object): number;
        /**
            * Sends a Post request to export Grid to Excel file in server side.
            *
            * @param  {string} url - Pass Url for server side excel export action.
            * @returns {void}
            */
        serverExcelExport(url: string): void;
        /**
            * Sends a Post request to export Grid to Pdf file in server side.
            *
            * @param  {string} url - Pass Url for server side pdf export action.
            * @returns {void}
            */
        serverPdfExport(url: string): void;
        /**
            * Sends a Post request to export Grid to CSV file in server side.
            *
            * @param  {string} url - Pass Url for server side pdf export action.
            * @returns {void}
            */
        serverCsvExport(url: string): void;
        /**
            * @param {string} url - Defines exporting url
            * @returns {void}
            * @hidden
            */
        exportGrid(url: string): void;
        /**
            * @param {Column[]} columns - Defines array of columns
            * @param {string[]} include - Defines array of sting
            * @returns {Column[]} returns array of columns
            * @hidden
            */
        setHeaderText(columns: Column[], include: string[]): Column[];
        /**
            * @hidden
            * @returns {boolean} returns the isCollapseStateEnabled
            */
        isCollapseStateEnabled(): boolean;
        /**
            * @param {number} key - Defines the primary key value.
            * @param {Object} rowData - Defines the rowData
            * @returns {void}
            */
        updateRowValue(key: number, rowData: Object): void;
        /**
            * @hidden
            * @returns {void}
            */
        setForeignKeyData(): void;
        /**
            * @param {string} field - specifies the field
            * @returns {void}
            * @hidden
            */
        resetFilterDlgPosition(field: string): void;
        /**
            * @hidden
            * @returns {void}
            */
        renderTemplates(): void;
        /**
            * Apply the changes to the Grid without refreshing the rows.
            *
            * @param  {BatchChanges} changes - Defines changes to be updated.
            * @returns {void}
            */
        batchUpdate(changes: BatchChanges): void;
        /**
            * Apply the changes to the Grid in one batch after 50ms without refreshing the rows.
            *
            * @param  {BatchChanges} changes - Defines changes to be updated.
            * @returns {void}
            */
        batchAsyncUpdate(changes: BatchChanges): void;
        /**
            * @hidden
            * @returns {void}
            */
        updateVisibleExpandCollapseRows(): void;
        /**
            * @param {string | number} height - specifies the height
            * @returns {number | string} - specifies the height number
            * @hidden
            */
        getHeight(height: string | number): number | string;
        /**
            * @hidden
            * @returns {Element} - returns frozen right content
            */
        getFrozenRightContent(): Element;
        /**
            * @hidden
            * @returns {Element} - returns frozen right header
            */
        getFrozenRightHeader(): Element;
        /**
            * @hidden
            * @returns {Element} - returns movable header tbody
            */
        getMovableHeaderTbody(): Element;
        /**
            * @hidden
            * @returns {Element} - returns movable content tbody
            */
        getMovableContentTbody(): Element;
        /**
            * @hidden
            * @returns {Element} - returns frozen header tbody
            */
        getFrozenHeaderTbody(): Element;
        /**
            * @hidden
            * @returns {Element} - returns frozen left content tbody
            */
        getFrozenLeftContentTbody(): Element;
        /**
            * @hidden
            * @returns {Element} - returns frozen right header tbody
            */
        getFrozenRightHeaderTbody(): Element;
        /**
            * @returns {Element} returns frozen right content tbody
            * @hidden
            */
        getFrozenRightContentTbody(): Element;
        /**
            * @param {boolean} isCustom - Defines custom filter dialog open
            * @returns {void}
            * @hidden
            */
        showResponsiveCustomFilter(isCustom?: boolean): void;
        /**
            * @param {boolean} isCustom - Defines custom sort dialog open
            * @returns {void}
            * @hidden
            */
        showResponsiveCustomSort(isCustom?: boolean): void;
        /**
            * To manually show the vertical row mode filter dialog
            *
            * @returns {void}
            */
        showAdaptiveFilterDialog(): void;
        /**
            * To manually show the vertical row sort filter dialog
            *
            * @returns {void}
            */
        showAdaptiveSortDialog(): void;
        /**
            * @param {boolean} isColVirtualization - Defines column virtualization
            * @returns {Column[]} returns array of column models
            * @hidden
            */
        getCurrentVisibleColumns(isColVirtualization?: boolean): Column[];
}

/**
    * Represents Grid `Column` model class.
    */
export class Column {
        /**
            * Defines the field name of column which is mapped with mapping name of DataSource.
            * The bounded columns can be sort, filter and group etc.,
            * The `field` name must be a valid JavaScript identifier,
            * the first character must be an alphabet and should not contain spaces and special characters.
            *
            * @default ''
            */
        field: string;
        /**
            * Gets the unique identifier value of the column. It is used to get the column object.
            *
            * @default ''
            */
        uid: string;
        /**
            * Gets the unique identifier value of the column. It is used to get the column object.
            *
            * @default null
            */
        index: number;
        /**
            * Defines the header text of column which is used to display in column header.
            * If `headerText` is not defined, then field name value will be assigned to header text.
            *
            * @default null
            */
        headerText: string;
        /**
            * Defines the width of the column in pixels or percentage.
            *
            * @default ''
            */
        width: string | number;
        /**
            * Defines the minimum Width of the column in pixels or percentage.
            *
            * @default ''
            */
        minWidth: string | number;
        /**
            * Defines the maximum width of the column in pixel or percentage, which will restrict resizing beyond this pixel or percentage.
            *
            * @default ''
            */
        maxWidth: string | number;
        /**
            * Defines the alignment of the column in both header and content cells.
            *
            * @default Left
            */
        textAlign: TextAlign;
        /**
            * Defines the cell content's overflow mode. The available modes are
            * * `Clip` -  Truncates the cell content when it overflows its area.
            * * `Ellipsis` -  Displays ellipsis when the cell content overflows its area.
            * * `EllipsisWithTooltip` - Displays ellipsis when the cell content overflows its area
            * also it will display tooltip while hover on ellipsis applied cell.
            *
            * @default Ellipsis
            */
        clipMode: ClipMode;
        /**
            * Define the alignment of column header which is used to align the text of column header.
            *
            * @default null
            */
        headerTextAlign: TextAlign;
        /**
            * If `disableHtmlEncode` is set to true, it encodes the HTML of the header and content cells.
            *
            * @default true
            */
        disableHtmlEncode: boolean;
        /**
            * Defines the data type of the column.
            *
            * @default null
            */
        type: string;
        /**
            * It is used to change display value with the given format and does not affect the original data.
            * Gets the format from the user which can be standard or custom
            * [`number`](../base/internationalization/#number-formatting/)
            * and [`date`](../base/internationalization/#date-formatting/) formats.
            *
            * @default null
            * @aspType string
            */
        format: string | NumberFormatOptions | DateFormatOptions;
        /**
            * If `visible` is set to false, hides the particular column. By default, columns are displayed.
            *
            * @default true
            */
        visible: boolean;
        /**
            * Defines the column template that renders customized element in each cell of the column.
            * It accepts either [template string](https://ej2.syncfusion.com/documentation/common/template-engine/) or HTML element ID.
            *
            * @default null
            */
        template: string;
        /**
            * Defines the header template as string or HTML element ID which is used to add customized element in the column header.
            *
            * @default null
            */
        headerTemplate: string;
        /**
            * You can use this property to freeze selected columns in grid
            *
            * @default false
            */
        isFrozen: boolean;
        /**
            * If `allowSorting` set to false, then it disables sorting option of a particular column.
            * By default all columns are sortable.
            *
            * @default true
            */
        allowSorting: boolean;
        /**
            * If `allowResizing` is set to false, it disables resize option of a particular column.
            * By default all the columns can be resized.
            *
            * @default true
            */
        allowResizing: boolean;
        /**
            * If `allowFiltering` set to false, then it disables filtering option and filter bar element of a particular column.
            * By default all columns are filterable.
            *
            * @default true
            */
        allowFiltering: boolean;
        /**
            * If `allowGrouping` set to false, then it disables grouping of a particular column.
            * By default all columns are groupable.
            *
            * @default true
            */
        allowGrouping: boolean;
        /**
            * If `allowReordering` set to false, then it disables reorder of a particular column.
            * By default all columns can be reorder.
            *
            * @default true
            */
        allowReordering: boolean;
        /**
            * If `showColumnMenu` set to false, then it disable the column menu of a particular column.
            * By default column menu will show for all columns
            *
            * @default true
            */
        showColumnMenu: boolean;
        /**
            * If `enableGroupByFormat` set to true, then it groups the particular column by formatted values.
            *
            * @default true
            */
        enableGroupByFormat: boolean;
        /**
            * If `allowEditing` set to false, then it disables editing of a particular column.
            * By default all columns are editable.
            *
            * @default true
            */
        allowEditing: boolean;
        /**
            * The CSS styles and attributes of the content cells of a particular column can be customized.
            *
            * {% codeBlock src="grid/custom-attribute-api/index.ts" %}{% endcodeBlock %}
            *
            * @default null
            */
        customAttributes: {
                [x: string]: Object;
        };
        /**
            * If `displayAsCheckBox` is set to true, it displays the column value as a check box instead of Boolean value.
            *
            * @default false
            */
        displayAsCheckBox: boolean;
        /**
            * Defines the column data source which will act as foreign data source.
            *
            * @default null
            */
        dataSource: Object[] | DataManager | DataResult;
        /**
            * Defines the method which is used to achieve custom formatting from an external function.
            * This function triggers before rendering of each cell.
            * {% codeBlock src="grid/formatter-api/index.ts" %}{% endcodeBlock %}
            *
            * @default null
            */
        formatter: {
                new (): ICellFormatter;
        } | ICellFormatter | Function;
        /**
            * Defines the method used to apply custom cell values from external function and display this on each cell rendered.
            *
            * {% codeBlock src="grid/value-accessor-api/index.ts" %}{% endcodeBlock %}
            *
            * @default null
            */
        valueAccessor: ValueAccessor | string;
        /**
            * Defines the method used to apply custom header cell values from external function and display this on each header cell rendered.
            *
            * @default null
            */
        headerValueAccessor: HeaderValueAccessor | string;
        /**
            * The `filterBarTemplate` is used to add a custom component instead of default input component for filter bar.
            * It have create and read functions.
            * * create: It is used for creating custom components.
            * * read: It is used to perform custom filter action.
            *
            * {% codeBlock src="grid/filter-template-api/index.ts" %}{% endcodeBlock %}
            *
            * @default null
            */
        filterBarTemplate: IFilterUI;
        /**
            *  It is used to customize the default filter options for a specific columns.
            * * type -  Specifies the filter type as menu or checkbox.
            * * ui - to render custom component for specific column it has following functions.
            * * ui.create – It is used for creating custom components.
            * * ui.read -  It is used for read the value from the component.
            * * ui.write - It is used to apply component model as dynamically.
            * {% codeBlock src="grid/filter-menu-api/index.ts" %}{% endcodeBlock %}
            *
            * > Check the [`Filter UI`](../../grid/filtering/#custom-component-in-filter-menu) for its customization.
            *
            *  @default {}
            */
        filter: IFilter;
        /**
            * Used to render multiple header rows(stacked headers) on the Grid header.
            *
            * @default null
            */
        columns: Column[] | string[] | ColumnModel[];
        /**
            * Defines the tool tip text for stacked headers.
            *
            * @default null
            * @hidden
            */
        toolTip: string;
        /**
            * If `isPrimaryKey` is set to true, considers this column as the primary key constraint.
            *
            * @default false
            */
        isPrimaryKey: boolean;
        /**
            * Column visibility can change based on [`Media Queries`](http://cssmediaqueries.com/what-are-css-media-queries.html).
            * `hideAtMedia` accepts only valid Media Queries.
            *
            * @default ''
            */
        hideAtMedia?: string;
        /**
            * If `showInColumnChooser` set to false, then hide the particular column in column chooser.
            *  By default all columns are displayed in column Chooser.
            *
            * @default true
            */
        showInColumnChooser?: boolean;
        /**
            * Defines the type of component for editable.
            *
            * @default 'stringedit'
            */
        editType: string;
        /**
            * Defines rules to validate data before creating and updating.
            *
            * @default null
            */
        validationRules: Object;
        /**
            * Defines default values for the component when adding a new record to the Grid.
            *
            * @default null
            * @aspType object
            */
        defaultValue: string;
        /**
            * Defines the `IEditCell` object to customize default edit cell.
            *
            * @default {}
            */
        edit: IEditCell;
        /**
            * If `isIdentity` is set to true, then this column is considered as identity column.
            *
            * @default false
            */
        isIdentity: boolean;
        /**
            * Defines the display column name from the foreign data source which will be obtained from comparing local and foreign data.
            *
            * @default null
            */
        foreignKeyValue: string;
        /**
            * Defines the mapping column name of the foreign data source.
            * If it is not defined then the `columns.field` will be considered as mapping column name
            *
            * @default null
            */
        foreignKeyField: string;
        /**
            * @hidden
            * Defines the commands column template as string or HTML element ID which is used to add
            * customized command buttons in each cells of the column.
            */
        commandsTemplate: string;
        /**
            * `commands` provides an option to display command buttons in every cell.
            * The available built-in command buttons are
            * * Edit - Edit the record.
            * * Delete - Delete the record.
            * * Save - Save the record.
            * * Cancel - Cancel the edit state.
            * {% codeBlock src="grid/command-column-api/index.ts" %}{% endcodeBlock %}
            *
            * @default null
            */
        commands: CommandModel[];
        /**
            * @hidden
            * Gets the current view foreign key data.
            *
            * @default []
            */
        columnData: Object[];
        /**
            * Defines the cell edit template that used as editor for a particular column.
            * It accepts either template string or HTML element ID.
            *
            * @default null
            * @aspIgnore
            */
        editTemplate: string;
        /**
            * Defines the filter template/UI that used as filter for a particular column.
            * It accepts either template string or HTML element ID.
            *
            * @default null
            * @aspIgnore
            */
        filterTemplate: string;
        /** @hidden */
        toJSON: Function;
        /**
            * Defines the mapping column name of the foreign data source.
            * If it is not defined then the `columns.field` will be considered as mapping column name
            *
            * @default false
            */
        lockColumn: boolean;
        /**
            * If `allowSearching` set to false, then it disables Searching of a particular column.
            * By default all columns allow Searching.
            *
            * @default true
            */
        allowSearching: boolean;
        /**
            * If `autoFit` set to true, then the particular column content width will be
            * adjusted based on its content in the initial rendering itself.
            * Setting this property as true is equivalent to calling `autoFitColumns` method in the `dataBound` event.
            *
            * @default false
            */
        autoFit: boolean;
        /**
            * defines which side the column need to freeze
            * The available built-in freeze directions are
            * * Left - Freeze the column at left side.
            * * Right - Freeze the column at right side.
            *
            * @default null
            */
        freeze: freezeDirection;
        /**
            * @hidden
            * Sets the selected state.
            * @default false
            */
        isSelected: boolean;
        constructor(options: ColumnModel, parent?: IGrid);
        /**
            * @returns {Function} returns the edit template
            * @hidden */
        getEditTemplate: Function;
        /**
            * @returns {Function} returns the filter template
            * @hidden */
        getFilterTemplate: Function;
        /**
            * @returns {string} returns the sort direction
            * @hidden */
        getSortDirection(): string;
        /**
            * @param {string} direction - specifies the direction
            * @returns {void}
            * @hidden
            */
        setSortDirection(direction: string): void;
        /**
            * @returns {freezeTable} returns the FreezeTable
            * @hidden */
        getFreezeTableName(): freezeTable;
        /**
            * @param {Column} column - specifies the column
            * @returns {void}
            * @hidden
            */
        setProperties(column: Column): void;
        /**
            * Defines the custom sort comparer function.
            * The sort comparer function has the same functionality like
            * [`Array.sort`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) sort comparer.
            * {% codeBlock src="grid/sort-comparer-api/index.ts" %}{% endcodeBlock %}
            */
        sortComparer: SortComparer | string;
        /**
            * @returns {boolean} returns true for foreign column
            * @hidden
            * It defines the column is foreign key column or not.
            */
        isForeignColumn(): boolean;
        /**
            * @returns {Function} returns the function
            * @hidden
            */
        getFormatter(): Function;
        /**
            * @param {Function} value - specifies the value
            * @returns {void}
            * @hidden
            */
        setFormatter(value: Function): void;
        /**
            * @returns {Function} returns the function
            * @hidden */
        getParser(): Function;
        /**
            * @param {Function} value - specifies the value
            * @returns {void}
            * @hidden
            */
        setParser(value: Function): void;
        /**
            * @returns {Function} returns the function
            * @hidden */
        getColumnTemplate(): Function;
        /**
            * @returns {Function} returns the function
            * @hidden */
        getHeaderTemplate(): Function;
        /**
            * @returns {Function} returns the function
            * @hidden */
        getFilterItemTemplate(): Function;
        /**
            * @returns {string} returns the string
            * @hidden */
        getDomSetter(): string;
}
/**
    * Interface for a class Column
    */
export interface ColumnModel {
        /**
            * Defines the field name of column which is mapped with mapping name of DataSource.
            * The bounded columns can be sort, filter and group etc.,
            * If the `field` name contains “dot”, then it is considered as complex binding.
            * The `field` name must be a valid JavaScript identifier,
            * the first character must be an alphabet and should not contain spaces and special characters.
            *
            * @default ''
            */
        field?: string;
        /**
            * Gets the unique identifier value of the column. It is used to get the object.
            *
            * @default ''
            */
        uid?: string;
        /**
            * Gets the unique identifier value of the column. It is used to get the object.
            *
            * @default null
            */
        index?: number;
        /**
            * Defines the header text of column which is used to display in column header.
            * If `headerText` is not defined, then field name value will be assigned to header text.
            *
            * @default null
            */
        headerText?: string;
        /**
            * Defines the width of the column in pixels or percentage.
            *
            * @default ''
            */
        width?: string | number;
        /**
            * Defines the minimum width of the column in pixels or percentage.
            *
            * @default ''
            */
        minWidth?: string | number;
        /**
            * Defines the maximum width of the column in pixel or percentage, which will restrict resizing beyond this pixel or percentage.
            *
            * @default ''
            */
        maxWidth?: string | number;
        /**
            * Defines the alignment of the column in both header and content cells.
            *
            * @default Left
            */
        textAlign?: TextAlign;
        /**
            * Defines the cell content's overflow mode. The available modes are
            * * `Clip` -  Truncates the cell content when it overflows its area.
            * * `Ellipsis` -  Displays ellipsis when the cell content overflows its area.
            * * `EllipsisWithTooltip` - Displays ellipsis when the cell content overflows its area
            * also it will display tooltip while hover on ellipsis applied cell.
            *
            * @default Ellipsis
            */
        clipMode?: ClipMode;
        /**
            * Define the alignment of column header which is used to align the text of column header.
            *
            * @aspdefaultvalueignore
            * @default null
            */
        headerTextAlign?: TextAlign;
        /**
            * If `disableHtmlEncode` is set to true, it encodes the HTML of the header and content cells.
            *
            * @default true
            */
        disableHtmlEncode?: boolean;
        /**
            * Defines the data type of the column.
            *
            * @default null
            */
        type?: string;
        /**
            * It is used to change display value with the given format and does not affect the original data.
            * Gets the format from the user which can be standard or custom
            * [`number`](../../common/internationalization/#manipulating-numbers)
            * and [`date`](../../common/internationalization/#manipulating-datetime) formats.
            *
            * @default null
            * @aspType string
            */
        format?: string | NumberFormatOptions | DateFormatOptions;
        /**
            * If `visible` is set to false, hides the particular column. By default, all columns are displayed.
            *
            * @default true
            */
        visible?: boolean;
        /**
            * Defines the column template that renders customized element in each cell of the column.
            * It accepts either [template string](../../common/template-engine/) or HTML element ID.
            *
            * @default null
            */
        template?: string;
        /**
            * Defines the column template as string or HTML element ID which is used to add customized element in the column header.
            *
            * @default null
            */
        headerTemplate?: string;
        /**
            * You can use this property to freeze selected columns in grid.
            *
            * @default false
            */
        isFrozen?: boolean;
        /**
            * If `allowSorting` set to false, then it disables sorting option of a particular column.
            * By default all columns are sortable.
            *
            * @default true
            */
        allowSorting?: boolean;
        /**
            * If `allowResizing` set to false, it disables resize option of a particular column.
            *
            * @default true
            */
        allowResizing?: boolean;
        /**
            * If `showColumnMenu` set to false, then it disable the column menu of a particular column.
            * By default column menu will show for all columns
            *
            * @default true
            */
        showColumnMenu?: boolean;
        /**
            * If `allowFiltering` set to false, then it disables filtering option and filter bar element of a particular column.
            * By default all columns are filterable.
            *
            * @default true
            */
        allowFiltering?: boolean;
        /**
            * If `allowGrouping` set to false, then it disables grouping of a particular column.
            * By default all columns are groupable.
            *
            * @default true
            */
        allowGrouping?: boolean;
        /**
            * If `allowReordering` set to false, then it disables reorder of a particular column.
            * By default all columns can be reorder.
            *
            * @default true
            */
        allowReordering?: boolean;
        /**
            * If `enableGroupByFormat` set to true, then it groups the particular column by formatted values.
            * By default no columns are group by format.
            *
            * @default true
            */
        enableGroupByFormat?: boolean;
        /**
            * If `allowEditing` set to false, then it disables editing of a particular column.
            * By default all columns are editable.
            *
            * @default true
            */
        allowEditing?: boolean;
        /**
            * @hidden
            * Gets the current view foreign key data.
            * @default []
            */
        columnData?: Object[];
        /**
            * The CSS styles and attributes of the content cells of a particular column can be customized.
            *
            * ```html
            * <div id="Grid"></div>
            * ```
            * ```typescript
            * let gridObj: Grid = new Grid({
            * dataSource: filterData,
            * columns: [
            *    { field: 'OrderID', headerText: 'Order ID' },
            *    {
            *        field: 'EmployeeID', headerText: 'Employee ID', customAttributes: {
            *           class: 'employeeid',
            *           type: 'employee-id-cell'
            *      }
            *   }]
            * });
            * gridObj.appendTo('#Grid');
            * ```
            *
            * @default null
            */
        customAttributes?: {
                [x: string]: Object;
        };
        /**
            * If `displayAsCheckBox` is set to true, it displays the column value as a check box instead of Boolean value.
            *
            * @default false
            */
        displayAsCheckBox?: boolean;
        /**
            * Defines the column data source  which will act as foreign data source.
            *
            * @default null
            */
        dataSource?: Object[] | DataManager | DataResult;
        /**
            * Defines the method which is used to achieve custom formatting from an external function.
            * This function triggers before rendering of each cell.
            *
            * ```html
            * <div id="Grid"></div>
            * ```
            * ```typescript
            * class ExtendedFormatter implements ICellFormatter {
            * public getValue(column: Column, data: Object): Object {
            *   return '<span style="color:' + (data['Verified'] ? 'green' : 'red') + '"><i>' + data['Verified'] + '</i><span>';
            * }
            * }
            * let gridObj: Grid = new Grid({
            *     dataSource: filterData,
            *     columns: [
            *         { field: 'ShipName', headerText: 'Ship Name' },
            *         { field: 'Verified', headerText: 'Verified Status', formatter: ExtendedFormatter }]
            * });
            * gridObj.appendTo('#Grid');
            * ```
            *
            * @default null
            */
        formatter?: {
                new (): ICellFormatter;
        } | ICellFormatter | Function;
        /**
            * Defines the method used to apply custom cell values from external function and display this on each cell rendered.
            *
            * ```html
            * <div id="Grid"></div>
            * ```
            * ```typescript
            * let gridObj: Grid = new Grid({
            * dataSource: [{ EmployeeID: 1, EmployeeName: ['John', 'M'] }, { EmployeeID: 2, EmployeeName: ['Peter', 'A'] }],
            * columns: [
            *     { field: 'EmployeeID', headerText: 'Employee ID' },
            *     { field: 'EmployeeName', headerText: 'Employee First Name',
            *       valueAccessor: (field: string, data: Object, column: Column) => {
            *             return data['EmployeeName'][0];
            *         },
            *     }]
            * });
            * ```
            *
            * @default null
            */
        valueAccessor?: ValueAccessor | string;
        /**
            * Defines the method used to apply custom header cell values from external function and display this on each cell rendered.
            *
            * ```html
            * <div id="Grid"></div>
            * ```
            * ```typescript
            * let gridObj: Grid = new Grid({
            * dataSource: [{ EmployeeID: 1, EmployeeName: ['John', 'M'] }, { EmployeeID: 2, EmployeeName: ['Peter', 'A'] }],
            * columns: [
            *     { field: 'EmployeeID', headerText: 'Employee ID' },
            *     { field: 'EmployeeName', headerText: 'Employee First Name',
            *       headerValueAccessor: (field: string,column: Column) => {
            *             return "newheadername";
            *         },
            *     }]
            * });
            * ```
            *
            * @default null
            */
        headerValueAccessor?: HeaderValueAccessor | string;
        /**
            * The `filterBarTemplate` is used to add a custom component instead of default input component for filter bar.
            * It have create and read functions.
            * * create: It is used for creating custom components.
            * * read: It is used to perform custom filter action.
            *
            * ```html
            * <div id="Grid"></div>
            * ```
            * ```typescript
            * let gridObj: Grid = new Grid({
            * dataSource: filterData,
            * columns: [
            *   { field: 'OrderID', headerText: 'Order ID' },
            *   {
            *      field: 'EmployeeID', filterBarTemplate: {
            *         create: (args: { element: Element, column: Column }) => {
            *              let input: HTMLInputElement = document.createElement('input');
            *              input.id = 'EmployeeID';
            *              input.type = 'text';
            *              return input;
            *         },
            *         write: (args: { element: Element, column: Column }) => {
            *             args.element.addEventListener('input', args.column.filterBarTemplate.read as EventListener);
            *         },
            *         read: (args: { element: HTMLInputElement, columnIndex: number, column: Column }) => {
            *             gridObj.filterByColumn(args.element.id, 'equal', args.element.value);
            *        }
            *     }
            *  }],
            *   allowFiltering: true
            * });
            * gridObj.appendTo('#Grid');
            * ```
            *
            * @default null
            */
        filterBarTemplate?: IFilterUI;
        /**
            *  Defines the filter options to customize filtering for the particular column.
            *
            *  @default null
            */
        filter?: IFilter;
        /**
            * Used to render multiple header rows(stacked headers) on the Grid header.
            *
            * @default null
            */
        columns?: Column[] | string[] | ColumnModel[];
        /**
            * Defines the tool tip text for stacked headers.
            *
            * @hidden
            * @default null
            */
        toolTip?: string;
        /**
            * If `isPrimaryKey` is set to true, considers this column as the primary key constraint.
            *
            * @default false
            */
        isPrimaryKey?: boolean;
        /**
            * Defines the type of component for editing.
            *
            * @default 'stringedit'
            */
        editType?: string;
        /**
            * `editType`(../../grid/edit/#cell-edit-type-and-its-params) Defines rules to validate data before creating and updating.
            *
            * @default null
            */
        validationRules?: Object;
        /**
            * Defines default values for the component when adding a new record to the Grid.
            *
            * @default null
            * @aspType object
            */
        defaultValue?: string;
        /**
            * Defines the `IEditCell`(../../grid/edit/#cell-edit-template) object to customize default edit cell.
            *
            * @default {}
            */
        edit?: IEditCell;
        /**
            * If `isIdentity` is set to true, then this column is considered as identity column.
            *
            * @default false
            */
        isIdentity?: boolean;
        /**
            * Defines the mapping column name of the foreign data source.
            * If it is not defined then the `columns.field` will be considered as mapping column name
            *
            * @default null
            */
        foreignKeyField?: string;
        /**
            * Defines the display column name from the foreign data source which will be obtained from comparing local and foreign data
            *
            * @default null
            */
        foreignKeyValue?: string;
        /**
            * column visibility can change based on its [`Media Queries`](http://cssmediaqueries.com/what-are-css-media-queries.html).
            * `hideAtMedia` accepts only valid Media Queries.
            *
            * @default ''
            */
        hideAtMedia?: string;
        /**
            * If `showInColumnChooser` set to false, then hides the particular column in column chooser.
            * By default all columns are displayed in column Chooser.
            *
            * @default true
            */
        showInColumnChooser?: boolean;
        /**
            * @hidden
            * Defines the commands column template as string or HTML element ID which is used to add
            * customized command buttons in each cells of the column.
            */
        commandsTemplate?: string;
        /**
            * `commands` provides an option to display command buttons in every cell.
            * The available built-in command buttons are
            * * Edit - Edit the record.
            * * Delete - Delete the record.
            * * Save - Save the record.
            * * Cancel - Cancel the edit state.
            *
            * The following code example implements the custom command column.
            * ```html
            * <style type="text/css" class="cssStyles">
            * .details-icon:before
            * {
            *    content:"\e74d";
            * }
            * </style>
            * <div id="Grid"></div>
            * ```
            * ```typescript
            * var gridObj = new Grid({
            * datasource: window.gridData,
            * columns : [
            *  { field: 'CustomerID', headerText: 'Customer ID' },
            *  { field: 'CustomerName', headerText: 'Customer Name' },
            *  {commands: [{buttonOption:{content: 'Details', click: onClick, cssClass: details-icon}}], headerText: 'Customer Details'}
            * ]
            * gridObj.appendTo("#Grid");
            * ```
            *
            * @default null
            */
        commands?: CommandModel[];
        /**
            * It defines the custom sort comparer function.
            */
        sortComparer?: SortComparer | string;
        /**
            * @hidden
            * It defines the column is foreign key column or not.
            */
        isForeignColumn?: () => boolean;
        /**
            * Defines the cell edit template that used as editor for a particular column.
            * It accepts either template string or HTML element ID.
            *
            * @aspIgnore
            */
        editTemplate?: string;
        /**
            * Defines the filter template/UI that used as filter for a particular column.
            * It accepts either template string or HTML element ID.
            *
            * @aspIgnore
            */
        filterTemplate?: string;
        /**
            * Defines the mapping column name of the foreign data source.
            * If it is not defined then the `columns.field` will be considered as mapping column name
            *
            * @default false
            */
        lockColumn?: boolean;
        /**
            * If `allowSearching` set to false, then it disables Searching of a particular column.
            * By default all columns allow Searching.
            *
            * @default true
            */
        allowSearching?: boolean;
        /**
            * If `autoFit` set to true, then the particular column content width will be
            * adjusted based on its content in the initial rendering itself.
            * Setting this property as true is equivalent to calling `autoFitColumns` method in the `dataBound` event.
            *
            * @default false
            */
        autoFit?: boolean;
        freeze?: freezeDirection;
}
export interface ActionEventArgs {
        /** Defines the current action. */
        requestType?: Action;
        /** Defines the type of event. */
        type?: string;
        /** Cancel the print action */
        cancel?: boolean;
        /** Defines the previous page number. */
        previousPage?: number;
        /** Defines the current page number. */
        currentPage?: number;
        /** Defines the field name of the currently grouped columns. */
        columnName?: string;
        /** Defines the object that is currently filtered. */
        currentFilterObject?: PredicateModel;
        /** Defines the column name that is currently filtered. */
        currentFilteringColumn?: string;
        /** Defines the collection of filtered columns. */
        columns?: PredicateModel[];
        /** Defines the string value to search. */
        searchString?: string;
        /** Defines the direction of sort column. */
        direction?: SortDirection;
        /** Defines the record objects.
            *
            * @isGenericType true
            */
        data?: Object;
        /** Defines the previous data.
            *
            * @isGenericType true
            */
        previousData?: Object;
        /** Defines the added row. */
        row?: Object;
        /** Added row index */
        index?: number;
        /** Defines the record objects.
            *
            * @isGenericType true
            */
        rowData?: Object;
        /** Defines the target for dialog */
        target?: HTMLElement;
        /** Defines the selected row index. */
        selectedRow?: number;
        /** Defines the current action. */
        action?: string;
        /** Defines foreign data object. */
        foreignKeyData?: Object;
        /** Define the form element */
        form?: HTMLFormElement;
        /** Define the movable table form element */
        movableForm?: HTMLFormElement;
        /** Defines the selected rows for delete. */
        tr?: Element[];
        /** Defines the primary keys */
        primaryKeys?: string[];
        /** Defines the primary key value */
        primaryKeyValue?: Object[];
        /** Defines the edited rowIndex */
        rowIndex?: number;
        /** Defines take number of data while Filtering */
        filterChoiceCount: number;
        /**
            * Defines the excel search operator
            */
        excelSearchOperator: string;
}
/**
    * Define options for custom command buttons.
    */
export class CommandColumnModel {
        /**
            * Define the command Button tooltip.
            */
        title: string;
        /**
            * Define the command Button type.
            */
        type: CommandButtonType;
        /**
            * Define the button model
            */
        buttonOption: CommandButtonOptions;
}

/**
    * Interface for a class AggregateColumn
    */
export interface AggregateColumnModel {
        /**
            * Defines the aggregate type of a particular column.
            * To use multiple aggregates for single column, specify the `type` as array.
            * Types of aggregate are,
            * * sum
            * * average
            * * max
            * * min
            * * count
            * * truecount
            * * falsecount
            * * custom
            * > Specify the `type` value as `custom` to use custom aggregation.
            *
            * @aspType string
            * @default null
            */
        type?: AggregateType | AggregateType[] | string;
        /**
            * Defines the column name to perform aggregation.
            *
            * @default null
            */
        field?: string;
        /**
            * Defines the column name to display the aggregate value. If `columnName` is not defined,
            * then `field` name value will be assigned to the `columnName` property.
            *
            * @default null
            */
        columnName?: string;
        /**
            * Format is applied to a calculated value before it is displayed.
            * Gets the format from the user, which can be standard or custom
            * [`number`](../../common/internationalization/#number-formatting/)
            * and [`date`](../../common/internationalization/#number-formatting/) formats.
            *
            * @aspType string
            * @blazorType string
            * @default null
            */
        format?: string | NumberFormatOptions | DateFormatOptions;
        /**
            * Defines the footer cell template as a string for the aggregate column.
            * The `type` name should be used to access aggregate values inside the template.
            *
            * {% codeBlock src="grid/footer-template-api/index.ts" %}{% endcodeBlock %}
            *
            * @default null
            */
        footerTemplate?: string;
        /**
            * Defines the group footer cell template as a string for the aggregate column.
            * The `type` name should be used to access aggregate values inside the template.
            * Additionally, the following fields can be accessed in the template.
            * * **field**: The current grouped field.
            * * **key**: The current grouped value.
            *
            * {% codeBlock src="grid/group-footer-api/index.ts" %}{% endcodeBlock %}
            *
            * @default null
            */
        groupFooterTemplate?: string;
        /**
            * Defines the group caption cell template as a string for the aggregate column.
            * The `type` name should be used to access aggregate values inside the template.
            * Additionally, the following fields can be accessed in the template.
            * * **field**: The current grouped field name.
            * * **key**: The current grouped field value.
            *
            * {% codeBlock src="grid/group-caption-api/index.ts" %}{% endcodeBlock %}
            *
            * @default null
            */
        groupCaptionTemplate?: string;
        /**
            * Defines a function to calculate custom aggregate value. The `type` value should be set to `custom`.
            * To use custom aggregate value in the template, use the key as `${custom}`.
            * **Total aggregation**: The custom function will be called with the whole data and the current `AggregateColumn` object.
            * **Group aggregation**: This will be called with the current group details and the `AggregateColumn` object.
            *
            * @default null
            */
        customAggregate?: CustomSummaryType | string;
}
/**
    * Interface for a class AggregateRow
    */
export interface AggregateRowModel {
        /**
            * Configures the aggregate columns.
            *
            * @default []
            */
        columns?: AggregateColumnModel[];
}

/**
  * Grid component exported items
  */

export function UIGridView(): GridClass;

export class GridClass extends UIView {
    vp_DataSource: Object[];
    datasource(value: Object[]): this;
    vp_Columns: Column[] | string[] | ColumnModel[];
    columns(value: Column[] | string[] | ColumnModel[]): this;
    vp_MultipleSelection: boolean;
    multipleSelection(value: boolean): this;
    vp_SelectionChange: Function;
    selectionChange(value: Function): this;
    setController(controller: UIController): this;
    constructor();
}

/**
    * @hidden
    * `CheckBoxFilterBase` module is used to handle filtering action.
    */
export class CheckBoxFilterBase {
        protected sBox: HTMLElement;
        protected isExcel: boolean;
        protected id: string;
        protected colType: string;
        protected fullData: Object[];
        protected filteredData: Object[];
        protected isFiltered: boolean | number;
        protected dlg: Element;
        protected dialogObj: Dialog;
        protected cBox: HTMLElement;
        protected spinner: HTMLElement;
        protected searchBox: Element;
        protected sInput: HTMLInputElement;
        protected sIcon: Element;
        /** @hidden */
        options: IFilterArgs;
        protected existingPredicate: {
                [key: string]: PredicateModel[];
        };
        protected foreignKeyData: Object[];
        protected foreignKeyQuery: Query;
        /** @hidden */
        filterState: boolean;
        protected values: Object;
        protected renderEmpty: boolean;
        protected parent: IXLFilter;
        protected localeObj: L10n;
        protected valueFormatter: ValueFormatter;
        /**
            * Constructor for checkbox filtering module
            *
            * @param {IXLFilter} parent - specifies the IXLFilter
            * @hidden
            */
        constructor(parent?: IXLFilter);
        /**
            * @returns {void}
            * @hidden
            */
        destroy(): void;
        protected foreignKeyFilter(args: Object, fColl?: Object[], mPredicate?: Predicate): void;
        /**
            * Gets the localized label by locale keyword.
            *
            * @param {string} key - Defines localization key
            * @returns {string} - returns localization label
            */
        getLocalizedLabel(key: string): string;
        protected updateModel(options: IFilterArgs): void;
        protected getAndSetChkElem(options: IFilterArgs): HTMLElement;
        protected showDialog(options: IFilterArgs): void;
        openDialog(options: IFilterArgs): void;
        closeDialog(): void;
        /**
            * @param {Column} col - Defines column details
            * @returns {void}
            * @hidden
            */
        clearFilter(col?: Column): void;
        /**
            * @returns {void}
            * @hidden
            */
        fltrBtnHandler(): void;
        /** @hidden */
        static generateNullValuePredicates(defaults: {
                predicate?: string;
                field?: string;
                type?: string;
                uid?: string;
                operator?: string;
                matchCase?: boolean;
                ignoreAccent?: boolean;
        }): PredicateModel[];
        protected isForeignColumn(col: Column): boolean;
        protected search(args: FilterSearchBeginEventArgs, query: Query): void;
        protected getQuery(): Query;
        static getDistinct(json: Object[], field: string, column?: Column, foreignKeyData?: Object[]): Object;
        static getPredicate(columns: PredicateModel[]): Predicate;
}

/**
    * @hidden
    * `ExcelFilter` module is used to handle filtering action.
    */
export class ExcelFilterBase extends CheckBoxFilterBase {
        protected menuObj: ContextMenu;
        /**
            * Constructor for excel filtering module
            *
            * @param {IXLFilter} parent - parent details
            * @param {Object} customFltrOperators - operator details
            * @hidden
            */
        constructor(parent?: IXLFilter, customFltrOperators?: Object);
        /**
            * To destroy the filter bar.
            *
            * @returns {void}
            * @hidden
            */
        destroy(): void;
        openDialog(options: IFilterArgs): void;
        closeDialog(): void;
        /**
            * @hidden
            * @param {MenuEventArgs} e - event args
            * @returns {void}
            */
        renderDialogue(e?: MenuEventArgs): void;
        /**
            * @hidden
            * @returns {void}
            */
        removeDialog(): void;
        /**
            * @hidden
            * @param {string} col - Defines column details
            * @returns {void}
            */
        filterBtnClick(col: string): void;
        /**
            * @hidden
            * Filters grid row by column name with given options.
            *
            * @param {string} fieldName - Defines the field name of the filter column.
            * @param {string} firstOperator - Defines the first operator by how to filter records.
            * @param {string | number | Date | boolean} firstValue - Defines the first value which is used to filter records.
            * @param  {string} predicate - Defines the relationship between one filter query with another by using AND or OR predicate.
            * @param {boolean} matchCase - If ignore case set to true, then filter records with exact match or else
            * filter records with case insensitive(uppercase and lowercase letters treated as same).
            * @param {boolean} ignoreAccent - If ignoreAccent set to true, then ignores the diacritic characters or accents when filtering.
            * @param {string} secondOperator - Defines the second operator by how to filter records.
            * @param {string | number | Date | boolean} secondValue - Defines the first value which is used to filter records.
            * @returns {void}
            */
        filterByColumn(fieldName: string, firstOperator: string, firstValue: string | number | Date | boolean, predicate?: string, matchCase?: boolean, ignoreAccent?: boolean, secondOperator?: string, secondValue?: string | number | Date | boolean): void;
        /**
            * @hidden
            * @returns {FilterUI} returns filter UI
            */
        getFilterUIInfo(): FilterUI;
}

/**
  * Defines the excel filter interface.
  */
/** @hidden */
export interface XLColumn {
    field?: string;
}
/** @hidden */
export interface XLFilterSettings {
    columns?: XLColumn[];
}
/** @hidden */
export interface XLSearchSettings {
    key?: string;
}
/** @hidden */
export interface IXLFilter extends Component<HTMLElement> {
    filterSettings?: XLFilterSettings;
    destroyTemplate?: Function;
    getQuery?: Function;
    searchSettings?: XLSearchSettings;
    getColumnByField?: Function;
    getColumnHeaderByUid?: Function;
    dataSource?: Object[] | DataManager;
    getForeignKeyColumns?: Function;
    isReact?: boolean;
    isVue?: boolean;
    renderTemplates?: Function;
    allowSorting?: boolean;
}
/** @hidden */
export interface FilterStateObj {
    state: DataStateChangeEventArgs;
    deffered: Deferred;
}

/**
    * Interface for a class SortDescriptor
    */
export interface SortDescriptorModel {
        /**
            * Defines the field name of sort column.
            *
            * @default ''
            */
        field?: string;
        /**
            * Defines the direction of sort column.
            *
            * @default ''
            */
        direction?: SortDirection;
        /**
            * @hidden
            * Defines the sorted column whether or from grouping operation.
            *
            * @default false
            */
        isFromGroup?: boolean;
}
/**
    * Interface for a class SortSettings
    */
export interface SortSettingsModel {
        /**
            * Specifies the columns to sort at initial rendering of Grid.
            * Also user can get current sorted columns.
            *
            * @default []
            */
        columns?: SortDescriptorModel[];
        /**
            * If `allowUnsort` set to false the user can not get the grid in unsorted state by clicking the sorted column header.
            *
            * @default true
            */
        allowUnsort?: boolean;
}
/**
    * Interface for a class Predicate
    */
export interface PredicateModel {
        /**
            * Defines the field name of the filter column.
            *
            * @default ''
            */
        field?: string;
        /**
            * Defines the operator to filter records. The available operators and its supported data types are:
            * <table>
            * <tr>
            * <td colspan=1 rowspan=1>
            * Operator<br/></td><td colspan=1 rowspan=1>
            * Description<br/></td><td colspan=1 rowspan=1>
            * Supported Types<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * startswith<br/></td><td colspan=1 rowspan=1>
            * Checks whether the value begins with the specified value.<br/></td><td colspan=1 rowspan=1>
            * String<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * endswith<br/></td><td colspan=1 rowspan=1>
            * Checks whether the value ends with the specified value.<br/><br/></td><td colspan=1 rowspan=1>
            * <br/>String<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * contains<br/></td><td colspan=1 rowspan=1>
            * Checks whether the value contains the specified value.<br/><br/></td><td colspan=1 rowspan=1>
            * <br/>String<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * equal<br/></td><td colspan=1 rowspan=1>
            * Checks whether the value is equal to the specified value.<br/><br/></td><td colspan=1 rowspan=1>
            * <br/>String | Number | Boolean | Date<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * notequal<br/></td><td colspan=1 rowspan=1>
            * Checks for values that are not equal to the specified value.<br/><br/></td><td colspan=1 rowspan=1>
            * <br/>String | Number | Boolean | Date<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * greaterthan<br/></td><td colspan=1 rowspan=1>
            * Checks whether the value is greater than the specified value.<br/><br/></td><td colspan=1 rowspan=1>
            * Number | Date<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * greaterthanorequal<br/></td><td colspan=1 rowspan=1>
            * Checks whether the value is greater than or equal to the specified value.<br/><br/></td><td colspan=1 rowspan=1>
            * <br/>Number | Date<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * lessthan<br/></td><td colspan=1 rowspan=1>
            * Checks whether the value is less than the specified value.<br/><br/></td><td colspan=1 rowspan=1>
            * <br/>Number | Date<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * lessthanorequal<br/></td><td colspan=1 rowspan=1>
            * Checks whether the value is less than or equal to the specified value.<br/><br/></td><td colspan=1 rowspan=1>
            * <br/>Number | Date<br/></td></tr>
            * </table>
            *
            * @default null
            */
        operator?: string;
        /**
            * Defines the value used to filter records.
            *
            * @default ''
            */
        value?: string | number | Date | boolean;
        /**
            * If match case set to true, then filter records with exact match or else
            * filter records with case insensitive(uppercase and lowercase letters treated as same).
            *
            * @default null
            */
        matchCase?: boolean;
        /**
            * If ignoreAccent is set to true, then filter ignores the diacritic characters or accents while filtering.
            *
            * @default false
            */
        ignoreAccent?: boolean;
        /**
            * Defines the relationship between one filter query and another by using AND or OR predicate.
            *
            * @default null
            */
        predicate?: string;
        /**
            * @hidden
            * Defines the actual filter value for the filter column.
            */
        actualFilterValue?: Object;
        /**
            * @hidden
            * Defines the actual filter operator for the filter column.
            */
        actualOperator?: Object;
        /**
            * @hidden
            * Defines the type of the filter column.
            */
        type?: string;
        /**
            * @hidden
            * Defines the predicate of filter column.
            */
        ejpredicate?: Object;
        /**
            * Defines the UID of filter column.
            */
        uid?: string;
        /**
            * @hidden
            * Defines the foreignKey availability in filtered columns.
            */
        isForeignKey?: boolean;
}
/**
    * Interface for a class InfiniteScrollSettings
    */
export interface InfiniteScrollSettingsModel {
        /**
            * If `enableCache` is set to true, the Grid will cache the loaded data to be reused next time it is needed.
            *
            * @default false
            */
        enableCache?: boolean;
        /**
            * Defines the number of blocks to be maintained in Grid while settings enableCache as true.
            *
            * @default 3
            */
        maxBlocks?: number;
        /**
            * Defines the number of blocks will render at the initial Grid rendering while enableCache is enabled.
            *
            * @default 3
            */
        initialBlocks?: number;
}
/**
    * Interface for a class FilterSettings
    */
export interface FilterSettingsModel {
        /**
            * Specifies the columns to be filtered at initial rendering of the Grid. You can also get the columns that were currently filtered.
            *
            * @default []
            */
        columns?: PredicateModel[];
        /**
            * Defines options for filtering type. The available options are
            * * `Menu` - Specifies the filter type as menu.
            * * `CheckBox` - Specifies the filter type as checkbox.
            * * `FilterBar` - Specifies the filter type as filterbar.
            * * `Excel` - Specifies the filter type as checkbox.
            *
            * @default FilterBar
            */
        type?: FilterType;
        /**
            * Defines the filter bar modes. The available options are,
            * * `OnEnter`: Initiates filter operation after Enter key is pressed.
            * * `Immediate`: Initiates filter operation after a certain time interval. By default, time interval is 1500 ms.
            *
            * @default OnEnter
            */
        mode?: FilterBarMode;
        /**
            * Shows or hides the filtered status message on the pager.
            *
            * @default true
            */
        showFilterBarStatus?: boolean;
        /**
            * Defines the time delay (in milliseconds) in filtering records when the `Immediate` mode of filter bar is set.
            *
            * @default 1500
            */
        immediateModeDelay?: number;
        /**
            * The `operators` is used to override the default operators in filter menu. This should be defined by type wise
            * (string, number, date and boolean). Based on the column type, this customize operator list will render in filter menu.
            *
            * > Check the [`Filter Menu Operator`](../../grid/how-to/#customizing-filter-menu-operators-list/) customization.
            *
            * @default null
            */
        operators?: ICustomOptr;
        /**
            * If ignoreAccent set to true, then filter ignores the diacritic characters or accents while filtering.
            *
            * > Check the [`Diacritics`](../../grid/filtering/#diacritics/) filtering.
            *
            * @default false
            */
        ignoreAccent?: boolean;
        /**
            * If `enableCaseSensitivity` is set to true then searches grid records with exact match based on the filter
            * operator. It will have no effect on number, boolean and Date fields.
            *
            * @default false
            */
        enableCaseSensitivity?: boolean;
        /**
            * If 'showFilterBarOperator' is set to true, then it renders the dropdownlist component to select the operator
            * in filterbar input
            *
            * @default false
            */
        showFilterBarOperator?: boolean;
}
/**
    * Interface for a class SelectionSettings
    */
export interface SelectionSettingsModel {
        /**
            * Grid supports row, cell, and both (row and cell) selection mode.
            *
            * @default Row
            */
        mode?: SelectionMode;
        /**
            * The cell selection modes are flow and box. It requires the selection
            * [`mode`](grid/#mode-selectionmode/) to be either cell or both.
            * * `Flow`: Selects the range of cells between start index and end index that also includes the other cells of the selected rows.
            * * `Box`: Selects the range of cells within the start and end column indexes that includes in between cells of rows within the range.
            * * `BoxWithBorder`: Selects the range of cells as like Box mode with borders.
            *
            * @default Flow
            */
        cellSelectionMode?: CellSelectionMode;
        /**
            * Defines options for selection type. They are
            * * `Single`: Allows selection of only a row or a cell.
            * * `Multiple`: Allows selection of multiple rows or cells.
            *
            * @default Single
            */
        type?: SelectionType;
        /**
            * If 'checkboxOnly' set to true, then the Grid selection is allowed only through checkbox.
            *
            * > To enable checkboxOnly selection, should specify the column type as`checkbox`.
            *
            * @default false
            */
        checkboxOnly?: boolean;
        /**
            * If 'persistSelection' set to true, then the Grid selection is persisted on all operations.
            * For persisting selection in the Grid, any one of the column should be enabled as a primary key.
            *
            * @default false
            */
        persistSelection?: boolean;
        /**
            * Defines options for checkbox selection Mode. They are
            * * `Default`: This is the default value of the checkboxMode. In this mode, user can select multiple rows by clicking rows one by one.
            * * `ResetOnRowClick`: In ResetOnRowClick mode, on clicking a row it will reset previously selected row and also multiple
            *  rows can be selected by using CTRL or SHIFT key.
            *
            * @default Default
            */
        checkboxMode?: CheckboxSelectionType;
        /**
            * If 'enableSimpleMultiRowSelection' set to true, then the user can able to perform multiple row selection with single clicks.
            *
            * @default false
            */
        enableSimpleMultiRowSelection?: boolean;
        /**
            * If 'enableToggle' set to true, then the user can able to perform toggle for the selected row.
            *
            * @default true
            */
        enableToggle?: boolean;
        /**
            * If 'allowColumnSelection' set to true, then the user can able to select the columns.
            *
            * @default false
            */
        allowColumnSelection?: boolean;
}
/**
    * Interface for a class SearchSettings
    */
export interface SearchSettingsModel {
        /**
            * Specifies the collection of fields included in search operation. By default, bounded columns of the Grid are included.
            *
            * @default []
            */
        fields?: string[];
        /**
            * Specifies the key value to search Grid records at initial rendering.
            * You can also get the current search key.
            *
            * @default ''
            */
        key?: string;
        /**
            * Defines the operator to search records. The available operators are:
            * <table>
            * <tr>
            * <td colspan=1 rowspan=1>
            * Operator<br/></td><td colspan=1 rowspan=1>
            * Description<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * startswith<br/></td><td colspan=1 rowspan=1>
            * Checks whether the string begins with the specified string.<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * endswith<br/></td><td colspan=1 rowspan=1>
            * Checks whether the string ends with the specified string.<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * contains<br/></td><td colspan=1 rowspan=1>
            * Checks whether the string contains the specified string. <br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * equal<br/></td><td colspan=1 rowspan=1>
            * Checks whether the string is equal to the specified string.<br/></td></tr>
            * <tr>
            * <td colspan=1 rowspan=1>
            * notequal<br/></td><td colspan=1 rowspan=1>
            * Checks for strings not equal to the specified string. <br/></td></tr>
            * </table>
            *
            * @default 'contains'
            */
        operator?: string;
        /**
            * If `ignoreCase` is set to false, searches records that match exactly, else
            * searches records that are case insensitive(uppercase and lowercase letters treated the same).
            *
            * @default true
            */
        ignoreCase?: boolean;
        /**
            * If ignoreAccent set to true, then filter ignores the diacritic characters or accents while filtering.
            *
            * > Check the [`Diacritics`](../../grid/filtering/#diacritics/) filtering.
            *
            * @default false
            */
        ignoreAccent?: boolean;
}
/**
    * Interface for a class RowDropSettings
    */
export interface RowDropSettingsModel {
        /**
            * Defines the ID of droppable component on which row drop should occur.
            *
            * @default null
            */
        targetID?: string;
}
/**
    * Interface for a class TextWrapSettings
    */
export interface TextWrapSettingsModel {
        /**
            * Defines the `wrapMode` of the Grid. The available modes are:
            * * `Both`: Wraps both the header and content.
            * * `Content`: Wraps the header alone.
            * * `Header`: Wraps the content alone.
            *
            * @default Both
            */
        wrapMode?: WrapMode;
}
/**
    * Interface for a class ResizeSettings
    */
export interface ResizeSettingsModel {
        /**
            * Defines the mode of Grid column resizing. The available modes are:
            * `Normal`: Columns will not be adjusted to fit the remaining space.
            * `Auto`: Resized column width will be adjusted by other columns automatically.
            *
            * @default Normal
            */
        mode?: ResizeMode;
}
/**
    * Interface for a class GroupSettings
    */
export interface GroupSettingsModel {
        /**
            * If `showDropArea` is set to true, the group drop area element will be visible at the top of the Grid.
            *
            * @default true
            */
        showDropArea?: boolean;
        /**
            * If `allowReordering` is set to true, Grid allows the grouped elements to be reordered.
            *
            * @default false
            */
        allowReordering?: boolean;
        /**
            * If `showToggleButton` set to true, then the toggle button will be showed in the column headers which can be used to group
            * or ungroup columns by clicking them.
            *
            * @default false
            */
        showToggleButton?: boolean;
        /**
            * If `showGroupedColumn` is set to false, it hides the grouped column after grouping.
            *
            * @default false
            */
        showGroupedColumn?: boolean;
        /**
            * If `showUngroupButton` set to false, then ungroup button is hidden in dropped element.
            * It can be used to ungroup the grouped column when click on ungroup button.
            *
            * @default true
            */
        showUngroupButton?: boolean;
        /**
            * If `disablePageWiseAggregates` set to true, then the group aggregate value will
            * be calculated from the whole data instead of paged data and two requests will be made for each page
            * when Grid bound with remote service.
            *
            * @default false
            */
        disablePageWiseAggregates?: boolean;
        /**
            * Specifies the column names to group at initial rendering of the Grid.
            * You can also get the currently grouped columns.
            *
            * @default []
            */
        columns?: string[];
        /**
            * The Caption Template allows user to display the string or HTML element in group caption.
            * > It accepts either the
            * [template string](https://ej2.syncfusion.com/documentation/common/template-engine/) or the HTML element ID.
            *
            * @default ''
            */
        captionTemplate?: string;
        /**
            * The Lazy load grouping, allows the Grid to render only the initial level caption rows in collapsed state while grouping.
            * The child rows of each caption will render only when we expand the captions.
            *
            * @default false
            */
        enableLazyLoading?: boolean;
}
/**
    * Interface for a class EditSettings
    */
export interface EditSettingsModel {
        /**
            * If `allowAdding` is set to true, new records can be added to the Grid.
            *
            * @default false
            */
        allowAdding?: boolean;
        /**
            * If `allowEditing` is set to true, values can be updated in the existing record.
            *
            * @default false
            */
        allowEditing?: boolean;
        /**
            * If `allowDeleting` is set to true, existing record can be deleted from the Grid.
            *
            * @default false
            */
        allowDeleting?: boolean;
        /**
            * Defines the mode to edit. The available editing modes are:
            * * Normal
            * * Dialog
            * * Batch
            *
            * @default Normal
            */
        mode?: EditMode;
        /**
            * If `allowEditOnDblClick` is set to false, Grid will not allow editing of a record on double click.
            *
            * @default true
            */
        allowEditOnDblClick?: boolean;
        /**
            * if `showConfirmDialog` is set to false, confirm dialog does not show when batch changes are saved or discarded.
            *
            * @default true
            */
        showConfirmDialog?: boolean;
        /**
            * If `showDeleteConfirmDialog` is set to true, confirm dialog will show delete action. You can also cancel delete command.
            *
            * @default false
            */
        showDeleteConfirmDialog?: boolean;
        /**
            * Defines the custom edit elements for the dialog template.
            *
            * @default ''
            * @aspType string
            */
        template?: string | Object;
        /**
            * Defines the custom edit elements for the dialog header template.
            *
            * @default ''
            * @aspType string
            */
        headerTemplate?: string | Object;
        /**
            * Defines the custom edit elements for the dialog footer template.
            *
            * @default ''
            * @aspType string
            */
        footerTemplate?: string | Object;
        /**
            * Defines the position of adding a new row. The available position are:
            * * Top
            * * Bottom
            *
            * @default Top
            */
        newRowPosition?: NewRowPosition;
        /**
            * Defines the dialog params to edit.
            *
            * @default {}
            */
        dialog?: IDialogUI;
        /**
            * If allowNextRowEdit is set to true, editing is done to next row. By default allowNextRowEdit is set to false.
            *
            * @default false
            */
        allowNextRowEdit?: boolean;
}
/**
    * Interface for a class Grid
    */
export interface GridModel extends ComponentModel {
        /**
            * Gets the parent Grid details.
            */
        parentDetails?: ParentDetails;
        /**
            * Defines the schema of dataSource.
            * If the `columns` declaration is empty or undefined then the `columns` are automatically generated from data source.
            * {% codeBlock src='grid/columns/index.md' %}{% endcodeBlock %}
            *
            * @default []
            */
        columns?: Column[] | string[] | ColumnModel[];
        /**
            * If `enableAltRow` is set to true, the grid will render with `e-altrow` CSS class to the alternative tr elements.
            * > Check the [`AltRow`](../../grid/row/#styling-alternate-rows/) to customize the styles of alternative rows.
            * {% codeBlock src='grid/enableAltRow/index.md' %}{% endcodeBlock %}
            *
            * @default true
            */
        enableAltRow?: boolean;
        /**
            * If `enableHover` is set to true, the row hover is enabled in the Grid.
            * {% codeBlock src='grid/enableHover/index.md' %}{% endcodeBlock %}
            *
            * @default true
            */
        enableHover?: boolean;
        /**
            * If `enableAutoFill` is set to true, then the auto fill icon will displayed on cell selection for copy cells.
            * It requires the selection `mode` to be Cell and `cellSelectionMode` to be `Box`.
            * {% codeBlock src='grid/enableAutoFill/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        enableAutoFill?: boolean;
        /**
            * Enables or disables the key board interaction of Grid.
            *
            * @default true
            */
        allowKeyboard?: boolean;
        /**
            * If 'enableStickyHeader' set to true, then the user can able to make the column headers visible when the document is scrolled.
            *
            * @default false
            */
        enableStickyHeader?: boolean;
        /**
            * If `allowTextWrap` set to true,
            * then text content will wrap to the next line when its text content exceeds the width of the Column Cells.
            * {% codeBlock src='grid/allowTextWrap/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        allowTextWrap?: boolean;
        /**
            * Configures the text wrap in the Grid.
            * {% codeBlock src='grid/textWrapSettings/index.md' %}{% endcodeBlock %}
            *
            * @default {wrapMode:"Both"}
            */
        textWrapSettings?: TextWrapSettingsModel;
        /**
            * Defines the resizing behavior of the Grid.
            *
            * @default {mode:"Normal"}
            */
        resizeSettings?: ResizeSettingsModel;
        /**
            * If `allowPaging` is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.
            *
            * > Check the [`Paging`](../../grid/paging/) to configure the grid pager.
            * {% codeBlock src='grid/allowPaging/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        allowPaging?: boolean;
        /**
            * Configures the pager in the Grid.
            * {% codeBlock src='grid/pageSettings/index.md' %}{% endcodeBlock %}
            *
            * @default {currentPage: 1, pageSize: 12, pageCount: 8, enableQueryString: false, pageSizes: false, template: null}
            */
        pageSettings?: PageSettingsModel;
        /**
            * If `enableVirtualization` set to true, then the Grid will render only the rows visible within the view-port
            * and load subsequent rows on vertical scrolling. This helps to load large dataset in Grid.
            * {% codeBlock src='grid/enableVirtualization/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        enableVirtualization?: boolean;
        /**
            * If `enableColumnVirtualization` set to true, then the Grid will render only the columns visible within the view-port
            * and load subsequent columns on horizontal scrolling. This helps to load large dataset of columns in Grid.
            * {% codeBlock src='grid/enableColumnVirtualization/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        enableColumnVirtualization?: boolean;
        /**
            * If `enableInfiniteScrolling` set to true, then the data will be loaded in Grid when the scrollbar reaches the end.
            * This helps to load large dataset in Grid.
            * {% codeBlock src='grid/enableInfiniteScrolling/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        enableInfiniteScrolling?: boolean;
        /**
            * Configures the search behavior in the Grid.
            * {% codeBlock src='grid/searchSettings/index.md' %}{% endcodeBlock %}
            *
            * @default { ignoreCase: true, fields: [], operator: 'contains', key: '' }
            */
        searchSettings?: SearchSettingsModel;
        /**
            * If `allowSorting` is set to true, it allows sorting of grid records when column header is clicked.
            *
            * > Check the [`Sorting`](../../grid/sorting/) to customize its default behavior.
            * {% codeBlock src='grid/allowSorting/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        allowSorting?: boolean;
        /**
            *  Defines the mode of clip. The available modes are,
            * `Clip`: Truncates the cell content when it overflows its area.
            * `Ellipsis`: Displays ellipsis when the cell content overflows its area.
            * `EllipsisWithTooltip`:  Displays ellipsis when the cell content overflows its area,
            *  also it will display the tooltip while hover on ellipsis is applied.
            * {% codeBlock src='grid/clipMode/index.md' %}{% endcodeBlock %}
            *
            * @default Ellipsis
            */
        clipMode?: ClipMode;
        /**
            * If `allowMultiSorting` set to true, then it will allow the user to sort multiple column in the grid.
            * > `allowSorting` should be true.
            * {% codeBlock src='grid/allowMultiSorting/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        allowMultiSorting?: boolean;
        /**
            * If `allowExcelExport` set to true, then it will allow the user to export grid to Excel file.
            *
            * > Check the [`ExcelExport`](../../grid/excel-exporting/) to configure exporting document.
            * {% codeBlock src='grid/allowExcelExport/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        allowExcelExport?: boolean;
        /**
            * If `allowPdfExport` set to true, then it will allow the user to export grid to Pdf file.
            *
            * > Check the [`Pdfexport`](../../grid/pdf-export/) to configure the exporting document.
            * {% codeBlock src='grid/allowPdfExport/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        allowPdfExport?: boolean;
        /**
            * Configures the sort settings.
            * {% codeBlock src='grid/sortSettings/index.md' %}{% endcodeBlock %}
            *
            * @default {columns:[]}
            */
        sortSettings?: SortSettingsModel;
        /**
            * Configures the infinite scroll settings.
            * {% codeBlock src='grid/infiniteScrollSettings/index.md' %}{% endcodeBlock %}
            *
            * @default { enableCache: false, maxBlocks: 5, initialBlocks: 5 }
            */
        infiniteScrollSettings?: InfiniteScrollSettingsModel;
        /**
            * If `allowSelection` is set to true, it allows selection of (highlight row) Grid records by clicking it.
            * {% codeBlock src='grid/allowSelection/index.md' %}{% endcodeBlock %}
            *
            * @default true
            */
        allowSelection?: boolean;
        /**
            * The `selectedRowIndex` allows you to select a row at initial rendering.
            * You can also get the currently selected row index.
            * {% codeBlock src='grid/selectedRowIndex/index.md' %}{% endcodeBlock %}
            *
            * @default -1
            */
        selectedRowIndex?: number;
        /**
            * Configures the selection settings.
            * {% codeBlock src='grid/selectionSettings/index.md' %}{% endcodeBlock %}
            *
            * @default {mode: 'Row', cellSelectionMode: 'Flow', type: 'Single'}
            */
        selectionSettings?: SelectionSettingsModel;
        /**
            * If `allowFiltering` set to true the filter bar will be displayed.
            * If set to false the filter bar will not be displayed.
            * Filter bar allows the user to filter grid records with required criteria.
            *
            * > Check the [`Filtering`](../../grid/filtering/) to customize its default behavior.
            * {% codeBlock src='grid/allowFiltering/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        allowFiltering?: boolean;
        /**
            * Defines the grid row elements rendering direction. The available directions are,
            * * `Horizontal`: Renders the grid row elements in the horizontal direction
            * * `Vertical`: Renders the grid row elements in the vertical direction
            *
            * @default Horizontal
            */
        rowRenderingMode?: RowRenderingDirection;
        /**
            * If `enableAdaptiveUI` set to true the grid filter, sort, and edit dialogs render adaptively.
            *
            * @default false
            */
        enableAdaptiveUI?: boolean;
        /**
            * If `allowReordering` is set to true, Grid columns can be reordered.
            * Reordering can be done by drag and drop of a particular column from one index to another index.
            * > If Grid is rendered with stacked headers, reordering is allowed only at the same level as the column headers.
            * {% codeBlock src='grid/allowReordering/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        allowReordering?: boolean;
        /**
            * If `allowResizing` is set to true, Grid columns can be resized.
            * {% codeBlock src='grid/allowResizing/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        allowResizing?: boolean;
        /**
            * If `allowRowDragAndDrop` is set to true, you can drag and drop grid rows at another grid.
            * {% codeBlock src='grid/allowRowDragAndDrop/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        allowRowDragAndDrop?: boolean;
        /**
            * Configures the row drop settings.
            *
            * @default {targetID: ''}
            */
        rowDropSettings?: RowDropSettingsModel;
        /**
            * Configures the filter settings of the Grid.
            * {% codeBlock src='grid/filterSettings/index.md' %}{% endcodeBlock %}
            *
            * @default {columns: [], type: 'FilterBar', mode: 'Immediate', showFilterBarStatus: true, immediateModeDelay: 1500 , operators: {}}
            */
        filterSettings?: FilterSettingsModel;
        /**
            * If `allowGrouping` set to true, then it will allow the user to dynamically group or ungroup columns.
            * Grouping can be done by drag and drop columns from column header to group drop area.
            *
            * > Check the [`Grouping`](../../grid/grouping/) to customize its default behavior.
            * {% codeBlock src='grid/allowGrouping/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        allowGrouping?: boolean;
        /**
            * If `enableImmutableMode`  is set to true, the grid will reuse old rows if it exists in the new result instead of
            * full refresh while performing the grid actions.
            *
            * @default false
            */
        enableImmutableMode?: boolean;
        /**
            * If `showColumnMenu` set to true, then it will enable the column menu options in each columns.
            *
            * > Check the [`Column menu`](../../grid/columns/#column-menu/) for its configuration.
            * {% codeBlock src='grid/showColumnMenu/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        showColumnMenu?: boolean;
        /**
            * Configures the group settings.
            * {% codeBlock src='grid/groupSettings/index.md' %}{% endcodeBlock %}
            *
            * @default {showDropArea: true, showToggleButton: false, showGroupedColumn: false, showUngroupButton: true, columns: []}
            */
        groupSettings?: GroupSettingsModel;
        /**
            * Configures the edit settings.
            * {% codeBlock src='grid/editSettings/index.md' %}{% endcodeBlock %}
            *
            * @default { allowAdding: false, allowEditing: false, allowDeleting: false, mode:'Normal',
            * allowEditOnDblClick: true, showConfirmDialog: true, showDeleteConfirmDialog: false }
            */
        editSettings?: EditSettingsModel;
        /**
            * Configures the Grid aggregate rows.
            * {% codeBlock src='grid/aggregates/index.md' %}{% endcodeBlock %}
            * > Check the [`Aggregates`](../../grid/aggregates/) for its configuration.
            *
            * @default []
            */
        aggregates?: AggregateRowModel[];
        /**
            * If `showColumnChooser` is set to true, it allows you to dynamically show or hide columns.
            *
            * > Check the [`ColumnChooser`](../../grid/columns/#column-chooser/) for its configuration.
            * {% codeBlock src='grid/showColumnChooser/index.md' %}{% endcodeBlock %}
            *
            * @default false
            */
        showColumnChooser?: boolean;
        /**
            * Configures the column chooser in the Grid.
            *
            * @default { columnChooserOperator: 'startsWith' }
            */
        columnChooserSettings?: ColumnChooserSettingsModel;
        /**
            * If `enableHeaderFocus` set to true, then header element will be focused when focus moves to grid.
            *
            * @default false
            */
        enableHeaderFocus?: boolean;
        /**
            * Defines the scrollable height of the grid content.
            * {% codeBlock src='grid/height/index.md' %}{% endcodeBlock %}
            *
            * @default 'auto'
            */
        height?: string | number;
        /**
            * Defines the Grid width.
            * {% codeBlock src='grid/width/index.md' %}{% endcodeBlock %}
            *
            * @default 'auto'
            */
        width?: string | number;
        /**
            * Defines the mode of grid lines. The available modes are,
            * * `Both`: Displays both horizontal and vertical grid lines.
            * * `None`: No grid lines are displayed.
            * * `Horizontal`: Displays the horizontal grid lines only.
            * * `Vertical`: Displays the vertical grid lines only.
            * * `Default`: Displays grid lines based on the theme.
            * {% codeBlock src='grid/gridLines/index.md' %}{% endcodeBlock %}
            *
            * @default Default
            */
        gridLines?: GridLine;
        /**
            * The row template that renders customized rows from the given template.
            * By default, Grid renders a table row for every data source item.
            * > * It accepts either [template string](../../common/template-engine/) or HTML element ID.
            * > * The row template must be a table row.
            *
            * > Check the [`Row Template`](../../grid/row/) customization.
            */
        rowTemplate?: string;
        /**
            * The detail template allows you to show or hide additional information about a particular row.
            *
            * > It accepts either the [template string](../../common/template-engine/) or the HTML element ID.
            *
            * {% codeBlock src="grid/detail-template-api/index.ts" %}{% endcodeBlock %}
            */
        detailTemplate?: string;
        /**
            * Defines Grid options to render child Grid.
            * It requires the [`queryString`](/#querystring) for parent
            * and child relationship.
            *
            * > Check the [`Child Grid`](../../grid/hierarchy-grid/) for its configuration.
            */
        childGrid?: GridModel;
        /**
            * Defines the relationship between parent and child datasource. It acts as the foreign key for parent datasource.
            */
        queryString?: string;
        /**
            * Defines the print modes. The available print modes are
            * * `AllPages`: Prints all pages of the Grid.
            * * `CurrentPage`: Prints the current page of the Grid.
            * {% codeBlock src='grid/printMode/index.md' %}{% endcodeBlock %}
            *
            * @default AllPages
            */
        printMode?: PrintMode;
        /**
            * Defines the hierarchy grid print modes. The available modes are
            * * `Expanded` - Prints the master grid with expanded child grids.
            * * `All` - Prints the master grid with all the child grids.
            * * `None` - Prints the master grid alone.
            *
            * @default Expanded
            */
        hierarchyPrintMode?: HierarchyGridPrintMode;
        /**
            * It is used to render grid table rows.
            * If the `dataSource` is an array of JavaScript objects,
            * then Grid will create instance of [`DataManager`](https://ej2.syncfusion.com/documentation/api/data/dataManager/)
            * from this `dataSource`.
            * If the `dataSource` is an existing [`DataManager`](https://ej2.syncfusion.com/documentation/api/data/dataManager/),
            *  the Grid will not initialize a new one.
            *
            * > Check the available [`Adaptors`](../../data/adaptors/) to customize the data operation.
            * {% codeBlock src='grid/dataSource/index.md' %}{% endcodeBlock %}
            *
            * @default []
            * @isGenericType true
            */
        dataSource?: Object | DataManager | DataResult;
        /**
            * Defines the height of Grid rows.
            * {% codeBlock src='grid/rowHeight/index.md' %}{% endcodeBlock %}
            *
            * @default null
            */
        rowHeight?: number;
        /**
            * Defines the external [`Query`](https://ej2.syncfusion.com/documentation/data/api-query.html)
            * that will be executed along with data processing.
            * {% codeBlock src='grid/query/index.md' %}{% endcodeBlock %}
            *
            * @default null
            */
        query?: Query;
        /**
            * Defines the currencyCode format of the Grid columns
            *
            * @private
            */
        currencyCode?: string;
        /**
            * `toolbar` defines the ToolBar items of the Grid.
            * It contains built-in and custom toolbar items.
            * If a string value is assigned to the `toolbar` option, it is considered as the template for the whole Grid ToolBar.
            * If an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.
            * <br><br>
            * The available built-in ToolBar items are:
            * * Add: Adds a new record.
            * * Edit: Edits the selected record.
            * * Update: Updates the edited record.
            * * Delete: Deletes the selected record.
            * * Cancel: Cancels the edit state.
            * * Search: Searches records by the given key.
            * * Print: Prints the Grid.
            * * ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)
            * * PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)
            * * CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)<br><br>
            * The following code example implements the custom toolbar items.
            *
            *  > Check the [`Toolbar`](../../grid/tool-bar/#custom-toolbar-items/) to customize its default items.
            *
            * {% codeBlock src="grid/toolbar-api/index.ts" %}{% endcodeBlock %}
            * {% codeBlock src='grid/toolbar/index.md' %}{% endcodeBlock %}
            *
            * @default null
            */
        toolbar?: (ToolbarItems | string | ItemModel | ToolbarItem)[];
        /**
            * `contextMenuItems` defines both built-in and custom context menu items.
            * <br><br>
            * The available built-in items are,
            * * `AutoFitAll` - Auto fit the size of all columns.
            * * `AutoFit` - Auto fit the current column.
            * * `Group` - Group by current column.
            * * `Ungroup` - Ungroup by current column.
            * * `Edit` - Edit the current record.
            * * `Delete` - Delete the current record.
            * * `Save` - Save the edited record.
            * * `Cancel` - Cancel the edited state.
            * * `Copy` - Copy the selected records.
            * * `PdfExport` - Export the grid as Pdf format.
            * * `ExcelExport` - Export the grid as Excel format.
            * * `CsvExport` - Export the grid as CSV format.
            * * `SortAscending` - Sort the current column in ascending order.
            * * `SortDescending` - Sort the current column in descending order.
            * * `FirstPage` - Go to the first page.
            * * `PrevPage` - Go to the previous page.
            * * `LastPage` - Go to the last page.
            * * `NextPage` - Go to the next page.
            *
            * @default null
            */
        contextMenuItems?: ContextMenuItem[] | ContextMenuItemModel[];
        /**
            * `columnMenuItems` defines both built-in and custom column menu items.
            * <br><br>
            * The available built-in items are,
            * * `AutoFitAll` - Auto fit the size of all columns.
            * * `AutoFit` - Auto fit the current column.
            * * `Group` - Group by current column.
            * * `Ungroup` - Ungroup by current column.
            * * `SortAscending` - Sort the current column in ascending order.
            * * `SortDescending` - Sort the current column in descending order.
            * * `Filter` - Filter options will show based on filterSettings property like checkbox filter, excel filter, menu filter.
            *
            * @default null
            */
        columnMenuItems?: ColumnMenuItem[] | ColumnMenuItemModel[];
        /**
            * It used to render toolbar template
            *
            * @default null
            */
        toolbarTemplate?: string;
        /**
            * It used to render pager template
            *
            * @default null
            */
        pagerTemplate?: string;
        /**
            * Gets or sets the number of frozen rows.
            * {% codeBlock src='grid/frozenRows/index.md' %}{% endcodeBlock %}
            *
            * @default 0
            */
        frozenRows?: number;
        /**
            * Gets or sets the number of frozen columns.
            * {% codeBlock src='grid/frozenColumns/index.md' %}{% endcodeBlock %}
            *
            * @default 0
            */
        frozenColumns?: number;
        /**
            * `columnQueryMode`provides options to retrive data from the datasource.Their types are
            * * `All`: It Retrives whole datasource.
            * * `Schema`: Retrives data for all the defined columns in grid from the datasource.
            * * `ExcludeHidden`: Retrives data only for visible columns of grid from the dataSource.
            *
            * @default All
            */
        columnQueryMode?: ColumnQueryModeType;
        /**
            * Gets or sets the current action details.
            *
            * @default {}
            */
        currentAction?: ActionArgs;
        /**
            * Defines the version for Grid persistence.
            */
        ej2StatePersistenceVersion?: string;
        /**
            * Triggers when the component is created.
            *
            * @event created
            */
        created?: EmitType<Object>;
        /**
            * Triggers when the component is destroyed.
            *
            * @event destroyed
            */
        destroyed?: EmitType<Object>;
        /**
            * This event allows customization of Grid properties before rendering.
            *
            * @event load
            */
        load?: EmitType<Object>;
        /**
            * Triggered every time a request is made to access row information, element, or data.
            * This will be triggered before the row element is appended to the Grid element.
            *
            * @event rowDataBound
            */
        rowDataBound?: EmitType<RowDataBoundEventArgs>;
        /**
            * Triggered every time a request is made to access cell information, element, or data.
            * This will be triggered before the cell element is appended to the Grid element.
            *
            * @event queryCellInfo
            */
        queryCellInfo?: EmitType<QueryCellInfoEventArgs>;
        /**
            * Triggered for stacked header.
            *
            * @event headerCellInfo
            */
        headerCellInfo?: EmitType<HeaderCellInfoEventArgs>;
        /**
            * Triggers when Grid actions such as sorting, filtering, paging, grouping etc., starts.
            * {% codeBlock src='grid/actionBegin/index.md' %}{% endcodeBlock %}
            *
            * @event actionBegin
            */
        actionBegin?: EmitType<PageEventArgs | GroupEventArgs | FilterEventArgs | SearchEventArgs | SortEventArgs | AddEventArgs | SaveEventArgs | EditEventArgs | DeleteEventArgs | ActionEventArgs>;
        /**
            * Triggers when Grid actions such as sorting, filtering, paging, grouping etc. are completed.
            *
            * @event actionComplete
            */
        actionComplete?: EmitType<PageEventArgs | GroupEventArgs | FilterEventArgs | SearchEventArgs | SortEventArgs | AddEventArgs | SaveEventArgs | EditEventArgs | DeleteEventArgs | ActionEventArgs>;
        /**
            * Triggers when any Grid action failed to achieve the desired results.
            *
            * @event actionFailure
            */
        actionFailure?: EmitType<FailureEventArgs>;
        /**
            * Triggers when data source is populated in the Grid.
            *
            * @event dataBound
            */
        dataBound?: EmitType<Object>;
        /**
            * Triggers when record is double clicked.
            *
            * @event recordDoubleClick
            */
        recordDoubleClick?: EmitType<RecordDoubleClickEventArgs>;
        /**
            * Triggers when record is clicked.
            *
            * @event recordClick
            */
        recordClick?: EmitType<RecordClickEventArgs>;
        /**
            * Triggers before row selection occurs.
            *
            * @event rowSelecting
            */
        rowSelecting?: EmitType<RowSelectingEventArgs>;
        /**
            * Triggers after a row is selected.
            *
            * @event rowSelected
            */
        rowSelected?: EmitType<RowSelectEventArgs>;
        /**
            * Triggers before deselecting the selected row.
            *
            * @event rowDeselecting
            */
        rowDeselecting?: EmitType<RowDeselectEventArgs>;
        /**
            * Triggers when a selected row is deselected.
            *
            * @event rowDeselected
            */
        rowDeselected?: EmitType<RowDeselectEventArgs>;
        /**
            * Triggers before any cell selection occurs.
            *
            * @event cellSelecting
            */
        cellSelecting?: EmitType<CellSelectingEventArgs>;
        /**
            * Triggers after a cell is selected.
            *
            * @event cellSelected
            */
        cellSelected?: EmitType<CellSelectEventArgs>;
        /**
            * Triggers before the selected cell is deselecting.
            *
            * @event cellDeselecting
            */
        cellDeselecting?: EmitType<CellDeselectEventArgs>;
        /**
            * Triggers when a particular selected cell is deselected.
            *
            * @event cellDeselected
            */
        cellDeselected?: EmitType<CellDeselectEventArgs>;
        /**
            * Triggers before column selection occurs.
            *
            * @event columnSelecting
            */
        columnSelecting?: EmitType<ColumnSelectingEventArgs>;
        /**
            * Triggers after a column is selected.
            *
            * @event columnSelected
            */
        columnSelected?: EmitType<ColumnSelectEventArgs>;
        /**
            * Triggers before deselecting the selected column.
            *
            * @event columnDeselecting
            */
        columnDeselecting?: EmitType<ColumnDeselectEventArgs>;
        /**
            * Triggers when a selected column is deselected.
            *
            * @event columnDeselected
            */
        columnDeselected?: EmitType<ColumnDeselectEventArgs>;
        /**
            * Triggers when column header element drag (move) starts.
            *
            * @event columnDragStart
            */
        columnDragStart?: EmitType<ColumnDragEventArgs>;
        /**
            * Triggers when column header element is dragged (moved) continuously.
            *
            * @event columnDrag
            */
        columnDrag?: EmitType<ColumnDragEventArgs>;
        /**
            * Triggers when a column header element is dropped on the target column.
            *
            * @event columnDrop
            */
        columnDrop?: EmitType<ColumnDragEventArgs>;
        /**
            * Triggers after print action is completed.
            *
            * @event printComplete
            */
        printComplete?: EmitType<PrintEventArgs>;
        /**
            * Triggers before the print action starts.
            *
            * @event beforePrint
            */
        beforePrint?: EmitType<PrintEventArgs>;
        /**
            * Triggers before exporting each cell to PDF document. You can also customize the PDF cells.
            *
            * @event pdfQueryCellInfo
            */
        pdfQueryCellInfo?: EmitType<PdfQueryCellInfoEventArgs>;
        /**
            * Triggers before exporting each header cell to PDF document. You can also customize the PDF cells.
            *
            * @event pdfHeaderQueryCellInfo
            */
        pdfHeaderQueryCellInfo?: EmitType<PdfHeaderQueryCellInfoEventArgs>;
        /**
            * Triggers before exporting aggregate cell to PDF document. You can also customize the PDF cells.
            *
            * @event pdfAggregateQueryCellInfo
            */
        pdfAggregateQueryCellInfo?: EmitType<AggregateQueryCellInfoEventArgs>;
        /**
            * Triggers before exporting aggregate cell to Excel document. You can also customize the PDF cells.
            *
            * @event excelAggregateQueryCellInfo
            */
        excelAggregateQueryCellInfo?: EmitType<AggregateQueryCellInfoEventArgs>;
        /**
            * Triggers before exporting each detail Grid to PDF document.
            *
            * @event exportDetailDataBound
            */
        exportDetailDataBound?: EmitType<ExportDetailDataBoundEventArgs>;
        /**
            * Triggers before exporting each cell to Excel file.
            * You can also customize the Excel cells.
            *
            * @event excelQueryCellInfo
            */
        excelQueryCellInfo?: EmitType<ExcelQueryCellInfoEventArgs>;
        /**
            * Triggers before exporting each header cell to Excel file.
            * You can also customize the Excel cells.
            *
            * @event excelHeaderQueryCellInfo
            */
        excelHeaderQueryCellInfo?: EmitType<ExcelHeaderQueryCellInfoEventArgs>;
        /**
            * Triggers before Grid data is exported to Excel file.
            *
            * @event beforeExcelExport
            */
        beforeExcelExport?: EmitType<Object>;
        /**
            * Triggers after Grid data is exported to Excel file.
            *
            * @event excelExportComplete
            */
        excelExportComplete?: EmitType<ExcelExportCompleteArgs>;
        /**
            * Triggers before Grid data is exported to PDF document.
            *
            * @event beforePdfExport
            */
        beforePdfExport?: EmitType<Object>;
        /**
            * Triggers after Grid data is exported to PDF document.
            *
            * @event pdfExportComplete
            */
        pdfExportComplete?: EmitType<PdfExportCompleteArgs>;
        /**
            * Triggers when row element's before drag(move).
            *
            * @event rowDragStartHelper
            */
        rowDragStartHelper?: EmitType<RowDragEventArgs>;
        /**
            * Triggers after detail row expands.
            * > This event triggers at initial expand.
            *
            * @event detailDataBound
            */
        detailDataBound?: EmitType<DetailDataBoundEventArgs>;
        /**
            * Triggers when row element's drag(move) starts.
            *
            * @event rowDragStart
            */
        rowDragStart?: EmitType<RowDragEventArgs>;
        /**
            * Triggers when row elements are dragged (moved) continuously.
            *
            * @event rowDrag
            */
        rowDrag?: EmitType<RowDragEventArgs>;
        /**
            * Triggers when row elements are dropped on the target row.
            *
            * @event rowDrop
            */
        rowDrop?: EmitType<RowDragEventArgs>;
        /**
            * Triggers when toolbar item is clicked.
            *
            * @event toolbarClick
            */
        toolbarClick?: EmitType<ClickEventArgs>;
        /**
            * Triggers before the columnChooser open.
            *
            * @event beforeOpenColumnChooser
            */
        beforeOpenColumnChooser?: EmitType<ColumnChooserEventArgs>;
        /**
            * Triggers before adaptive filter and sort dialogs open.
            *
            * @event beforeOpenAdaptiveDialog
            */
        beforeOpenAdaptiveDialog?: EmitType<AdaptiveDialogEventArgs>;
        /**
            * Triggers when records are added in batch mode.
            *
            * @event batchAdd
            */
        batchAdd?: EmitType<BatchAddArgs>;
        /**
            * Triggers when records are deleted in batch mode.
            *
            * @event batchDelete
            */
        batchDelete?: EmitType<BatchDeleteArgs>;
        /**
            * Triggers when cancel the batch edit changes batch mode.
            *
            * @event batchCancel
            */
        batchCancel?: EmitType<BatchCancelArgs>;
        /**
            * Triggers before records are added in batch mode.
            *
            * @event beforeBatchAdd
            */
        beforeBatchAdd?: EmitType<BeforeBatchAddArgs>;
        /**
            * Triggers before records are deleted in batch mode.
            *
            * @event beforeBatchDelete
            */
        beforeBatchDelete?: EmitType<BeforeBatchDeleteArgs>;
        /**
            * Triggers before records are saved in batch mode.
            *
            * @event beforeBatchSave
            */
        beforeBatchSave?: EmitType<BeforeBatchSaveArgs>;
        /**
            * Triggers before the record is to be edit.
            *
            * @event beginEdit
            */
        beginEdit?: EmitType<BeginEditArgs>;
        /**
            * Triggers when command button is clicked.
            *
            * @event commandClick
            */
        commandClick?: EmitType<CommandClickEventArgs>;
        /**
            * Triggers when the cell is being edited.
            *
            * @event cellEdit
            */
        cellEdit?: EmitType<CellEditArgs>;
        /**
            * Triggers when cell is saved.
            *
            * @event cellSave
            */
        cellSave?: EmitType<CellSaveArgs>;
        /**
            * Triggers when cell is saved.
            *
            * @event cellSaved
            */
        cellSaved?: EmitType<CellSaveArgs>;
        /**
            * Triggers when column resize starts.
            *
            * @event resizeStart
            */
        resizeStart?: EmitType<ResizeArgs>;
        /**
            * Triggers on column resizing.
            *
            * @event resizing
            */
        resizing?: EmitType<ResizeArgs>;
        /**
            * Triggers when column resize ends.
            *
            * @event resizeStop
            */
        resizeStop?: EmitType<ResizeArgs>;
        /**
            * Triggers when any keyboard keys are pressed inside the grid.
            *
            * @event keyPressed
            */
        keyPressed?: EmitType<KeyboardEventArgs>;
        /**
            * Triggers before data is bound to Grid.
            *
            * @event beforeDataBound
            */
        beforeDataBound?: EmitType<BeforeDataBoundArgs>;
        /**
            * Triggers before context menu opens.
            *
            * @event contextMenuOpen
            */
        contextMenuOpen?: EmitType<BeforeOpenCloseMenuEventArgs>;
        /**
            * Triggers when click on context menu.
            *
            * @event contextMenuClick
            */
        contextMenuClick?: EmitType<MenuEventArgs>;
        /**
            * Triggers before column menu opens.
            *
            * @event columnMenuOpen
            */
        columnMenuOpen?: EmitType<ColumnMenuOpenEventArgs>;
        /**
            * Triggers when click on column menu.
            *
            * @event columnMenuClick
            */
        columnMenuClick?: EmitType<MenuEventArgs>;
        /**
            * Triggers when the check box state change in checkbox column.
            *
            * @event checkBoxChange
            */
        checkBoxChange?: EmitType<CheckBoxChangeEventArgs>;
        /**
            * Triggers before Grid copy action.
            *
            * @event beforeCopy
            */
        beforeCopy?: EmitType<BeforeCopyEventArgs>;
        /**
            * Triggers before Grid paste action.
            *
            * @event beforePaste
            */
        beforePaste?: EmitType<BeforePasteEventArgs>;
        /**
            * Triggers before Grid autoFill action.
            *
            * @event beforeAutoFill
            */
        beforeAutoFill?: EmitType<BeforeAutoFillEventArgs>;
        /**
            * Triggers when the grid actions such as Sorting, Paging, Grouping etc., are done to get column `dataSource`.
            * In this event,the current view column data and total record count should be assigned to the column `dataSource` based
            * on the action performed.
            *
            * @event columnDataStateChange
            */
        columnDataStateChange?: EmitType<ColumnDataStateChangeEventArgs>;
        /**
            * Triggers when the grid actions such as Sorting, Paging, Grouping etc., are done.
            * In this event,the current view data and total record count should be assigned to the `dataSource` based on the action performed.
            *
            * @event dataStateChange
            */
        dataStateChange?: EmitType<DataStateChangeEventArgs>;
        /**
            * Triggers when the grid data is added, deleted and updated.
            * Invoke the done method from the argument to start render after edit operation.
            *
            * @event dataSourceChanged
            */
        dataSourceChanged?: EmitType<DataSourceChangedEventArgs>;
        /**
            * Triggers before exporting each caption row to PDF/Excel/CSV document. You can also customize the export caption row values.
            *
            * @event exportGroupCaption
            */
        exportGroupCaption?: EmitType<ExportGroupCaptionEventArgs>;
        /**
            * Triggers when expand the caption row in lazy load grouping.
            *
            * @event lazyLoadGroupExpand
            */
        lazyLoadGroupExpand?: EmitType<LazyLoadArgs>;
        /**
            * Triggers when collapse the caption row in lazy load grouping.
            *
            * @event lazyLoadGroupCollapse
            */
        lazyLoadGroupCollapse?: EmitType<LazyLoadArgs>;
}

/**
    * Defines Actions of the Grid. They are
    * * paging
    * * refresh
    * * sorting
    * * filtering
    * * selection
    * * rowdraganddrop
    * * reorder
    * * grouping
    * * ungrouping
    */
export type Action = 
/**  Defines current Action as Paging */
'paging' | 
/**  Defines current Action as Refresh */
'refresh' | 
/**  Defines current Action as Sorting */
'sorting' | 
/**  Defines current Action as Selection */
'selection' | 
/**  Defines current Action as Filtering */
'filtering' | 
/**  Defines current Action as Searching */
'searching' | 
/**  Defines current Action as Row Drag and Drop */
'rowdraganddrop' | 
/**  Defines current Action as Reorder */
'reorder' | 
/**  Defines current Action as Grouping */
'grouping' | 
/**  Defines current Action as UnGrouping */
'ungrouping' | 
/**  Defines current Action as Batch Save */
'batchsave' | 
/** Defines current Action as Virtual Scroll */
'virtualscroll' | 
/** Defines current Action as print */
'print' | 
/** Defines current Action as beginedit */
'beginEdit' | 
/** Defines current Action as save */
'save' | 
/** Defines current Action as delete */
'delete' | 
/** Defines current Action as cancel */
'cancel' | 
/** Defines current Action as add */
'add' | 
/** Defines current Action as filterBeforeOpen */
'filterBeforeOpen' | 
/** Defines current Action as filterChoiceRequest */
'filterchoicerequest' | 
/** Defines current Action as filterAfterOpen */
'filterAfterOpen' | 
/** Defines current Action as filterSearchBegin */
'filterSearchBegin' | 
/** represents the column state */
'columnstate' | 
/** Defines current Action as Infinite Scroll */
'infiniteScroll';
/**
    * Defines directions of Sorting. They are
    * * Ascending
    * * Descending
    */
export type SortDirection = 
/**  Defines SortDirection as Ascending */
'Ascending' | 
/**  Defines SortDirection as Descending */
'Descending';
/**
    * `columnQueryMode`provides options to retrive data from the datasource. They are
    * * All
    * * Schema
    * * ExcludeHidden
    */
export type ColumnQueryModeType = 
/**  It Retrieves whole datasource */
'All' | 
/**  Retrives data for all the defined columns in grid from the datasource.  */
'Schema' | 
/**  Retrives data only for visible columns of grid from the dataSource. */
'ExcludeHidden';
/**
    * Defines types of Selection. They are
    * * Single - Allows user to select a row or cell.
    * * Multiple - Allows user to select multiple rows or cells.
    */
export type SelectionType = 
/**  Defines Single selection in the Grid */
'Single' | 
/**  Defines multiple selections in the Grid */
'Multiple';
/**
    * Defines modes of checkbox Selection. They are
    * * Default
    * * ResetOnRowClick
    */
export type CheckboxSelectionType = 
/**  Allows the user to select multiple rows by clicking rows one by one */
'Default' | 
/**  Allows to reset the previously selected row when a row is clicked and multiple rows can be selected by using CTRL or SHIFT key */
'ResetOnRowClick';
/**
    * Defines alignments of text, they are
    * * Left
    * * Right
    * * Center
    * * Justify
    */
export type TextAlign = 
/**  Defines Left alignment */
'Left' | 
/**  Defines Right alignment */
'Right' | 
/**  Defines Center alignment */
'Center' | 
/**  Defines Justify alignment */
'Justify';
/**
    * Defines types of Cell
    *
    * @hidden
    */
export enum CellType {
        /**  Defines CellType as Data */
        Data = 0,
        /**  Defines CellType as Header */
        Header = 1,
        /**  Defines CellType as Summary */
        Summary = 2,
        /**  Defines CellType as GroupSummary */
        GroupSummary = 3,
        /**  Defines CellType as CaptionSummary */
        CaptionSummary = 4,
        /**  Defines CellType as Filter */
        Filter = 5,
        /**  Defines CellType as Indent */
        Indent = 6,
        /**  Defines CellType as GroupCaption */
        GroupCaption = 7,
        /**  Defines CellType as GroupCaptionEmpty */
        GroupCaptionEmpty = 8,
        /**  Defines CellType as Expand */
        Expand = 9,
        /**  Defines CellType as HeaderIndent */
        HeaderIndent = 10,
        /**  Defines CellType as StackedHeader */
        StackedHeader = 11,
        /**  Defines CellType as DetailHeader */
        DetailHeader = 12,
        /**  Defines CellType as DetailExpand */
        DetailExpand = 13,
        /**  Defines CellType as CommandColumn */
        CommandColumn = 14,
        /**  Defines CellType as DetailFooterIntent */
        DetailFooterIntent = 15,
        /**  Defines CellType as RowDrag */
        RowDragIcon = 16,
        /**  Defines CellType as RowDragHeader */
        RowDragHIcon = 17
}
/**
    * Defines modes of GridLine, They are
    * * Both - Displays both the horizontal and vertical grid lines.
    * * None - No grid lines are displayed.
    * * Horizontal - Displays the horizontal grid lines only.
    * * Vertical - Displays the vertical grid lines only.
    * * Default - Displays grid lines based on the theme.
    */
export type GridLine = 
/** Show both the vertical and horizontal line in the Grid  */
'Both' | 
/** Hide both the vertical and horizontal line in the Grid  */
'None' | 
/** Shows the horizontal line only in the Grid */
'Horizontal' | 
/** Shows the vertical line only in the Grid  */
'Vertical' | 
/** Shows the grid lines based on the theme  */
'Default';
/**
    * Defines types of Render
    *
    * @hidden
    */
export enum RenderType {
        /**  Defines RenderType as Header */
        Header = 0,
        /**  Defines RenderType as Content */
        Content = 1,
        /**  Defines RenderType as Summary */
        Summary = 2
}
/**
    * Defines modes of Selection, They are
    * * Row
    * * Cell
    * * Both
    */
export type SelectionMode = 
/**  Defines SelectionMode as Cell */
'Cell' | 
/**  Defines SelectionMode as Row */
'Row' | 
/**  Defines SelectionMode as Both */
'Both';
/**
    * Print mode options are
    * * AllPages - Print all pages records of the Grid.
    * * CurrentPage - Print current page records of the Grid.
    */
export type PrintMode = 
/**  Defines PrintMode as AllPages */
'AllPages' | 
/**  Defines PrintMode as CurrentPage */
'CurrentPage';
/**
    * Hierarchy Grid Print modes are
    * * `Expanded` - Prints the master grid with expanded child grids.
    * * `All` - Prints the master grid with all the child grids.
    * * `None` - Prints the master grid alone.
    */
export type HierarchyGridPrintMode = 
/**  Defines Hierarchy PrintMode as Expanded */
'Expanded' | 
/**  Defines Hierarchy PrintMode as All */
'All' | 
/** Defines Hierarchy PrintMode as None */
'None';
/**
    * Defines types of Filter
    * * Menu - Specifies the filter type as menu.
    * * Excel - Specifies the filter type as excel.
    * * FilterBar - Specifies the filter type as filter bar.
    * * CheckBox - Specifies the filter type as check box.
    */
export type FilterType = 
/**  Defines FilterType as filterbar */
'FilterBar' | 
/**  Defines FilterType as excel */
'Excel' | 
/**  Defines FilterType as menu */
'Menu' | 
/**  Defines FilterType as checkbox */
'CheckBox';
/**
    * Filter bar mode options are
    * * OnEnter - Initiate filter operation after Enter key is pressed.
    * * Immediate -  Initiate filter operation after certain time interval. By default time interval is 1500 ms.
    */
export type FilterBarMode = 
/**  Defines FilterBarMode as onenter */
'OnEnter' | 
/**  Defines FilterBarMode  as immediate */
'Immediate';
/**
    * Defines the aggregate types.
    */
export type AggregateType = 
/** Defines sum aggregate type */
'Sum' | 
/** Specifies average aggregate type */
'Average' | 
/** Specifies maximum aggregate type */
'Max' | 
/** Specifies minimum aggregate type */
'Min' | 
/** Specifies count aggregate type */
'Count' | 
/** Specifies true count aggregate type */
'TrueCount' | 
/** Specifies false count aggregate type */
'FalseCount' | 
/** Specifies custom aggregate type */
'Custom';
/**
    * Defines the wrap mode.
    * * Both -  Wraps both header and content.
    * * Header - Wraps header alone.
    * * Content - Wraps content alone.
    */
export type WrapMode = 
/** Wraps both header and content */
'Both' | 
/** Wraps  header alone */
'Header' | 
/** Wraps  content alone */
'Content';
/**
    * Defines Multiple Export Type.
    */
export type MultipleExportType = 
/**  Multiple Grids are exported to same Worksheet. */
'AppendToSheet' | 
/**  Multiple Grids are exported to separate Worksheet. */
'NewSheet';
/**
    * Defines Predefined toolbar items.
    *
    * @hidden
    */
export type ToolbarItems = 
/** Add new record */
'Add' | 
/** Delete selected record */
'Delete' | 
/** Update edited record */
'Update' | 
/** Cancel the edited state */
'Cancel' | 
/** Edit the selected record */
'Edit' | 
/** Searches the grid records by given key */
'Search' | 
/** ColumnChooser used show/gird columns */
'ColumnChooser' | 
/** Print the Grid */
'Print' | 
/** Export the Grid to PDF format */
'PdfExport' | 
/** Export the Grid to Excel format */
'ExcelExport' | 
/** Export the Grid to CSV format */
'CsvExport' | 
/** Export the Grid to word fromat */
'WordExport';
/**
    * Defines the cell content's overflow mode. The available modes are
    * * `Clip` -  Truncates the cell content when it overflows its area.
    * * `Ellipsis` -  Displays ellipsis when the cell content overflows its area.
    * * `EllipsisWithTooltip` - Displays ellipsis when the cell content overflows its area
    * also it will display tooltip while hover on ellipsis applied cell.
    */
export type ClipMode = 
/**  Truncates the cell content when it overflows its area */
'Clip' | 
/** Displays ellipsis when the cell content overflows its area */
'Ellipsis' | 
/** Displays ellipsis when the cell content overflows its area also it will display tooltip while hover on ellipsis applied cell. */
'EllipsisWithTooltip';
/**
    * Defines the Command Buttons type.
    * * Edit -  Edit the current record.
    * * Delete - Delete the current record.
    * * Save - Save the current edited record.
    * * Cancel - Cancel the edited state.
    */
export type CommandButtonType = 
/** Default enum type */
'None' | 
/** Edit the current row */
'Edit' | 
/** Delete the current row */
'Delete' | 
/** Save the current edited row */
'Save' | 
/**  Cancel the edited state */
'Cancel';
/**
    * Defines the default items of context menu.
    */
export type ContextMenuItem = 
/**  Auto fit the size of all columns */
'AutoFitAll' | 
/**  Auto fit the current column */
'AutoFit' | 
/**  Group by current column */
'Group' | 
/**  Ungroup by current column */
'Ungroup' | 
/**  Edit the current record */
'Edit' | 
/**  Delete the current record */
'Delete' | 
/**  Save the edited record */
'Save' | 
/**  Cancel the edited state */
'Cancel' | 
/**  Copy the selected records */
'Copy' | 
/**  Export the grid as Pdf format */
'PdfExport' | 
/**  Export the grid as Excel format */
'ExcelExport' | 
/**  Export the grid as CSV format */
'CsvExport' | 
/**  Sort the current column in ascending order */
'SortAscending' | 
/**  Sort the current column in descending order */
'SortDescending' | 
/**  Go to the first page */
'FirstPage' | 
/**  Go to the previous page */
'PrevPage' | 
/**  Go to the last page */
'LastPage' | 
/**  Go to the next page */
'NextPage';
/**
    * Defines the default items of Column menu.
    */
export type ColumnMenuItem = 
/**  Auto fit the size of all columns */
'AutoFitAll' | 
/**  Auto fit the current column */
'AutoFit' | 
/**  Group by current column */
'Group' | 
/**  Ungroup by current column */
'Ungroup' | 
/**  Sort the current column in ascending order */
'SortAscending' | 
/**  Sort the current column in descending order */
'SortDescending' | 
/**  show the column chooser */
'ColumnChooser' | 
/**  show the Filter popup */
'Filter';
/**
    * Defines Predefined toolbar items.
    *
    * @hidden
    */
export enum ToolbarItem {
        Add = 0,
        Edit = 1,
        Update = 2,
        Delete = 3,
        Cancel = 4,
        Print = 5,
        Search = 6,
        ColumnChooser = 7,
        PdfExport = 8,
        ExcelExport = 9,
        CsvExport = 10,
        WordExport = 11
}
export type PdfPageSize = 'Letter' | 'Note' | 'Legal' | 'A0' | 'A1' | 'A2' | 'A3' | 'A4' | 'A5' | 'A6' | 'A7' | 'A8' | 'A9' | 'B0' | 'B1' | 'B2' | 'B3' | 'B4' | 'B5' | 'Archa' | 'Archb' | 'Archc' | 'Archd' | 'Arche' | 'Flsa' | 'HalfLetter' | 'Letter11x17' | 'Ledger';
export type PageOrientation = 'Landscape' | 'Portrait';
export type ContentType = 'Image' | 'Line' | 'PageNumber' | 'Text';
export type PdfPageNumberType = 'LowerLatin' | 'LowerRoman' | 'UpperLatin' | 'UpperRoman' | 'Numeric' | 'Arabic';
export type PdfDashStyle = 'Solid' | 'Dash' | 'Dot' | 'DashDot' | 'DashDotDot';
/**
    * Defines PDF horizontal alignment.
    */
export type PdfHAlign = 
/** left alignment */
'Left' | 
/** right alignment */
'Right' | 
/** center alignment */
'Center' | 
/** justify alignment */
'Justify';
/**
    * Defines PDF vertical alignment.
    */
export type PdfVAlign = 
/** top alignment */
'Top' | 
/** bottom alignment */
'Bottom' | 
/** middle alignment */
'Middle';
/**
    * Defines Export Type.
    */
export type ExportType = 
/** All pages of the grid is exported. */
'AllPages' | 
/** Current page in grid is exported. */
'CurrentPage';
/**
    * Defines Excel horizontal alignment.
    */
export type ExcelHAlign = 
/** left alignment  */
'Left' | 
/** right alignment  */
'Right' | 
/** center alignment  */
'Center' | 
/** fill alignment  */
'Fill';
/**
    * Defines Excel vertical alignment.
    */
export type ExcelVAlign = 
/** top alignment  */
'Top' | 
/** bottom alignment  */
'Bottom' | 
/** center alignment  */
'Center' | 
/** justify alignment  */
'Justify';
/**
    * Defines border line style.
    */
export type BorderLineStyle = 
/** thin line style  */
'Thin' | 
/** thick line style  */
'Thick';
export type CheckState = 'Check' | 'Uncheck' | 'Intermediate' | 'None';
/**
    * Defines mode of cell selection.
    * * Flow
    * * Box
    */
export type CellSelectionMode = 
/**  Defines CellSelectionMode as Flow */
'Flow' | 
/**  Defines CellSelectionMode as Box */
'Box' | 
/**  Defines CellSelectionMode as Box with border */
'BoxWithBorder';
/**
    * Defines modes of editing.
    * * Normal
    * * Dialog
    * * Batch
    */
export type EditMode = 
/**  Defines EditMode as Normal */
'Normal' | 
/**  Defines EditMode as Dialog */
'Dialog' | 
/**  Defines EditMode as Batch */
'Batch';
/**
    * Defines adding new row position.
    * * Top
    * * Bottom
    */
export type NewRowPosition = 
/**  Defines row adding position as Top */
'Top' | 
/**  Defines row adding position as Top */
'Bottom';
/**
    * Defines the Edit Type of the column
    * * DefaultEdit
    * * DropdownEdit
    * * BooleanEdit
    * * DatepickerEdit
    * * DatetimepickerEdit
    * * NumericEdit
    */
export type EditType = 
/**  Defines EditType as DefaultEdit */
'defaultEdit' | 
/**  Defines EditMode as Dropdownedit */
'dropDownEdit' | 
/**  Defines EditMode as Booleanedit */
'booleanEdit' | 
/**  Defines EditMode as Datepickeredit */
'datePickerEdit' | 
/**  Defines EditType as Datetimepickeredit */
'dateTimePickerEdit' | 
/**  Defines EditMode as Numericedit */
'numericEdit';
/**
    * Defines the Column Type
    * * String
    * * Number
    * * Boolean
    * * Date
    * * DateTime
    * * checkBox
    */
export type ColumnType = 
/**  Defines ColumnType as Null */
'none' | 
/**  Defines ColumnType as String */
'string' | 
/**  Defines ColumnType as Number */
'number' | 
/**  Defines ColumnType as Boolean */
'boolean' | 
/**  Defines ColumnType as Date */
'date' | 
/**  Defines ColumnType as DateTime */
'dateTime' | 
/**  Defines ColumnType as checkBox */
'checkBox';
/**
    * Defines the Aggregate Template Type
    * * groupCaptionTemplate
    * * groupFooterTemplate
    * * footerTemplate
    */
export type AggregateTemplateType = 'GroupCaption' | 'GroupFooter' | 'Footer';
/**
    * Defines mode of resizing.
    * * Normal
    * * Auto
    */
export type ResizeMode = 
/**  Columns will not be adjusted to fit the remaining space */
'Normal' | 
/**  Resized column width will be adjusted by other columns automatically */
'Auto';
/**
    * Defines freeze direction of the grid columns
    * * Left
    * * Right
    */
export type freezeDirection = 
/**  freeze the columns at left */
'Left' | 
/**  freeze the columns at right */
'Right';
/**
    * Defines rendered part of the grid column
    *
    * @hidden
    */
export type freezeTable = 
/**  Defines rendered the column at frozen left part */
'frozen-left' | 
/**  Defines rendered the columns at frozen right part */
'frozen-right' | 
/**  Defines rendered the columns at movable part */
'movable';
/**
    * Defines name of the Grid frozen mode
    * * Left
    * * Right
    * * Left-Right
    */
export type freezeMode = 
/**  Left frozen mode */
'Left' | 
/**  Right frozen mode */
'Right' | 
/**  Left and right frozen mode */
'Left-Right';
/**
    * Defines types of responsive dialogs
    *
    * @hidden
    */
export enum ResponsiveDialogAction {
        /**  Defines dialog type as Edit */
        isEdit = 0,
        /**  Defines dialog type as Add */
        isAdd = 1,
        /**  Defines dialog type as Sort */
        isSort = 2,
        /**  Defines dialog type as Filter */
        isFilter = 3
}
/**
    * Defines responsive toolbar actions
    *
    * @hidden
    */
export enum ResponsiveToolbarAction {
        /**  Defines initial responsive toolbar buttons */
        isInitial = 0,
        /**  Defines responsive toolbar search */
        isSearch = 1
}
/**
    * Defines mode of row rendering.
    * * Horizontal
    * * Vertical
    */
export type RowRenderingDirection = 
/**  Defines horizontal row rendeing */
'Horizontal' | 
/**  Defined vertical row rendering */
'Vertical';
/**
    * Defines keyboard focus keys.
    *
    * @hidden
    */
export type FocusKeys = 'downArrow' | 'upArrow' | 'PageUp' | 'PageDown' | 'enter' | 'shiftEnter' | 'tab' | 'shiftTab';

/**
    * Specifies grid interfaces.
    *
    * @hidden
    */
export interface IGrid extends Component<HTMLElement> {
        currentViewData?: Object[];
        currentAction?: ActionArgs;
        /**
            * Specifies the columns for Grid.
            *
            * @default []
            */
        columns?: Column[] | string[] | ColumnModel[];
        /**
            * Specifies whether the enableAltRow is enable or not.
            *
            * @default null
            */
        enableAltRow?: boolean;
        /**
            * Specifies whether the enable row hover is enable or not.
            *
            * @default null
            */
        enableHover?: boolean;
        /**
            * Specifies the allowKeyboard Navigation for the Grid.
            *
            * @default null
            */
        allowKeyboard?: boolean;
        /**
            * If 'enableStickyHeader' set to true, then the user can able to make the column headers visible when the document is scrolled.
            *
            * @default null
            */
        enableStickyHeader?: boolean;
        /**
            * Specifies whether the allowTextWrap is enabled or not.
            *
            * @default null
            */
        allowTextWrap?: boolean;
        /**
            * Specifies the 'textWrapSettings' for Grid.
            *
            * @default []
            */
        textWrapSettings?: TextWrapSettingsModel;
        /**
            * Specifies whether the paging is enable or not.
            *
            * @default null
            */
        allowPaging?: boolean;
        /**
            * Specifies the 'enableAutoFill' for Grid.
            *
            * @default []
            */
        enableAutoFill?: boolean;
        /**
            * Specifies the pageSettings for Grid.
            *
            * @default PageSettings
            */
        pageSettings?: PageSettingsModel;
        enableVirtualization: boolean;
        enableColumnVirtualization: boolean;
        enableInfiniteScrolling: boolean;
        /**
            * Specifies whether the sorting is enable or not.
            *
            * @default null
            */
        allowSorting?: boolean;
        /**
            *  Defines the mode of clip. The available modes are,
            * `Clip`: Truncates the cell content when it overflows its area.
            * `Ellipsis`: Displays ellipsis when the cell content overflows its area.
            * `EllipsisWithTooltip`:  Displays ellipsis when the cell content overflows its area,
            *  also it will display the tooltip while hover on ellipsis is applied.
            *
            * @default Ellipsis
            */
        clipMode?: ClipMode;
        /**
            * Defines the resizing behavior of the Grid.
            *
            * @default []
            */
        resizeSettings?: ResizeSettingsModel;
        /**
            * Specifies whether the multi-sorting is enable or not.
            *
            * @default null
            */
        allowMultiSorting?: boolean;
        /**
            * Specifies the sortSettings for Grid.
            *
            * @default []
            */
        sortSettings?: SortSettingsModel;
        /**
            * Specifies the infinite scroll settings for Grid.
            *
            * @default []
            */
        infiniteScrollSettings?: InfiniteScrollSettingsModel;
        /**
            * Specifies whether the Excel exporting is enable or not.
            *
            * @default null
            */
        allowExcelExport?: boolean;
        /**
            * Specifies whether the Pdf exporting is enable or not.
            *
            * @default null
            */
        allowPdfExport?: boolean;
        /**
            * Specifies whether the selection is enable or not.
            *
            * @default null
            */
        allowSelection?: boolean;
        /**
            * It is used to select the row while initializing the grid.
            *
            * @default -1
            */
        selectedRowIndex?: number;
        /**
            * Specifies the selectionSettings for Grid.
            *
            * @default []
            */
        selectionSettings?: SelectionSettingsModel;
        /**
            * Specifies whether the reordering is enable or not.
            *
            * @default null
            */
        allowReordering?: boolean;
        /**
            * If `allowResizing` set to true, then the Grid columns can be resized.
            *
            * @default false
            */
        allowResizing?: boolean;
        /**
            * Specifies whether the filtering is enable or not.
            *
            * @default null
            */
        allowFiltering?: boolean;
        /**
            * Specifies the filterSettings for Grid.
            *
            * @default []
            */
        filterSettings?: FilterSettingsModel;
        /**
            * Specifies whether the grouping is enable or not.
            *
            * @default null
            */
        allowGrouping?: boolean;
        /**
            * Specifies whether the immutable mode is enable or not.
            *
            * @default null
            */
        enableImmutableMode?: boolean;
        /**
            * Specifies whether the column menu is show or not.
            *
            * @default null
            */
        showColumnMenu?: boolean;
        /**
            * Specifies the groupSettings for Grid.
            *
            * @default []
            */
        groupSettings?: GroupSettingsModel;
        /**
            * if showColumnChooser is true, then column chooser will be enabled in Grid.
            *
            * @default false
            */
        showColumnChooser?: boolean;
        /**
            * Specifies the 'columnChooserSettings' for Grid.
            *
            * @default []
            */
        columnChooserSettings?: ColumnChooserSettingsModel;
        /**
            * Specifies the editSettings for Grid.
            *
            * @default []
            */
        editSettings?: EditSettingsModel;
        /**
            * Specifies the summaryRows for Grid.
            *
            * @default []
            */
        aggregates?: AggregateRowModel[];
        /**
            * Specifies scrollable height of the grid content.
            *
            * @default 'auto'
            */
        height?: string | number;
        /**
            * Specifies scrollable width of the grid content.
            *
            * @default 'auto'
            */
        width?: string | number;
        /**
            * Specifies the searchSettings for Grid.
            *
            * @default []
            */
        searchSettings?: SearchSettingsModel;
        /**
            * Specifies the rowDropSettings for Grid.
            *
            * @default []
            */
        rowDropSettings?: RowDropSettingsModel;
        /**
            * Specifies whether the allowRowDragAndDrop is enable or not.
            *
            * @default false
            */
        allowRowDragAndDrop?: boolean;
        /**
            * Specifies whether the gridLines mode
            *
            * @default null
            */
        gridLines?: GridLine;
        /**
            * Specifies rowTemplate
            */
        rowTemplate?: string;
        /**
            * Specifies detailTemplate
            */
        detailTemplate?: string;
        /**
            * Defines the child Grid to add inside the data rows of the parent Grid with expand/collapse options.
            */
        childGrid?: GridModel;
        /**
            * Defines the relation between parent and child grid.
            */
        queryString?: string;
        /**
            * Specifies the printMode
            */
        printMode?: PrintMode;
        /**
            * Specifies the dataSource for Grid.
            *
            * @default []
            */
        dataSource?: Object | DataManager;
        /**
            * Defines the row height for Grid rows.
            *
            * @default null
            */
        rowHeight?: number;
        /**
            * Specifies the query for Grid.
            *
            * @default []
            */
        query?: Query;
        /**
            * @hidden
            * `columnQueryMode`provides options to retrive data from the datasource.
            * @default All
            */
        columnQueryMode?: ColumnQueryModeType;
        /**
            * @hidden
            * `vGroupOffsets`provides options to store the whole data objects block heights.
            * @default false
            */
        isVirtualAdaptive?: boolean;
        /**
            * @hidden
            * `vGroupOffsets`provides options to store the whole data objects block heights.
            * @default {}
            */
        vGroupOffsets?: {
                [x: number]: number;
        };
        /**
            * @hidden
            * `vRows`provides options to store the whole row objects from the datasource.
            * @default []
            */
        vRows?: Row<Column>[];
        /**
            * @hidden
            * `vcRows`provides options to store the whole row objects from the datasource.
            * @default []
            */
        vcRows?: Row<Column>[];
        /**
            * @hidden
            * Specifies the toolbar for Grid.
            * @default null
            */
        toolbar?: (ToolbarItems | string | ItemModel | ToolbarItem)[];
        /**
            * Specifies the context menu items for Grid.
            *
            * @default null
            */
        contextMenuItems?: ContextMenuItem[] | ContextMenuItemModel[];
        /**
            * Specifies the column menu items for Grid.
            *
            * @default null
            */
        columnMenuItems?: string[] | ContextMenuItemModel[];
        /**
            * @hidden
            * It used to render toolbar template
            * @default null
            */
        toolbarTemplate?: string;
        /**
            * @hidden
            * It used to render pager template
            * @default null
            */
        pagerTemplate?: string;
        /**
            * @hidden
            * It used to indicate initial loading
            * @default false
            */
        isInitialLoad?: boolean;
        /**
            * Defines the frozen rows for the grid content
            *
            * @default 0
            */
        frozenRows?: number;
        /**
            * Defines the grid rows displaying direction.
            *
            * @default 'Horizontal'
            */
        rowRenderingMode?: RowRenderingDirection;
        /**
            * If `enableAdaptiveUI` set to true the grid dialogs will be displayed at fullscreen.
            *
            * @default false
            */
        enableAdaptiveUI?: boolean;
        /**
            * Defines the frozen columns for the grid content
            *
            * @default 0
            */
        frozenColumns?: number;
        /**
            * Specifies whether the Searching for columns is enable or not.
            *
            * @default true
            */
        allowSearching?: boolean;
        isEdit?: boolean;
        commonQuery?: Query;
        scrollPosition: ScrollPositionType;
        isLastCellPrimaryKey?: boolean;
        editModule?: Edit;
        selectionModule?: GridSelection;
        aggregateModule?: Aggregate;
        scrollModule?: Scroll;
        infiniteScrollModule?: InfiniteScroll;
        resizeModule: Resize;
        focusModule?: FocusStrategy;
        mergeCells?: {
                [key: string]: number;
        };
        checkAllRows?: CheckState;
        isCheckBoxSelection?: boolean;
        isPersistSelection?: boolean;
        localeObj?: L10n;
        isManualRefresh?: boolean;
        enableDeepCompare?: boolean;
        prevPageMoving?: boolean;
        renderModule?: Render;
        headerModule?: IRenderer;
        contentModule?: IRenderer;
        isPreventScrollEvent?: boolean;
        hierarchyPrintMode?: HierarchyGridPrintMode;
        detailRowModule?: DetailRow;
        printModule?: Print;
        filterModule?: Filter;
        requestTypeAction?: string;
        expandedRows?: {
                [index: number]: IExpandedRow;
        };
        registeredTemplate?: Object;
        lockcolPositionCount?: number;
        commandDelIndex?: number;
        isPrinting?: boolean;
        id?: string;
        isSelectedRowIndexUpdating?: boolean;
        pagerModule?: Grid_Page;
        invokedFromMedia?: boolean;
        isAutoGen?: boolean;
        pageTemplateChange?: boolean;
        enableHeaderFocus?: boolean;
        renderTemplates?: Function;
        isReact?: boolean;
        tableIndex?: number;
        isVue?: boolean;
        adaptiveDlgTarget?: HTMLElement;
        parentDetails?: ParentDetails;
        /**
            * @hidden
            * It used to render pager template
            * @default null
            */
        contextMenuModule?: ContextMenu;
        getHeaderContent?(): Element;
        isRowDragable(): boolean;
        setGridHeaderContent?(value: Element): void;
        getContentTable?(): Element;
        setGridContentTable?(value: Element): void;
        getContent?(): Element;
        setGridContent?(value: Element): void;
        getHeaderTable?(): Element;
        setGridHeaderTable?(value: Element): void;
        getFooterContent?(): Element;
        getFooterContentTable?(): Element;
        getPager?(): Element;
        setGridPager?(value: Element): void;
        hoverFrozenRows?(value: MouseEvent): void;
        getRowByIndex?(index: number): Element;
        getMovableRowByIndex?(index: number): Element;
        getFrozenRightRowByIndex?(index: number): Element;
        getFrozenRightRowByIndex?(index: number): Element;
        getFrozenRowByIndex?(index: number): Element;
        showResponsiveCustomFilter?(): void;
        showResponsiveCustomSort?(): void;
        getRowInfo?(target: Element): RowInfo;
        selectRow?(index: number, isToggle?: boolean): void;
        getColumnHeaderByIndex?(index: number): Element;
        getColumnByField?(field: string): Column;
        getColumnIndexByField?(field: string): number;
        getColumnByUid?(uid: string): Column;
        getColumnIndexByUid?(uid: string): number;
        getColumnByIndex?(index: number): Column;
        getUidByColumnField?(field: string): string;
        getNormalizedColumnIndex?(uid: string): number;
        getIndentCount?(): number;
        getColumnIndexesInView(): number[];
        setColumnIndexesInView(indexes?: number[]): void;
        getRows?(): Element[];
        getMovableRows?(): Element[];
        getCellFromIndex?(rowIndex: number, columnIndex: number): Element;
        getMovableCellFromIndex?(rowIndex: number, columnIndex: number): Element;
        getFrozenRightCellFromIndex?(rowIndex: number, columnIndex: number): Element;
        getColumnFieldNames?(): string[];
        getSelectedRows?(): Element[];
        getSelectedRecords?(): Object[];
        getSelectedRowIndexes?(): number[];
        getSelectedRowCellIndexes(): ISelectedCell[];
        getCurrentViewRecords(): Object[];
        selectRows?(indexes: number[]): void;
        clearSelection?(): void;
        updateExternalMessage?(message: string): void;
        getColumns?(isRefresh?: boolean): Column[];
        getStackedHeaderColumnByHeaderText?(stackedHeader: string, col: Column[]): Column;
        getStackedColumns?(column: Column[]): Column[];
        getRowTemplate?(): Function;
        getDetailTemplate?(): Function;
        getEditTemplate?(): Function;
        getEditFooterTemplate?(): Function;
        getEditHeaderTemplate?(): Function;
        getFilterTemplate?(): Function;
        sortColumn?(columnName: string, sortDirection: SortDirection, isMultiSort?: boolean): void;
        clearSorting?(): void;
        removeSortColumn?(field: string): void;
        getColumnHeaderByUid?(uid: string): Element;
        getColumnHeaderByField?(field: string): Element;
        showColumns?(keys: string | string[], showBy?: string): void;
        hideColumns?(keys: string | string[], hideBy?: string): void;
        showSpinner?(): void;
        hideSpinner?(): void;
        updateDefaultCursor?(): void;
        getVisibleColumns?(): Column[];
        refreshHeader?(): void;
        getDataRows?(): Element[];
        getFrozenRightRows?(): Element[];
        getMovableDataRows?(): Element[];
        getFrozenRightDataRows?(): Element[];
        getFrozenDataRows?(): Element[];
        addMovableRows?(fRows: HTMLElement[], mrows: HTMLElement[]): HTMLElement[];
        getPrimaryKeyFieldNames?(): string[];
        autoFitColumns(fieldNames?: string | string[]): void;
        groupColumn(columnName: string): void;
        ungroupColumn(columnName: string): void;
        ensureModuleInjected(module: Function): boolean;
        isContextMenuOpen(): boolean;
        goToPage(pageNo: number): void;
        updateVisibleExpandCollapseRows?(): void;
        getFrozenColumns(): number;
        getFrozenRightColumnsCount?(): number;
        getFrozenLeftColumnsCount?(): number;
        getFrozenLeftCount?(): number;
        getMovableColumnsCount?(): number;
        isFrozenGrid?(): boolean;
        getFrozenMode?(): freezeMode;
        setTablesCount?(): void;
        getTablesCount?(): number;
        setFrozenCount?(): void;
        getVisibleFrozenLeftCount?(): number;
        getVisibleFrozenRightCount?(): number;
        getVisibleMovableCount?(): number;
        getFrozenRightColumns?(): Column[];
        getFrozenLeftColumns?(): Column[];
        getMovableColumns?(): Column[];
        getFrozenRightRowsObject?(): Row<Column>[];
        getFrozenRightContent?(): Element;
        getFrozenRightHeader?(): Element;
        getMovableHeaderTbody?(): Element;
        getMovableContentTbody?(): Element;
        getFrozenHeaderTbody?(): Element;
        getFrozenLeftContentTbody?(): Element;
        getFrozenRightHeaderTbody?(): Element;
        getFrozenRightContentTbody?(): Element;
        refreshReactColumnTemplateByUid?(columnUid: string): void;
        getAllDataRows?(includeBatch: boolean): Element[];
        getAllMovableDataRows?(includeBatch: boolean): Element[];
        getAllFrozenDataRows?(includeBatch: boolean): Element[];
        getAllFrozenRightDataRows?(includeBatch: boolean): Element[];
        getMovableColumnHeaderByIndex?(index: number): Element;
        getFrozenRightColumnHeaderByIndex?(index: number): Element;
        getFrozenLeftColumnHeaderByIndex?(index: number): Element;
        applyBiggerTheme(args: Element): void;
        getVisibleFrozenColumns(): number;
        print(): void;
        excelExport(exportProperties?: any, isMultipleExport?: boolean, workbook?: any): Promise<any>;
        csvExport(exportProperties?: any, isMultipleExport?: boolean, workbook?: any): Promise<any>;
        pdfExport(exportProperties?: any, isMultipleExport?: boolean, pdfDoc?: Object): Promise<Object>;
        search(searchString: string): void;
        deleteRecord?(fieldname?: string, data?: Object): void;
        startEdit?(): void;
        endEdit?(): void;
        closeEdit?(): void;
        addRecord?(data?: Object): void;
        deleteRow?(tr: HTMLTableRowElement): void;
        getRowObjectFromUID?(uid: string, isMovable?: boolean, isFrozenRight?: boolean): Row<Column>;
        addFreezeRows?(fRows: Row<Column>[], mRows?: Row<Column>[]): Row<Column>[];
        getRowsObject?(): Row<Column>[];
        getMovableRowsObject?(): Row<Column>[];
        createColumnchooser(x: number, y: number, target: Element): void;
        getDataModule?(): Data;
        refreshTooltip?(): void;
        copy?(withHeader?: boolean): void;
        getLocaleConstants?(): Object;
        getForeignKeyColumns?(): Column[];
        getRowHeight?(): number;
        setCellValue(key: string | number, field: string, value: string | number | boolean | Date): void;
        setRowData(key: string | number, rowData?: Object): void;
        getState?(): Object;
        destroyTemplate?(templateName: string[], index?: any): void;
        getQuery?(): Query;
        log?(type: string | string[], args?: Object): void;
        isDetail?(): boolean;
        updateMediaColumns?(col: Column): void;
        hideScroll?(): void;
        grabColumnByFieldFromAllCols(field: string): Column;
        grabColumnByUidFromAllCols(uid: string): Column;
        getRowUid(prefix: string): string;
        getMovableVirtualContent?(): Element;
        getFrozenVirtualContent?(): Element;
        getMovableVirtualHeader?(): Element;
        getFrozenVirtualHeader?(): Element;
        getFilteredRecords(): Object[] | Promise<Object>;
        getRowElementByUID?(uid: string): Element;
        getMediaColumns?(): void;
        isCollapseStateEnabled?(): boolean;
        mergePersistGridData?(setData?: Object): void;
        setForeignKeyData?(args: DataResult): void;
        getSelectedColumnsUid?(): string[];
        serverExcelExport?(url: string): void;
        serverPdfExport?(url: string): void;
        getCurrentVisibleColumns?(isColVirtualization?: boolean): Column[];
        dataStateChange?: EmitType<DataStateChangeEventArgs>;
        exportGroupCaption?: EmitType<ExportGroupCaptionEventArgs>;
        columnDataStateChange?: EmitType<ColumnDataStateChangeEventArgs>;
}
/** @hidden */
export interface IExpandedRow {
        index?: number;
        gridModel?: Object;
        isExpand?: boolean;
}
/** @hidden */
export interface IRenderer {
        renderPanel(): void;
        renderTable(): void;
        setPanel(panel: Element): void;
        setTable(table: Element): void;
        getPanel(): Element;
        getTable(): Element;
        getRows?(): Row<{}>[] | HTMLCollectionOf<HTMLTableRowElement>;
        getMovableRows?(): Row<{}>[] | HTMLCollectionOf<HTMLTableRowElement>;
        getFrozenRightRows?(): Row<{}>[] | HTMLCollectionOf<HTMLTableRowElement>;
        refreshUI?(): void;
        setVisible?(column?: Column[]): void;
        addEventListener?(): void;
        removeEventListener?(): void;
        getRowElements?(): Element[];
        getMovableRowElements?(): Element[];
        getFrozenRightRowElements?(): Element[];
        setSelection?(uid: string, set: boolean, clearAll: boolean): void;
        getRowByIndex?(index: number): Element;
        getVirtualRowIndex?(index: number): number;
        getMovableRowByIndex?(index: number): Element;
        getFrozenRightRowByIndex?(index: number): Element;
        getRowInfo?(target: Element): RowInfo;
        getState?(): Object;
        getMovableHeader?(): Element;
        getMovableContent?(): Element;
        getFrozenRightContent?(): Element;
        getFrozenRightHeader?(): Element;
        destroyTemplate?(templateName: string[]): void;
        emptyVcRows?(): void;
        getBlockSize?(): number;
        getGroupedTotalBlocks?(): number;
        isEndBlock?(block: number): boolean;
}
/**
    * IAction interface
    *
    * @hidden
    */
export interface IAction {
        updateModel?(): void;
        onActionBegin?(args?: Object, type?: string): void;
        onActionComplete?(args?: Object, type?: string): void;
        addEventListener?(): void;
        removeEventListener?(): void;
}
/**
    * @hidden
    */
export interface IDataProcessor {
        generateQuery(): Query;
        getData(args: Object, query: Query): Promise<Object>;
        processData?(): void;
}
/**
    * @hidden
    */
export interface IValueFormatter {
        fromView(value: string, format: Function, target?: string): string | number | Date;
        toView(value: number | Date, format: Function): string | Object;
        setCulture?(cultureName: string): void;
        getFormatFunction?(format: NumberFormatOptions | DateFormatOptions): Function;
        getParserFunction?(format: NumberFormatOptions | DateFormatOptions): Function;
}
/**
    * @hidden
    */
export interface ITemplateRender {
        compiled: {
                [x: string]: Function;
        };
        compile(key: string, template: string): Function;
        render(key: string, data: Object, params?: {
                [p: string]: Object;
        }): string;
}
/**
    * @hidden
    */
export interface IEditCell {
        create?: Element | Function | string;
        read?: Object | Function | string;
        write?: void | Function | string;
        params?: DatePickerModel | NumericTextBoxModel | DropDownListModel | CheckBoxModel | MultiSelectModel | AutoCompleteModel | ComboBoxModel | SwitchModel | TimePickerModel | MaskedTextBoxModel;
        destroy?: Function | string;
}
/**
    * @hidden
    */
export interface IDialogUI {
        params?: DialogModel;
}
/**
    * @hidden
    */
export interface IFilterUI {
        create?: Element | Function | string;
        read?: Object | Function | string;
        write?: void | Function | string;
}
/**
    * @hidden
    */
export interface IFilterMUI {
        create?: void | Function | string;
        read?: Object | Function | string;
        write?: void | Function | string;
}
/**
    * @hidden
    */
export interface ICustomOptr {
        stringOperator?: {
                [key: string]: Object;
        }[];
        numberOperator?: {
                [key: string]: Object;
        }[];
        dateOperator?: {
                [key: string]: Object;
        }[];
        dateTimeOperator?: {
                [key: string]: Object;
        }[];
        booleanOperator?: {
                [key: string]: Object;
        }[];
}
/**
    * @hidden
    */
export interface ICellRenderer<T> {
        element?: Element;
        getGui?(): string | Element;
        format?(column: T, value: Object, data: Object): string;
        evaluate?(node: Element, column: Cell<T>, data: Object, attributes?: Object): boolean;
        setStyleAndAttributes?(node: Element, attributes: {
                [key: string]: Object;
        }): void;
        render(cell: Cell<T>, data: Object, attributes?: {
                [x: string]: string;
        }, isExpand?: boolean, isEdit?: boolean): Element;
        appendHtml?(node: Element, innerHtml: string | Element): Element;
        refresh?(cell: Cell<T>, node: Element): Element;
}
/**
    * @hidden
    */
export interface IRowRenderer<T> {
        element?: Element;
        render(row: Row<T>, column: Column[], attributes?: {
                [x: string]: string;
        }, rowTemplate?: string): Element;
}
/**
    * @hidden
    */
export interface ICellFormatter {
        getValue(column: Column, data: Object): Object;
}
/**
    * @hidden
    */
export interface IIndex {
        rowIndex?: number;
        cellIndex?: number;
}
/**
    * @hidden
    */
export interface ISelectedCell {
        rowIndex: number;
        cellIndexes: number[];
}
/**
    * @hidden
    */
export interface IFilterOperator {
        contains: string;
        endsWith: string;
        equal: string;
        greaterThan: string;
        greaterThanOrEqual: string;
        lessThan: string;
        lessThanOrEqual: string;
        notEqual: string;
        startsWith: string;
}
export interface NotifyArgs {
        records?: Object[];
        count?: number;
        requestType?: Action;
        module?: string;
        enable?: boolean;
        properties?: Object;
        virtualInfo?: VirtualInfo;
        cancel?: boolean;
        rows?: Row<Column>[];
        isFrozen?: boolean;
        args?: NotifyArgs;
        scrollTop?: Object;
        oldProperties?: string[];
        focusElement?: HTMLElement;
        rowObject?: Row<Column>;
        renderMovableContent?: boolean;
        renderFrozenRightContent?: boolean;
        promise?: Promise<Object>;
        isFrozenRowsRender?: boolean;
}
export interface LazyLoadArgs {
        /** Defines expand/collapse caption row details. */
        groupInfo?: Row<Column>;
        /** Defines whether get rows from group cache or make a request. */
        enableCaching?: boolean;
        /** Cancel the expand/collapse action. */
        cancel?: boolean;
        /** Defines the caption row element. */
        captionRowElement?: HTMLTableRowElement;
}
export interface LazyLoadGroupArgs extends LazyLoadArgs {
        makeRequest?: boolean;
        skip?: number;
        take?: number;
        fields?: string[];
        keys?: string[];
        isExpand?: boolean;
        isScroll?: boolean;
        scrollUp?: boolean;
        cachedRowIndex?: number;
        rowIndex?: number;
}
export interface InfiniteScrollArgs {
        requestType?: Action;
        currentPage?: number;
        prevPage?: number;
        startIndex?: number;
        direction?: string;
        isFrozen?: boolean;
        isCaptionCollapse?: boolean;
        parentUid?: string;
}
/**
    * @hidden
    */
export interface FrozenReorderArgs {
        column?: Column;
        destIndex?: number;
        columns?: Column[];
        parent?: Column;
        cancel?: boolean;
}
/**
    * @hidden
    */
export interface ICell<T> {
        colSpan?: number;
        rowSpan?: number;
        cellType?: CellType;
        visible?: boolean;
        isTemplate?: boolean;
        isDataCell?: boolean;
        column?: T;
        rowID?: string;
        index?: number;
        colIndex?: number;
        className?: string;
        commands?: CommandModel[];
        isForeignKey?: boolean;
        foreignKeyData?: Object;
}
/**
    * @hidden
    */
export interface IRow<T> {
        uid?: string;
        parentGid?: number;
        childGid?: number;
        data?: Object;
        gSummary?: number;
        aggregatesCount?: number;
        tIndex?: number;
        collapseRows?: Object[];
        isSelected?: boolean;
        isFreezeRow?: boolean;
        isReadOnly?: boolean;
        isCaptionRow?: boolean;
        isAltRow?: boolean;
        isDataRow?: boolean;
        isExpand?: boolean;
        rowSpan?: number;
        cells?: Cell<T>[];
        index?: number;
        indent?: number;
        subRowDetails?: Object;
        height?: string;
        cssClass?: string;
        foreignKeyData?: Object;
        parentUid?: string;
}
/**
    * @hidden
    */
export interface IModelGenerator<T> {
        generateRows(data: Object, args?: Object): Row<T>[];
        refreshRows?(input?: Row<T>[]): Row<T>[];
}
export interface RowInfo {
        /** returns particular cell element */
        cell?: Element;
        /** returns particular cell index */
        cellIndex?: number;
        /** returns particular row element */
        row?: Element;
        /** returns particular rowIndex */
        rowIndex?: number;
        /** returns particular row data */
        rowData?: Object;
        /** return particular column information  */
        column?: Object;
}
export interface GridActionEventArgs {
        /** Defines the current action. */
        requestType?: Action;
        /** Defines the type of event. */
        type?: string;
        /** Cancel the print action */
        cancel?: boolean;
}
export interface FailureEventArgs {
        /** Defines the error information. */
        error?: Error;
}
export interface FilterEventArgs extends GridActionEventArgs {
        /** Defines the object that is currently filtered. */
        currentFilterObject?: PredicateModel;
        /** Defines the column name that is currently filtered. */
        currentFilteringColumn?: string;
        /** Defines the collection of filtered columns. */
        columns?: PredicateModel[];
}
export interface GroupEventArgs extends GridActionEventArgs {
        /** Defines the field name of the currently grouped columns. */
        columnName?: string;
}
export interface PageEventArgs extends GridActionEventArgs {
        /** Defines the previous page number. */
        previousPage?: string;
        /** Defines the current page number. */
        currentPage?: string;
}
export interface SortEventArgs extends GridActionEventArgs {
        /** Defines the field name of currently sorted column. */
        columnName?: string;
        /** Defines the direction of sort column. */
        direction?: SortDirection;
}
export interface SearchEventArgs extends GridActionEventArgs {
        /** Defines the string value to search. */
        searchString?: string;
}
export interface PrintEventArgs extends GridActionEventArgs {
        /** Defines the Grid element. */
        element?: Element;
        /** Defines the currently selected rows. */
        selectedRows?: NodeListOf<Element>;
        /** Cancel the print action */
        cancel?: boolean;
        /** Hierarchy Grid print mode */
        hierarchyPrintMode?: HierarchyGridPrintMode;
}
export interface DetailDataBoundEventArgs {
        /** Defines the details row element. */
        detailElement?: Element;
        /** Defines the selected row data.
            *
            * @isGenericType true
            */
        data?: Object;
}
export interface ColumnChooserEventArgs {
        /** Defines the parent element. */
        element?: Element;
        /** Defines the display columns of column chooser. */
        columns?: Column[];
        /** Specifies the instance of column chooser dialog. */
        dialogInstance?: Object;
        /** Defines the operator for column chooser search request */
        searchOperator?: string;
}
export interface AdaptiveDialogEventArgs {
        /** Defines the cancel option value. */
        cancel?: boolean;
        /** Defines the instance of adaptive dialog. */
        dialogObj?: Dialog;
        /** Defines the current action. */
        requestType?: string;
}
export interface RowDeselectEventArgs {
        /** Defines the current selected/deselected row data.
            *
            * @isGenericType true
            */
        data?: Object | Object[];
        /** Defines the selected/deselected row index. */
        rowIndex?: number;
        /** Defines the selected/deselected row indexes. */
        rowIndexes?: number[];
        /** Defines the selected/deselected row. */
        row?: Element | Element[];
        /** Define the foreignKey row data associated with this column */
        foreignKeyData?: Object | Object[];
        /** Defines the cancel option value. */
        cancel?: boolean;
        /** Defines the target element for row deselect. */
        target?: Element;
        /** Defines whether event is triggered by interaction or not. */
        isInteracted?: boolean;
        /** Defines whether header checkbox is clicked or not */
        isHeaderCheckboxClicked?: boolean;
}
export interface RowSelectEventArgs extends RowDeselectEventArgs {
        /** Defines the previously selected row index. */
        previousRowIndex?: number;
        /** Defines the previously selected row. */
        previousRow?: Element;
        /** Defines the target element for selection. */
        target?: Element;
}
export interface RecordDoubleClickEventArgs {
        /** Defines the target element. */
        target?: Element;
        /** Defines the cell element. */
        cell?: Element;
        /** Defines the cell index. */
        cellIndex?: number;
        /** Defines the column object. */
        column?: Column;
        /** Defines the name of the event. */
        name?: string;
        /** Defines the row element. */
        row?: Element;
        /** Defines the current row data.
            *
            * @isGenericType true
            */
        rowData?: Object;
        /** Defines the row index. */
        rowIndex?: number;
        /** Define the foreignKey row data associated with this column */
        foreignKeyData?: Object;
}
export interface RecordClickEventArgs {
        /** Defines the target element. */
        target?: Element;
        /** Defines the cell element. */
        cell?: Element;
        /** Defines the cell index. */
        cellIndex?: number;
        /** Defines the column object. */
        column?: Column;
        /** Defines the name of the event. */
        name?: string;
        /** Defines the row element. */
        row?: Element;
        /** Defines the current row data.
            *
            * @isGenericType true
            */
        rowData?: Object;
        /** Defines the row index. */
        rowIndex?: number;
        /** Define the foreignKey row data associated with this column */
        foreignKeyData?: Object;
}
export interface RowSelectingEventArgs extends RowSelectEventArgs {
        /** Defines whether CTRL key is pressed. */
        isCtrlPressed?: boolean;
        /** Defines whether SHIFT key is pressed. */
        isShiftPressed?: boolean;
}
export interface CellDeselectEventArgs {
        /** Defines the currently selected/deselected row data.
            *
            * @isGenericType true
            */
        data?: Object;
        /** Defines the indexes of the current selected/deselected cells. */
        cellIndexes?: ISelectedCell[];
        /** Defines the currently selected/deselected cells. */
        cells?: Element[];
        /** Defines the cancel option value. */
        cancel?: boolean;
}
export interface CellSelectEventArgs extends CellDeselectEventArgs {
        /** Defines the index of the current selected cell. */
        cellIndex?: IIndex;
        /** Defines the previously selected cell index. */
        previousRowCellIndex?: number;
        /** Defines the element. */
        currentCell: Element;
        /** Defines the previously selected cell element. */
        previousRowCell?: Element;
}
export interface CellSelectingEventArgs extends CellSelectEventArgs {
        /** Defines whether the CTRL key is pressed or not. */
        isCtrlPressed?: boolean;
        /** Defines whether the SHIFT key is pressed or not. */
        isShiftPressed?: boolean;
}
export interface ColumnDragEventArgs {
        /** Defines the target element from which the drag starts. */
        target?: Element;
        /** Defines the type of the element dragged. */
        draggableType?: string;
        /** Defines the column object that is dragged. */
        column?: Column;
}
export interface RowDataBoundEventArgs {
        /** Defines the current row data.
            *
            * @isGenericType true
            */
        data?: Object;
        /** Defines the row element.
            *
            * @blazorType CellDOM
            */
        row?: Element;
        /** Defines the row height */
        rowHeight?: number;
}
export interface HeaderCellInfoEventArgs {
        /** Defines the cell. */
        cell?: Cell<Column>;
        /** Defines the cell element. */
        node?: Element;
}
export interface ExportGroupCaptionEventArgs {
        /** Defines the group caption text. */
        captionText?: string;
        /** Defines the export type. */
        type?: string;
}
export interface QueryCellInfoEventArgs {
        /** Defines the row data associated with this cell.
            *
            * @isGenericType true
            */
        data?: Object;
        /** Defines the cell element.
            *
            * @blazorType CellDOM
            */
        cell?: Element;
        /** Defines the column object associated with this cell.
            *
            * @blazorType GridColumn
            */
        column?: Column;
        /** Defines the no. of columns to be spanned */
        colSpan?: number;
        /** Defines the no. of rows to be spanned */
        rowSpan?: number;
        /** Defines the current action. */
        requestType?: string;
        /** Define the foreignKey row data associated with this column */
        foreignKeyData?: Object;
}
export interface PdfQueryCellInfoEventArgs {
        /** Defines the column of the current cell. */
        column?: Column;
        /** Defines the style of the current cell. */
        style?: PdfStyle;
        /** Defines the value of the current cell. */
        value?: Date | string | number | boolean | PdfTextWebLink | PdfImage;
        /** Defines the no. of columns to be spanned */
        colSpan?: number;
        /** Defines the data of the cell
            *
            * @isGenericType true
            */
        data?: Object;
        /** Defines the current PDF cell */
        cell?: PdfGridCell;
        /** Defines the image details */
        image?: {
                base64: string;
        };
        /** Defines the hyperlink of the cell */
        hyperLink?: Hyperlink;
}
export interface ExportDetailDataBoundEventArgs {
        /** Defines the child grid of the current row. */
        childGrid?: IGrid;
        /** Defines the row object of the current data. */
        row?: Row<Column>;
        /** Defines the PDF grid current cell. */
        cell?: PdfGridCell;
        /** Defines the export properties */
        exportProperties?: PdfExportProperties | ExcelExportProperties;
}
export interface AggregateQueryCellInfoEventArgs {
        /** Defines the row data associated with this cell. */
        row?: Object;
        /** Defines the type of the cell */
        type?: AggregateTemplateType;
        /** Defines the data of the current cell */
        data?: object;
        /** Defines the style of the current cell. */
        style?: object;
}
export interface PdfHeaderQueryCellInfoEventArgs {
        /** Defines the PDF grid current cell. */
        cell?: object;
        /** Defines the style of the current cell. */
        style?: PdfStyle;
        /** Defines the current cell with column */
        gridCell?: object;
        /** Defines the image details */
        image?: {
                base64: string;
        };
        /** Defines the hyperlink of the cell */
        hyperLink?: Hyperlink;
}
export interface Image {
        /**  Defines the base 64 string for image */
        base64: string;
        /**  Defines the height for the image */
        height: number;
        /**  Defines the height for the image */
        width: number;
}
export interface ExcelQueryCellInfoEventArgs {
        /** Defines the row data associated with this cell.
            *
            * @isGenericType true
            */
        data?: Object;
        /** Defines the column of the current cell. */
        column: Column;
        /** Defines the value of the current cell. */
        value?: Date | string | number | boolean;
        /** Defines the style of the current cell. */
        style?: ExcelStyle;
        /** Defines the number of columns to be spanned */
        colSpan?: number;
        /** Defines the cell data */
        cell?: number | ExcelStyle | {
                name: string;
        } | ExcelCell;
        /** Defines the image details */
        image?: Image;
        /** Defines the hyperlink */
        hyperLink?: Hyperlink;
}
export interface ExcelHeaderQueryCellInfoEventArgs {
        /** Defines the cell that contains colspan. */
        cell?: Object;
        /** Defines the style of the current cell. */
        style?: ExcelStyle;
        /** Defines the Grid cell instance */
        gridCell?: Cell<Column> | ExcelCell;
        /** Defines the image details */
        image?: Image;
        /** Defines the hyperlink */
        hyperLink?: Hyperlink;
}
export interface FilterSearchBeginEventArgs {
        /** Defines the current action. */
        requestType?: string;
        /** Defines the filter model. */
        filterModel?: CheckBoxFilterBase;
        /** Defines the field name of current column */
        columnName?: string;
        /** Defines the current Column objects */
        column?: Column;
        /** Defines the operator for filter request */
        operator?: string;
        /** Defines the matchCase for filter request */
        matchCase?: boolean;
        /** Defines the ignoreAccent for filter request */
        ignoreAccent?: boolean;
        /** Defines the custom query in before execute */
        query: Query;
        /** Defines take number of data  */
        filterChoiceCount: number;
        /** Defines the datasource for filter request */
        dataSource?: Object[];
        /** Defines the value of the current search */
        value?: Date | string | number | boolean;
}
export interface FilterUI {
        /** Defines the field */
        field?: string;
        /** Defines the Operator */
        operator?: string;
        /** Defines the first operator for excel filter */
        firstOperator?: string;
        /** Defines the second Operator for excel filter */
        secondOperator?: string;
}
export interface MultipleExport {
        /** Indicates whether to append the multiple grid in same sheet or different sheet */
        type?: MultipleExportType;
        /**  Defines the number of blank rows between the multiple grid data */
        blankRows?: number;
}
export interface ExcelRow {
        /**  Defines the index for cells */
        index?: number;
        /**  Defines the cells in a row */
        cells?: ExcelCell[];
        /** Defines the group of rows to expand and collapse */
        grouping?: Object;
}
export interface Border {
        /**  Defines the color of border */
        color?: string;
        /**  Defines the line style of border */
        lineStyle?: BorderLineStyle;
}
export interface ExcelStyle {
        /** Defines the color of font */
        fontColor?: string;
        /** Defines the name of font */
        fontName?: string;
        /** Defines the size of font */
        fontSize?: number;
        /** Defines the horizontal alignment for cell style */
        hAlign?: ExcelHAlign;
        /** Defines the vertical alignment for cell style */
        vAlign?: ExcelVAlign;
        /** Defines the bold style for fonts  */
        bold?: boolean;
        /** Defines the indent for cell style */
        indent?: number;
        /** Defines the italic style for fonts */
        italic?: boolean;
        /** Defines the underline style for fonts */
        underline?: boolean;
        /** Defines the background color for cell style */
        backColor?: string;
        /** Defines the wrapText for cell style */
        wrapText?: boolean;
        /** Defines the borders for cell style */
        borders?: Border;
        /** Defines the format of the cell */
        numberFormat?: string;
        /** Defines the type of the cell */
        type?: string;
}
export interface PdfStyle {
        /** Defines the horizontal alignment */
        textAlignment?: PdfHAlign;
        /** Defines the brush color of font */
        textBrushColor?: string;
        /** Defines the pen color of font */
        textPenColor?: string;
        /** Defines the font family */
        fontFamily?: string;
        /** Defines the font size */
        fontSize?: number;
        /** Defines the font bold */
        bold?: boolean;
        /** Defines the indent alignment */
        indent?: PdfHAlign;
        /** Defines the italic font */
        italic?: boolean;
        /** Defines the underlined font */
        underline?: boolean;
        /** Defines the strike-out font */
        strikeout?: boolean;
        /** Defines the horizontal alignment */
        verticalAlignment?: PdfVAlign;
        /** Defines the background color */
        backgroundColor?: string;
        /** Defines the grid border */
        border?: PdfBorder;
        /** Defines the cell indent */
        paragraphIndent?: number;
        cellPadding?: PdfPaddings;
}
export interface PdfBorder {
        /** Defines the border color */
        color?: string;
        /** Defines the border width */
        width?: number;
        /** Defines the border dash style */
        dashStyle?: PdfDashStyle;
        /**  Defines the line style of border */
        lineStyle?: BorderLineStyle;
}
export interface ExcelCell {
        /** Defines the index for the cell */
        index?: number;
        /** Defines the column span for the cell  */
        colSpan?: number;
        /** Defines the value of the cell */
        value?: string | boolean | number | Date;
        /** Defines the hyperlink of the cell */
        hyperlink?: Hyperlink;
        /** Defines the style of the cell */
        style?: ExcelStyle;
        /** Defines the row span for the cell */
        rowSpan?: number;
}
export interface Hyperlink {
        /** Defines the Url for hyperlink */
        target?: string;
        /** Defines the display text for hyperlink */
        displayText?: string;
}
export interface ExcelHeader {
        /** Defines the number of rows between the header and grid data */
        headerRows?: number;
        /** Defines the rows in header content */
        rows?: ExcelRow[];
}
export interface ExcelFooter {
        /** Defines the number of rows between the grid data and footer */
        footerRows?: number;
        /** Defines the rows in footer content */
        rows?: ExcelRow[];
}
export interface ExcelExportProperties {
        /** Defines the data source dynamically before exporting */
        dataSource?: Object | DataManager;
        /** Defined the query dynamically before exporting */
        query?: Query;
        /** Exports multiple grid into the excel document */
        multipleExport?: MultipleExport;
        /** Defines the header content for exported document  */
        header?: ExcelHeader;
        /** Defines the footer content for exported document */
        footer?: ExcelFooter;
        /** Defines the columns which are to be customized for Export alone.
            *
            * @blazorType List<GridColumn>
            */
        columns?: Column[];
        /** Indicates to export current page or all page */
        exportType?: ExportType;
        /** Indicates whether to show the hidden columns in exported excel */
        includeHiddenColumn?: boolean;
        /** Defines the theme for exported data  */
        theme?: ExcelTheme;
        /** Defines the file name for the exported file  */
        fileName?: string;
        /** Defines the hierarchy export mode for the pdf grid */
        hierarchyExportMode?: 'Expanded' | 'All' | 'None';
        /** Defines the delimiter for CSV file export */
        separator?: string;
        /** Defines filter icons while exporting */
        enableFilter?: boolean;
}
export interface RowDragEventArgs {
        /** Defines the selected row's element. */
        rows?: Element[];
        /** Defines the target element from which drag starts. */
        target?: Element;
        /** Defines the type of the element to be dragged.
            *
            * @hidden
            */
        draggableType?: string;
        /** Defines the selected row data.
            *
            * @isGenericType true
            */
        data?: Object[];
        /** Defines the drag element from index. */
        fromIndex?: number;
        /** Defines the target element from index. */
        dropIndex?: number;
        /** Define the mouse event */
        originalEvent?: object;
        cancel?: boolean;
}
/**
    * @hidden
    */
export interface EJ2Intance extends HTMLElement {
        ej2_instances: Object | Object[];
}
/**
    * @hidden
    */
export interface IPosition {
        x: number;
        y: number;
}
/**
    * @hidden
    */
export interface ParentDetails {
        parentID?: string;
        parentPrimaryKeys?: string[];
        parentKeyField?: string;
        parentKeyFieldValue?: string;
        parentRowData?: Object;
}
/**
    * @hidden
    */
export interface ScrollPositionType {
        top?: number;
        left?: number;
}
/**
    * @hidden
    */
export interface VirtualInfo {
        data?: boolean;
        event?: string;
        block?: number;
        page?: number;
        currentPage?: number;
        direction?: string;
        blockIndexes?: number[];
        columnIndexes?: number[];
        columnBlocks?: number[];
        loadSelf?: boolean;
        loadNext?: boolean;
        nextInfo?: {
                page?: number;
        };
        sentinelInfo?: SentinelType;
        offsets?: Offsets;
        startIndex?: number;
        endIndex?: number;
}
/**
    * @hidden
    */
export interface InterSection {
        container?: HTMLElement;
        pageHeight?: number;
        debounceEvent?: boolean;
        axes?: string[];
        scrollbar?: Element;
        movableContainer?: Element;
        prevTop?: number;
        prevLeft?: number;
}
/**
    * @hidden
    */
export interface ICancel {
        /** Defines the cancel option value. */
        cancel?: boolean;
}
/**
    * @hidden
    */
export interface IPrimaryKey {
        /** Defines the primaryKey. */
        primaryKey?: string[];
}
export interface BeforeBatchAddArgs extends ICancel, IPrimaryKey {
        /** Defines the default data object.
            *
            * @isGenericType true
            */
        defaultData?: Object;
}
/**
    * @hidden
    */
export interface BatchCancelArgs {
        /** Defines the rows. */
        rows?: Row<Column>[];
        /** Defines the request type. */
        requestType?: string;
}
/**
    * @hidden
    */
export interface BatchDeleteArgs extends IPrimaryKey {
        /** Defines the deleted data.
            *
            * @isGenericType true
            */
        rowData?: Object;
        /** Defines the row index. */
        rowIndex?: number;
}
export interface BeforeBatchDeleteArgs extends BatchDeleteArgs, ICancel {
        /** Defines the row element. */
        row?: Element;
}
export interface BeforeBatchSaveArgs extends ICancel {
        /** Defines the changed record object. */
        batchChanges?: Object;
}
export interface ResizeArgs extends ICancel {
        /** Event argument of point or touch action.
            *
            * @hidden
            */
        e?: MouseEvent | TouchEvent;
        /** Defines the resizing column details */
        column?: Column;
}
/**
    * @hidden
    */
export interface BatchAddArgs extends ICancel, IPrimaryKey {
        /** Defines the added data.
            *
            * @isGenericType true
            */
        defaultData?: Object;
        /** Defines the column index. */
        columnIndex?: number;
        /** Defines the row element. */
        row?: Element;
        /** Defines the cell element. */
        cell?: Element;
        /** Defines the column object. */
        columnObject?: Column;
}
export interface BeginEditArgs extends ICancel, IPrimaryKey {
        /** Defines the edited data.
            *
            * @isGenericType true
            */
        rowData?: Object;
        /** Defines the edited row index. */
        rowIndex?: number;
        /** Defines the current edited row. */
        row?: Element;
        /** Defines the name of the event. */
        type?: string;
        /** Defines the primary key value. */
        primaryKeyValue?: string[];
}
export interface DeleteEventArgs {
        /** Defines the cancel option value. */
        cancel?: boolean;
        /** Defines the request type. */
        requestType?: string;
        /** Defines the foreign key record object (JSON). @hidden */
        foreignKeyData?: Object;
        /** Defines the record objects.
            *
            * @isGenericType true
            */
        data?: Object[];
        /** Defines the selected rows for delete. */
        tr?: Element[];
        /** Defines the name of the event. */
        type?: string;
}
export interface AddEventArgs {
        /** If `cancel` is set to true, then the current action will stopped. */
        cancel?: boolean;
        /** Defines the request type. */
        requestType?: string;
        /** Defines the foreign key record object.
            *
            * @hidden
            */
        foreignKeyData?: Object;
        /** Defines the record objects.
            *
            * @isGenericType true
            */
        data?: Object;
        /** Defines the event name. */
        type?: string;
        /** Defines the previous data. */
        previousData?: Object;
        /** Defines the added row. */
        row?: Object;
        /** Added row index */
        index?: number;
        /**
            * @hidden
            * Defines the record objects.
            */
        rowData?: Object;
        /** Defines the target for dialog */
        target?: HTMLElement;
}
export interface SaveEventArgs extends AddEventArgs {
        /** Defines the previous data.
            *
            * @isGenericType true
            */
        previousData?: Object;
        /** Defines the selected row index. */
        selectedRow?: number;
        /** Defines the current action. */
        action?: string;
        /** Added row index */
        index?: number;
        /** Defines the promise. */
        promise?: Promise<Object>;
}
export interface EditEventArgs extends BeginEditArgs {
        /** Defines the request type. */
        requestType?: string;
        /** Defines foreign data object. */
        foreignKeyData?: Object;
        addRecord?(data?: Object, index?: number): void;
        /** Define the form element */
        form?: HTMLFormElement;
        /** Define the movable table form element */
        movableForm?: HTMLFormElement;
        /** Define the target for dialog */
        target?: HTMLElement;
        /** Define frozen right table form element */
        frozenRightForm?: HTMLFormElement;
}
export interface DialogEditEventArgs extends EditEventArgs {
        /** Defines the dialog object */
        dialog?: DialogModel;
}
/** @hidden */
export interface CustomEditEventArgs extends EditEventArgs {
        /** Defines the virtual scroll action */
        isScroll?: boolean;
        /** Defines custom virtualization form validation */
        isCustomFormValidation?: boolean;
}
/** @hidden */
export interface CustomAddEventArgs extends AddEventArgs {
        /** Defines the virtual scroll x axis */
        isScroll?: boolean;
}
/**
    * @hidden
    */
export interface CellEditSameArgs extends ICancel {
        /** Defines the row data object.
            *
            * @isGenericType true
            */
        rowData?: Object;
        /** Defines the column name. */
        columnName?: string;
        /** Defines the cell object. */
        cell?: Element;
        /** Defines the column object. */
        columnObject?: Column;
        /** Defines the cell value. */
        value?: string;
        /** Defines isForeignKey option value. */
        isForeignKey?: boolean;
        /** Defines the Column Object */
        column?: Column;
}
export interface CellEditArgs extends CellEditSameArgs, IPrimaryKey {
        /** Defines the current row. */
        row?: Element;
        /** Defines the validation rules. */
        validationRules?: Object;
        /** Defines the name of the event. */
        type?: string;
        /** Defines foreign data object */
        foreignKeyData?: Object;
}
export interface CommandClickEventArgs {
        /** Defines the current target element. */
        target?: HTMLElement;
        /** cancel the CRUD action. */
        cancel?: boolean;
        /** Defines the current command column . */
        commandColumn?: CommandModel;
        /** returns particular row data
            *
            * @isGenericType true
            */
        rowData?: Object;
}
export interface IFilterCreate {
        column?: Column;
        target?: HTMLElement;
        getOptrInstance?: FlMenuOptrUI;
        localizeText?: L10n;
        dialogObj?: Dialog;
}
export interface CellSaveArgs extends CellEditSameArgs {
        /** Defines the previous value of the cell. */
        previousValue?: string;
}
export interface BeforeDataBoundArgs {
        /** Defines the data.
            *
            * @isGenericType true
            */
        result?: Object[];
        /** Defines the data count. */
        count?: number;
        /** Defines the cancel option value. */
        cancel?: boolean;
}
/**
    * @hidden
    */
export interface IEdit {
        formObj?: FormValidator;
        destroy?: Function;
        closeEdit?(): void;
        deleteRecord?(fieldname?: string, data?: Object): void;
        startEdit?(tr?: Element): void;
        addRecord?(data?: Object, index?: number): void;
        deleteRow?(tr: HTMLTableRowElement): void;
        endEdit?(data?: Object): void;
        batchSave?(): void;
        getBatchChanges?(): Object;
        removeRowObjectFromUID?(uid: string): void;
        addRowObject?(row: Row<Column>): void;
        editCell?(index: number, field: string, isAdd?: boolean): void;
        updateCell?(rowIndex: number, field: string, value: string | number | boolean | Date): void;
        updateRow?(index: number, data: Object): void;
        saveCell?(isForceSave?: boolean): void;
        escapeCellEdit?(): void;
        addCancelWhilePaging?(): void;
        args?: {
                requestType?: string;
        };
        isAdded?: boolean;
        previousData?: object;
}
/**
    * @hidden
    */
export interface CheckBoxChangeEventArgs extends ICancel {
        /** Defines the checked state. */
        checked?: boolean;
        /** Defines the selected row indexes. */
        selectedRowIndexes?: number[];
        /** Defines the target element for selection. */
        target?: Element;
}
/**
    * @hidden
    */
export interface BeforeCopyEventArgs extends ICancel {
        /** Defines the grid copied data. */
        data?: string;
}
export interface BeforePasteEventArgs {
        /** Defines the grid pasted data. */
        column?: Column;
        data?: string | number | boolean | Date;
        cancel?: boolean;
        rowIndex?: number;
}
export interface BeforeAutoFillEventArgs {
        /** Defines the grid autofill data. */
        column?: Column;
        value?: string;
        cancel?: boolean;
}
/**
    * Defines options for custom command buttons.
    */
export interface CommandButtonOptions extends ButtonModel {
        /**
            * Defines handler for the click event.
            */
        click?: EmitType<Event>;
}
/**
    * Define options for custom command buttons.
    */
export interface CommandModel {
        /**
            * Define the command Button tooltip
            */
        title?: string;
        /**
            * Define the command Button type
            *
            * @blazorDefaultValue none
            */
        type?: CommandButtonType;
        /**
            * Define the button model
            */
        buttonOption?: CommandButtonOptions;
}
/**
    * Defines the pending state for Custom Service Data
    */
export interface PendingState {
        /**
            * The function which resolves the current action's promise.
            */
        resolver?: Function;
        /**
            * Defines the current state of the action.
            */
        isPending?: boolean;
        /**
            * Grouping property for Custom data service
            */
        group?: string[];
        /**
            * aggregate support for Custom data service
            */
        aggregates?: Object[];
        /**
            *  DataSource changed through set model
            */
        isDataChanged?: boolean;
}
/**
    * Sorting property for Custom data Service
    */
export interface Sorts {
        /** Defines the field to be sorted */
        name?: string;
        /** Defines the direction of sorting */
        direction?: string;
}
export interface ColumnDataStateChangeEventArgs {
        /** Defines the filter query  */
        where?: PredicateModel[];
        /** Defines the search query */
        search?: PredicateModel[];
        /** Defines the grid action details performed by paging, grouping, filtering, searching, sorting */
        action?: PageEventArgs | GroupEventArgs | FilterEventArgs | SearchEventArgs | SortEventArgs;
        /** Defines the function to be called to refresh column dataSource */
        setColumnData?: Function;
}
/** Custom data service event types */
export interface DataStateChangeEventArgs {
        /** Defines the skip count in datasource record */
        skip?: number;
        /** Defines the page size */
        take?: number;
        /** Defines the filter criteria  */
        where?: Predicate[];
        /** Defines the sorted field and direction */
        sorted?: Sorts[];
        /** Defines the grouped field names */
        group?: string[];
        /** Defines the aggregates object */
        aggregates?: Object[];
        /** Defines the search criteria */
        search?: PredicateModel[];
        /** Defines the grid action details performed by paging, grouping, filtering, searching, sorting */
        action?: PageEventArgs | GroupEventArgs | FilterEventArgs | SearchEventArgs | SortEventArgs;
        /** Defines the remote table name */
        table?: string;
        /** Defines the selected field names */
        select?: string[];
        /** If `count` is set true, then the remote service needs to return records and count */
        count?: boolean;
        /** Defines the checkbox filter dataSource */
        dataSource?: Function;
}
export interface DataSourceChangedEventArgs {
        /** Defines the current action type. */
        requestType?: string;
        /** Defines the current action. */
        action?: string;
        /** Defines the primary column field */
        key?: string | string[];
        /** Defines the state of the performed action */
        state?: DataStateChangeEventArgs;
        /** Defines the selected row data.
            *
            * @isGenericType true
            */
        data?: Object | Object[];
        /** Defines the primary key value */
        primaryKeyValues?: Object[];
        /** Defines the index value */
        index?: number;
        /** Defines the end of editing function. */
        endEdit?: Function;
        /** Defines the Cancel of editing process */
        cancelEdit?: Function;
        /** Defines the changes made in batch editing */
        changes?: Object;
        /** Defines the query */
        query?: Query;
}
/**
    * @hidden
    */
export interface IFocus {
        matrix: Matrix;
        onKeyPress?: Function;
        onClick?: Function;
        onFocus?: Function;
        lastIdxCell: boolean;
        target?: HTMLElement;
        jump?: (action: string, current: number[]) => SwapInfo;
        getFocusInfo?: () => FocusInfo;
        getFocusable?: (element: HTMLElement) => HTMLElement;
        selector?: (row: Row<Column>, cell: Cell<Column>) => boolean;
        generateRows?: (rows: Row<Column>[], optionals?: Object) => void;
        getInfo?: (e?: BaseKeyboardEventArgs) => FocusedContainer;
        validator?: () => Function;
        getNextCurrent?: (previous: number[], swap?: SwapInfo, active?: IFocus, action?: string) => number[];
        preventDefault?: (e: BaseKeyboardEventArgs, info: FocusInfo) => void;
        nextRowFocusValidate?: (index: number) => number;
        previousRowFocusValidate?: (index: number) => number;
}
/**
    * @hidden
    */
export interface FocusInfo {
        element?: HTMLElement;
        elementToFocus?: HTMLElement;
        outline?: boolean;
        class?: string;
        skipAction?: boolean;
        uid?: string;
}
/**
    * @hidden
    */
export interface CellFocusArgs {
        element?: HTMLElement;
        parent?: HTMLElement;
        indexes?: number[];
        byKey?: boolean;
        byClick?: boolean;
        keyArgs?: BaseKeyboardEventArgs;
        clickArgs?: Event;
        isJump?: boolean;
        container?: FocusedContainer;
        outline?: boolean;
        cancel?: boolean;
}
/**
    * @hidden
    */
export interface FocusedContainer {
        isContent?: boolean;
        isHeader?: boolean;
        isDataCell?: boolean;
        isFrozen?: boolean;
        isStacked?: boolean;
        isSelectable?: boolean;
        indexes?: number[];
}
/**
    * @hidden
    */
export interface SwapInfo {
        swap?: boolean;
        toHeader?: boolean;
        toFrozen?: boolean;
        current?: number[];
        toFrozenRight?: boolean;
}
/**
    * @hidden
    */
export interface KeyboardEventArgs extends KeyboardEvent {
        cancel?: boolean;
}
/**
    * @hidden
    */
export interface IFilter {
        type?: string;
        dataSource?: Object[] | DataManager;
        hideSearchbox?: boolean;
        itemTemplate?: string;
        ui?: IFilterMUI;
        operator?: string;
        params?: DatePickerModel | NumericTextBoxModel | DropDownListModel | AutoCompleteModel | DateTimePickerModel;
}
/**
    * @hidden
    */
export interface IFilterArgs {
        type?: string;
        height: number;
        columns?: ColumnModel[];
        field?: string;
        displayName?: string;
        query?: Query;
        dataSource?: Object[] | DataManager;
        dataManager?: DataManager;
        format?: string;
        filteredColumns?: Object[];
        localizedStrings?: Object;
        localeObj?: L10n;
        position?: {
                X: number;
                Y: number;
        };
        formatFn?: Function;
        parserFn?: Function;
        hideSearchbox?: boolean;
        allowCaseSensitive?: boolean;
        handler?: Function;
        template?: Function;
        target?: Element;
        foreignKeyValue?: string;
        column?: ColumnModel;
        actualPredicate?: {
                [key: string]: PredicateModel[];
        };
        uid?: string;
        isForeignKey?: boolean;
        ignoreAccent?: boolean;
        isRemote?: boolean;
        isResponsiveFilter?: boolean;
        operator?: string;
}
export interface PdfExportProperties {
        /** Defines the Pdf orientation. */
        pageOrientation?: PageOrientation;
        /** Defines the Pdf page size. */
        pageSize?: PdfPageSize;
        /** Defines the Pdf header. */
        header?: PdfHeader;
        /** Defines the columns which are to be customized for Export alone.
            *
            * @blazorType List<GridColumn>
            */
        columns?: Column[];
        /** Defines the Pdf footer. */
        footer?: PdfFooter;
        /** Indicates whether to show the hidden columns in exported Pdf */
        includeHiddenColumn?: boolean;
        /** Defines the data source dynamically before exporting */
        dataSource?: Object | DataManager | Object[];
        /** Indicates to export current page or all page */
        exportType?: ExportType;
        /** Defines the theme for exported data  */
        theme?: PdfTheme;
        /** Defines the file name for the exported file  */
        fileName?: string;
        /** Defines the hierarchy export mode for the pdf grid */
        hierarchyExportMode?: 'Expanded' | 'All' | 'None';
        /** Defines the overflow of columns for the pdf grid */
        allowHorizontalOverflow?: boolean;
}
export interface PdfTheme {
        /** Defines the style of header content. */
        header?: PdfThemeStyle;
        /** Defines the theme style of record content. */
        record?: PdfThemeStyle;
        /** Defines the theme style of caption content. */
        caption?: PdfThemeStyle;
}
export interface ExcelTheme {
        /** Defines the style of header content. */
        header?: ExcelStyle;
        /** Defines the theme style of record content. */
        record?: ExcelStyle;
        /** Defines the theme style of caption content. */
        caption?: ExcelStyle;
}
export interface PdfThemeStyle {
        /** Defines the font color of theme style. */
        fontColor?: string;
        /** Defines the font name of theme style. */
        fontName?: string;
        /** Defines the font size of theme style. */
        fontSize?: number;
        /** Defines the bold of theme style. */
        bold?: boolean;
        /** Defines the borders of theme style. */
        border?: PdfBorder;
        /** Defines the font of the theme.
            *
            * @blazorType PdfGridFont
            */
        font?: PdfStandardFont | PdfTrueTypeFont;
        /** Defines the italic of theme style. */
        italic?: boolean;
        /** Defines the underline of theme style. */
        underline?: boolean;
        /** Defines the strikeout of theme style. */
        strikeout?: boolean;
}
export interface PdfGridFont {
        /** Defines the  fontFamily of font content. */
        fontFamily?: object;
        /** Defines the fontSize of font content. */
        fontSize?: number;
        /** Defines the trueTypeFont is enabled or not for font content.
            *
            * @default false
            */
        isTrueType: boolean;
        /** Defines the fontStyle of font content. */
        fontStyle?: object;
}
export interface PdfHeader {
        /** Defines the header content distance from top. */
        fromTop?: number;
        /** Defines the height of header content. */
        height?: number;
        /** Defines the header contents. */
        contents?: PdfHeaderFooterContent[];
}
export interface PdfFooter {
        /** Defines the footer content distance from bottom. */
        fromBottom?: number;
        /** Defines the height of footer content. */
        height?: number;
        /** Defines the footer contents */
        contents?: PdfHeaderFooterContent[];
}
export interface PdfHeaderFooterContent {
        /** Defines the content type */
        type: ContentType;
        /** Defines the page number type */
        pageNumberType?: PdfPageNumberType;
        /** Defines the style of content */
        style?: PdfContentStyle;
        /** Defines the pdf points for drawing line */
        points?: PdfPoints;
        /** Defines the format for customizing page number */
        format?: string;
        /** Defines the position of the content */
        position?: PdfPosition;
        /** Defines the size of content */
        size?: PdfSize;
        /** Defines the base64 string for image content type */
        src?: string;
        /** Defines the value for content */
        value?: any;
        /** Defines the font for the content */
        font?: PdfStandardFont | PdfTrueTypeFont;
}
export interface PdfPosition {
        /** Defines the x position */
        x: number;
        /** Defines the y position */
        y: number;
}
export interface PdfSize {
        /** Defines the height */
        height: number;
        /** Defines the width */
        width: number;
}
export interface PdfPoints {
        /** Defines the x1 position */
        x1: number;
        /** Defines the y1 position */
        y1: number;
        /** Defines the x2 position */
        x2: number;
        /** Defines the y2 position */
        y2: number;
}
export interface PdfContentStyle {
        /** Defines the pen color. */
        penColor?: string;
        /** Defines the pen size. */
        penSize?: number;
        /** Defines the dash style. */
        dashStyle?: PdfDashStyle;
        /** Defines the text brush color. */
        textBrushColor?: string;
        /** Defines the text pen color. */
        textPenColor?: string;
        /** Defines the font size. */
        fontSize?: number;
        /** Defines the horizontal alignment. */
        hAlign?: PdfHAlign;
        /** Defines the vertical alignment. */
        vAlign?: PdfVAlign;
}
/**
    * Defines the context menu item model.
    */
export interface ContextMenuItemModel extends MenuItemModel {
        /**
            * Define the target to show the menu item.
            */
        target?: string;
}
export interface ColumnMenuItemModel extends MenuItemModel {
        hide?: boolean;
}
export interface ColumnMenuOpenEventArgs extends BeforeOpenCloseMenuEventArgs {
        column?: Column;
}
export interface ColumnMenuClickEventArgs extends MenuEventArgs {
        column?: Column;
}
export interface ContextMenuClickEventArgs {
        column?: Column;
        rowInfo?: RowInfo;
        element: HTMLElement;
        /** Defines the Menu Items.
            *
            * @blazorType Syncfusion.Blazor.Navigations.MenuItemModel
            */
        item: MenuItemModel;
        event?: Event;
        name?: string;
}
export interface ContextMenuOpenEventArgs extends BeforeOpenCloseMenuEventArgs {
        column?: Column;
        rowInfo?: RowInfo;
}
export interface ExcelExportCompleteArgs {
        /** Defines the promise object for blob data. */
        promise?: Promise<{
                blobData: Blob;
        }>;
}
export interface PdfExportCompleteArgs {
        /** Defines the promise object for blob data. */
        promise?: Promise<{
                blobData: Blob;
        }>;
}
export interface SelectionNotifyArgs extends NotifyArgs {
        row?: HTMLElement;
        CheckState?: boolean;
}
/**
    * @hidden
    */
export interface DataResult {
        result: Object[] | Group[];
        count: number;
        aggregates?: object;
}
export interface RowDropEventArgs extends RowDragEventArgs {
        cancel?: boolean;
}
export interface AggregateTemplateContext {
        /** Gets sum aggregate value */
        sum: string;
        /** Gets average aggregate value */
        average: string;
        /** Gets maximum aggregate value */
        max: string;
        /** Gets minimum aggregate value */
        min: string;
        /** Gets count aggregate value */
        count: string;
        /** Gets true count aggregate value */
        trueCount: string;
        /** Specifies false count aggregate value */
        falseCount: string;
        /** Gets custom aggregate value */
        custom: string;
        /** Gets the current group field name */
        field?: string;
        /** Gets header text of the grouped column */
        headerText?: string;
        /** Gets grouped data key value */
        key?: string;
        /** Gets corresponding grouped foreign key value */
        foreignKey?: string;
}
export interface PagerTemplateContext {
        /** Gets the current page number */
        currentPage?: number;
        /** Gets the page size number */
        pageSize?: number;
        /** Gets the page count */
        pageCount?: number;
        /** Gets the total records count */
        totalRecordsCount?: number;
        /** Gets the total number of pages */
        totalPages?: number;
}
export interface CaptionTemplateContext {
        GroupGuid?: string;
        /** Gets the current group field name */
        field?: string;
        /** Gets depth or level in which the group caption is present. */
        level?: number;
        /** Gets grouped data key value */
        key?: string;
        /** Gets corresponding grouped foreign key value */
        foreignKey?: string;
        /** Gets count value which specified the number of records in the group */
        count?: number;
        /** Gets header text of the grouped column */
        headerText?: string;
}
/**
    * @hidden
    */
export interface ActionArgs {
        /**
            * @blazorType string
            */
        requestType?: Action | string;
        type?: string;
        fromIndex?: number;
        toIndex?: number;
        toColumnUid?: string;
        fromColumnUid?: string[];
        isMultipleReorder?: boolean;
        virtualStartIndex?: number;
        virtualEndIndex?: number;
        startColumnIndex?: number;
        endColumnIndex?: number;
        axis?: string;
        translateX?: number;
        rHeight?: number;
        vTableWidth?: number;
}
export interface CheckBoxBeforeRenderer {
        dataSource?: object[];
        field?: string;
        executeQuery?: boolean;
}
export interface ColumnDeselectEventArgs {
        /** Defines the selected/deselected column index. */
        columnIndex?: number;
        /** Defines the selected/deselected column indexes. */
        columnIndexes?: number[];
        /** Defines the selected/deselected column. */
        headerCell?: Element | Element[];
        /** Defines the selected/deselected column */
        column?: Column;
        /** Defines the cancel option value. */
        cancel?: boolean;
        /** Defines the target element for column deselect. */
        target?: Element;
        /** Defines whether event is triggered by interaction or not. */
        isInteracted?: boolean;
}
export interface ColumnSelectEventArgs extends ColumnDeselectEventArgs {
        /** Defines the previously selected column index. */
        previousColumnIndex?: number;
        /** Defines the target element for column selection. */
        target?: Element;
}
export interface ColumnSelectingEventArgs extends ColumnSelectEventArgs {
        /** Defines whether CTRL key is pressed. */
        isCtrlPressed?: boolean;
        /** Defines whether SHIFT key is pressed. */
        isShiftPressed?: boolean;
}
/**
    * @hidden
    */
export interface ResponsiveDialogArgs {
        primaryKeyValue?: string[];
        rowData?: Object;
        dialog?: DialogModel;
        target?: HTMLElement;
        col?: Column;
        action?: ResponsiveDialogAction;
}
/**
    * @hidden
    */
export interface ExportHelperArgs extends PdfQueryCellInfoEventArgs {
        isForeignKey?: boolean;
}
/**
    * @hidden
    */
export interface ForeignKeyFormat {
        [key: string]: Object[];
}

/**
    * Function to check whether target object implement specific interface
    *
    * @param  {Object} target - specifies the target
    * @param  {string} checkFor - specifies the checkfors
    * @returns {boolean} returns the boolean
    * @hidden
    */
export function doesImplementInterface(target: Object, checkFor: string): boolean;
/**
    * Function to get value from provided data
    *
    * @param  {string} field - specifies the field
    * @param  {Object} data - specifies the data
    * @param  {ColumnModel} column - specifies the column
    * @returns {Object} returns the object
    * @hidden
    */
export function valueAccessor(field: string, data: Object, column: ColumnModel): Object;
/**
    * Defines the method used to apply custom header cell values from external function and display this on each header cell rendered.
    *
    * @param  {string} field - specifies the field
    * @param  {ColumnModel} column - specifies the column
    * @returns {object} headerValueAccessor
    * @hidden
    */
export function headerValueAccessor(field: string, column: ColumnModel): Object;
/**
    * The function used to update Dom using requestAnimationFrame.
    *
    * @param {Function} updateFunction - Function that contains the actual action
    * @param {object} callBack - defines the callback
    * @returns {void}
    * @hidden
    */
export function getUpdateUsingRaf<T>(updateFunction: Function, callBack: Function): void;
/**
    * @hidden
    * @param {PdfExportProperties | ExcelExportProperties} exportProperties - Defines the export properties
    * @returns {boolean} Returns isExportColumns
    */
export function isExportColumns(exportProperties: PdfExportProperties | ExcelExportProperties): boolean;
/**
    * @param {PdfExportProperties | ExcelExportProperties} exportProperties - Defines the export properties
    * @param {IGrid} gObj - Defines the grid object
    * @returns {void}
    * @hidden
    */
export function updateColumnTypeForExportColumns(exportProperties: PdfExportProperties | ExcelExportProperties, gObj: IGrid): void;
/**
    * @hidden
    * @param {IGrid} grid - Defines the grid
    * @returns {void}
    */
export function updatecloneRow(grid: IGrid): void;
/**
    * @hidden
    * @param {Row<Column>} val - Defines the value
    * @param {IGrid} grid - Defines the grid
    * @returns {number} Returns the collapsed row count
    */
export function getCollapsedRowsCount(val: Row<Column>, grid: IGrid): number;
/**
    * @param {Object[]} row - Defines the row
    * @returns {void}
    * @hidden
    */
export function recursive(row: Object[]): void;
/**
    * @param {Object[]} collection - Defines the array
    * @param {Object} predicate - Defines the predicate
    * @returns {Object} Returns the object
    * @hidden
    */
export function iterateArrayOrObject<T, U>(collection: U[], predicate: (item: Object, index: number) => T): T[];
/**
    * @param {Object[]} array - Defines the array
    * @returns {Object} Returns the object
    * @hidden
    */
export function iterateExtend(array: Object[]): Object[];
/**
    * @param {string} template - Defines the template
    * @returns {Function} Returns the function
    * @hidden
    */
export function templateCompiler(template: string): Function;
/**
    * @param {Element} node - Defines the column
    * @param {Object} customAttributes - Defines the index
    * @returns {void}
    * @hidden
    */
export function setStyleAndAttributes(node: Element, customAttributes: {
        [x: string]: Object;
}): void;
/**
    * @param {Object} copied - Defines the column
    * @param {Object} first - Defines the inndex
    * @param {Object} second - Defines the second object
    * @param {string[]} exclude - Defines the exclude
    * @returns {Object} Returns the object
    * @hidden
    */
export function extend(copied: Object, first: Object, second?: Object, exclude?: string[]): Object;
/**
    * @param {Column[]} columnModel - Defines the column
    * @param {number} ind - Defines the inndex
    * @returns {number} - Returns the columnindex
    * @hidden
    */
export function setColumnIndex(columnModel: Column[], ind?: number): number;
/**
    * @param {Column[] | string[] | ColumnModel[]} columns - Defines the column
    * @param {boolean} autoWidth - Defines the autowidth
    * @param {IGrid} gObj - Defines the class name
    * @returns {Column} - Returns the columns
    * @hidden
    */
export function prepareColumns(columns: Column[] | string[] | ColumnModel[], autoWidth?: boolean, gObj?: IGrid): Column[];
/**
    * @param {HTMLElement} popUp - Defines the popup element
    * @param {MouseEvent | TouchEvent} e - Defines the moouse event
    * @param {string} className - Defines the class name
    * @returns {void}
    * @hidden
    */
export function setCssInGridPopUp(popUp: HTMLElement, e: MouseEvent | TouchEvent, className: string): void;
/**
    * @param {Object} obj - Defines the object
    * @returns {Object} Returns the Properties
    * @hidden
    */
export function getActualProperties<T>(obj: T): T;
/**
    * @param {Element} elem - Defines the element
    * @param {string} selector - Defines the string selector
    * @param {boolean} isID - Defines the isID
    * @returns {Element} Returns the element
    * @hidden
    */
export function parentsUntil(elem: Element, selector: string, isID?: boolean): Element;
/**
    * @param {Element} element - Defines the element
    * @param {Element} elements - Defines the element
    * @returns {number} Returns the element index
    * @hidden
    */
export function getElementIndex(element: Element, elements: Element[]): number;
/**
    * @param {Object} value - Defines the value
    * @param {Object} collection - defines the collection
    * @returns {number} Returns the array
    * @hidden
    */
export function inArray(value: Object, collection: Object[]): number;
/**
    * @param {Object} collection - Defines the collection
    * @returns {Object} Returns the object
    * @hidden
    */
export function getActualPropFromColl(collection: Object[]): Object[];
/**
    * @param {Element} target - Defines the target element
    * @param {string} selector - Defines the selector
    * @returns {void}
    * @hidden
    */
export function removeElement(target: Element, selector: string): void;
/**
    * @param {MouseEvent | TouchEvent} e Defines the mouse event
    * @returns {IPosition} Returns the position
    * @hidden
    */
export function getPosition(e: MouseEvent | TouchEvent): IPosition;
/**
    * @param {string} prefix - Defines the prefix string
    * @returns {string} Returns the uid
    * @hidden
    */
export function getUid(prefix: string): string;
/**
    * @param {Element | DocumentFragment} elem - Defines the element
    * @param {Element[] | NodeList} children - Defines the Element
    * @returns {Element} Returns the element
    * @hidden
    */
export function appendChildren(elem: Element | DocumentFragment, children: Element[] | NodeList): Element;
/**
    * @param {Element} elem - Defines the element
    * @param {string} selector - Defines the selector
    * @param {boolean} isID - Defines isID
    * @returns {Element} Return the element
    * @hidden
    */
export function parents(elem: Element, selector: string, isID?: boolean): Element[];
/**
    * @param {AggregateType | string} type - Defines the type
    * @param {Object} data - Defines the data
    * @param {AggregateColumnModel} column - Defines the column
    * @param {Object} context - Defines the context
    * @returns {Object} Returns the calculated aggragate
    * @hidden
    */
export function calculateAggregate(type: AggregateType | string, data: Object, column?: AggregateColumnModel, context?: Object): Object;
/** @hidden
    * @returns {number} - Returns the scrollbarwidth
    */
export function getScrollBarWidth(): number;
/**
    * @param {HTMLElement} element - Defines the element
    * @returns {number} Returns the roww height
    * @hidden
    */
export function getRowHeight(element?: HTMLElement): number;
/**
    * @param {HTMLElement} element - Defines the HTMl element
    * @returns {number} Returns the row height
    * @hidden
    */
export function getActualRowHeight(element?: HTMLElement): number;
/**
    * @param {string} field - Defines the field
    * @returns {boolean} - Returns is complex field
    * @hidden
    */
export function isComplexField(field: string): boolean;
/**
    * @param {string} field - Defines the field
    * @returns {string} - Returns the get complex field ID
    * @hidden
    */
export function getComplexFieldID(field?: string): string;
/**
    * @param {string} field - Defines the field
    * @returns {string} - Returns the set complex field ID
    * @hidden
    */
export function setComplexFieldID(field?: string): string;
/**
    * @param {Column} col - Defines the column
    * @param {string} type - Defines the type
    * @param {Element} elem - Defines th element
    * @returns {boolean} Returns is Editable
    * @hidden
    */
export function isEditable(col: Column, type: string, elem: Element): boolean;
/**
    * @param {IGrid} inst - Defines the IGrid
    * @returns {boolean} Returns is action prevent in boolean
    * @hidden
    */
export function isActionPrevent(inst: IGrid): boolean;
/**
    * @param {any} elem - Defines the element
    * @param {boolean} action - Defines the boolean for action
    * @returns {void}
    * @hidden
    */
export function wrap(elem: any, action: boolean): void;
/**
    * @param {ServiceLocator} serviceLocator - Defines the service locator
    * @param {Column} column  - Defines the column
    * @returns {void}
    * @hidden
    */
export function setFormatter(serviceLocator?: ServiceLocator, column?: Column): void;
/**
    * @param {Element} cells - Defines the cell element
    * @param {boolean} add - Defines the add
    * @param {string} args - Defines the args
    * @returns {void}
    * @hidden
    */
export function addRemoveActiveClasses(cells: Element[], add: boolean, ...args: string[]): void;
/**
    * @param {string} result - Defines th string
    * @returns {string} Returns the distinct staing values
    * @hidden
    */
export function distinctStringValues(result: string[]): string[];
/**
    * @param {Element} target - Defines the target
    * @param {Dialog} dialogObj - Defines the dialog
    * @returns {void}
    * @hidden
    */
export function getFilterMenuPostion(target: Element, dialogObj: Dialog): void;
/**
    * @param {Object} args - Defines the args
    * @param {Popup} args.popup - Defines the args for popup
    * @param {Dialog} dialogObj - Defines the dialog obj
    * @returns {void}
    * @hidden
    */
export function getZIndexCalcualtion(args: {
        popup: Popup;
}, dialogObj: Dialog): void;
/**
    * @param {Element} elem - Defines the element
    * @returns {void}
    * @hidden
    */
export function toogleCheckbox(elem: Element): void;
/**
    * @param {HTMLInputElement} elem - Defines the element
    * @param {boolean} checked - Defines is checked
    * @returns {void}
    * @hidden
    */
export function setChecked(elem: HTMLInputElement, checked: boolean): void;
/**
    * @param {string} uid - Defines the string
    * @param {Element} elem - Defines the Element
    * @param {string} className - Defines the classname
    * @returns {Element} Returns the box wrap
    * @hidden
    */
export function createCboxWithWrap(uid: string, elem: Element, className?: string): Element;
/**
    * @param {Element} elem - Defines the element
    * @param {boolean} checked - Defines is checked
    * @returns {void}
    * @hidden
    */
export function removeAddCboxClasses(elem: Element, checked: boolean): void;
/**
    * Refresh the Row model's foreign data.
    *
    * @param {IRow<Column>} row - Grid Row model object.
    * @param {Column[]} columns - Foreign columns array.
    * @param {Object} data - Updated Row data.
    * @returns {void}
    * @hidden
    */
export function refreshForeignData(row: IRow<Column>, columns: Column[], data: Object): void;
/**
    * Get the foreign data for the corresponding cell value.
    *
    * @param {Column} column - Foreign Key column
    * @param {Object} data - Row data.
    * @param {string | number} lValue - cell value.
    * @param {Object} foreignKeyData - foreign data source.
    * @returns {Object} Returns the object
    * @hidden
    */
export function getForeignData(column: Column, data?: Object, lValue?: string | number, foreignKeyData?: Object[]): Object[];
/**
    * To use to get the column's object by the foreign key value.
    *
    * @param {string} foreignKeyValue - Defines ForeignKeyValue.
    * @param {Column[]} columns - Array of column object.
    * @returns {Column} Returns the element
    * @hidden
    */
export function getColumnByForeignKeyValue(foreignKeyValue: string, columns: Column[]): Column;
/**
    * @param {PredicateModel} filterObject - Defines the filterObject
    * @param {string} type - Defines the type
    * @returns {Predicate} Returns the Predicate
    * @hidden
    */
export function getDatePredicate(filterObject: PredicateModel, type?: string): Predicate;
/**
    * @param {Element} ele - Defines the element
    * @param {number} frzCols - Defines the frozen columns
    * @param {IGrid} gObj - Defines the IGrid
    * @returns {Element} Returns the element
    * @hidden
    */
export function renderMovable(ele: Element, frzCols: number, gObj?: IGrid): Element;
/**
    * @param {IGrid} grid - Defines the IGrid
    * @returns {boolean} Returns true if group adaptive is true
    * @hidden
    */
export function isGroupAdaptive(grid: IGrid): boolean;
/**
    * @param {string} field - Defines the Field
    * @param {Object} object - Defines the objec
    * @returns {any} Returns the object
    * @hidden
    */
export function getObject(field?: string, object?: Object): any;
/**
    * @param {string | Object} format - defines the format
    * @param {string} colType - Defines the coltype
    * @returns {string} Returns the custom Data format
    * @hidden
    */
export function getCustomDateFormat(format: string | Object, colType: string): string;
/**
    * @param {IGrid} gObj - Defines the IGrid
    * @param {HierarchyGridPrintMode} hierarchyPrintMode - Defines the hierarchyPrintMode
    * @returns {Object} Returns the object
    * @hidden
    */
export function getExpandedState(gObj: IGrid, hierarchyPrintMode: HierarchyGridPrintMode): {
        [index: number]: IExpandedRow;
};
/**
    * @param {IGrid} gObj - Defines the grid objct
    * @param {HierarchyGridPrintMode} hierarchyPrintMode - Defines the hierarchyPrintMode
    * @returns {IGrid} Returns the IGrid
    * @hidden
    */
export function getPrintGridModel(gObj: IGrid, hierarchyPrintMode?: HierarchyGridPrintMode): IGrid;
/**
    * @param {Object} copied - Defines the copied object
    * @param {Object} first - Defines the first object
    * @param {Object} second - Defines the second object
    * @param {boolean} deep - Defines the deep
    * @returns {Object} Returns the extended object
    * @hidden
    */
export function extendObjWithFn(copied: Object, first: Object, second?: Object, deep?: boolean): Object;
/**
    * @param {Column[]} column - Defines the Column
    * @returns {number} Returns the column Depth
    * @hidden
    */
export function measureColumnDepth(column: Column[]): number;
/**
    * @param {Column} col - Defines the Column
    * @param {number} index - Defines the index
    * @returns {number} Returns the depth
    * @hidden
    */
export function checkDepth(col: Column, index: number): number;
/**
    * @param {IGrid} gObj - Defines the IGrid
    * @param {PredicateModel[]} filteredCols - Defines the PredicateModel
    * @returns {void}
    * @hidden
    */
export function refreshFilteredColsUid(gObj: IGrid, filteredCols: PredicateModel[]): void;
/** @hidden */
export namespace Global {
        let timer: Object;
}
/**
    * @param {Element} element - Defines the element
    * @returns {Object} Returns the transform values
    * @hidden
    */
export function getTransformValues(element: Element): {
        width: number;
        height: number;
};
/**
    * @param {Element} rootElement - Defines the root Element
    * @param {Element} element - Defines the element
    * @returns {void}
    * @hidden
    */
export function applyBiggerTheme(rootElement: Element, element: Element): void;
/**
    * @param {HTMLElement} mTD - Defines the movable TD
    * @param {HTMLElement} fTD  - Defines the Frozen TD
    * @returns {void}
    * @hidden
    */
export function alignFrozenEditForm(mTD: HTMLElement, fTD: HTMLElement): void;
/**
    * @param {Element} row - Defines row element
    * @param {IGrid} gridObj - Defines grid object
    * @returns {boolean} Returns isRowEnteredInGrid
    * @hidden
    */
export function ensureLastRow(row: Element, gridObj: IGrid): boolean;
/**
    * @param {Element} row - Defines row element
    * @param {number} rowTop - Defines row top number
    * @returns {boolean} Returns first row is true
    * @hidden
    */
export function ensureFirstRow(row: Element, rowTop: number): boolean;
/**
    * @param {number} index - Defines index
    * @param {IGrid} gObj - Defines grid object
    * @returns {boolean} Returns isRowEnteredInGrid
    * @hidden
    */
export function isRowEnteredInGrid(index: number, gObj: IGrid): boolean;
/**
    * @param {IGrid} gObj - Defines the grid object
    * @param {Object} data - Defines the query
    * @returns {number} Returns the edited data index
    * @hidden
    */
export function getEditedDataIndex(gObj: IGrid, data: Object): number;
/**
    * @param {Object} args - Defines the argument
    * @param {Query} query - Defines the query
    * @returns {FilterStateObj} Returns the filter state object
    * @hidden
    */
export function eventPromise(args: Object, query: Query): FilterStateObj;
/**
    * @param {Query} query - Defines the query
    * @returns {Object} Returns the state event argument
    * @hidden
    */
export function getStateEventArgument(query: Query): Object;
/**
    * @param {IGrid} gObj - Defines the Igrid
    * @returns {boolean} Returns the ispercentageWidth
    * @hidden
    */
export function ispercentageWidth(gObj: IGrid): boolean;
/**
    * @param {IGrid} gObj - Defines the IGrid
    * @param {Row<Column>[]} rows - Defines the row
    * @param {HTMLTableRowElement[]} rowElms - Row elements
    * @param {number} index - Row index
    * @returns {void}
    * @hidden
    */
export function resetRowIndex(gObj: IGrid, rows: Row<Column>[], rowElms: HTMLTableRowElement[], index?: number): void;
/**
    * @param {IGrid} gObj - Defines the grid object
    * @param {Object} changes - Defines the changes
    * @param {string} type - Defines the type
    * @param {string} keyField - Defines the keyfield
    * @returns {void}
    * @hidden
    */
export function compareChanges(gObj: IGrid, changes: Object, type: string, keyField: string): void;
/**
    * @param {IGrid} gObj - Defines the grid object
    * @returns {void}
    * @hidden
    */
export function setRowElements(gObj: IGrid): void;
/**
    * @param {IGrid} gObj - Defines the grid object
    * @param {Cell<Column>} cells - Defines the callback function
    * @param {freezeTable} tableName - Defines the row
    * @returns {Cell<Column>[]} Returns the cell
    * @hidden
    */
export function splitFrozenRowObjectCells(gObj: IGrid, cells: Cell<Column>[], tableName: freezeTable): Cell<Column>[];
/** @hidden */
export function gridActionHandler(gObj: IGrid, callBack: Function, rows: Row<Column>[][] | Element[][], force?: boolean, rowObj?: Row<Column>[][]): void;
/**
    * @param {IGrid} gObj - Defines the grid
    * @returns {Row<Column>} Returns the row
    * @hidden
    */
export function getGridRowObjects(gObj: IGrid): Row<Column>[][];
/**
    * @param {IGrid} gObj - Defines the grid
    * @returns {Element} Returns the element
    * @hidden
    */
export function getGridRowElements(gObj: IGrid): Element[][];
/**
    * @param {Element} row - Defines the row
    * @param {number} start - Defines the start index
    * @param {number} end - Defines the end index
    * @returns {void}
    * @hidden
    */
export function sliceElements(row: Element, start: number, end: number): void;
/**
    * @param {IGrid} gObj - Defines the grid Object
    * @param {Column} col - Defines the column
    * @param {number} rowIndex - Defines the rowindex
    * @returns {Element} Returns the element
    * @hidden
    */
export function getCellsByTableName(gObj: IGrid, col: Column, rowIndex: number): Element[];
/**
    * @param {IGrid} gObj - Defines the column
    * @param {Column} col - Defines the index
    * @param {number} rowIndex - Defines the rules
    * @param {number} index - Defines the movable column rules
    * @returns {Element} Returns the Element
    * @hidden
    */
export function getCellByColAndRowIndex(gObj: IGrid, col: Column, rowIndex: number, index: number): Element;
/**
    * @param {Column} col - Defines the column
    * @param {number} index - Defines the index
    * @param {Object} rules - Defines the rules
    * @param {Object} mRules - Defines the movable column rules
    * @param {Object} frRules - Defines the Frozen rules
    * @param {number} len - Defines the length
    * @param {boolean} isCustom - Defines custom form validation
    * @returns {void}
    * @hidden
    */
export function setValidationRuels(col: Column, index: number, rules: Object, mRules: Object, frRules: Object, len: number, isCustom?: boolean): void;
/**
    * @param {IGrid} gObj - Defines the grid object
    * @returns {Element} Returns the Element
    * @hidden
    */
export function getMovableTbody(gObj: IGrid): Element;
/**
    * @param {IGrid} gObj - Defines the grid object
    * @returns {Element} Returns the Element
    * @hidden
    */
export function getFrozenRightTbody(gObj: IGrid): Element;
/**
    * @param {Element} tbody - Table body
    * @param {Element} mTbody - Movanle table body
    * @param {Element} frTbody - Frozen right table body
    * @param {Element[]} tr - Table rows
    * @param {Element[]} mTr - Movable table rows
    * @param {Element[]} frTr - Frozen right table rows
    * @param {Function} callBack - Callback function
    * @returns {void}
    * @hidden
    */
export function setRowsInTbody(tbody: Element, mTbody: Element, frTbody: Element, tr: Element[], mTr: Element[], frTr: Element[], callBack: Function): void;
/**
    * @param {string} numberFormat - Format
    * @param {string} type - Value type
    * @param {boolean} isExcel - Boolean property
    * @returns {string} returns formated value
    * @hidden
    */
export function getNumberFormat(numberFormat: string, type: string, isExcel: boolean): string;
/**
    * @param {IGrid} gObj - Grid instance
    * @returns {void}
    * @hidden
    */
export function addBiggerDialog(gObj: IGrid): void;
/**
    * @param {string} value - specifies the trr
    * @param {Object} mapObject - specifies the idx
    * @returns {Object | string} returns object or string
    * @hidden
    */
export function performComplexDataOperation(value: string, mapObject: Object): Object | string;
/**
    * @param {Object} tr - specifies the trr
    * @param {number} idx - specifies the idx
    * @param {string} displayVal - specifies the displayval
    * @param {Row<Column>} rows - specifies the rows
    * @param {IGrid} parent - Grid instance
    * @param {boolean} isContent - check for content renderer
    * @returns {void}
    * @hidden
    */
export function setDisplayValue(tr: Object, idx: number, displayVal: string, rows: Row<Column>[], parent?: IGrid, isContent?: boolean): void;
/** @hidden */
export function addRemoveEventListener(parent: IGrid, evt: {
        event: string;
        handler: Function;
}[], isOn: boolean, module?: Object): void;
/** @hidden */
export function createEditElement(parent: IGrid, column: Column, classNames: string, attr: {
        [key: string]: string;
}): Element;
/**
    * @param {IGrid} gObj - Grid instance
    * @param {string} uid - Defines column's uid
    * @returns {Column} returns column model
    * @hidden
    */
export function getColumnModelByUid(gObj: IGrid, uid: string): Column;
/**
    * @param {IGrid} gObj - Grid instance
    * @param {string} field - Defines column's uid
    * @returns {Column} returns column model
    * @hidden
    */
export function getColumnModelByFieldName(gObj: IGrid, field: string): Column;
/**
    * @param {string} id - Defines component id
    * @param {string[]} evts - Defines events
    * @param {object} handlers - Defines event handlers
    * @param {any} instance - Defines class instance
    * @returns {void}
    * @hidden
    */
export function registerEventHandlers(id: string, evts: string[], handlers: object, instance: any): void;
/**
    * @param {any} component - Defines component instance
    * @param {string[]} evts - Defines events
    * @param {any} instance - Defines class instance
    * @returns {void}
    * @hidden
    */
export function removeEventHandlers(component: any, evts: string[], instance: any): void;
/**
    * @param {IGrid | IXLFilter} parent - Defines parent instance
    * @param {string[]} templates - Defines the templates name which are needs to clear
    * @returns {void}
    * @hidden
    */
export function clearReactVueTemplates(parent: IGrid | IXLFilter, templates: string[]): void;
/**
    *
    * @param { Element } row - Defines row element
    * @returns { number } row index
    */
export function getRowIndexFromElement(row: Element): number;
/**
    *
    * @param { string[] } fields - Defines grouped fields
    * @param { values } values - Defines caption keys
    * @param { any } instance - Defines dynamic class instance
    * @returns { Predicate } returns filter predicate
    */
export function generateExpandPredicates(fields: string[], values: string[], instance: any): Predicate;
/**
    *
    * @param { Predicate } pred - Defines filter predicate
    * @returns { Predicate[] } Returns formed predicate
    */
export function getPredicates(pred: Predicate): Predicate[];
/**
    *
    * @param { number } index - Defines group caption indent
    * @param { Row<Column>[] } rowsObject - Defines rows object
    * @returns { { fields: string[], keys: string[] } } Returns grouped keys and values
    */
export function getGroupKeysAndFields(index: number, rowsObject: Row<Column>[]): {
        fields: string[];
        keys: string[];
};

/**
  * Exports types used by Grid.
  */
export type ValueType = number | string | Date | boolean;
export type ValueAccessor = (field: string, data: Object, column: ColumnModel) => Object;
export type HeaderValueAccessor = (field: string, column: ColumnModel) => Object;
export type SortComparer = (x: ValueType, y: ValueType) => number;
export type CustomSummaryType = (data: Object[] | Object, column: AggregateColumnModel) => Object;
export type ReturnType = {
    result: Object[];
    count: number;
    aggregates?: Object;
    foreignColumnsData?: Object;
};
export type SentinelType = {
    check?: (rect: ClientRect, info: SentinelType) => boolean;
    top?: number;
    entered?: boolean;
    axis?: string;
};
export type SentinelInfo = {
    up?: SentinelType;
    down?: SentinelType;
    right?: SentinelType;
    left?: SentinelType;
};
export type Offsets = {
    top?: number;
    left?: number;
};
export type BatchChanges = {
    addedRecords?: Object[];
    changedRecords?: Object[];
    deletedRecords?: Object[];
};

/** @hidden */
export const created: string;
/** @hidden */
export const destroyed: string;
/** @hidden */
export const load: string;
/** @hidden */
export const rowDataBound: string;
/** @hidden */
export const queryCellInfo: string;
/** @hidden */
export const headerCellInfo: string;
/** @hidden */
export const actionBegin: string;
/** @hidden */
export const actionComplete: string;
/** @hidden */
export const actionFailure: string;
/** @hidden */
export const dataBound: string;
/** @hidden */
export const rowSelecting: string;
/** @hidden */
export const rowSelected: string;
/** @hidden */
export const rowDeselecting: string;
/** @hidden */
export const rowDeselected: string;
/** @hidden */
export const cellSelecting: string;
/** @hidden */
export const cellSelected: string;
/** @hidden */
export const cellDeselecting: string;
/** @hidden */
export const cellDeselected: string;
/** @hidden */
export const columnSelecting: string;
/** @hidden */
export const columnSelected: string;
/** @hidden */
export const columnDeselecting: string;
/** @hidden */
export const columnDeselected: string;
/** @hidden */
export const columnDragStart: string;
/** @hidden */
export const columnDrag: string;
/** @hidden */
export const columnDrop: string;
/** @hidden */
export const rowDragStartHelper: string;
/** @hidden */
export const rowDragStart: string;
/** @hidden */
export const rowDrag: string;
/** @hidden */
export const rowDrop: string;
/** @hidden */
export const beforePrint: string;
/** @hidden */
export const printComplete: string;
/** @hidden */
export const detailDataBound: string;
/** @hidden */
export const toolbarClick: string;
/** @hidden */
export const batchAdd: string;
/** @hidden */
export const batchCancel: string;
/** @hidden */
export const batchDelete: string;
/** @hidden */
export const beforeBatchAdd: string;
/** @hidden */
export const beforeBatchDelete: string;
/** @hidden */
export const beforeBatchSave: string;
/** @hidden */
export const beginEdit: string;
/** @hidden */
export const cellEdit: string;
/** @hidden */
export const cellSave: string;
/** @hidden */
export const cellSaved: string;
/** @hidden */
export const endAdd: string;
/** @hidden */
export const endDelete: string;
/** @hidden */
export const endEdit: string;
/** @hidden */
export const recordDoubleClick: string;
/** @hidden */
export const recordClick: string;
/** @hidden */
export const beforeDataBound: string;
/** @hidden */
export const beforeOpenColumnChooser: string;
/** @hidden */
export const beforeOpenAdaptiveDialog: string;
/** @hidden */
export const resizeStart: string;
/** @hidden */
export const onResize: string;
/** @hidden */
export const resizeStop: string;
/** @hidden */
export const checkBoxChange: string;
/** @hidden */
export const beforeCopy: string;
/** @hidden */
export const beforePaste: string;
/** @hidden */
export const beforeAutoFill: string;
/** @hidden */
export const filterChoiceRequest: string;
/** @hidden */
export const filterAfterOpen: string;
/** @hidden */
export const filterBeforeOpen: string;
/** @hidden */
export const filterSearchBegin: string;
/** @hidden */
export const commandClick: string;
/** @hidden */
export const exportGroupCaption: string;
/** @hidden */
export const lazyLoadGroupExpand: string;
/** @hidden */
export const lazyLoadGroupCollapse: string;
/** @hidden */
export const initialLoad: string;
/** @hidden */
export const initialEnd: string;
/** @hidden */
export const dataReady: string;
/** @hidden */
export const contentReady: string;
/** @hidden */
export const uiUpdate: string;
/** @hidden */
export const onEmpty: string;
/** @hidden */
export const inBoundModelChanged: string;
/** @hidden */
export const modelChanged: string;
/** @hidden */
export const colGroupRefresh: string;
/** @hidden */
export const headerRefreshed: string;
/** @hidden */
export const pageBegin: string;
/** @hidden */
export const pageComplete: string;
/** @hidden */
export const sortBegin: string;
/** @hidden */
export const sortComplete: string;
/** @hidden */
export const filterBegin: string;
/** @hidden */
export const filterComplete: string;
/** @hidden */
export const searchBegin: string;
/** @hidden */
export const searchComplete: string;
/** @hidden */
export const reorderBegin: string;
/** @hidden */
export const reorderComplete: string;
/** @hidden */
export const rowDragAndDropBegin: string;
/** @hidden */
export const rowDragAndDropComplete: string;
/** @hidden */
export const groupBegin: string;
/** @hidden */
export const groupComplete: string;
/** @hidden */
export const ungroupBegin: string;
/** @hidden */
export const ungroupComplete: string;
/** @hidden */
export const groupAggregates: string;
/** @hidden */
export const refreshFooterRenderer: string;
/** @hidden */
export const refreshAggregateCell: string;
/** @hidden */
export const refreshAggregates: string;
/** @hidden */
export const rowSelectionBegin: string;
/** @hidden */
export const rowSelectionComplete: string;
/** @hidden */
export const columnSelectionBegin: string;
/** @hidden */
export const columnSelectionComplete: string;
/** @hidden */
export const cellSelectionBegin: string;
/** @hidden */
export const cellSelectionComplete: string;
/** @hidden */
export const beforeCellFocused: string;
/** @hidden */
export const cellFocused: string;
/** @hidden */
export const keyPressed: string;
/** @hidden */
export const click: string;
/** @hidden */
export const destroy: string;
/** @hidden */
export const columnVisibilityChanged: string;
/** @hidden */
export const scroll: string;
/** @hidden */
export const columnWidthChanged: string;
/** @hidden */
export const columnPositionChanged: string;
/** @hidden */
export const rowDragAndDrop: string;
/** @hidden */
export const rowsAdded: string;
/** @hidden */
export const rowsRemoved: string;
/** @hidden */
export const columnDragStop: string;
/** @hidden */
export const headerDrop: string;
/** @hidden */
export const dataSourceModified: string;
/** @hidden */
export const refreshComplete: string;
/** @hidden */
export const refreshVirtualBlock: string;
/** @hidden */
export const dblclick: string;
/** @hidden */
export const toolbarRefresh: string;
/** @hidden */
export const bulkSave: string;
/** @hidden */
export const autoCol: string;
/** @hidden */
export const tooltipDestroy: string;
/** @hidden */
export const updateData: string;
/** @hidden */
export const editBegin: string;
/** @hidden */
export const editComplete: string;
/** @hidden */
export const addBegin: string;
/** @hidden */
export const addComplete: string;
/** @hidden */
export const saveComplete: string;
/** @hidden */
export const deleteBegin: string;
/** @hidden */
export const deleteComplete: string;
/** @hidden */
export const preventBatch: string;
/** @hidden */
export const dialogDestroy: string;
/** @hidden */
export const crudAction: string;
/** @hidden */
export const addDeleteAction: string;
/** @hidden */
export const destroyForm: string;
/** @hidden */
export const doubleTap: string;
/** @hidden */
export const beforeExcelExport: string;
/** @hidden */
export const excelExportComplete: string;
/** @hidden */
export const excelQueryCellInfo: string;
/** @hidden */
export const excelHeaderQueryCellInfo: string;
/** @hidden */
export const exportDetailDataBound: string;
/** @hidden */
export const beforePdfExport: string;
/** @hidden */
export const pdfExportComplete: string;
/** @hidden */
export const pdfQueryCellInfo: string;
/** @hidden */
export const pdfHeaderQueryCellInfo: string;
/** @hidden */
export const accessPredicate: string;
/** @hidden */
export const contextMenuClick: string;
/** @hidden */
export const freezeRender: string;
/** @hidden */
export const freezeRefresh: string;
/** @hidden */
export const contextMenuOpen: string;
/** @hidden */
export const columnMenuClick: string;
/** @hidden */
export const columnMenuOpen: string;
/** @hidden */
export const filterOpen: string;
/** @hidden */
export const filterDialogCreated: string;
/** @hidden */
export const filterMenuClose: string;
/** @hidden */
export const initForeignKeyColumn: string;
/** @hidden */
export const getForeignKeyData: string;
/** @hidden */
export const generateQuery: string;
/** @hidden */
export const showEmptyGrid: string;
/** @hidden */
export const foreignKeyData: string;
/** @hidden */
export const columnDataStateChange: string;
/** @hidden */
export const dataStateChange: string;
/** @hidden */
export const dataSourceChanged: string;
/** @hidden */
export const rtlUpdated: string;
/** @hidden */
export const beforeFragAppend: string;
/** @hidden */
export const frozenHeight: string;
/** @hidden */
export const textWrapRefresh: string;
/** @hidden */
export const recordAdded: string;
/** @hidden */
export const cancelBegin: string;
/** @hidden */
export const editNextValCell: string;
/** @hidden */
export const hierarchyPrint: string;
/** @hidden */
export const expandChildGrid: string;
/** @hidden */
export const printGridInit: string;
/** @hidden */
export const exportRowDataBound: string;
/** @hidden */
export const exportDataBound: string;
/** @hidden */
export const rowPositionChanged: string;
/** @hidden */
export const columnChooserOpened: string;
/** @hidden */
export const batchForm: string;
/** @hidden */
export const beforeStartEdit: string;
/** @hidden */
export const beforeBatchCancel: string;
/** @hidden */
export const batchEditFormRendered: string;
/** @hidden */
export const partialRefresh: string;
/** @hidden */
export const beforeCustomFilterOpen: string;
/** @hidden */
export const selectVirtualRow: string;
/** @hidden */
export const columnsPrepared: string;
/** @hidden */
export const cBoxFltrBegin: string;
/** @hidden */
export const cBoxFltrComplete: string;
/** @hidden */
export const fltrPrevent: string;
/** @hidden */
export const beforeFltrcMenuOpen: string;
/** @hidden */
export const valCustomPlacement: string;
/** @hidden */
export const filterCboxValue: string;
/** @hidden */
export const componentRendered: string;
/** @hidden */
export const restoreFocus: string;
/** @hidden */
export const detailStateChange: string;
/** @hidden */
export const detailIndentCellInfo: string;
/** @hidden */
export const virtaulKeyHandler: string;
/** @hidden */
export const virtaulCellFocus: string;
/** @hidden */
export const virtualScrollEditActionBegin: string;
/** @hidden */
export const virtualScrollEditSuccess: string;
/** @hidden */
export const virtualScrollEditCancel: string;
/** @hidden */
export const virtualScrollEdit: string;
/** @hidden */
export const refreshVirtualCache: string;
/** @hidden */
export const editReset: string;
/** @hidden */
export const virtualScrollAddActionBegin: string;
/** @hidden */
export const getVirtualData: string;
/** @hidden */
export const refreshInfiniteModeBlocks: string;
/** @hidden */
export const resetInfiniteBlocks: string;
/** @hidden */
export const infiniteScrollHandler: string;
/** @hidden */
export const infinitePageQuery: string;
/** @hidden */
export const infiniteShowHide: string;
/** @hidden */
export const appendInfiniteContent: string;
/** @hidden */
export const removeInfiniteRows: string;
/** @hidden */
export const setInfiniteCache: string;
/** @hidden */
export const infiniteEditHandler: string;
/** @hidden */
export const initialCollapse: string;
/** @hidden */
export const getAggregateQuery: string;
/** @hidden */
export const closeFilterDialog: string;
/** @hidden */
export const columnChooserCancelBtnClick: string;
/** @hidden */
export const getFilterBarOperator: string;
/** @hidden */
export const resetColumns: string;
/** @hidden */
export const pdfAggregateQueryCellInfo: string;
/** @hidden */
export const excelAggregateQueryCellInfo: string;
/** @hidden */
export const setGroupCache: string;
/** @hidden */
export const lazyLoadScrollHandler: string;
/** @hidden */
export const groupCollapse: string;
/** @hidden */
export const beforeCheckboxRenderer: string;
/** @hidden */
export const refreshHandlers: string;
/** @hidden */
export const refreshFrozenColumns: string;
/** @hidden */
export const setReorderDestinationElement: string;
/** @hidden */
export const refreshVirtualFrozenHeight: string;
/** @hidden */
export const setFreezeSelection: string;
/** @hidden */
export const setInfiniteFrozenHeight: string;
/** @hidden */
export const setInfiniteColFrozenHeight: string;
/** @hidden */
export const beforeRefreshOnDataChange: string;
/** @hidden */
export const immutableBatchCancel: string;
/** @hidden */
export const refreshVirtualFrozenRows: string;
/** @hidden */
export const checkScrollReset: string;
/** @hidden */
export const refreshFrozenHeight: string;
/** @hidden */
export const setHeightToFrozenElement: string;
/** @hidden */
export const preventFrozenScrollRefresh: string;
/** @hidden */
export const nextCellIndex: string;
/** @hidden */
export const refreshInfiniteCurrentViewData: string;
/** @hidden */
export const infiniteCrudCancel: string;
/** @hidden */
export const filterDialogClose: string;
/** @hidden */
export const refreshCustomFilterOkBtn: string;
/** @hidden */
export const refreshCustomFilterClearBtn: string;
/** @hidden */
export const renderResponsiveCmenu: string;
/** @hidden */
export const filterCmenuSelect: string;
/** @hidden */
export const customFilterClose: string;
/** @hidden */
export const setFullScreenDialog: string;
/** @hidden */
export const refreshExpandandCollapse: string;
/** @hidden */
export const rowModeChange: string;
/** @hidden */
export const enterKeyHandler: string;
/** @hidden */
export const refreshVirtualMaxPage: string;
/** @hidden */
export const setVirtualPageQuery: string;
/** @hidden */
export const selectRowOnContextOpen: string;
/** @hidden */
export const pagerRefresh: string;
/** @hidden */
export const closeInline: string;
/** @hidden */
export const closeBatch: string;
/** @hidden */
export const closeEdit: string;
/** @hidden */
export const resetVirtualFocus: string;
/** @hidden */
export const afterContentRender: string;
/** @hidden */
export const refreshVirtualEditFormCells: string;
/** @hidden */
export const scrollToEdit: string;
/** @hidden */
export const beforeCheckboxRendererQuery: string;
/** @hidden */
export const createVirtualValidationForm: string;
/** @hidden */
export const validateVirtualForm: string;
/** @hidden */
export const destroyChildGrid: string;
/** @hidden */
export const stickyScrollComplete: string;
/** @hidden */
export const captionActionComplete: string;
/** @hidden */
export const refreshInfinitePersistSelection: string;

/**
    * Specifies class names
    */
/** @hidden */
export const rowCell: string;
/** @hidden */
export const gridHeader: string;
/** @hidden */
export const gridContent: string;
/** @hidden */
export const gridFooter: string;
/** @hidden */
export const headerContent: string;
/** @hidden */
export const movableContent: string;
/** @hidden */
export const movableHeader: string;
/** @hidden */
export const frozenContent: string;
/** @hidden */
export const frozenHeader: string;
/** @hidden */
export const content: string;
/** @hidden */
export const table: string;
/** @hidden */
export const row: string;
/** @hidden */
export const gridChkBox: string;
/** @hidden */
export const editedRow: string;
/** @hidden */
export const addedRow: string;
/** @hidden */
export const changedRecords: string;
/** @hidden */
export const addedRecords: string;
/** @hidden */
export const deletedRecords: string;
/** @hidden */
export const leftRight: string;
/** @hidden */
export const frozenRight: string;
/** @hidden */
export const frozenLeft: string;
/** @hidden */
export const ariaColIndex: string;
/** @hidden */
export const ariaRowIndex: string;
/** @hidden */
export const tbody: string;
/** @hidden */
export const colGroup: string;
/** @hidden */
export const open: string;
/** @hidden */
export const change: string;
/** @hidden */
export const focus: string;
/** @hidden */
export const create: string;
/** @hidden */
export const beforeOpen: string;
/** @hidden */
export const downArrow: FocusKeys;
/** @hidden */
export const upArrow: FocusKeys;
/** @hidden */
export const pageUp: FocusKeys;
/** @hidden */
export const pageDown: FocusKeys;
/** @hidden */
export const enter: FocusKeys;
/** @hidden */
export const shiftEnter: FocusKeys;
/** @hidden */
export const tab: FocusKeys;
/** @hidden */
export const shiftTab: FocusKeys;

/**
    * Grid data module is used to generate query and data source.
    *
    * @hidden
    */
export class Data implements IDataProcessor {
        dataManager: DataManager;
        /** @hidden */
        isQueryInvokedFromData: boolean;
        protected parent: IGrid;
        protected serviceLocator: ServiceLocator;
        protected dataState: PendingState;
        foreignKeyDataState: PendingState;
        /**
            * Constructor for data module.
            *
            * @param {IGrid} parent - specifies the IGrid
            * @param {ServiceLocator} serviceLocator - specifies the service locator
            * @hidden
            */
        constructor(parent?: IGrid, serviceLocator?: ServiceLocator);
        protected getModuleName(): string;
        /**
            * The function is used to generate updated Query from Grid model.
            *
            * @param {boolean} skipPage - specifies the boolean to skip the page
            * @returns {Query} returns the Query
            * @hidden
            */
        generateQuery(skipPage?: boolean): Query;
        /**
            * @param {Query} query - specifies the query
            * @returns {Query} - returns the query
            * @hidden
            */
        aggregateQuery(query: Query): Query;
        protected virtualGroupPageQuery(query: Query): Query;
        protected pageQuery(query: Query, skipPage?: boolean): Query;
        protected groupQuery(query: Query): Query;
        protected sortQuery(query: Query): Query;
        protected searchQuery(query: Query, fcolumn?: Column, isForeignKey?: boolean): Query;
        protected filterQuery(query: Query, column?: PredicateModel[], skipFoerign?: boolean): Query;
        /**
            * The function is used to get dataManager promise by executing given Query.
            *
            * @param {object} args - specifies the object
            * @param {string} args.requestType - Defines the request type
            * @param {string[]} args.foreignKeyData - Defines the foreignKeyData.string
            * @param {Object} args.data - Defines the data.
            * @param {number} args.index - Defines the index .
            * @param {Query} query - Defines the query which will execute along with data processing.
            * @returns {Promise<Object>} - returns the object
            * @hidden
            */
        getData(args?: {
                requestType?: string;
                foreignKeyData?: string[];
                data?: Object;
                index?: number;
        }, query?: Query): Promise<Object>;
        /**
            * @param {object} changes - specifies the changes
            * @param {string} key - specifies the key
            * @param {object} original - specifies the original data
            * @param {Query} query - specifies the query
            * @returns {Promise<Object>} returns the object
            * @hidden
            */
        saveChanges(changes: Object, key: string, original: Object, query?: Query): Promise<Object>;
        /**
            * @returns {boolean} returns whether its remote data
            * @hidden
            */
        isRemote(): boolean;
        protected destroy(): void;
        getState(): PendingState;
        setState(state: PendingState): Object;
        getForeignKeyDataState(): PendingState;
        setForeignKeyDataState(state: PendingState): void;
        getStateEventArgument(query: Query): PendingState;
}

/**
    *
    * The `Sort` module is used to handle sorting action.
    */
export class Sort implements IAction {
        /** @hidden */
        parent: IGrid;
        /** @hidden */
        responsiveDialogRenderer: ResponsiveDialogRenderer;
        /** @hidden */
        serviceLocator: ServiceLocator;
        /**
            * Constructor for Grid sorting module
            *
            * @param {IGrid} parent - specifies the IGrid
            * @param {SortSettings} sortSettings - specifies the SortSettings
            * @param {string[]} sortedColumns - specifies the string
            * @param {ServiceLocator} locator - specifies the ServiceLocator
            * @hidden
            */
        constructor(parent?: IGrid, sortSettings?: SortSettings, sortedColumns?: string[], locator?: ServiceLocator);
        /**
            * The function used to update sortSettings
            *
            * @returns {void}
            * @hidden
            */
        updateModel(): void;
        /**
            * The function used to trigger onActionComplete
            *
            * @param {NotifyArgs} e - specifies the NotifyArgs
            * @returns {void}
            * @hidden
            */
        onActionComplete(e: NotifyArgs): void;
        /**
            * Sorts a column with the given options.
            *
            * @param {string} columnName - Defines the column name to sort.
            * @param {SortDirection} direction - Defines the direction of sorting field.
            * @param {boolean} isMultiSort - Specifies whether the previously sorted columns are to be maintained.
            * @returns {void}
            */
        sortColumn(columnName: string, direction: SortDirection, isMultiSort?: boolean): void;
        /**
            * @param {NotifyArgs} e - specifies the NotifyArgs
            * @returns {void}
            * @hidden
            */
        onPropertyChanged(e: NotifyArgs): void;
        /**
            * Clears all the sorted columns of the Grid.
            *
            * @returns {void}
            */
        clearSorting(): void;
        /**
            * Remove sorted column by field name.
            *
            * @param {string} field - Defines the column field name to remove sort.
            * @returns {void}
            * @hidden
            */
        removeSortColumn(field: string): void;
        /**
            * For internal use only - Get the module name.
            *
            * @returns {string} returns the module name
            * @private
            */
        protected getModuleName(): string;
        /**
            * @returns {void}
            * @hidden
            */
        addEventListener(): void;
        /**
            * @returns {void}
            * @hidden
            */
        removeEventListener(): void;
        /**
            * To destroy the sorting
            *
            * @returns {void}
            * @hidden
            */
        destroy(): void;
        /**
            * To show the responsive custom sort dialog
            *
            * @param {boolean} enable - specifes dialog open
            * @returns {void}
            * @hidden
            */
        showCustomSort(enable: boolean): void;
}

/**
    * The `Page` module is used to render pager and handle paging action.
    */
export class Grid_Page implements IAction {
        /** @hidden */
        pagerObj: Pager;
        /**
            * Constructor for the Grid paging module
            *
            * @param {IGrid} parent - specifies the IGrid
            * @param {PageSettingsModel} pageSettings - specifies the PageSettingsModel
            * @hidden
            */
        constructor(parent?: IGrid, pageSettings?: PageSettingsModel);
        /**
            * For internal use only - Get the module name.
            *
            * @returns {string} returns the module name
            * @private
            */
        protected getModuleName(): string;
        /**
            * The function used to render pager from grid pageSettings
            *
            * @returns {void}
            * @hidden
            */
        render(): void;
        /**
            * Refreshes the page count, pager information, and external message.
            *
            * @returns {void}
            */
        refresh(): void;
        /**
            * Navigates to the target page according to the given number.
            *
            * @param  {number} pageNo - Defines the page number to navigate.
            * @returns {void}
            */
        goToPage(pageNo: number): void;
        /**
            * @param {number} pageSize - specifies the page size
            * @returns {void}
            * @hidden
            */
        setPageSize(pageSize: number): void;
        /**
            * The function used to update pageSettings model
            *
            * @param {NotifyArgs} e - specfies the NotifyArgs
            * @returns {void}
            * @hidden
            */
        updateModel(e?: NotifyArgs): void;
        /**
            * The function used to trigger onActionComplete
            *
            * @param {NotifyArgs} e - specifies the NotifyArgs
            * @returns {void}
            * @hidden
            */
        onActionComplete(e: NotifyArgs): void;
        /**
            * @param {NotifyArgs} e - specifies the NotifyArgs
            * @returns {void}
            * @hidden
            */
        onPropertyChanged(e: NotifyArgs): void;
        /**
            * Defines the text of the external message.
            *
            * @param  {string} message - Defines the message to update.
            * @returns {void}
            */
        updateExternalMessage(message: string): void;
        /**
            * @returns {void}
            * @hidden
            */
        addEventListener(): void;
        /**
            * @returns {void}
            * @hidden
            */
        removeEventListener(): void;
        /**
            * To destroy the pager
            *
            * @returns {void}
            * @hidden
            */
        destroy(): void;
}

/**
    * The `Selection` module is used to handle cell and row selection.
    */
export class GridSelection implements IAction {
        /**
            * @hidden
            */
        selectedRowIndexes: number[];
        /**
            * @hidden
            */
        selectedRowCellIndexes: ISelectedCell[];
        /**
            * @hidden
            */
        selectedRecords: Element[];
        /**
            * @hidden
            */
        isRowSelected: boolean;
        /**
            * @hidden
            */
        isCellSelected: boolean;
        /**
            * @hidden
            */
        preventFocus: boolean;
        /**
            * @hidden
            */
        prevRowIndex: number;
        /**
            *  @hidden
            */
        selectedColumnsIndexes: number[];
        isColumnSelected: boolean;
        checkBoxState: boolean;
        /** @hidden */
        isInteracted: boolean;
        /**
            * @hidden
            */
        index: number;
        /**
            * @hidden
            */
        autoFillRLselection: boolean;
        /**
            * Constructor for the Grid selection module
            *
            * @param {IGrid} parent - specifies the IGrid
            * @param {SelectionSettings} selectionSettings - specifies the selectionsettings
            * @param {ServiceLocator} locator - specifies the ServiceLocator
            * @hidden
            */
        constructor(parent?: IGrid, selectionSettings?: SelectionSettings, locator?: ServiceLocator);
        /**
            * The function used to trigger onActionBegin
            *
            * @param {Object} args - specifies the args
            * @param {string} type - specifies the type
            * @returns {void}
            * @hidden
            */
        onActionBegin(args: Object, type: string): void;
        /**
            * The function used to trigger onActionComplete
            *
            * @param {Object} args - specifies the args
            * @param {string} type - specifies the type
            * @returns {void}
            * @hidden
            */
        onActionComplete(args: Object, type: string): void;
        /**
            * For internal use only - Get the module name.
            *
            * @returns {string} returns the module name
            * @private
            */
        protected getModuleName(): string;
        /**
            * To destroy the selection
            *
            * @returns {void}
            * @hidden
            */
        destroy(): void;
        getCurrentBatchRecordChanges(): Object[];
        /**
            * Selects a row by the given index.
            *
            * @param  {number} index - Defines the row index.
            * @param  {boolean} isToggle - If set to true, then it toggles the selection.
            * @returns {void}
            */
        selectRow(index: number, isToggle?: boolean): void;
        /**
            * Selects a range of rows from start and end row indexes.
            *
            * @param  {number} startIndex - Specifies the start row index.
            * @param  {number} endIndex - Specifies the end row index.
            * @returns {void}
            */
        selectRowsByRange(startIndex: number, endIndex?: number): void;
        /**
            * Selects a collection of rows by index.
            *
            * @param  {number[]} rowIndexes - Specifies an array of row indexes.
            * @returns {void}
            */
        selectRows(rowIndexes: number[]): void;
        /**
            * Select rows with existing row selection by passing row indexes.
            *
            * @param {number} rowIndexes - Specifies the row indexes.
            * @returns {void}
            * @hidden
            */
        addRowsToSelection(rowIndexes: number[]): void;
        /**
            * Deselects the currently selected rows and cells.
            *
            * @returns {void}
            */
        clearSelection(): void;
        /**
            * Deselects the currently selected rows.
            *
            * @returns {void}
            */
        clearRowSelection(): void;
        /**
            * Selects a cell by the given index.
            *
            * @param  {IIndex} cellIndex - Defines the row and column indexes.
            * @param  {boolean} isToggle - If set to true, then it toggles the selection.
            * @returns {void}
            */
        selectCell(cellIndex: IIndex, isToggle?: boolean): void;
        /**
            * Selects a range of cells from start and end indexes.
            *
            * @param  {IIndex} startIndex - Specifies the row and column's start index.
            * @param  {IIndex} endIndex - Specifies the row and column's end index.
            * @returns {void}
            */
        selectCellsByRange(startIndex: IIndex, endIndex?: IIndex): void;
        /**
            * Selects a collection of cells by row and column indexes.
            *
            * @param  {ISelectedCell[]} rowCellIndexes - Specifies the row and column indexes.
            * @returns {void}
            */
        selectCells(rowCellIndexes: ISelectedCell[]): void;
        /**
            * Select cells with existing cell selection by passing row and column index.
            *
            * @param {IIndex} cellIndexes - Defines the collection of row and column index.
            * @returns {void}
            * @hidden
            */
        addCellsToSelection(cellIndexes: IIndex[]): void;
        /**
            * Deselects the currently selected cells.
            *
            * @returns {void}
            */
        clearCellSelection(): void;
        /**
            * @returns {void}
            * @hidden
            */
        updateAutoFillPosition(): void;
        /**
            * @returns {void}
            * @hidden
            */
        addEventListener(): void;
        /**
            * @returns {void}
            * @hidden
            */
        removeEventListener(): void;
        beforeFragAppend(e: {
                requestType: string;
        }): void;
        /**
            * Apply ctrl + A key selection
            *
            * @returns {void}
            * @hidden
            */
        ctrlPlusA(): void;
        /**
            * Apply shift+down key selection
            *
            * @param {number} rowIndex - specfies the rowIndex
            * @param {number} cellIndex - specifies the CellIndex
            * @returns {void}
            * @hidden
            */
        shiftDownKey(rowIndex?: number, cellIndex?: number): void;
        /**
            * Gets the collection of selected records.
            *
            * @returns {Object[]} returns the Object
            */
        getSelectedRecords(): Object[];
        /**
            * Select the column by passing start column index
            *
            * @param {number} index - specifies the index
            * @returns {void}
            */
        selectColumn(index: number): void;
        /**
            * Select the columns by passing start and end column index
            *
            * @param  {number} startIndex - specifies the start index
            * @param  {number} endIndex - specifies the end index
            * @returns {void}
            */
        selectColumnsByRange(startIndex: number, endIndex?: number): void;
        /**
            * Select the columns by passing column indexes
            *
            * @param  {number[]} columnIndexes - specifies the columnIndexes
            * @returns {void}
            */
        selectColumns(columnIndexes: number[]): void;
        /**
            * Select the column with existing column by passing column index
            *
            * @param  {number} startIndex - specifies the start index
            * @returns {void}
            */
        selectColumnWithExisting(startIndex: number): void;
        /**
            * Clear the column selection
            *
            * @param {number} clearIndex - specifies the clearIndex
            * @returns {void}
            */
        clearColumnSelection(clearIndex?: number): void;
        removeEventListener_checkbox(): void;
        dataReady(e: {
                requestType: string;
        }): void;
}

/**
    *
    * The `Filter` module is used to handle filtering action.
    */
export class Filter implements IAction {
        operators: Object;
        /** @hidden */
        filterModule: {
                openDialog: Function;
                closeDialog: Function;
                destroy: Function;
                isresetFocus: boolean;
                getFilterUIInfo: Function;
                clearCustomFilter: Function;
                closeResponsiveDialog: Function;
                applyCustomFilter: Function;
                renderCheckBoxMenu?: Function;
        };
        /** @hidden */
        filterOperators: IFilterOperator;
        customOperators: Object;
        /** @hidden */
        skipNumberInput: string[];
        skipStringInput: string[];
        /** @hidden */
        parent: IGrid;
        /** @hidden */
        serviceLocator: ServiceLocator;
        prevFilterObject: PredicateModel;
        filterObjIndex: number;
        /** @hidden */
        responsiveDialogRenderer: ResponsiveDialogRenderer;
        menuOperator: {
                [key: string]: Object;
        }[];
        /**
            * Constructor for Grid filtering module
            *
            * @param {IGrid} parent - specifies the IGrid
            * @param {FilterSettings} filterSettings - specifies the filterSettings
            * @param {ServiceLocator} serviceLocator - specifes the serviceLocator
            * @hidden
            */
        constructor(parent?: IGrid, filterSettings?: FilterSettings, serviceLocator?: ServiceLocator);
        /**
            * To render filter bar when filtering enabled.
            *
            * @param {NotifyArgs} e - specifies the NotifyArgs
            * @returns {void}
            * @hidden
            */
        render(e?: NotifyArgs): void;
        /**
            * To show the responsive custom filter dialog
            *
            * @param {boolean} enable - specifes dialog open
            * @returns {void}
            * @hidden
            */
        showCustomFilter(enable: boolean): void;
        /**
            * To create the filter module.
            *
            * @param {Column} col - specifies the filtering column name
            * @returns {void}
            * @hidden
            */
        setFilterModel(col: Column): void;
        /**
            * To destroy the filter bar.
            *
            * @returns {void}
            * @hidden
            */
        destroy(): void;
        /**
            * To update filterSettings when applying filter.
            *
            * @returns {void}
            * @hidden
            */
        updateModel(): void;
        /**
            * To trigger action complete event.
            *
            * @param {NotifyArgs} e - specifies the NotifyArgs
            * @returns {void}
            * @hidden
            */
        onActionComplete(e: NotifyArgs): void;
        /**
            * @returns {void}
            * @hidden
            */
        addEventListener(): void;
        /**
            * @returns {void}
            * @hidden
            */
        removeEventListener(): void;
        /**
            * Filters the Grid row by fieldName, filterOperator, and filterValue.
            *
            * @param  {string} fieldName - Defines the field name of the filter column.
            * @param  {string} filterOperator - Defines the operator to filter records.
            * @param  {string | number | Date | boolean} filterValue - Defines the value which is used to filter records.
            * @param  {string} predicate - Defines the relationship of one filter query with another by using AND or OR predicate.
            * @param  {boolean} matchCase - If match case is set to true, then the filter records
            * the exact match or <br> filters records that are case insensitive (uppercase and lowercase letters treated the same).
            * @param {boolean} ignoreAccent - If ignoreAccent set to true, then filter ignores the diacritic characters or accents while filtering.
            * @param  {string} actualFilterValue - Defines the actual filter value for the filter column.
            * @param  {string} actualOperator - Defines the actual filter operator for the filter column.
            * @returns {void}
            */
        filterByColumn(fieldName: string, filterOperator: string, filterValue: string | number | Date | boolean | number[] | string[] | Date[] | boolean[], predicate?: string, matchCase?: boolean, ignoreAccent?: boolean, actualFilterValue?: Object, actualOperator?: Object): void;
        /**
            * @private
            * @returns {void}
            */
        refreshFilter(): void;
        /**
            * Clears all the filtered rows of the Grid.
            *
            * @param {string[]} fields - returns the fields
            * @returns {void}
            */
        clearFiltering(fields?: string[]): void;
        /**
            * Create filter dialog options
            *
            * @param  {Column} col - Filtering column detail.
            * @param  {Element} target -  Filter dialog target.
            * @param  {number} left -  Filter dialog left position.
            * @param  {number} top -  Filter dialog top position.
            * @returns {Object} returns the created dialog options
            * @hidden
            */
        createOptions(col: Column, target: Element, left?: number, top?: number): Object;
        /**
            * Removes filtered column by field name.
            *
            * @param  {string} field - Defines column field name to remove filter.
            * @param  {boolean} isClearFilterBar - Specifies whether the filter bar value needs to be cleared.
            * @returns {void}
            * @hidden
            */
        removeFilteredColsByField(field: string, isClearFilterBar?: boolean): void;
        /**
            * For internal use only - Get the module name.
            *
            * @returns {string} returns the module name
            * @private
            */
        protected getModuleName(): string;
        /**
            * @param {string} field - specifies the field name
            * @returns {void}
            * @hidden
            */
        openMenuByField(field: string): void;
        /**
            * @hidden
            * @returns {FilterUI} returns the FilterUI
            */
        getFilterUIInfo(): FilterUI;
        /**
            * Renders checkbox items in Menu filter dialog.
            *
            * @returns {void}
            */
        renderCheckboxOnFilterMenu(): HTMLElement;
}

/**
    * The `Search` module is used to handle search action.
    */
export class Search implements IAction {
        /**
            * Constructor for Grid search module.
            *
            * @param {IGrid} parent - specifies the IGrid
            * @hidden
            */
        constructor(parent?: IGrid);
        /**
            * Searches Grid records by given key.
            *
            * > You can customize the default search action by using [`searchSettings`](grid/#searchsettings/).
            *
            * @param  {string} searchString - Defines the key.
            * @returns {void}
            */
        search(searchString: string): void;
        /**
            * @returns {void}
            * @hidden
            */
        addEventListener(): void;
        /**
            * @returns {void}
            * @hidden
            */
        removeEventListener(): void;
        /**
            * To destroy the print
            *
            * @returns {void}
            * @hidden
            */
        destroy(): void;
        /**
            * @param {NotifyArgs} e - specfies the NotifyArgs
            * @returns {void}
            * @hidden
            */
        onPropertyChanged(e: NotifyArgs): void;
        /**
            * The function used to trigger onActionComplete
            *
            * @param {NotifyArgs} e - specifies the NotifyArgs
            * @returns {void}
            * @hidden
            */
        onSearchComplete(e: NotifyArgs): void;
        /**
            * The function used to store the requestType
            *
            * @param {NotifyArgs} e - specifies the NotifyArgs
            * @returns {void}
            * @hidden
            */
        onActionComplete(e: NotifyArgs): void;
        /**
            * For internal use only - Get the module name.
            *
            * @returns {string} returns the module name
            * @private
            */
        protected getModuleName(): string;
}

/**
    * The `Scroll` module is used to handle scrolling behaviour.
    */
export class Scroll implements IAction {
        /**
            * Constructor for the Grid scrolling.
            *
            * @param {IGrid} parent - specifies the IGrid
            * @hidden
            */
        constructor(parent?: IGrid);
        /**
            * For internal use only - Get the module name.
            *
            * @returns {string} returns the module name
            * @private
            */
        protected getModuleName(): string;
        /**
            * @param {boolean} uiupdate - specifies the uiupdate
            * @returns {void}
            * @hidden
            */
        setWidth(uiupdate?: boolean): void;
        /**
            * @returns {void}
            * @hidden
            */
        setHeight(): void;
        /**
            * @returns {void}
            * @hidden
            */
        setPadding(): void;
        /**
            * @param {boolean} rtl - specifies the rtl
            * @returns {void}
            * @hidden
            */
        removePadding(rtl?: boolean): void;
        /**
            * Refresh makes the Grid adoptable with the height of parent container.
            *
            * > The [`height`](grid/#height/) must be set to 100%.
            *
            * @returns {void}
            */
        refresh(): void;
        /**
            * @returns {void}
            * @hidden
            */
        addEventListener(): void;
        /**
            * @returns {void}
            * @hidden
            */
        removeEventListener(): void;
        /**
            * @param {boolean} isAdd - specifies whether adding/removing the event
            * @returns {void}
            * @hidden
            */
        addStickyListener(isAdd: boolean): void;
        /**
            * @param {boolean} rtl - specifies the rtl
            * @returns {ScrollCss} returns the ScrollCss
            * @hidden
            */
        getCssProperties(rtl?: boolean): ScrollCss;
        /**
            * @returns {void}
            * @hidden
            */
        destroy(): void;
        /**
            * Function to get the scrollbar width of the browser.
            *
            * @returns {number} return the width
            * @hidden
            */
        static getScrollBarWidth(): number;
}
/**
    * @hidden
    */
export interface ScrollCss {
        padding?: string;
        border?: string;
}

export const resizeClassList: ResizeClasses;
export interface ResizeClasses {
        root: string;
        suppress: string;
        icon: string;
        helper: string;
        header: string;
        cursor: string;
}
/**
    * `Resize` module is used to handle Resize to fit for columns.
    *
    * @hidden
    * @private
    */
export class Resize implements IAction {
        isFrozenColResized: boolean;
        /**
            * Constructor for the Grid resize module
            *
            * @param {IGrid} parent - specifies the IGrid
            * @hidden
            */
        constructor(parent?: IGrid);
        /**
            * Resize by field names.
            *
            * @param  {string|string[]} fName - Defines the field name.
            * @returns {void}
            */
        autoFitColumns(fName?: string | string[]): void;
        /**
            * To destroy the resize
            *
            * @returns {void}
            * @hidden
            */
        destroy(): void;
        /**
            * For internal use only - Get the module name.
            *
            * @returns {string} returns the module name
            * @private
            */
        protected getModuleName(): string;
        /**
            * To create table for autofit
            *
            * @param {Element} table - specifies the table
            * @param {Element[]} text - specifies the text
            * @param {string} tag - specifies the tag name
            * @returns {number} returns the number
            * @hidden
            */
        protected createTable(table: Element, text: Element[], tag: string): number;
        /**
            * @returns {void}
            * @hidden
            */
        addEventListener(): void;
        /**
            * @returns {void}
            * @hidden
            */
        removeEventListener(): void;
        /**
            * @returns {void}
            * @hidden
            */
        render(): void;
}

/**
    *
    * The `Reorder` module is used for reordering columns.
    */
export class Reorder implements IAction {
        /**
            * Constructor for the Grid reorder module
            *
            * @param {IGrid} parent - specifies the IGrid
            * @hidden
            */
        constructor(parent?: IGrid);
        /**
            * Changes the position of the Grid columns by field names.
            *
            * @param  {string | string[]} fromFName - Defines the origin field names.
            * @param  {string} toFName - Defines the destination field name.
            * @returns {void}
            */
        reorderColumns(fromFName: string | string[], toFName: string): void;
        /**
            * Changes the position of the Grid columns by field index.
            *
            * @param  {number} fromIndex - Defines the origin field index.
            * @param  {number} toIndex - Defines the destination field index.
            * @returns {void}
            */
        reorderColumnByIndex(fromIndex: number, toIndex: number): void;
        /**
            * Changes the position of the Grid columns by field index.
            *
            * @param  {string | string[]} fieldName - Defines the field name.
            * @param  {number} toIndex - Defines the destination field index.
            * @returns {void}
            */
        reorderColumnByTargetIndex(fieldName: string | string[], toIndex: number): void;
        /**
            * The function used to trigger onActionComplete
            *
            * @param {NotifyArgs} e - specified the NotifyArgs
            * @returns {void}
            * @hidden
            */
        onActionComplete(e: NotifyArgs): void;
        /**
            * To destroy the reorder
            *
            * @returns {void}
            * @hidden
            */
        destroy(): void;
        /**
            * For internal use only - Get the module name.
            *
            * @returns {string} return the module name
            * @private
            */
        protected getModuleName(): string;
}

/**
    *
    * Reorder module is used to handle row reordering.
    *
    * @hidden
    */
export class RowDD {
        reorderRows(fromIndexes: number[], toIndex: number): void;
        /**
            * Constructor for the Grid print module
            *
            * @param {IGrid} parent - specifies the IGrid
            * @hidden
            */
        constructor(parent?: IGrid);
        /**
            * To destroy the print
            *
            * @returns {void}
            * @hidden
            */
        destroy(): void;
        /**
            * For internal use only - Get the module name.
            *
            * @returns {string} returns the module name
            * @private
            */
        protected getModuleName(): string;
}

/**
    *
    * The `Group` module is used to handle group action.
    */
export class Group implements IAction {
        /**
            * Constructor for Grid group module
            *
            * @param {IGrid} parent - specifies the IGrid
            * @param {GroupSettingsModel} groupSettings - specifies the GroupSettingsModel
            * @param {string[]} sortedColumns - specifies the sortedColumns
            * @param {ServiceLocator} serviceLocator - specifies the serviceLocator
            * @hidden
            */
        constructor(parent?: IGrid, groupSettings?: GroupSettingsModel, sortedColumns?: string[], serviceLocator?: ServiceLocator);
        /**
            * @returns {void}
            * @hidden
            */
        addEventListener(): void;
        /**
            * @returns {void}
            * @hidden
            */
        removeEventListener(): void;
        /**
            * Expands or collapses grouped rows by target element.
            *
            * @param  {Element} target - Defines the target element of the grouped row.
            * @returns {void}
            */
        expandCollapseRows(target: Element): void;
        /**
            * Expands all the grouped rows of the Grid.
            *
            * @returns {void}
            */
        expandAll(): void;
        /**
            * Collapses all the grouped rows of the Grid.
            *
            * @returns {void}
            */
        collapseAll(): void;
        /**
            * The function is used to render grouping
            *
            * @returns {void}
            * @hidden
            */
        render(): void;
        /**
            * Groups a column by column name.
            *
            * @param  {string} columnName - Defines the column name to group.
            * @returns {void}
            */
        groupColumn(columnName: string): void;
        /**
            * Ungroups a column by column name.
            *
            * @param  {string} columnName - Defines the column name to ungroup.
            * @returns {void}
            */
        ungroupColumn(columnName: string): void;
        /**
            * The function used to update groupSettings
            *
            * @returns {void}
            * @hidden
            */
        updateModel(): void;
        /**
            * The function used to trigger onActionComplete
            *
            * @param {NotifyArgs} e - specifies the NotifyArgs
            * @returns {void}
            * @hidden
            */
        onActionComplete(e: NotifyArgs): void;
        /**
            * To destroy the reorder
            *
            * @returns {void}
            * @hidden
            */
        destroy(): void;
        /**
            * Clears all the grouped columns of the Grid.
            *
            * @returns {void}
            */
        clearGrouping(): void;
        /**
            * For internal use only - Get the module name.
            *
            * @returns {string} returns the module name
            * @private
            */
        protected getModuleName(): string;
        updateExpand(args: {
                uid?: string;
                isExpand?: boolean;
        }): void;
}

/**
    * @returns {string[]} returns the cloned property
    * @hidden
    */
export function getCloneProperties(): string[];
/**
    *
    * The `Print` module is used to handle print action.
    */
export class Print {
        static printGridProp: string[];
        /**
            * Constructor for the Grid print module
            *
            * @param {IGrid} parent - specifies the IGrid
            * @param {Scroll} scrollModule - specifies the scroll module
            * @hidden
            */
        constructor(parent?: IGrid, scrollModule?: Scroll);
        /**
            * By default, prints all the Grid pages and hides the pager.
            * > You can customize print options using the
            * [`printMode`](grid/#printmode-string/).
            *
            * @returns {void}
            */
        print(): void;
        /**
            * To destroy the print
            *
            * @returns {boolean} returns the isPrintGrid or not
            * @hidden
            */
        isPrintGrid(): boolean;
        /**
            * To destroy the print
            *
            * @returns {void}
            * @hidden
            */
        destroy(): void;
        /**
            * For internal use only - Get the module name.
            *
            * @returns {string} returns the module name
            * @private
            */
        protected getModuleName(): string;
}

/**
    * The `DetailRow` module is used to handle detail template and hierarchy Grid operations.
    */
export class DetailRow {
        /**
            * Constructor for the Grid detail template module
            *
            * @param {IGrid} parent - specifies the IGrid
            * @param {ServiceLocator} locator - specifes the serviceLocator
            * @hidden
            */
        constructor(parent?: IGrid, locator?: ServiceLocator);
        /**
            * @hidden
            * @param {IGrid} gObj - specifies the grid Object
            * @param {Row<Column>}rowObj - specifies the row object
            * @param {string} printMode - specifies the printmode
            * @returns {Object} returns the object
            */
        getGridModel(gObj: IGrid, rowObj: Row<Column>, printMode: string): Object;
        /**
            * Expands a detail row with the given target.
            *
            * @param  {Element} target - Defines the collapsed element to expand.
            * @returns {void}
            */
        expand(target: number | Element): void;
        /**
            * Collapses a detail row with the given target.
            *
            * @param  {Element} target - Defines the expanded element to collapse.
            * @returns {void}
            */
        collapse(target: number | Element): void;
        /**
            * Expands all the detail rows of the Grid.
            *
            * @returns {void}
            */
        expandAll(): void;
        /**
            * Collapses all the detail rows of the Grid.
            *
            * @returns {void}
            */
        collapseAll(): void;
        /**
            * For internal use only - Get the module name.
            *
            * @returns {string} returns the module name
            * @private
            */
        protected getModuleName(): string;
}

/**
    * The `Toolbar` module is used to handle ToolBar actions.
    *
    * @hidden
    */
export class Toolbar {
        toolbar: tool;
        constructor(parent?: IGrid, serviceLocator?: ServiceLocator);
        /**
            * Gets the toolbar of the Grid.
            *
            * @returns {Element} returns the element
            * @hidden
            */
        getToolbar(): Element;
        /**
            * Destroys the ToolBar.
            *
            * @function destroy
            * @returns {void}
            */
        destroy(): void;
        /**
            * Enables or disables ToolBar items.
            *
            * @param {string[]} items - Defines the collection of itemID of ToolBar items.
            * @param {boolean} isEnable - Defines the items to be enabled or disabled.
            * @returns {void}
            * @hidden
            */
        enableItems(items: string[], isEnable: boolean): void;
        protected onPropertyChanged(e: NotifyArgs): void;
        protected addEventListener(): void;
        protected removeEventListener(): void;
}

/**
    * Summary Action controller.
    */
export class Aggregate implements IAction {
        constructor(parent: IGrid, locator?: ServiceLocator);
        getModuleName(): string;
        /**
            * @returns {void}
            * @hidden
            */
        prepareSummaryInfo(): void;
        onPropertyChanged(e: NotifyArgs): void;
        addEventListener(): void;
        removeEventListener(): void;
        destroy(): void;
        refresh(data: Object): void;
}
/**
    * @param {AggregateRowModel[]} aggregates - specifies the AggregateRowModel
    * @param {Function} callback - specifies the Function
    * @returns {void}
    * @private
    */
export function summaryIterator(aggregates: AggregateRowModel[], callback: Function): void;

/**
  * Virtual Scrolling class
  */
export class VirtualScroll implements IAction {
    constructor(parent: IGrid, locator?: ServiceLocator);
    getModuleName(): string;
    ensurePageSize(): void;
    addEventListener(): void;
    removeEventListener(): void;
    destroy(): void;
}

/**
    * The `Edit` module is used to handle editing actions.
    */
export class Edit implements IAction {
        protected renderer: EditRender;
        /** @hidden */
        editModule: IEdit;
        /** @hidden */
        formObj: FormValidator;
        /** @hidden */
        mFormObj: FormValidator;
        /** @hidden */
        frFormObj: FormValidator;
        /** @hidden */
        virtualFormObj: FormValidator;
        protected parent: IGrid;
        protected serviceLocator: ServiceLocator;
        protected l10n: L10n;
        isLastRow?: boolean;
        deleteRowUid: string;
        /**
            * Constructor for the Grid editing module
            *
            * @param {IGrid} parent - specifies the IGrid
            * @param {ServiceLocator} serviceLocator - specifies the servicelocator
            * @hidden
            */
        constructor(parent?: IGrid, serviceLocator?: ServiceLocator);
        /**
            * For internal use only - Get the module name.
            *
            * @returns {string} returns the module name
            * @private
            */
        protected getModuleName(): string;
        /**
            * @param {NotifyArgs} e - specifies the notifyargs
            * @returns {void}
            * @hidden
            */
        onPropertyChanged(e: NotifyArgs): void;
        /**
            * Edits any bound record in the Grid by TR element.
            *
            * @param {HTMLTableRowElement} tr - Defines the table row to be edited.
            * @returns {void}
            */
        startEdit(tr?: HTMLTableRowElement): void;
        /**
            * @param {Element} tr - specifies the tr element
            * @param {object} args - specifies the object
            * @param {Element} args.row -specfifes the row
            * @param {string} args.requestType - specifies the request type
            * @returns {void}
            * @hidden
            */
        checkLastRow(tr: Element, args?: {
                row?: Element;
                requestType?: string;
        }): void;
        /**
            * Cancels edited state.
            *
            * @returns {void}
            */
        closeEdit(): void;
        protected refreshToolbar(): void;
        /**
            * To adds a new row at the top with the given data. When data is not passed, it will add empty rows.
            * > `editSettings.allowEditing` should be true.
            *
            * @param {Object} data - Defines the new add record data.
            * @param {number} index - Defines the row index to be added
            * @returns {void}
            */
        addRecord(data?: Object, index?: number): void;
        /**
            * Deletes a record with the given options. If fieldname and data are not given, the Grid will delete the selected record.
            * > `editSettings.allowDeleting` should be true.
            *
            * @param {string} fieldname - Defines the primary key field name of the column.
            * @param {Object} data - Defines the JSON data record to be deleted.
            * @returns {void}
            */
        deleteRecord(fieldname?: string, data?: Object): void;
        /**
            * Deletes a visible row by TR element.
            *
            * @param {HTMLTableRowElement} tr - Defines the table row element.
            * @returns {void}
            */
        deleteRow(tr: HTMLTableRowElement): void;
        /**
            * If Grid is in editable state, you can save a record by invoking endEdit.
            *
            * @returns {void}
            */
        endEdit(): void;
        /**
            * To update the specified cell by given value without changing into edited state.
            *
            * @param {number} rowIndex Defines the row index.
            * @param {string} field Defines the column field.
            * @param {string | number | boolean | Date} value - Defines the value to be changed.
            * @returns {void}
            */
        updateCell(rowIndex: number, field: string, value: string | number | boolean | Date): void;
        /**
            * To update the specified row by given values without changing into edited state.
            *
            * @param {number} index Defines the row index.
            * @param {Object} data Defines the data object to be updated.
            * @returns {void}
            */
        updateRow(index: number, data: Object): void;
        /**
            * Resets added, edited, and deleted records in the batch mode.
            *
            * @returns {void}
            */
        batchCancel(): void;
        /**
            * Bulk saves added, edited, and deleted records in the batch mode.
            *
            * @returns {void}
            */
        batchSave(): void;
        /**
            * Changes a particular cell into edited state based on the row index and field name provided in the `batch` mode.
            *
            * @param {number} index - Defines row index to edit a particular cell.
            * @param {string} field - Defines the field name of the column to perform batch edit.
            * @returns {void}
            */
        editCell(index: number, field: string): void;
        /**
            * Checks the status of validation at the time of editing. If validation is passed, it returns true.
            *
            * @returns {boolean} returns whether the form is validated
            */
        editFormValidate(): boolean;
        /**
            * Gets the added, edited,and deleted data before bulk save to the DataSource in batch mode.
            *
            * @returns {Object} returns the Object
            */
        getBatchChanges(): Object;
        /**
            * Gets the current value of the edited component.
            *
            * @returns {Object} returns the Object
            */
        getCurrentEditCellData(): Object;
        /**
            * Saves the cell that is currently edited. It does not save the value to the DataSource.
            *
            * @returns {void}
            */
        saveCell(): void;
        getValueFromType(col: Column, value: string | Date | boolean): number | string | Date | boolean;
        /**
            * @returns {void}
            * @hidden
            */
        addEventListener(): void;
        /**
            * @returns {void}
            * @hidden
            */
        removeEventListener(): void;
        /**
            * @param {Element} form - specifies the element
            * @param {Object} editedData - specifies the edited data
            * @returns {Object} returns the object
            * @hidden
            */
        getCurrentEditedData(form: Element, editedData: Object): Object;
        /**
            * @param {NotifyArgs} e - specifies the NotifyArgs
            * @returns {void}
            * @hidden
            */
        onActionBegin(e: NotifyArgs): void;
        /**
            * @param {Column[]} cols - specfies the column
            * @returns {void}
            * @hidden
            */
        destroyWidgets(cols?: Column[]): void;
        /**
            * @returns {void}
            * @hidden
            */
        destroyForm(): void;
        /**
            * To destroy the editing.
            *
            * @returns {void}
            * @hidden
            */
        destroy(): void;
        /**
            * @param {Column[]} cols - specifies the column
            * @returns {void}
            * @hidden
            */
        applyFormValidation(cols?: Column[]): void;
        /**
            * @param {HTMLFormElement} form - Defined Form element
            * @param {Object} rules - Defines form rules
            * @returns {FormValidator} Returns formvalidator instance
            * @hidden
            */
        createFormObj(form: HTMLFormElement, rules: Object): FormValidator;
        resetElemPosition(elem: HTMLElement, args: {
                status: string;
                inputName: string;
                element: HTMLElement;
                message: string;
        }): void;
        /**
            * @param {Column} col - specfies the column
            * @returns {boolean} returns the whether column is grouped
            * @hidden
            */
        checkColumnIsGrouped(col: Column): boolean;
        /**
            * @param {object} editors -specfies the editors
            * @returns {void}
            * @hidden
            */
        static AddEditors(editors: object): void;
}

/**
    * `BatchEdit` module is used to handle batch editing actions.
    *
    * @hidden
    */
export class BatchEdit {
        formObj: FormValidator;
        constructor(parent?: IGrid, serviceLocator?: ServiceLocator, renderer?: EditRender);
        /**
            * @returns {void}
            * @hidden
            */
        addEventListener(): void;
        /**
            * @returns {void}
            * @hidden
            */
        removeEventListener(): void;
        /**
            * @returns {void}
            * @hidden
            */
        destroy(): void;
        protected clickHandler(e: MouseEvent): void;
        protected dblClickHandler(e: MouseEvent): void;
        closeEdit(): void;
        deleteRecord(fieldname?: string, data?: Object): void;
        addRecord(data?: Object): void;
        endEdit(): void;
        batchSave(): void;
        getBatchChanges(): Object;
        /**
            * @param {string} uid - specifes the uid
            * @returns {void}
            * @hidden
            */
        removeRowObjectFromUID(uid: string): void;
        /**
            * @param {Row<Column>} row - specifies the row object
            * @returns {void}
            * @hidden
            */
        addRowObject(row: Row<Column>): void;
        editCell(index: number, field: string, isAdd?: boolean): void;
        editCellExtend(index: number, field: string, isAdd?: boolean): void;
        updateCell(rowIndex: number, field: string, value: string | number | boolean | Date): void;
        updateRow(index: number, data: Object): void;
        escapeCellEdit(): void;
        saveCell(isForceSave?: boolean): void;
        protected getDataByIndex(index: number): Object;
        /**
            * @returns {void}
            * @hidden
            */
        addCancelWhilePaging(): void;
}

/**
  * `InlineEdit` module is used to handle inline editing actions.
  *
  * @hidden
  */
export class InlineEdit extends NormalEdit {
    protected parent: IGrid;
    protected serviceLocator: ServiceLocator;
    protected renderer: EditRender;
    constructor(parent?: IGrid, serviceLocator?: ServiceLocator, renderer?: EditRender);
    closeEdit(): void;
    addRecord(data?: Object, index?: number): void;
    endEdit(): void;
    updateRow(index: number, data?: Object): void;
    deleteRecord(fieldname?: string, data?: Object): void;
    protected startEdit(tr?: Element): void;
}

/**
    * `NormalEdit` module is used to handle normal('inline, dialog, external') editing actions.
    *
    * @hidden
    */
export class NormalEdit {
        protected parent: IGrid;
        protected serviceLocator: ServiceLocator;
        protected renderer: EditRender;
        formObj: FormValidator;
        protected previousData: Object;
        constructor(parent?: IGrid, serviceLocator?: ServiceLocator, renderer?: EditRender);
        protected clickHandler(e: MouseEvent): void;
        protected dblClickHandler(e: MouseEvent): void;
        /**
            * The function used to trigger editComplete
            *
            * @param {NotifyArgs} e - specifies the NotifyArgs
            * @returns {void}
            * @hidden
            */
        editComplete(e: NotifyArgs): void;
        protected startEdit(tr: Element): void;
        protected updateRow(index: number, data: Object): void;
        protected endEdit(): void;
        protected closeEdit(): void;
        protected addRecord(data?: Object, index?: number): void;
        protected deleteRecord(fieldname?: string, data?: Object): void;
        /**
            * @returns {void}
            * @hidden
            */
        addEventListener(): void;
        /**
            * @returns {void}
            * @hidden
            */
        removeEventListener(): void;
        /**
            * @returns {void}
            * @hidden
            */
        destroy(): void;
}

/**
  * `DialogEdit` module is used to handle dialog editing actions.
  *
  * @hidden
  */
export class DialogEdit extends NormalEdit {
    protected parent: IGrid;
    protected serviceLocator: ServiceLocator;
    protected renderer: EditRender;
    constructor(parent?: IGrid, serviceLocator?: ServiceLocator, renderer?: EditRender);
    closeEdit(): void;
    addRecord(data?: Object, index?: number): void;
    endEdit(): void;
    updateRow(index: number, data?: Object): void;
    deleteRecord(fieldname?: string, data?: Object): void;
    protected startEdit(tr?: Element): void;
}

/**
    * The `ColumnChooser` module is used to show or hide columns dynamically.
    */
export class ColumnChooser implements IAction {
        getShowHideService: ShowHide;
        /**
            * Constructor for the Grid ColumnChooser module
            *
            * @param {IGrid} parent - specifies the IGrid
            * @param {ServiceLocator} serviceLocator - specifies the serviceLocator
            * @hidden
            */
        constructor(parent?: IGrid, serviceLocator?: ServiceLocator);
        /**
            * @returns {void}
            * @hidden
            */
        addEventListener(): void;
        /**
            * @returns {void}
            * @hidden
            */
        removeEventListener(): void;
        /**
            * To render columnChooser when showColumnChooser enabled.
            *
            * @param {number} x - specifies the position x
            * @param {number} y - specifies the position y
            * @param {Element} target - specifies the target
            * @returns {void}
            * @hidden
            */
        renderColumnChooser(x?: number, y?: number, target?: Element): void;
        /**
            * Column chooser can be displayed on screen by given position(X and Y axis).
            *
            * @param  {number} X - Defines the X axis.
            * @param  {number} Y - Defines the Y axis.
            * @return {void}
            */
        openColumnChooser(X?: number, Y?: number): void;
        resetColumnState(): void;
}

/**
    * @hidden
    * `ExcelExport` module is used to handle the Excel export action.
    */
export class ExcelExport {
        /**
            * Constructor for the Grid Excel Export module.
            *
            * @param {IGrid} parent - specifies the IGrid
            * @param {ServiceLocator} locator - specifies the ServiceLocator
            * @hidden
            */
        constructor(parent?: IGrid, locator?: ServiceLocator);
        /**
            * Export Grid to Excel file.
            *
            * @param {IGrid} grid - Defines the grid.
            * @param  {exportProperties} exportProperties - Defines the export properties of the Grid.
            * @param  {isMultipleExport} isMultipleExport - Defines is multiple Grid's are exported.
            * @param  {Workbook} workbook - Defined the Workbook if multiple Grid is exported.
            * @param  {boolean} isCsv - true if export to CSV.
            * @param {boolean} isBlob - true if isBlob is enabled.
            * @returns {Promise<any>} - Returns the map for export.
            */
        Map(grid: IGrid, exportProperties: ExcelExportProperties, isMultipleExport: boolean, workbook: Workbook, isCsv: boolean, isBlob: boolean): Promise<any>;
        destroy(): void;
}

/**
    * `PDF Export` module is used to handle the exportToPDF action.
    *
    * @hidden
    */
export class PdfExport {
        /**
            * Constructor for the Grid PDF Export module
            *
            * @param {IGrid} parent - specifies the IGrid
            * @hidden
            */
        constructor(parent?: IGrid);
        /**
            * Used to map the input data
            *
            * @param {IGrid} parent - specifies the IGrid
            * @param {PdfExportProperties} pdfExportProperties - specifies the PdfExportProperties
            * @param {boolean} isMultipleExport - specifies the isMultipleExport
            * @param {Object} pdfDoc - specifies the pdfDoc
            * @param {boolean} isBlob - speciies whether it is Blob or not
            * @returns {void}
            */
        Map(parent?: IGrid, pdfExportProperties?: PdfExportProperties, isMultipleExport?: boolean, pdfDoc?: Object, isBlob?: boolean): Promise<Object>;
        destroy(): void;
}

/**
    * @hidden
    * `ExportHelper` for `PdfExport` & `ExcelExport`
    */
export class ExportHelper {
        parent: IGrid;
        constructor(parent: IGrid, foreignKeyData?: {
                [key: string]: Object[];
        });
        static getQuery(parent: IGrid, data: Data): Query;
        getFData(value: string, column: Column): Object;
        getGridRowModel(columns: Column[], dataSource: Object[], gObj: IGrid, startIndex?: number): Row<Column>[];
        getColumnData(gridObj: Grid): Promise<Object>;
        getHeaders(columns: Column[], isHideColumnInclude?: boolean): {
                rows: Row<Column>[];
                columns: Column[];
        };
        getConvertedWidth(input: string): number;
        checkAndExport(gridPool: Object, globalResolve: Function): void;
        failureHandler(gridPool: Object, childGridObj: IGrid, resolve: Function): Function;
        createChildGrid(gObj: IGrid, row: Row<Column>, exportType: string, gridPool: Object): {
                childGrid: IGrid;
                element: HTMLElement;
        };
        getGridExportColumns(columns: Column[]): Column[];
        /**
            * Gets the foreignkey data.
            *
            * @returns {ForeignKeyFormat} returns the foreignkey data
            * @hidden
            */
        getForeignKeyData(): ForeignKeyFormat;
}
/**
    * @hidden
    * `ExportValueFormatter` for `PdfExport` & `ExcelExport`
    */
export class ExportValueFormatter {
        constructor(culture: string);
        /**
            * Used to format the exporting cell value
            *
            * @param  {ExportHelperArgs} args - Specifies cell details.
            * @returns {string} returns formated value
            * @hidden
            */
        formatCellValue(args: ExportHelperArgs): string;
}

/**
    * The `Clipboard` module is used to handle clipboard copy action.
    */
export class Clipboard implements IAction {
        protected clipBoardTextArea: HTMLInputElement;
        /**
            * Constructor for the Grid clipboard module
            *
            * @param {IGrid} parent - specifies the IGrid
            * @hidden
            */
        constructor(parent?: IGrid);
        /**
            * @returns {void}
            * @hidden
            */
        addEventListener(): void;
        /**
            * @returns {void}
            * @hidden
            */
        removeEventListener(): void;
        /**
            * Paste data from clipboard to selected cells.
            *
            * @param {boolean} data - Specifies the date for paste.
            * @param {boolean} rowIndex - Specifies the row index.
            * @param {boolean} colIndex - Specifies the column index.
            * @returns {void}
            */
        paste(data: string, rowIndex: number, colIndex: number): void;
        protected setCopyData(withHeader?: boolean): void;
        /**
            * Copy selected rows or cells data into clipboard.
            *
            * @returns {void}
            * @param {boolean} withHeader - Specifies whether the column header data need to be copied or not.
            */
        copy(withHeader?: boolean): void;
        /**
            * For internal use only - Get the module name.
            *
            * @returns {string} returns the module name
            * @private
            */
        protected getModuleName(): string;
        /**
            * To destroy the clipboard
            *
            * @returns {void}
            * @hidden
            */
        destroy(): void;
}

/**
    * `CommandColumn` used to handle the command column actions.
    *
    * @hidden
    */
export class CommandColumn {
        constructor(parent: IGrid, locator?: ServiceLocator);
}

/**
    * @hidden
    * `CheckBoxFilter` module is used to handle filtering action.
    */
export class CheckBoxFilter {
        protected parent: IGrid;
        checkBoxBase: CheckBoxFilterBase;
        isresetFocus: boolean;
        /**
            * Constructor for checkbox filtering module
            *
            * @param {IGrid} parent - specifies the IGrid
            * @param {FilterSettings} filterSettings - specifies the filtersettings
            * @param {ServiceLocator} serviceLocator - specifies the ServiceLocator
            * @hidden
            */
        constructor(parent?: IGrid, filterSettings?: FilterSettings, serviceLocator?: ServiceLocator);
        /**
            * To destroy the check box filter.
            *
            * @returns {void}
            * @hidden
            */
        destroy(): void;
        openDialog(options: IFilterArgs): void;
        closeDialog(): void;
        protected closeResponsiveDialog(): void;
        /**
            * For internal use only - Get the module name.
            *
            * @returns {string} - returns the module name
            * @private
            */
        protected getModuleName(): string;
        protected clearCustomFilter(col: Column): void;
        protected applyCustomFilter(): void;
        addEventListener(): void;
        removeEventListener(): void;
}

export const menuClass: CMenuClassList;
export interface CMenuClassList {
        header: string;
        content: string;
        edit: string;
        batchEdit: string;
        editIcon: string;
        pager: string;
        cancel: string;
        save: string;
        delete: string;
        copy: string;
        pdf: string;
        group: string;
        ungroup: string;
        csv: string;
        excel: string;
        fPage: string;
        lPage: string;
        nPage: string;
        pPage: string;
        ascending: string;
        descending: string;
        groupHeader: string;
        touchPop: string;
}
/**
    * The `ContextMenu` module is used to handle context menu actions.
    */
export class ContextMenu implements IAction {
        contextMenu: Menu;
        isOpen: boolean;
        row: HTMLTableRowElement;
        cell: HTMLTableCellElement;
        constructor(parent?: IGrid, serviceLocator?: ServiceLocator);
        /**
            * @returns {void}
            * @hidden
            */
        addEventListener(): void;
        /**
            * @returns {void}
            * @hidden
            */
        removeEventListener(): void;
        /**
            * @param {ContextMenuClickEventArgs} args - specifies the ContextMenuClickEventArgs argument type
            * @returns {void}
            * @hidden
            */
        contextMenuItemClick(args: ContextMenuClickEventArgs): void;
        /**
            * Gets the context menu element from the Grid.
            *
            * @returns {Element} returns the element
            */
        getContextMenu(): Element;
        /**
            * Destroys the context menu component in the Grid.
            *
            * @function destroy
            * @returns {void}
            * @hidden
            */
        destroy(): void;
}

/**
  * `Freeze` module is used to handle Frozen rows and columns.
  *
  * @hidden
  */
export class Freeze implements IAction {
    constructor(parent: IGrid, locator?: ServiceLocator);
    getModuleName(): string;
    addEventListener(): void;
    removeEventListener(): void;
    destroy(): void;
}

/**
    * 'column menu module used to handle column menu actions'
    *
    * @hidden
    */
export class ColumnMenu implements IAction {
        constructor(parent?: IGrid, serviceLocator?: ServiceLocator);
        /**
            * To destroy the resize
            *
            * @returns {void}
            * @hidden
            */
        destroy(): void;
        columnMenuHandlerClick(e: Event): void;
        /**
            * @param {string} field - specifies the field name
            * @returns {void}
            * @hidden
            */
        openColumnMenuByField(field: string): void;
        /**
            * @returns {void}
            * @hidden
            */
        addEventListener(): void;
        /**
            * @returns {void}
            * @hidden
            */
        removeEventListener(): void;
        /**
            * @returns {HTMLElement} returns the HTMLElement
            * @hidden
            */
        getColumnMenu(): HTMLElement;
}

/**
    * @hidden
    * `ExcelFilter` module is used to handle filtering action.
    */
export class ExcelFilter extends CheckBoxFilter {
        protected parent: IGrid;
        excelFilterBase: ExcelFilterBase;
        isresetFocus: boolean;
        /**
            * Constructor for excelbox filtering module
            *
            * @param {IGrid} parent - specifies the IGrid
            * @param {FilterSettings} filterSettings - specifies the Filtersettings
            * @param {ServiceLocator} serviceLocator - specifies the serviceLocator
            * @param {object} customFltrOperators - specifies the customFltrOperators
            * @hidden
            */
        constructor(parent?: IGrid, filterSettings?: FilterSettings, serviceLocator?: ServiceLocator, customFltrOperators?: Object);
        /**
            * To destroy the excel filter.
            *
            * @returns {void}
            * @hidden
            */
        destroy(): void;
        openDialog(options: IFilterArgs): void;
        closeDialog(): void;
        protected clearCustomFilter(col: Column): void;
        protected closeResponsiveDialog(isCustomFilter?: boolean): void;
        protected applyCustomFilter(args?: {
                col: Column;
                isCustomFilter: boolean;
        }): void;
        filterByColumn(fieldName: string, firstOperator: string, firstValue: string | number | Date | boolean, predicate?: string, matchCase?: boolean, ignoreAccent?: boolean, secondOperator?: string, secondValue?: string | number | Date | boolean): void;
        /**
            * @returns {FilterUI} returns the filterUI
            * @hidden
            */
        getFilterUIInfo(): FilterUI;
        /**
            * For internal use only - Get the module name.
            *
            * @returns {string} returns the module name
            * @private
            */
        protected getModuleName(): string;
}

/**
  * `ForeignKey` module is used to handle foreign key column's actions.
  */
export class ForeignKey extends Data {
    constructor(parent: IGrid, serviceLocator: ServiceLocator);
    protected getModuleName(): string;
    protected destroy(): void;
}

/**
  *
  * `Logger` class
  */
export interface ILogger {
    log: (type: string | string[], args: Object) => void;
}
export interface CheckOptions {
    success: boolean;
    options?: Object;
}
export interface ItemDetails {
    type: string;
    logType: string;
    message?: string;
    check: (args: Object, parent: IGrid) => CheckOptions;
    generateMessage: (args: Object, parent: IGrid, checkOptions?: Object) => string;
}
export class Logger implements ILogger {
    parent: IGrid;
    constructor(parent: IGrid);
    getModuleName(): string;
    log(types: string | string[], args: Object): void;
    patchadaptor(): void;
    destroy(): void;
}
export const detailLists: {
    [key: string]: ItemDetails;
};

/**
    * Infinite Scrolling class
    *
    * @hidden
    */
export class InfiniteScroll implements IAction {
        protected prevScrollTop: number;
        protected cellIndex: number;
        /** @hidden */
        requestType: Action;
        protected widthService: ColumnWidthService;
        /**
            * Constructor for the Grid infinite scrolling.
            *
            * @param {IGrid} parent - specifies the IGrid
            * @param {ServiceLocator} serviceLocator - specifies the ServiceLocator
            * @hidden
            */
        constructor(parent?: IGrid, serviceLocator?: ServiceLocator);
        getModuleName(): string;
        /**
            * @returns {void}
            * @hidden
            */
        addEventListener(): void;
        /**
            * @returns {void}
            * @hidden
            */
        removeEventListener(): void;
        /**
            * @returns {void}
            * @hidden
            */
        destroy(): void;
}

/**
    * Group lazy load class
    */
export class LazyLoadGroup implements IAction {
        /**
            * Constructor for Grid group lazy load module
            *
            * @param {IGrid} parent - specifies the IGrid
            * @param {ServiceLocator} serviceLocator - specifies the ServiceLocator
            * @hidden
            */
        constructor(parent?: IGrid, serviceLocator?: ServiceLocator);
        /**
            * For internal use only - Get the module name.
            *
            * @returns {string} returns the module name
            * @private
            */
        protected getModuleName(): string;
        /**
            * @returns {void}
            * @hidden
            */
        addEventListener(): void;
        /**
            * @returns {void}
            * @hidden
            */
        removeEventListener(): void;
        /**
            * @returns {void}
            * @hidden
            */
        destroy(): void;
}

/**
    * Row
    *
    * @hidden
    */
export class Row<T> {
        parent?: IGrid;
        uid: string;
        data: Object;
        tIndex: number;
        isCaptionRow: boolean;
        changes: Object;
        isDirty: boolean;
        aggregatesCount: number;
        edit: string;
        isSelected: boolean;
        isFreezeRow: boolean;
        isReadOnly: boolean;
        isAltRow: boolean;
        isDataRow: boolean;
        isExpand: boolean;
        rowSpan: number;
        cells: Cell<T>[];
        index: number;
        indent: number;
        subRowDetails: Object;
        height: string;
        visible: boolean;
        attributes: {
                [x: string]: Object;
        };
        cssClass: string;
        lazyLoadCssClass: string;
        foreignKeyData: Object;
        isDetailRow: boolean;
        childGrid: IGrid;
        parentUid: string;
        constructor(options: {
                [x: string]: Object;
        }, parent?: IGrid);
        clone(): Row<T>;
        /**
            * Replaces the row data and grid refresh the particular row element only.
            *
            * @param  {Object} data - To update new data for the particular row.
            * @returns {void}
            */
        setRowValue(data: Object): void;
        /**
            * Replaces the given field value and refresh the particular cell element only.
            *
            * @param {string} field - Specifies the field name which you want to update.
            * @param {string | number | boolean | Date} value - To update new value for the particular cell.
            * @returns {void}
            */
        setCellValue(field: string, value: string | number | boolean | Date): void;
}

/**
  * Cell
  *
  * @hidden
  */
export class Cell<T> {
    colSpan: number;
    rowSpan: number;
    cellType: CellType;
    visible: boolean;
    isTemplate: boolean;
    isDataCell: boolean;
    isSelected: boolean;
    isColumnSelected: boolean;
    column: T;
    rowID: string;
    index: number;
    colIndex: number;
    className: string;
    attributes: {
        [a: string]: Object;
    };
    isSpanned: boolean;
    cellSpan: number;
    isRowSpanned: boolean;
    rowSpanRange: number;
    colSpanRange: number;
    spanText: string | number | boolean | Date;
    commands: CommandModel[];
    isForeignKey: boolean;
    foreignKeyData: Object;
    constructor(options: {
        [x: string]: Object;
    });
    clone(): Cell<T>;
}

/**
  * Export model files
  */

/**
    * Content module is used to render grid content
    *
    * @hidden
    */
export class HeaderRender implements IRenderer {
        protected colDepth: number;
        protected rows: Row<Column>[];
        freezeReorder: boolean;
        draggable: Draggable;
        protected parent: IGrid;
        protected serviceLocator: ServiceLocator;
        protected widthService: ColumnWidthService;
        protected ariaService: AriaService;
        /**
            * Constructor for header renderer module
            *
            * @param {IGrid} parent - specifies the IGrid
            * @param {ServiceLocator} serviceLocator - specifies the serviceLocator
            */
        constructor(parent?: IGrid, serviceLocator?: ServiceLocator);
        /**
            * The function is used to render grid header div
            *
            * @returns {void}
            */
        renderPanel(): void;
        /**
            * The function is used to render grid header div
            *
            * @returns {void}
            */
        renderTable(): void;
        /**
            * Get the header content div element of grid
            *
            * @returns {Element} returns the element
            */
        getPanel(): Element;
        /**
            * Set the header content div element of grid
            *
            * @param  {Element} panel - specifies the panel element
            * @returns {void}
            */
        setPanel(panel: Element): void;
        /**
            * Get the header table element of grid
            *
            * @returns {Element} returns the element
            */
        getTable(): Element;
        /**
            * Set the header table element of grid
            *
            * @param  {Element} table - specifies the table element
            * @returns {void}
            */
        setTable(table: Element): void;
        /**
            * Get the header colgroup element
            *
            * @returns {Element} returns the element
            */
        getColGroup(): Element;
        /**
            * Set the header colgroup element
            *
            * @param {Element} colGroup - specifies the colgroup
            * @returns {Element} returns the element
            */
        setColGroup(colGroup: Element): Element;
        /**
            * Get the header row element collection.
            *
            * @returns {Element[]} returns the element
            */
        getRows(): Row<Column>[] | HTMLCollectionOf<HTMLTableRowElement>;
        /**
            * The function is used to create header table elements
            *
            * @param {Element} tableEle - specifies the table Element
            * @param {freezeTable} tableName - specifies the table name
            * @returns {Element} returns the element
            * @hidden
            */
        createHeader(tableEle?: Element, tableName?: freezeTable): Element;
        /**
            * @param {Element} tableEle - specifies the column
            * @returns {Element} returns the element
            * @hidden
            */
        createTable(tableEle?: Element): Element;
        /**
            * Function to hide header table column based on visible property
            *
            * @param {Column[]} columns - specifies the column
            * @returns {void}
            */
        setVisible(columns?: Column[]): void;
        /**
            * Refresh the header of the Grid.
            *
            * @returns {void}
            */
        refreshUI(): void;
        toggleStackClass(div: Element): void;
        appendContent(table?: Element): void;
        protected initializeHeaderDrag(): void;
        protected initializeHeaderDrop(): void;
}

/**
    * Content module is used to render grid content
    *
    * @hidden
    */
export class ContentRender implements IRenderer {
        protected rows: Row<Column>[];
        protected freezeRows: Row<Column>[];
        protected movableRows: Row<Column>[];
        protected rowElements: Element[];
        protected freezeRowElements: Element[];
        /** @hidden */
        prevInfo: VirtualInfo;
        /** @hidden */
        currentInfo: VirtualInfo;
        /** @hidden */
        prevCurrentView: Object[];
        colgroup: Element;
        protected isLoaded: boolean;
        protected tbody: HTMLElement;
        protected rightFreezeRows: Row<Column>[];
        protected parent: IGrid;
        protected generator: IModelGenerator<Column>;
        /**
            * Constructor for content renderer module
            *
            * @param {IGrid} parent - specifies the Igrid
            * @param {ServiceLocator} serviceLocator - specifies the service locator
            */
        constructor(parent?: IGrid, serviceLocator?: ServiceLocator);
        /**
            * The function is used to render grid content div
            *
            * @returns {void}
            */
        renderPanel(): void;
        /**
            * The function is used to render grid content table
            *
            * @returns {void}
            */
        renderTable(): void;
        /**
            * The function is used to create content table elements
            *
            * @param {string} id - specifies the id
            * @returns {Element} returns the element
            * @hidden
            */
        createContentTable(id: string): Element;
        /**
            * Refresh the content of the Grid.
            *
            * @param {NotifyArgs} args - specifies the args
            * @returns {void}
            */
        refreshContentRows(args?: NotifyArgs): void;
        emptyVcRows(): void;
        appendContent(tbody: Element, frag: DocumentFragment, args: NotifyArgs, tableName?: string): void;
        protected getInfiniteRows(): Row<Column>[];
        /**
            * Get the content div element of grid
            *
            * @returns {Element} returns the element
            */
        getPanel(): Element;
        /**
            * Set the content div element of grid
            *
            * @param  {Element} panel - specifies the panel
            * @returns {void}
            */
        setPanel(panel: Element): void;
        /**
            * Get the content table element of grid
            *
            * @returns {Element} returns the element
            */
        getTable(): Element;
        /**
            * Set the content table element of grid
            *
            * @param  {Element} table - specifies the table
            * @returns {void}
            */
        setTable(table: Element): void;
        /**
            * Get the Movable Row collection in the Freeze pane Grid.
            *
            * @returns {Row[] | HTMLCollectionOf<HTMLTableRowElement>} returns the row
            */
        getRows(): Row<Column>[] | HTMLCollectionOf<HTMLTableRowElement>;
        /**
            * Get the Movable Row collection in the Freeze pane Grid.
            *
            * @returns {Row[] | HTMLCollectionOf<HTMLTableRowElement>} returns the row
            */
        getMovableRows(): Row<Column>[] | HTMLCollectionOf<HTMLTableRowElement>;
        /**
            * Get the content table data row elements
            *
            * @returns {Element} returns the element
            */
        getRowElements(): Element[];
        /**
            * Get the Freeze pane movable content table data row elements
            *
            * @returns {Element} returns the element
            */
        getMovableRowElements(): Element[];
        /**
            * Get the content table data row elements
            *
            * @param {Element[]} elements - specifies the elements
            * @returns {void}
            */
        setRowElements(elements: Element[]): void;
        /**
            * Get the header colgroup element
            *
            * @returns {Element} returns the element
            */
        getColGroup(): Element;
        /**
            * Set the header colgroup element
            *
            * @param {Element} colGroup - specifies the colgroup
            * @returns {Element} returns the element
            */
        setColGroup(colGroup: Element): Element;
        /**
            * Function to hide content table column based on visible property
            *
            * @param {Column[]} columns - specifies the column
            * @returns {void}
            */
        setVisible(columns?: Column[]): void;
        /**
            * @param {Object} tr - specifies the trr
            * @param {number} idx - specifies the idx
            * @param {string} displayVal - specifies the displayval
            * @param {Row<Column>} rows - specifies the rows
            * @returns {void}
            * @hidden
            */
        setDisplayNone(tr: Object, idx: number, displayVal: string, rows: Row<Column>[]): void;
        protected getHeaderColGroup(): Element;
        getModelGenerator(): IModelGenerator<Column>;
        renderEmpty(tbody: HTMLElement): void;
        setSelection(uid: string, set: boolean, clearAll?: boolean): void;
        getRowByIndex(index: number): Element;
        getVirtualRowIndex(index: number): number;
        getMovableRowByIndex(index: number): Element;
        setRowObjects(rows: Row<Column>[]): void;
        /**
            * @param {NotifyArgs} args - specifies the args
            * @returns {void}
            * @hidden
            */
        immutableModeRendering(args?: NotifyArgs): void;
}

/**
    * RowRenderer class which responsible for building row content.
    *
    * @hidden
    */
export class RowRenderer<T> implements IRowRenderer<T> {
        element: Element;
        protected parent: IGrid;
        constructor(serviceLocator?: ServiceLocator, cellType?: CellType, parent?: IGrid);
        /**
            * Function to render the row content based on Column[] and data.
            *
            * @param {Row<T>} row - specifies the row
            * @param {Column[]} columns - specifies the columns
            * @param {Object} attributes - specifies the attributes
            * @param {string} rowTemplate - specifies the rowTemplate
            * @param {Element} cloneNode - specifies the cloneNode
            * @returns {Element} returns the element
            */
        render(row: Row<T>, columns: Column[], attributes?: {
                [x: string]: Object;
        }, rowTemplate?: string, cloneNode?: Element): Element;
        /**
            * Function to refresh the row content based on Column[] and data.
            *
            * @param {Row<T>} row - specifies the row
            * @param {Column[]} columns - specifies the column
            * @param {boolean} isChanged - specifies isChanged
            * @param {Object} attributes - specifies the attributes
            * @param {string} rowTemplate - specifies the rowTemplate
            * @returns {void}
            */
        refresh(row: Row<T>, columns: Column[], isChanged: boolean, attributes?: {
                [x: string]: Object;
        }, rowTemplate?: string): void;
        /**
            * Function to check and add alternative row css class.
            *
            * @param {Element} tr - specifies the tr element
            * @param {Row<T>} row - specifies the row
            * @returns {void}
            */
        buildAttributeFromRow(tr: Element, row: Row<T>): void;
}

/**
    * CellRenderer class which responsible for building cell content.
    *
    * @hidden
    */
export class CellRenderer implements ICellRenderer<Column> {
        element: HTMLElement;
        protected localizer: L10n;
        protected formatter: IValueFormatter;
        protected parent: IGrid;
        constructor(parent: IGrid, locator?: ServiceLocator);
        /**
            * Function to return the wrapper for the TD content
            *
            * @returns {string | Element} returns the string
            */
        getGui(): string | Element;
        /**
            * Function to format the cell value.
            *
            * @param  {Column} column - specifies the column
            * @param  {Object} value - specifies the value
            * @param  {Object} data - specifies the data
            * @returns {string} returns the format
            */
        format(column: Column, value: Object, data?: Object): string;
        evaluate(node: Element, cell: Cell<Column>, data: Object, attributes?: Object, fData?: Object, isEdit?: boolean): boolean;
        /**
            * Function to invoke the custom formatter available in the column object.
            *
            * @param  {Column} column - specifies the column
            * @param  {Object} value - specifies the value
            * @param  {Object} data - specifies the data
            * @returns {Object} returns the object
            */
        invokeFormatter(column: Column, value: Object, data: Object): Object;
        /**
            * Function to render the cell content based on Column object.
            *
            * @param {Cell<Column>} cell - specifies the cell
            * @param {Object} data - specifies the data
            * @param {Object} attributes - specifies the attributes
            * @param {boolean} isExpand - specifies the boolean for expand
            * @param {boolean} isEdit - specifies the boolean for edit
            * @returns {Element} returns the element
            */
        render(cell: Cell<Column>, data: Object, attributes?: {
                [x: string]: Object;
        }, isExpand?: boolean, isEdit?: boolean): Element;
        /**
            * Function to refresh the cell content based on Column object.
            *
            * @param {Element} td - specifies the element
            * @param {Cell<Column>} cell - specifies the cell
            * @param {Object} data - specifies the data
            * @param {Object} attributes - specifies the attribute
            * @returns {void}
            */
        refreshTD(td: Element, cell: Cell<Column>, data: Object, attributes?: {
                [x: string]: Object;
        }): void;
        /**
            * Function to specifies how the result content to be placed in the cell.
            *
            * @param {Element} node - specifies the node
            * @param {string|Element} innerHtml - specifies the innerHTML
            * @param {string} property - specifies the element
            * @returns {Element} returns the element
            */
        appendHtml(node: Element, innerHtml: string | Element, property?: string): Element;
        /**
            * @param {HTMLElement} node - specifies the node
            * @param {cell<Column>} cell - specifies the cell
            * @param {Object} attributes - specifies the attributes
            * @returns {void}
            * @hidden
            */
        setAttributes(node: HTMLElement, cell: Cell<Column>, attributes?: {
                [x: string]: Object;
        }): void;
        buildAttributeFromCell<Column>(node: HTMLElement, cell: Cell<Column>, isCheckBoxType?: boolean): void;
        getValue(field: string, data: Object, column: Column): Object;
}

/**
    * HeaderCellRenderer class which responsible for building header cell content.
    *
    * @hidden
    */
export class HeaderCellRenderer extends CellRenderer implements ICellRenderer<Column> {
        element: HTMLElement;
        /**
            * Function to return the wrapper for the TH content.
            *
            * @returns {string | Element} returns the element
            */
        getGui(): string | Element;
        /**
            * Function to render the cell content based on Column object.
            *
            * @param {Cell} cell - specifies the column
            * @param {Object} data - specifies the data
            * @param {object} attributes - specifies the aattributes
            * @returns {Element} returns the element
            */
        render(cell: Cell<Column>, data: Object, attributes?: {
                [x: string]: Object;
        }): Element;
        /**
            * Function to refresh the cell content based on Column object.
            *
            * @param  {Cell} cell - specifies the cell
            * @param  {Element} node - specifies the noe
            * @returns {Element} returns the element
            */
        refresh(cell: Cell<Column>, node: Element): Element;
        getValue(field: string, column: Column): Object;
        /**
            * Function to specifies how the result content to be placed in the cell.
            *
            * @param  {Element} node - specifies the node
            * @param  {string|Element} innerHtml - specifies the innerHtml
            * @returns {Element} returns the element
            */
        appendHtml(node: Element, innerHtml: string | Element): Element;
}

/**
    * FilterCellRenderer class which responsible for building filter cell.
    *
    * @hidden
    */
export class FilterCellRenderer extends CellRenderer implements ICellRenderer<Column> {
        element: HTMLElement;
        /**
            * Function to return the wrapper for the TH content.
            *
            * @returns {string} returns the gui
            */
        getGui(): string | Element;
        /**
            * Function to render the cell content based on Column object.
            *
            * @param  {Cell} cell
            * @param  {Object} data
            */
        render(cell: Cell<Column>, data: Object): Element;
        /**
            * Function to specifies how the result content to be placed in the cell.
            *
            * @param {Element} node - specifies the node
            * @param {string|Element} innerHtml - specifies the innerHTML
            * @returns {Element} retruns the element
            */
        appendHtml(node: Element, innerHtml: string | Element): Element;
}

/**
    * StackedHeaderCellRenderer class which responsible for building stacked header cell content.
    *
    * @hidden
    */
export class StackedHeaderCellRenderer extends CellRenderer implements ICellRenderer<Column> {
        element: HTMLElement;
        /**
            * Function to render the cell content based on Column object.
            *
            * @param {Cell<Column>} cell - specifies the cell
            * @param {Object} data - specifies the data
            * @param {object} attributes - specifies the attributes
            * @returns {Element} returns the element
            */
        render(cell: Cell<Column>, data: Object, attributes?: {
                [x: string]: Object;
        }): Element;
}

/**
    * Content module is used to render grid content
    *
    * @hidden
    */
export class Render {
        data: Data;
        /**
            * Constructor for render module
            *
            * @param {IGrid} parent - specifies the IGrid
            * @param {ServiceLocator} locator - specifies the serviceLocator
            */
        constructor(parent?: IGrid, locator?: ServiceLocator);
        /**
            * To initialize grid header, content and footer rendering
            *
            * @returns {void}
            */
        render(): void;
        /**
            * Refresh the entire Grid.
            *
            * @param {NotifyArgs} e - specifies the NotifyArgs
            * @returns {void}
            */
        refresh(e?: NotifyArgs): void;
        /**
            * @returns {void}
            * @hidden
            */
        resetTemplates(): void;
        /**
            * Render empty row to Grid which is used at the time to represent to no records.
            *
            * @returns {void}
            * @hidden
            */
        renderEmptyRow(): void;
        emptyRow(isTrigger?: boolean): void;
        /**
            * @param {ReturnType} e - specifies the return type
            * @param {NotifyArgs} args - specifies the Notifyargs
            * @returns {void}
            * @hidden
            */
        dataManagerSuccess(e: ReturnType, args?: NotifyArgs): void;
        /**
            * @param {object} e - specifies the object
            * @param {Object[]} e.result - specifies the result
            * @param {NotifyArgs} args - specifies the args
            * @returns {void}
            * @hidden
            */
        dataManagerFailure(e: {
                result: Object[];
        }, args: NotifyArgs): void;
        /**
            * @param {ReturnType} e - specifies the Return type
            * @returns {Promise<Object>} returns the object
            * @hidden
            */
        validateGroupRecords(e: ReturnType): Promise<Object>;
}

/**
    * IndentCellRenderer class which responsible for building group indent cell.
    *
    * @hidden
    */
export class IndentCellRenderer extends CellRenderer implements ICellRenderer<Column> {
        element: HTMLElement;
        /**
            * Function to render the indent cell
            *
            * @param  {Cell} cell - specifies the cell
            * @param  {Object} data - specifies the data
            * @returns {Element} returns the element
            */
        render(cell: Cell<Column>, data: Object): Element;
}

/**
    * GroupCaptionCellRenderer class which responsible for building group caption cell.
    *
    * @hidden
    */
export class GroupCaptionCellRenderer extends CellRenderer implements ICellRenderer<Column> {
        element: HTMLElement;
        /**
            * Function to render the cell content based on Column object.
            *
            * @param  {Cell} cell - specifies the cell
            * @param  {Object} data - specifies the GroupedData
            * @returns {Element} returns the element
            */
        render(cell: Cell<Column>, data: GroupedData): Element;
}
/**
    * GroupCaptionEmptyCellRenderer class which responsible for building group caption empty cell.
    *
    * @hidden
    */
export class GroupCaptionEmptyCellRenderer extends CellRenderer implements ICellRenderer<Column> {
        element: HTMLElement;
        /**
            * Function to render the cell content based on Column object.
            *
            * @param {Cell} cell - specifies the cell
            * @param {Object} data - specifies the Object
            * @param {string} data.field - Defines the field
            * @param {string} data.key - Defines the key
            * @param {number} data.count - Defines the count
            * @returns {Element} returns the element
            */
        render(cell: Cell<Column>, data: {
                field: string;
                key: string;
                count: number;
        }): Element;
}

/**
    * Edit render module is used to render grid edit row.
    *
    * @hidden
    */
export class BatchEditRender {
        /**
            * Constructor for render module
            *
            * @param {IGrid} parent - specifies the IGrid
            */
        constructor(parent?: IGrid);
        update(elements: Element[], args: {
                columnObject?: Column;
                cell?: Element;
                row?: Element;
        }): void;
        removeEventListener(): void;
}

/**
    * Edit render module is used to render grid edit row.
    *
    * @hidden
    */
export class DialogEditRender {
        /**
            * Constructor for render module
            *
            * @param {IGrid} parent - specifies the IGrid
            * @param {ServiceLocator} serviceLocator - specifies the serviceLocator
            */
        constructor(parent?: IGrid, serviceLocator?: ServiceLocator);
        addNew(elements: Element[], args: {
                primaryKeyValue?: string[];
        }): void;
        update(elements: Element[], args: {
                primaryKeyValue?: string[];
        }): void;
        removeEventListener(): void;
}

/**
    * Edit render module is used to render grid edit row.
    *
    * @hidden
    */
export class InlineEditRender {
        /**
            * Constructor for render module
            *
            * @param {IGrid} parent - returns the IGrid
            */
        constructor(parent?: IGrid);
        addNew(elements: Object, args: {
                row?: Element;
                rowData?: Object;
                isScroll?: boolean;
        }): void;
        update(elements: Object, args: {
                row?: Element;
                rowData?: Object;
        }): void;
        removeEventListener(): void;
}

/**
    * Edit render module is used to render grid edit row.
    *
    * @hidden
    */
export class EditRender {
        protected parent: IGrid;
        protected serviceLocator: ServiceLocator;
        /**
            * Constructor for render module
            *
            * @param {IGrid} parent -specifies the IGrid
            * @param {ServiceLocator} serviceLocator - specifies the serviceLocator
            */
        constructor(parent?: IGrid, serviceLocator?: ServiceLocator);
        addNew(args: Object): void;
        update(args: Object): void;
        getEditElements(args: {
                rowData?: Object;
                columnName?: string;
                requestType?: string;
                row?: Element;
                rowIndex?: number;
                isScroll?: boolean;
                isCustomFormValidation?: boolean;
        }): Object;
        destroy(): void;
}

/**
  * `BooleanEditCell` is used to handle boolean cell type editing.
  *
  * @hidden
  */
export class BooleanEditCell extends EditCellBase implements IEditCell {
    create(args: {
        column: Column;
        value: string;
        type: string;
    }): Element;
    read(element: Element): boolean;
    write(args: {
        rowData: Object;
        element: Element;
        column: Column;
        requestType: string;
        row: Element;
    }): void;
}

/**
  * `DefaultEditCell` is used to handle default cell type editing.
  *
  * @hidden
  */
export class DefaultEditCell extends EditCellBase implements IEditCell {
    create(args: {
        column: Column;
        value: string;
        requestType: string;
    }): Element;
    read(element: Element): string;
    write(args: {
        rowData: Object;
        element: Element;
        column: Column;
        requestType: string;
    }): void;
}

/**
  * `DropDownEditCell` is used to handle dropdown cell type editing.
  *
  * @hidden
  */
export class DropDownEditCell extends EditCellBase implements IEditCell {
    constructor(parent?: IGrid);
    write(args: {
        rowData: Object;
        element: Element;
        column: Column;
        row: HTMLElement;
        requestType: string;
    }): void;
}

/**
  * `NumericEditCell` is used to handle numeric cell type editing.
  *
  * @hidden
  */
export class NumericEditCell implements IEditCell {
    constructor(parent?: IGrid);
    create(args: {
        column: Column;
        value: string;
    }): Element;
    read(element: Element): number;
    write(args: {
        rowData: Object;
        element: Element;
        column: Column;
        row: HTMLElement;
        requestType: string;
    }): void;
    destroy(): void;
}

/**
  * `DatePickerEditCell` is used to handle datepicker cell type editing.
  *
  * @hidden
  */
export class DatePickerEditCell extends EditCellBase implements IEditCell {
    write(args: {
        rowData: Object;
        element: Element;
        column: Column;
        type: string;
        row: HTMLElement;
        requestType: string;
    }): void;
}

/**
    * `CommandColumn` used to render command column in grid
    *
    * @hidden
    */
export class CommandColumnRenderer extends CellRenderer implements ICellRenderer<Column> {
        element: HTMLElement;
        constructor(parent: IGrid, locator?: ServiceLocator);
        /**
            * Function to render the cell content based on Column object.
            *
            * @param {cell<Column>} cell - specifies the cell
            * @param {Object} data - specifies the data
            * @param {Object} attributes - specifies the attributes
            * @param {boolean} isVirtualEdit - specifies virtual scroll editing
            * @returns {Element} returns the element
            */
        render(cell: Cell<Column>, data: Object, attributes?: {
                [x: string]: Object;
        }, isVirtualEdit?: boolean): Element;
}

/**
    * Freeze module is used to render grid content with frozen rows and columns
    *
    * @hidden
    */
export class FreezeContentRender extends ContentRender implements IRenderer {
        protected widthService: ColumnWidthService;
        protected isInitialRender: boolean;
        constructor(parent?: IGrid, locator?: ServiceLocator);
        addEventListener(): void;
        protected batchAdd(args: {
                name: string;
        }): void;
        protected setHeightToContent(height: number): void;
        protected actionComplete(args: NotifyArgs): void;
        removeEventListener(): void;
        renderPanel(): void;
        renderFrozenRigthPanel(): void;
        renderEmpty(tbody: HTMLElement): void;
        protected renderFrozenRightEmpty(tbody: HTMLElement): void;
        /**
            * @param {Element} ele - specifies the element
            * @returns {void}
            * @hidden
            */
        setMovableContent(ele: Element): void;
        getFrozenContent(): Element;
        getMovableContent(): Element;
        getModelGenerator(): IModelGenerator<Column>;
        protected renderFrozenRightTable(): void;
        renderTable(): void;
        protected getScrollbarDisplay(): string;
        protected renderHorizontalScrollbar(className: string, display: string, isRight?: boolean): void;
        protected appendScrollbar(frozen: Element, movable: Element, isRight?: boolean): void;
        /**
            * @param {NotifyArgs} args - specifies the NotifyArgs
            * @param {freezeTable} tableName - specifies the Freeze Table
            * @returns {void}
            * @hidden
            */
        setIsFrozen(args: NotifyArgs, tableName: freezeTable): void;
        /**
            * @param {Row<Column>[]} modelData - specifies the modeldata
            * @param {NotifyArgs} args - specifies the args
            * @returns {freezeTable} returns the freeze table
            * @hidden
            */
        setTbody(modelData: Row<Column>[], args: NotifyArgs): freezeTable;
        /**
            * @param {string} tableName - specifies the table name
            * @returns {void}
            * @hidden
            */
        splitRows(tableName: string): void;
        /**
            * @param {NotifyArgs} args - specifies the notifyargs
            * @param {string} tableName - specifies the tableName
            * @returns {void}
            * @hidden
            */
        renderNextFrozentPart(args: NotifyArgs, tableName: string): void;
        appendContent(tbody: Element, frag: DocumentFragment | HTMLElement, args: NotifyArgs, tableName?: string): void;
        refreshScrollOffset(): void;
        /**
            * @param {string} tableName - specifies the table name
            * @returns {HTMLElement} returns the Html element
            * @hidden
            */
        getFrozenHeader(tableName: string): HTMLElement;
        protected refreshTbody(tbody: Element): void;
        protected refreshHeight(): void;
        protected getIdx(): number;
        /**
            * @param {freezeTable} tableName - specifies the table name
            * @returns {Element} returns the element
            * @hidden
            */
        getTbody(tableName: freezeTable): Element;
}
export class FreezeRender extends HeaderRender implements IRenderer {
        constructor(parent?: IGrid, locator?: ServiceLocator);
        addEventListener(): void;
        removeEventListener(): void;
        renderTable(): void;
        renderPanel(): void;
        renderFrozenRightPanel(): void;
        renderFrozenRightTable(): void;
        refreshUI(): void;
        protected refreshFrozenLeftUI(): void;
        protected rfshMovable(): void;
        protected addMovableFirstCls(): void;
        protected refreshFreeze(obj: {
                case: string;
                isModeChg?: boolean;
        }): void;
        protected refreshHeight(obj: {
                case: string;
                isModeChg?: boolean;
        }): void;
        protected setWrapHeight(fRows: NodeListOf<HTMLElement>, mRows: NodeListOf<HTMLElement>, isModeChg: boolean, isContReset?: boolean, isStackedHdr?: boolean): void;
        protected setFrozenHeight(height?: number): void;
        protected refreshStackedHdrHgt(): void;
        protected getRowSpan(row: Element): {
                min: number;
                max: number;
        };
        protected updateStackedHdrRowHgt(idx: number, maxRowSpan: number, row: Element, rows: NodeListOf<Element>): void;
        /**
            * @param {Element} ele - specifies the element
            * @returns {void}
            * @hidden
            */
        setMovableHeader(ele: Element): void;
        protected getFrozenHeader(): Element;
        getMovableHeader(): Element;
        /**
            * @returns {void}
            * @hidden
            */
        updateColgroup(): void;
        protected filterRenderer(ele: Element, frozenColumn: number, total?: number): Element;
}

/**
  * `string filterui` render string column.
  *
  * @hidden
  */
export class StringFilterUI implements IFilterMUI {
    protected serLocator: ServiceLocator;
    actObj: AutoComplete;
    constructor(parent?: IGrid, serviceLocator?: ServiceLocator, filterSettings?: FilterSettings);
    create(args: IFilterCreate): void;
    write(args: {
        column: Column;
        target: Element;
        parent: IGrid;
        filteredValue: number | string | Date | boolean;
    }): void;
    read(element: Element, column: Column, filterOptr: string, filterObj: Filter): void;
}

/**
  * `numberfilterui` render number column.
  *
  * @hidden
  */
export class NumberFilterUI implements IFilterMUI {
    protected serviceLocator: ServiceLocator;
    constructor(parent?: IGrid, serviceLocator?: ServiceLocator, filterSettings?: FilterSettings);
    create(args: IFilterCreate): void;
    write(args: {
        column: Column;
        target: Element;
        parent: IGrid;
        filteredValue: number | string | Date | boolean;
    }): void;
    read(element: Element, column: Column, filterOptr: string, filterObj: Filter): void;
}

/**
  * `datefilterui` render date column.
  *
  * @hidden
  */
export class DateFilterUI implements IFilterMUI {
    protected locator: ServiceLocator;
    constructor(parent?: IGrid, serviceLocator?: ServiceLocator, filterSettings?: FilterSettings);
    create(args: IFilterCreate): void;
    write(args: {
        column: Column;
        target: Element;
        parent: IGrid;
        filteredValue: number | string | Date | boolean;
    }): void;
    read(element: Element, column: Column, filterOptr: string, filterObj: Filter): void;
}

/**
  * `boolfilterui` render boolean column.
  *
  * @hidden
  */
export class BooleanFilterUI implements IFilterMUI {
    protected serviceLocator: ServiceLocator;
    constructor(parent?: IGrid, serviceLocator?: ServiceLocator, filterSettings?: FilterSettings);
    create(args: {
        column: Column;
        target: HTMLElement;
        getOptrInstance: FlMenuOptrUI;
        localizeText: L10n;
        dialogObj: Dialog;
    }): void;
    write(args: {
        column: Column;
        target: Element;
        parent: IGrid;
        filteredValue: number | string | Date | boolean;
    }): void;
    read(element: Element, column: Column, filterOptr: string, filterObj: Filter): void;
}

/**
    * `filter operators` render boolean column.
    *
    * @hidden
    */
export class FlMenuOptrUI {
        constructor(parent?: IGrid, customFltrOperators?: Object, serviceLocator?: ServiceLocator, filterSettings?: FilterSettings);
        /**
            * @param {Element} dlgConetntEle - specifies the content element
            * @param {Element} target - specifies the target
            * @param {Column} column - specifies the column
            * @param {Dialog} dlgObj - specifies the dialog
            * @param {Object[]} operator - specifies the operator list
            * @returns {void}
            * @hidden
            */
        renderOperatorUI(dlgConetntEle: Element, target: Element, column: Column, dlgObj: Dialog, operator?: {
                [key: string]: Object;
        }[]): void;
        /**
            * @returns {string} returns the operator
            * @hidden
            */
        getFlOperator(): string;
}

/**
  * `AutoCompleteEditCell` is used to handle autocomplete cell type editing.
  *
  * @hidden
  */
export class AutoCompleteEditCell extends EditCellBase implements IEditCell {
    write(args: {
        rowData: Object;
        element: Element;
        column: Column;
        rowElement: HTMLElement;
        requestType: string;
    }): void;
}

/**
  * `ComboBoxEditCell` is used to handle ComboBoxEdit cell type editing.
  *
  * @hidden
  */
export class ComboboxEditCell extends EditCellBase implements IEditCell {
    write(args: {
        rowData: Object;
        element: Element;
        column: Column;
        row: HTMLElement;
        requestType: string;
    }): void;
}

/**
  * `MultiSelectEditCell` is used to handle multiselect dropdown cell type editing.
  *
  * @hidden
  */
export class MultiSelectEditCell extends EditCellBase implements IEditCell {
    write(args: {
        rowData: Object;
        element: Element;
        column: Column;
        row: HTMLElement;
        requestType: string;
    }): void;
}

/**
  * `TimePickerEditCell` is used to handle Timepicker cell type editing.
  *
  * @hidden
  */
export class TimePickerEditCell extends EditCellBase implements IEditCell {
    write(args: {
        rowData: Object;
        element: Element;
        column: Column;
        type: string;
        row: HTMLElement;
        requestType: string;
    }): void;
}

/**
  * `ToggleEditCell` is used to handle boolean cell type editing.
  *
  * @hidden
  */
export class ToggleEditCell extends EditCellBase implements IEditCell {
    create(args: {
        column: Column;
        value: string;
        type: string;
    }): Element;
    read(element: Element): boolean;
    write(args: {
        rowData: Object;
        element: Element;
        column: Column;
        requestType: string;
        row: Element;
    }): void;
}

/**
  * `MaskedTextBoxCellEdit` is used to handle masked input cell type editing.
  *
  * @hidden
  */
export class MaskedTextBoxCellEdit extends EditCellBase implements IEditCell {
    write(args: {
        rowData: Object;
        element: Element;
        column: Column;
        row: HTMLElement;
        requestType: string;
    }): void;
}

/**
    * VirtualContentRenderer
    *
    * @hidden
    */
export class VirtualContentRenderer extends ContentRender implements IRenderer {
        /** @hidden */
        observer: InterSectionObserver;
        /**
            * @hidden
            */
        vgenerator: VirtualRowModelGenerator;
        /** @hidden */
        header: VirtualHeaderRenderer;
        /** @hidden */
        startIndex: number;
        /** @hidden */
        startColIndex: number;
        /** @hidden */
        endColIndex: number;
        /** @hidden */
        content: HTMLElement;
        /** @hidden */
        movableContent: HTMLElement;
        /** @hidden */
        offsets: {
                [x: number]: number;
        };
        /** @hidden */
        virtualEle: VirtualElementHandler;
        /** @hidden */
        activeKey: string;
        /** @hidden */
        rowIndex: number;
        /** @hidden */
        blzRowIndex: number;
        /** @hidden */
        blazorDataLoad: boolean;
        /** @hidden */
        requestType: string;
        /** @hidden */
        virtualData: Object;
        constructor(parent: IGrid, locator?: ServiceLocator);
        renderTable(): void;
        renderEmpty(tbody: HTMLElement): void;
        getReorderedFrozenRows(args: NotifyArgs): Row<Column>[];
        ensureBlocks(info: VirtualInfo): number[];
        appendContent(target: HTMLElement, newChild: DocumentFragment | HTMLElement, e: NotifyArgs): void;
        protected onDataReady(e?: NotifyArgs): void;
        /**
            * @param {number} height - specifies the height
            * @returns {void}
            * @hidden
            */
        setVirtualHeight(height?: number): void;
        protected getTranslateY(sTop: number, cHeight: number, info?: VirtualInfo, isOnenter?: boolean): number;
        getOffset(block: number): number;
        eventListener(action: string): void;
        /**
            * @param {Object} data - specifies the data
            * @param {Object} data.virtualData -specifies the data
            * @param {boolean} data.isAdd - specifies isAdd
            * @param {boolean} data.isCancel - specifies boolean in cancel
            * @param {boolean} data.isScroll - specifies boolean for scroll
            * @returns {void}
            * @hidden
            */
        getVirtualData(data: {
                virtualData: Object;
                isAdd: boolean;
                isCancel: boolean;
                isScroll: boolean;
        }): void;
        /**
            * @param {number} index - specifies the index
            * @returns {Object} returns the object
            * @hidden
            */
        getRowObjectByIndex(index: number): Object;
        getBlockSize(): number;
        getBlockHeight(): number;
        isEndBlock(index: number): boolean;
        getGroupedTotalBlocks(): number;
        getTotalBlocks(): number;
        getColumnOffset(block: number): number;
        getModelGenerator(): IModelGenerator<Column>;
        getRows(): Row<Column>[];
        getRowByIndex(index: number): Element;
        getMovableVirtualRowByIndex(index: number): Element;
        getFrozenRightVirtualRowByIndex(index: number): Element;
        getRowCollection(index: number, isMovable: boolean, isRowObject?: boolean, isFrozenRight?: boolean): Element | Object;
        getVirtualRowIndex(index: number): number;
        /**
            * @returns {void}
            * @hidden */
        refreshOffsets(): void;
        refreshVirtualElement(): void;
        setVisible(columns?: Column[]): void;
        private selectVirtualRow;
        private isRowInView;
}
/**
    * @hidden
    */
export class VirtualHeaderRenderer extends HeaderRender implements IRenderer {
        virtualEle: VirtualElementHandler;
        /** @hidden */
        gen: VirtualRowModelGenerator;
        movableTbl: Element;
        constructor(parent: IGrid, locator: ServiceLocator);
        renderTable(): void;
        appendContent(table: Element): void;
        refreshUI(): void;
        setVisible(columns?: Column[]): void;
}
/**
    * @hidden
    */
export class VirtualElementHandler {
        wrapper: HTMLElement;
        placeholder: HTMLElement;
        content: HTMLElement;
        table: HTMLElement;
        movableWrapper: HTMLElement;
        movablePlaceholder: HTMLElement;
        movableTable: HTMLElement;
        movableContent: HTMLElement;
        renderWrapper(height?: number): void;
        renderPlaceHolder(position?: string): void;
        renderFrozenWrapper(height?: number): void;
        renderFrozenPlaceHolder(): void;
        renderMovableWrapper(height?: number): void;
        renderMovablePlaceHolder(): void;
        adjustTable(xValue: number, yValue: number): void;
        adjustMovableTable(xValue: number, yValue: number): void;
        setMovableWrapperWidth(width: string, full?: boolean): void;
        setMovableVirtualHeight(height?: number, width?: string): void;
        setWrapperWidth(width: string, full?: boolean): void;
        setVirtualHeight(height?: number, width?: string): void;
        setFreezeWrapperWidth(wrapper: HTMLElement, width: string, full?: boolean): void;
}

/**
    * GroupLazyLoadRenderer is used to perform lazy load grouping
    *
    * @hidden
    */
export class GroupLazyLoadRenderer extends ContentRender implements IRenderer {
        constructor(parent: IGrid, locator?: ServiceLocator);
        /** @hidden */
        pageSize: number;
        /** @hidden */
        cacheMode: boolean;
        /** @hidden */
        cacheBlockSize: number;
        /** @hidden */
        ignoreAccent: boolean;
        /** @hidden */
        allowCaseSensitive: boolean;
        /**
            * @param {HTMLTableRowElement} tr - specifies the table row element
            * @returns {void}
            * @hidden
            */
        captionExpand(tr: HTMLTableRowElement): void;
        /**
            * @param {HTMLTableRowElement} tr - specifies the table row element
            * @returns {void}
            * @hidden
            */
        captionCollapse(tr: HTMLTableRowElement): void;
        /**
            * @returns {void}
            * @hidden */
        setLazyLoadPageSize(): void;
        /**
            * @returns {void}
            * @hidden */
        clearLazyGroupCache(): void;
        private clearCache;
        private refreshCaches;
        private getInitialCaptionIndexes;
        /**
            * @param {string} uid - specifies the uid
            * @returns {number} returns the row object uid
            * @hidden
            */
        getRowObjectIndexByUid(uid: string): number;
        /**
            * @param {Row<Column>} row - specifies the row
            * @param {number} index - specifies the index
            * @returns {void}
            * @hidden
            */
        maintainRows(row: Row<Column>, index?: number): void;
        /**
            * @param {boolean} isReorder - specifies the isreorder
            * @returns {Row<Column>[]} returns the row
            * @hidden
            */
        initialGroupRows(isReorder?: boolean): Row<Column>[];
        /**
            * @returns {Row<Column>[]} retruns the row
            * @hidden */
        getRenderedRowsObject(): Row<Column>[];
        private getCacheRowsOnDownScroll;
        private getCacheRowsOnUpScroll;
        private scrollHandler;
        private scrollUpEndRowHandler;
        private scrollDownHandler;
        private getCurrentBlockEndIndex;
        private removeBlock;
        private scrollUpHandler;
        private findRowElements;
        private getRowElementByUid;
        private removeTopRows;
        private removeBottomRows;
        private setCache;
        private captionRowExpand;
        private scrollReset;
        private updateCurrentViewData;
        /**
            * @returns {Row<Column>[]} returns the row
            * @hidden */
        getGroupCache(): {
                [x: number]: Row<Column>[];
        };
        /**
            * @returns {Row<Column>[]} returns the row
            * @hidden */
        getRows(): Row<Column>[];
        /**
            * @returns {Element} returns the element
            * @hidden */
        getRowElements(): Element[];
        /**
            * @param {number} index - specifies the index
            * @returns {Element} returns the element
            * @hidden
            */
        getRowByIndex(index: number): Element;
        /**
            * Tucntion to set the column visibility
            *
            * @param {Column[]} columns - specifies the column
            * @returns {void}
            * @hidden
            */
        setVisible(columns?: Column[]): void;
        /**
            * Function to set display.
            *
            * @param {Object} tr - specifies the row object
            * @param {number} idx - specifies the index
            * @param {string} displayVal - specifies the display value
            * @param {Row<Column>[]} rows - specifies the array of rows
            * @param {number} oriIdx - specifies the index
            * @returns {void}
            * @hidden
            */
        setDisplayNone(tr: Object, idx: number, displayVal: string, rows: Row<Column>[], oriIdx?: number): void;
}

/**
    * ColumnFreezeHeaderRenderer is used to freeze the columns header at right and left
    *
    * @hidden
    */
export class ColumnFreezeHeaderRenderer extends FreezeRender implements IRenderer {
        constructor(parent?: IGrid, locator?: ServiceLocator);
        addEventListener(): void;
        removeEventListener(): void;
        protected setWrapHeight(fRows: NodeListOf<HTMLElement>, mRows: NodeListOf<HTMLElement>, isModeChg: boolean, isContReset?: boolean, isStackedHdr?: boolean, frRows?: NodeListOf<HTMLElement>): void;
        protected refreshHeight(obj: {
                case: string;
                isModeChg?: boolean;
        }): void;
        /**
            * Function to hide header table column based on visible property
            *
            * @param {Column[]} columns - specifies the column[]
            * @returns {void}
            */
        setVisible(columns?: Column[]): void;
        protected filterRenderer(ele: Element, frozenColumn: number, total?: number): Element;
        refreshUI(): void;
        protected refreshFreeze(obj: {
                case: string;
                isModeChg?: boolean;
        }): void;
        renderPanel(): void;
        renderTable(): void;
        protected rfshMovable(): void;
        protected refreshStackedHdrHgt(): void;
        /**
            * @returns {void}
            * @hidden
            */
        updateColgroup(): void;
        getFrozenRightHeader(): Element;
}
/**
    * ColumnFreezeContentRenderer is used to freeze the columns content at right and left
    *
    * @hidden
    */
export class ColumnFreezeContentRenderer extends FreezeContentRender implements IRenderer {
        protected widthService: ColumnWidthService;
        constructor(parent?: IGrid, locator?: ServiceLocator);
        renderPanel(): void;
        renderTable(): void;
        protected appendScrollbar(frozen: Element, movable: Element, isRight?: boolean): void;
        /**
            * @param {string} tableName - specfies the table name
            * @returns {HTMLElement} returns the element
            * @hidden
            */
        getFrozenHeader(tableName: string): HTMLElement;
        getFrozenRightContent(): Element;
        protected getHeaderColGroup(): Element;
        setColGroup(colGroup: Element): Element;
        renderEmpty(tbody: HTMLElement): void;
        protected setHeightToContent(height: number): void;
        protected actionComplete(args: NotifyArgs): void;
        protected batchAdd(args: {
                name: string;
        }): void;
        /**
            * @param {freezeTable} tableName - specfies the table name
            * @returns {Element} - returns the element
            * @hidden
            */
        getTbody(tableName: freezeTable): Element;
        /**
            * @param {NotifyArgs} args - specfies the args
            * @param {freezeTable} tableName - specfies the freeze table
            * @returns {void}
            * @hidden
            */
        setIsFrozen(args: NotifyArgs, tableName: freezeTable): void;
        /**
            * @param {Element} tbody - specfies the element
            * @param {DocumentFragment | HTMLElement} frag - specfies the frag
            * @param {NotifyArgs} args - specfies the args
            * @param {freezeTable} tableName - specfies the tableName
            * @returns {void}
            * @hidden
            */
        appendContent(tbody: Element, frag: DocumentFragment | HTMLElement, args: NotifyArgs, tableName?: freezeTable): void;
        protected refreshHeight(): void;
        /**
            * @param {freezeTable} tableName - specifies the table
            * @returns {void}
            * @hidden
            */
        splitRows(tableName: freezeTable): void;
        /**
            * Get the Freeze pane movable content table data row elements
            *
            * @returns {Element} returns the element
            */
        getMovableRowElements(): Element[];
        /**
            * Get the Freeze pane frozen right content table data row elements
            *
            * @returns {Element} returns the Element
            */
        getFrozenRightRowElements(): Element[];
        /**
            * Get the frozen right row collection in the Freeze pane Grid.
            *
            * @returns {Row[] | HTMLCollectionOf<HTMLTableRowElement>} returns the row object
            */
        getFrozenRightRows(): Row<Column>[] | HTMLCollectionOf<HTMLTableRowElement>;
        /**
            * @param {number} index - specifies the index
            * @returns {Element} returns the element
            * @hidden
            */
        getFrozenRightRowByIndex(index: number): Element;
        /**
            * Get the Row collection in the Grid.
            *
            * @returns {Row[] | HTMLCollectionOf<HTMLTableRowElement>} returns the row object
            */
        getRows(): Row<Column>[] | HTMLCollectionOf<HTMLTableRowElement>;
        /**
            * Get the content table data row elements
            *
            * @returns {Element} returns the element
            */
        getRowElements(): Element[];
}

/**
    *
    * The `ResponsiveDialogRenderer` module is used to render the responsive dialogs.
    */
export class ResponsiveDialogRenderer implements IAction {
        /** @hidden */
        action: ResponsiveDialogAction;
        /** @hidden */
        isCustomDialog: boolean;
        constructor(parent?: IGrid, serviceLocator?: ServiceLocator);
        addEventListener(): void;
        /**
            * Function to show the responsive dialog
            *
            * @param {Column} col - specifies the column
            * @returns {void}
            */
        showResponsiveDialog(col?: Column): void;
        /**
            * Function to render the responsive header
            *
            * @param {Column} col - specifies the column
            * @param {ResponsiveDialogArgs} args - specifies the responsive dialog arguments
            * @param {boolean} isCustomFilter - specifies whether it is custom filter or not
            * @returns {HTMLElement | string} returns the html element or string
            */
        renderResponsiveHeader(col: Column, args?: ResponsiveDialogArgs, isCustomFilter?: boolean): HTMLElement | string;
        removeEventListener(): void;
}

/**
  * `DropDownEditCell` is used to handle dropdown cell type editing.
  *
  * @hidden
  */
export class EditCellBase implements IEditCell {
    protected parent: IGrid;
    protected obj: AutoComplete | CheckBox | ComboBox | DatePicker | TextBox | DropDownList | MaskedTextBox | MultiSelect | TimePicker | Switch;
    protected removeEventHandler: Function;
    constructor(parent?: IGrid);
    create(args: {
        column: Column;
        value: string;
        type?: string;
        requestType?: string;
    }): Element;
    read(element: Element): string | boolean | Date;
    destroy(): void;
}

/**
  * CellRendererFactory
  *
  * @hidden
  */
export class CellRendererFactory {
    cellRenderMap: {
        [c: string]: ICellRenderer<{}>;
    };
    addCellRenderer(name: string | CellType, type: ICellRenderer<{}>): void;
    getCellRenderer(name: string | CellType): ICellRenderer<{}>;
}

/**
  * ServiceLocator
  *
  * @hidden
  */
export class ServiceLocator {
    register<T>(name: string, type: T): void;
    getService<T>(name: string): T;
    registerAdaptiveService(type: Filter | Sort, isAdaptiveUI: boolean, action: ResponsiveDialogAction): void;
}

/**
    * RowModelGenerator is used to generate grid data rows.
    *
    * @hidden
    */
export class RowModelGenerator implements IModelGenerator<Column> {
        protected parent: IGrid;
        /**
            * Constructor for header renderer module
            *
            * @param {IGrid} parent - specifies the IGrid
            */
        constructor(parent?: IGrid);
        generateRows(data: Object, args?: {
                startIndex?: number;
                requestType?: Action;
        }): Row<Column>[];
        protected ensureColumns(): Cell<Column>[];
        protected generateRow(data: Object, index: number, cssClass?: string, indent?: number, pid?: number, tIndex?: number, parentUid?: string): Row<Column>;
        protected refreshForeignKeyRow(options: IRow<Column>): void;
        protected generateCells(options: IRow<Column>): Cell<Column>[];
        /**
            *
            * @param {Column} column - Defines column details
            * @param {string} rowId - Defines row id
            * @param {CellType} cellType  - Defines cell type
            * @param {number} colSpan - Defines colSpan
            * @param {number} oIndex - Defines index
            * @param {Object} foreignKeyData - Defines foreign key data
            * @returns {Cell<Column>} returns cell model
            * @hidden
            */
        generateCell(column: Column, rowId?: string, cellType?: CellType, colSpan?: number, oIndex?: number, foreignKeyData?: Object): Cell<Column>;
        refreshRows(input?: Row<Column>[]): Row<Column>[];
}

/**
    * GroupModelGenerator is used to generate group caption rows and data rows.
    *
    * @hidden
    */
export class GroupModelGenerator extends RowModelGenerator implements IModelGenerator<Column> {
        /** @hidden */
        index: number;
        constructor(parent?: IGrid);
        generateRows(data: {
                length: number;
        }, args?: {
                startIndex?: number;
                requestType?: Action;
        }): Row<Column>[];
        /**
            * @param {GroupedData} data - specifies the data
            * @param {number} indent - specifies the indent
            * @param {number} parentID - specifies the parentID
            * @param {number} childID - specifies the childID
            * @param {number} tIndex - specifies the TIndex
            * @param {string} parentUid - specifies the ParentUid
            * @returns {Row<Column>} returns the Row object
            * @hidden
            */
        generateCaptionRow(data: GroupedData, indent: number, parentID?: number, childID?: number, tIndex?: number, parentUid?: string): Row<Column>;
        /**
            * @param {Object[]} data - specifies the data
            * @param {number} indent - specifies the indent
            * @param {number} childID - specifies the childID
            * @param {number} tIndex - specifies the tIndex
            * @param {string} parentUid - specifies the ParentUid
            * @returns {Row<Column>[]} returns the row object
            * @hidden
            */
        generateDataRows(data: Object[], indent: number, childID?: number, tIndex?: number, parentUid?: string): Row<Column>[];
        refreshRows(input?: Row<Column>[]): Row<Column>[];
        ensureRowVisibility(): void;
}
export interface GroupedData {
        GroupGuid?: string;
        items?: GroupedData;
        field?: string;
        isDataRow?: boolean;
        level?: number;
        key?: string;
        foreignKey?: string;
        count?: number;
        headerText?: string;
}

/**
  * FreezeRowModelGenerator is used to generate grid data rows with freeze row and column.
  *
  * @hidden
  */
export class FreezeRowModelGenerator implements IModelGenerator<Column> {
    constructor(parent: IGrid);
    generateRows(data: Object, notifyArgs?: NotifyArgs, virtualRows?: Row<Column>[]): Row<Column>[];
}

/**
  * ValueFormatter class to globalize the value.
  *
  * @hidden
  */
export class ValueFormatter implements IValueFormatter {
    constructor(cultureName?: string);
    getFormatFunction(format: NumberFormatOptions | DateFormatOptions): Function;
    getParserFunction(format: NumberFormatOptions | DateFormatOptions): Function;
    fromView(value: string, format: Function, type?: string): string | number | Date;
    toView(value: number | Date, format: Function): string | Object;
    setCulture(cultureName: string): void;
}

/**
  * Content module is used to render grid content
  */
export class VirtualRowModelGenerator implements IModelGenerator<Column> {
    rowModelGenerator: IModelGenerator<Column>;
    parent: IGrid;
    cOffsets: {
        [x: number]: number;
    };
    cache: {
        [x: number]: Row<Column>[];
    };
    movableCache: {
        [x: number]: Row<Column>[];
    };
    frozenRightCache: {
        [x: number]: Row<Column>[];
    };
    rowCache: {
        [x: number]: Row<Column>;
    };
    data: {
        [x: number]: Object[];
    };
    groups: {
        [x: number]: Object;
    };
    currentInfo: VirtualInfo;
    includePrevPage: boolean;
    startIndex: number;
    constructor(parent: IGrid);
    generateRows(data: Object[], e?: NotifyArgs): Row<Column>[];
    getBlockIndexes(page: number): number[];
    getPage(block: number): number;
    isBlockAvailable(value: number): boolean;
    isMovableBlockAvailable(value: number): boolean;
    isFrozenRightBlockAvailable(value: number): boolean;
    getData(): VirtualInfo;
    getColumnIndexes(content?: HTMLElement): number[];
    checkAndResetCache(action: string): boolean;
    refreshColOffsets(): void;
    updateGroupRow(current: Row<Column>[], block: number): Row<Column>[];
    getRows(): Row<Column>[];
    generateCells(): Cell<Column>[];
}

export type ScrollDirection = 'up' | 'down' | 'right' | 'left';
/**
  * InterSectionObserver - class watch whether it enters the viewport.
  *
  * @hidden
  */
export class InterSectionObserver {
    sentinelInfo: SentinelInfo;
    constructor(element: HTMLElement, options: InterSection, movableEle?: HTMLElement);
    observe(callback: Function, onEnterCallback: Function): void;
    check(direction: ScrollDirection): boolean;
    setPageHeight(value: number): void;
}

/**
    * ColumnWidthService
    *
    * @hidden
    */
export class ColumnWidthService {
        constructor(parent: IGrid);
        setWidthToColumns(): void;
        setMinwidthBycalculation(tWidth?: number): void;
        setUndefinedColumnWidth(collection?: Column[]): void;
        setColumnWidth(column: Column, index?: number, module?: string): void;
        /**
            * @returns {void}
            * @hidden
            */
        refreshFrozenScrollbar(): void;
        getSiblingsHeight(element: HTMLElement): number;
        isWidthUndefined(): boolean;
        getWidth(column: Column): string | number;
        getTableWidth(columns: Column[]): number;
        setWidthToTable(): void;
}

/**
    * AriaService
    *
    * @hidden
    */
export class AriaService {
        setOptions(target: HTMLElement, options: IAriaOptions<boolean>): void;
        setExpand(target: HTMLElement, expand: boolean): void;
        setSort(target: HTMLElement, direction?: SortDirection | 'none' | boolean): void;
        setBusy(target: HTMLElement, isBusy: boolean): void;
        setGrabbed(target: HTMLElement, isGrabbed: boolean, remove?: boolean): void;
        setDropTarget(target: HTMLElement, isTarget: boolean): void;
}
/**
    * @hidden
    */
export interface IAriaOptions<T> {
        role?: string;
        expand?: T;
        collapse?: T;
        selected?: T;
        multiselectable?: T;
        sort?: T | 'none';
        busy?: T;
        invalid?: T;
        grabbed?: T;
        dropeffect?: T;
        haspopup?: T;
        level?: T;
        colcount?: string;
        rowcount?: string;
}

/**
    * FocusStrategy class
    *
    * @hidden
    */
export class FocusStrategy {
        parent: IGrid;
        currentInfo: FocusInfo;
        oneTime: boolean;
        swap: SwapInfo;
        content: IFocus;
        header: IFocus;
        active: IFocus;
        fContent: IFocus;
        fHeader: IFocus;
        frContent: IFocus;
        frHeader: IFocus;
        /** @hidden */
        isInfiniteScroll: boolean;
        constructor(parent: IGrid);
        protected focusCheck(e: Event): void;
        protected onFocus(e?: FocusEvent): void;
        protected passiveFocus(e: FocusEvent): void;
        protected onBlur(e?: FocusEvent): void;
        onClick(e: Event | {
                target: Element;
        }, force?: boolean): void;
        protected onKeyPress(e: KeyboardEventArgs): void;
        getFocusedElement(): HTMLElement;
        getContent(): IFocus;
        setActive(content: boolean, isFrozen?: boolean, isFrozenRight?: boolean): void;
        setFocusedElement(element: HTMLElement, e?: KeyboardEventArgs): void;
        focus(e?: KeyboardEventArgs | FocusEvent): void;
        protected removeFocus(e?: FocusEvent): void;
        /**
            * @returns {void}
            * @hidden */
        addOutline(): void;
        /**
            * @returns {void}
            * @hidden */
        focusHeader(): void;
        /**
            * @returns {void}
            * @hidden */
        focusContent(): void;
        private resetFocus;
        protected addFocus(info: FocusInfo, e?: KeyboardEventArgs | FocusEvent): void;
        protected refreshMatrix(content?: boolean): Function;
        addEventListener(): void;
        filterfocus(): void;
        removeEventListener(): void;
        destroy(): void;
        restoreFocus(): void;
        restoreFocusWithAction(e: NotifyArgs): void;
        clearOutline(): void;
        clearIndicator(): void;
        getPrevIndexes(): IIndex;
        forgetPrevious(): void;
        setActiveByKey(action: string, active: IFocus): void;
        internalCellFocus(e: CellFocusArgs): void;
}
/**
    * Create matrix from row collection which act as mental model for cell navigation
    *
    * @hidden
    */
export class Matrix {
        matrix: number[][];
        current: number[];
        columns: number;
        rows: number;
        set(rowIndex: number, columnIndex: number, allow?: boolean): void;
        get(rowIndex: number, columnIndex: number, navigator: number[], action?: string, validator?: Function): number[];
        first(vector: number[], index: number, navigator: number[], moveTo?: boolean, action?: string): number;
        select(rowIndex: number, columnIndex: number): void;
        generate(rows: Row<Column>[], selector: Function, isRowTemplate?: boolean): number[][];
        inValid(value: number): boolean;
}
/**
    * @hidden
    */
export class ContentFocus implements IFocus {
        matrix: Matrix;
        parent: IGrid;
        keyActions: {
                [x: string]: number[];
        };
        lastIdxCell: boolean;
        target: HTMLElement;
        indexesByKey: (action: string) => number[];
        constructor(parent: IGrid);
        getTable(): HTMLTableElement;
        onKeyPress(e: KeyboardEventArgs): void | boolean;
        getCurrentFromAction(action: string, navigator?: number[], isPresent?: boolean, e?: KeyboardEventArgs): number[];
        onClick(e: Event, force?: boolean): void | boolean;
        getFocusInfo(): FocusInfo;
        getFocusable(element: HTMLElement): HTMLElement;
        selector(row: Row<Column>, cell: Cell<Column>, isRowTemplate?: boolean): boolean;
        nextRowFocusValidate(index: number): number;
        previousRowFocusValidate(index: number): number;
        jump(action: string, current: number[]): SwapInfo;
        getNextCurrent(previous?: number[], swap?: SwapInfo, active?: IFocus, action?: string): number[];
        generateRows(rows?: Row<Column>[], optionals?: Object): void;
        getInfo(e?: KeyboardEventArgs): FocusedContainer;
        validator(): Function;
        protected shouldFocusChange(e: KeyboardEventArgs): boolean;
        protected getGridSeletion(): boolean;
}
/**
    * @hidden
    */
export class HeaderFocus extends ContentFocus implements IFocus {
        constructor(parent: IGrid);
        getTable(): HTMLTableElement;
        onClick(e: Event): void | boolean;
        getFocusInfo(): FocusInfo;
        selector(row: Row<Column>, cell: Cell<Column>): boolean;
        jump(action: string, current: number[]): SwapInfo;
        getNextCurrent(previous?: number[], swap?: SwapInfo, active?: IFocus, action?: string): number[];
        generateRows(rows?: Row<Column>[]): void;
        getInfo(e?: KeyboardEventArgs): FocusedContainer;
        validator(): Function;
        protected shouldFocusChange(e: KeyboardEventArgs): boolean;
}
export class FixedContentFocus extends ContentFocus {
        getTable(): HTMLTableElement;
        jump(action: string, current: number[]): SwapInfo;
        getNextCurrent(previous?: number[], swap?: SwapInfo, active?: IFocus, action?: string): number[];
}
export class FixedHeaderFocus extends HeaderFocus {
        jump(action: string, current: number[]): SwapInfo;
        getTable(): HTMLTableElement;
        getNextCurrent(previous?: number[], swap?: SwapInfo, active?: IFocus, action?: string): number[];
}
/** @hidden */
export class SearchBox {
        searchBox: HTMLElement;
        constructor(searchBox: HTMLElement);
        searchFocus(args: {
                target: HTMLInputElement;
        }): void;
        protected searchBlur(args: Event): void;
        wireEvent(): void;
        unWireEvent(): void;
}
export class FixedRightContentFocus extends ContentFocus {
        getTable(): HTMLTableElement;
        jump(action: string, current: number[]): SwapInfo;
        getNextCurrent(previous?: number[], swap?: SwapInfo, active?: IFocus, action?: string): number[];
}
export class FixedRightHeaderFocus extends HeaderFocus {
        jump(action: string, current: number[]): SwapInfo;
        getTable(): HTMLTableElement;
        getNextCurrent(previous?: number[], swap?: SwapInfo, active?: IFocus, action?: string): number[];
}

/**
    * The `ShowHide` module is used to control column visibility.
    */
export class ShowHide {
        /**
            * Constructor for the show hide module.
            *
            * @param {IGrid} parent - specifies the IGrid
            * @hidden
            */
        constructor(parent: IGrid);
        /**
            * Shows a column by column name.
            *
            * @param  {string|string[]} columnName - Defines a single or collection of column names to show.
            * @param  {string} showBy - Defines the column key either as field name or header text.
            * @returns {void}
            */
        show(columnName: string | string[], showBy?: string): void;
        /**
            * Hides a column by column name.
            *
            * @param  {string|string[]} columnName - Defines a single or collection of column names to hide.
            * @param  {string} hideBy - Defines the column key either as field name or header text.
            * @returns {void}
            */
        hide(columnName: string | string[], hideBy?: string): void;
        /**
            * Shows or hides columns by given column collection.
            *
            * @private
            * @param {Column[]} columns - Specifies the columns.
            * @param {Column[]} changedStateColumns - specifies the changedStateColumns
            * @returns {void}
            */
        setVisible(columns?: Column[], changedStateColumns?: Column[]): void;
}

/**
    * Interface for a class PageSettings
    */
export interface PageSettingsModel {
        /**
            * Defines the number of records to be displayed per page.
            *
            * @default 12
            * @blazorType int
            */
        pageSize?: number;
        /**
            * Defines the number of pages to be displayed in the pager container.
            *
            * @default 8
            * @blazorType int
            */
        pageCount?: number;
        /**
            * Defines the current page number of the pager.
            *
            * @default 1
            * @blazorType int
            */
        currentPage?: number;
        /**
            * @hidden
            * Gets the total records count of the Grid.
            *
            * @blazorType int
            */
        totalRecordsCount?: number;
        /**
            * If `enableQueryString` set to true,
            * then it pass current page information as a query string along with the URL while navigating to other page.
            *
            * @default false
            */
        enableQueryString?: boolean;
        /**
            * If `pageSizes` set to true or Array of values,
            * It renders DropDownList in the pager which allow us to select pageSize from DropDownList.
            *
            * @default false
            */
        pageSizes?: boolean | (number | string)[];
        /**
            * Defines the template which renders customized elements in pager instead of default elements.
            * It accepts either [template string](../../common/template-engine/) or HTML element ID.
            *
            * @default null
            */
        template?: string;
}

/**
    * Interface for a class ColumnChooserSettings
    */
export interface ColumnChooserSettingsModel {
        /**
            * Defines the search operator for Column Chooser.
            *
            * @default 'startsWith'
            * @blazorType Syncfusion.Blazor.Operator
            * @blazorDefaultValue Syncfusion.Blazor.Operator.StartsWith
            */
        operator?: string;
        /**
            * If ignoreAccent set to true, then ignores the diacritic characters or accents while searching in column chooser dialog.
            *
            * @default false
            */
        ignoreAccent?: boolean;
}

