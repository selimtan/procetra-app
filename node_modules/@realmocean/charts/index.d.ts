// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../@realmocean/core
//   ../../@realmocean/svgbase
//   ../../@realmocean/data
//   ../../@realmocean/navigations
//   ../../@realmocean/pdfexport
//   ../../@realmocean/calendars
//   ../../@tuval/forms
//   ../../@tuval/core
//   ../../@realmocean/splitbuttons

import { Component, Internationalization } from '@realmocean/core';
import { ModuleDeclaration, L10n } from '@realmocean/core';
import { TapEventArgs, EmitType, ChildProperty } from '@realmocean/core';
import { INotifyPropertyChanged } from '@realmocean/core';
import { Rect, Size, SvgRenderer, CanvasRenderer } from '@realmocean/svgbase';
import { DataManager } from '@realmocean/data';
import { EmitType } from '@realmocean/core';
import { ComponentModel } from '@realmocean/core';
import { ChildProperty } from '@realmocean/core';
import { Size, Rect } from '@realmocean/svgbase';
import { Size } from '@realmocean/svgbase';
import { Rect } from '@realmocean/svgbase';
import { Effect } from '@realmocean/core';
import { PathAttributes, RectAttributes, CircleAttributes, BaseAttibutes } from '@realmocean/svgbase';
import { Rect, TextOption, Size, PathOption, SvgRenderer, CanvasRenderer } from '@realmocean/svgbase';
import { Rect, SvgRenderer, CanvasRenderer } from '@realmocean/svgbase';
import { DataManager, Query } from '@realmocean/data';
import { ItemModel } from '@realmocean/navigations';
import { PathOption } from '@realmocean/svgbase';
import { TextOption, Rect } from '@realmocean/svgbase';
import { PdfPageOrientation } from '@realmocean/pdfexport';
import { Component, INotifyPropertyChanged } from '@realmocean/core';
import { ModuleDeclaration, Internationalization, EmitType } from '@realmocean/core';
import { Rect, Size } from '@realmocean/svgbase';
import { Component, INotifyPropertyChanged, Internationalization, ModuleDeclaration } from '@realmocean/core';
import { Size, Rect, SvgRenderer } from '@realmocean/svgbase';
import { Toolbar } from '@realmocean/navigations';
import { DateRangePicker } from '@realmocean/calendars';
import { Component } from '@realmocean/core';
import { ModuleDeclaration, Internationalization } from '@realmocean/core';
import { Rect, Size, SvgRenderer } from '@realmocean/svgbase';
import { Rect, SvgRenderer } from '@realmocean/svgbase';
import { Tooltip as SVGTooltip } from '@realmocean/svgbase';
import { Component, EmitType } from '@realmocean/core';
import { INotifyPropertyChanged, ModuleDeclaration } from '@realmocean/core';
import { Internationalization } from '@realmocean/core';
import { SvgRenderer, Rect, Size } from '@realmocean/svgbase';
import { Query } from '@realmocean/data';
import { ModuleDeclaration } from '@realmocean/core';
import { SvgRenderer } from '@realmocean/svgbase';
import { Tooltip } from '@realmocean/svgbase';
import { UIView, StyleAttribute, ZStackClass, Control, ColorClass } from '@tuval/forms';
import { int } from '@tuval/core';
import { UIView } from '@tuval/forms';
import { Control } from '@tuval/forms';
import { Event } from '@tuval/core';
import { Query, DataManager } from '@realmocean/data';
import { Rect, TextOption, Size } from '@realmocean/svgbase';
import { MenuEventArgs } from '@realmocean/splitbuttons';
import { Event, float } from '@tuval/core';
import { L10n, Internationalization, EmitType, ModuleDeclaration } from '@realmocean/core';

/**
  * Chart components exported.
  */
import './exports';

/**
  * Chart component exported items
  */

/**
  * Pie Component items exported
  */

/**
  * Financial chart exports
  */

/**
  * Chart and accumulation common files
  */

/**
  * Range Navigator component export methods
  */

/**
  * Bullet Chart component export methods
  */

/**
    * Configures the RangeColorSetting in the chart.
    */
export class RangeColorSetting extends ChildProperty<RangeColorSetting> {
        /**
            * Specify the start value of color mapping range
            */
        start: number;
        /**
            * Specify the end value of color mapping range
            */
        end: number;
        /**
            * Specify the fill colors of point those lies on the given range, if multiple colors mentioned, then we need to fill gradient
            */
        colors: string[];
        /**
            * Specify name for the range mapping item.
            */
        label: string;
}
/**
    * Configures the crosshair in the chart.
    */
export class CrosshairSettings extends ChildProperty<CrosshairSettings> {
        /**
            * If set to true, crosshair line becomes visible.
            *
            * @default false
            */
        enable: boolean;
        /**
            * DashArray for crosshair.
            *
            * @default ''
            */
        dashArray: string;
        /**
            * Options to customize the crosshair line.
            */
        line: BorderModel;
        /**
            * Specifies the line type. Horizontal mode enables the horizontal line and Vertical mode enables the vertical line. They are,
            * * None: Hides both vertical and horizontal crosshair lines.
            * * Both: Shows both vertical and horizontal crosshair lines.
            * * Vertical: Shows the vertical line.
            * * Horizontal: Shows the horizontal line.
            *
            * @default Both
            */
        lineType: LineType;
        /**
            * The color of the border that accepts value in hex and rgba as a valid CSS color string.
            * @default ''
            */
        verticalLineColor: string;
        /**
            * The color of the border that accepts value in hex and rgba as a valid CSS color string.
            * @default ''
            */
        horizontalLineColor: string;
        /**
            * The opacity for background.
            * @default 1
            */
        opacity: number;
}
/**
    * Configures the zooming behavior for the chart.
    */
export class ZoomSettings extends ChildProperty<ZoomSettings> {
        /**
            * If set to true, chart can be zoomed by a rectangular selecting region on the plot area.
            *
            * @default false
            */
        enableSelectionZooming: boolean;
        /**
            * If to true, chart can be pinched to zoom in / zoom out.
            *
            * @default false
            */
        enablePinchZooming: boolean;
        /**
            * If set to true, chart can be zoomed by using mouse wheel.
            *
            * @default false
            */
        enableMouseWheelZooming: boolean;
        /**
            * If set to true, zooming will be performed on mouse up. It requires `enableSelectionZooming` to be true.
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let chart: Chart = new Chart({
            * ...
            *    zoomSettings: {
            *      enableSelectionZooming: true,
            *      enableDeferredZooming: false
            *    }
            * ...
            * });
            * chart.appendTo('#Chart');
            * ```
            *
            * @default true
            */
        enableDeferredZooming: boolean;
        /**
            * Specifies whether to allow zooming vertically or horizontally or in both ways. They are,
            * * x,y: Chart can be zoomed both vertically and horizontally.
            * * x: Chart can be zoomed horizontally.
            * * y: Chart can be zoomed  vertically.
            *  It requires `enableSelectionZooming` to be true.
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let chart: Chart = new Chart({
            * ...
            *    zoomSettings: {
            *      enableSelectionZooming: true,
            *      mode: 'XY'
            *    }
            * ...
            * });
            * chart.appendTo('#Chart');
            * ```
            *
            * @default 'XY'
            */
        mode: ZoomMode;
        /**
            * Specifies the toolkit options for the zooming as follows:
            * * Zoom
            * * ZoomIn
            * * ZoomOut
            * * Pan
            * * Reset
            *
            * @default '["Zoom", "ZoomIn", "ZoomOut", "Pan", "Reset"]'
            */
        toolbarItems: ToolbarItems[];
        /**
            * Specifies whether chart needs to be panned by default.
            *
            * @default false.
            */
        enablePan: boolean;
        /**
            * Specifies whether axis needs to have scrollbar.
            *
            * @default false.
            */
        enableScrollbar: boolean;
}
/**
    * Represents the Chart control.
    * ```html
    * <div id="chart"/>
    * <script>
    *   var chartObj = new Chart({ isResponsive : true });
    *   chartObj.appendTo("#chart");
    * </script>
    * ```
    *
    * @public
    */
export class Chart extends Component<HTMLElement> implements INotifyPropertyChanged {
        /**
            * `lineSeriesModule` is used to add line series to the chart.
            */
        lineSeriesModule: LineSeries;
        /**
            * `multiColoredLineSeriesModule` is used to add multi colored line series to the chart.
            */
        multiColoredLineSeriesModule: MultiColoredLineSeries;
        /**
            * `multiColoredAreaSeriesModule` is used to add multi colored area series to the chart.
            */
        multiColoredAreaSeriesModule: MultiColoredAreaSeries;
        /**
            * `columnSeriesModule` is used to add column series to the chart.
            */
        columnSeriesModule: ColumnSeries;
        /**
            * `ParetoSeriesModule` is used to add pareto series in the chart.
            */
        paretoSeriesModule: ParetoSeries;
        /**
            * `areaSeriesModule` is used to add area series in the chart.
            */
        areaSeriesModule: AreaSeries;
        /**
            * `barSeriesModule` is used to add bar series to the chart.
            */
        barSeriesModule: BarSeries;
        /**
            * `stackingColumnSeriesModule` is used to add stacking column series in the chart.
            */
        stackingColumnSeriesModule: StackingColumnSeries;
        /**
            * `stackingAreaSeriesModule` is used to add stacking area series to the chart.
            */
        stackingAreaSeriesModule: StackingAreaSeries;
        /**
            * `stackingStepAreaSeriesModule` is used to add stacking step area series to the chart.
            */
        stackingStepAreaSeriesModule: StackingStepAreaSeries;
        /**
            * `stackingLineSeriesModule` is used to add stacking line series to the chart.
            */
        stackingLineSeriesModule: StackingLineSeries;
        /**
            * 'CandleSeriesModule' is used to add candle series in the chart.
            */
        candleSeriesModule: CandleSeries;
        /**
            * `stackingBarSeriesModule` is used to add stacking bar series to the chart.
            */
        stackingBarSeriesModule: StackingBarSeries;
        /**
            * `stepLineSeriesModule` is used to add step line series to the chart.
            */
        stepLineSeriesModule: StepLineSeries;
        /**
            * `stepAreaSeriesModule` is used to add step area series to the chart.
            */
        stepAreaSeriesModule: StepAreaSeries;
        /**
            * `polarSeriesModule` is used to add polar series in the chart.
            */
        polarSeriesModule: PolarSeries;
        /**
            *  `radarSeriesModule` is used to add radar series in the chart.
            */
        radarSeriesModule: RadarSeries;
        /**
            * `splineSeriesModule` is used to add spline series to the chart.
            */
        splineSeriesModule: SplineSeries;
        /**
            * `splineAreaSeriesModule` is used to add spline area series to the chart.
            */
        splineAreaSeriesModule: SplineAreaSeries;
        /**
            * `scatterSeriesModule` is used to add scatter series to the chart.
            */
        scatterSeriesModule: ScatterSeries;
        /**
            * `boxAndWhiskerSeriesModule` is used to add line series to the chart.
            */
        boxAndWhiskerSeriesModule: BoxAndWhiskerSeries;
        /**
            * `rangeColumnSeriesModule` is used to add rangeColumn series to the chart.
            */
        rangeColumnSeriesModule: RangeColumnSeries;
        /**
            * histogramSeriesModule is used to add histogram series in chart
            */
        histogramSeriesModule: HistogramSeries;
        /**
            * hiloSeriesModule is used to add hilo series in chart
            */
        hiloSeriesModule: HiloSeries;
        /**
            * hiloOpenCloseSeriesModule is used to add hilo series in chart
            */
        hiloOpenCloseSeriesModule: HiloOpenCloseSeries;
        /**
            * `waterfallSeries` is used to add waterfall series in chart.
            */
        waterfallSeriesModule: WaterfallSeries;
        /**
            * `bubbleSeries` is used to add bubble series in chart.
            */
        bubbleSeriesModule: BubbleSeries;
        /**
            * `rangeAreaSeriesModule` is used to add rangeArea series in chart.
            */
        rangeAreaSeriesModule: RangeAreaSeries;
        /**
            * `splineRangeAreaSeriesModule` is used to add splineRangeArea series in chart.
            */
        splineRangeAreaSeriesModule: SplineRangeAreaSeries;
        /**
            * `tooltipModule` is used to manipulate and add tooltip to the series.
            */
        tooltipModule: Tooltip;
        /**
            * `crosshairModule` is used to manipulate and add crosshair to the chart.
            */
        crosshairModule: Crosshair;
        /**
            * `errorBarModule` is used to manipulate and add errorBar for series.
            */
        errorBarModule: ErrorBar;
        /**
            * `dataLabelModule` is used to manipulate and add data label to the series.
            */
        dataLabelModule: DataLabel;
        /**
            * `datetimeModule` is used to manipulate and add dateTime axis to the chart.
            */
        dateTimeModule: DateTime;
        /**
            * `categoryModule` is used to manipulate and add category axis to the chart.
            */
        categoryModule: Category;
        /**
            * `dateTimeCategoryModule` is used to manipulate date time and category axis
            */
        dateTimeCategoryModule: DateTimeCategory;
        /**
            * `logarithmicModule` is used to manipulate and add log axis to the chart.
            */
        logarithmicModule: Logarithmic;
        /**
            * `legendModule` is used to manipulate and add legend to the chart.
            */
        legendModule: Legend;
        /**
            * `zoomModule` is used to manipulate and add zooming to the chart.
            */
        zoomModule: Zoom;
        /**
            * `dataEditingModule` is used to drag and drop of the point.
            */
        dataEditingModule: DataEditing;
        /**
            * `selectionModule` is used to manipulate and add selection to the chart.
            */
        selectionModule: Selection;
        /**
            * `highlightModule` is used to manipulate and add highlight to the chart.
            */
        highlightModule: Highlight;
        /**
            * `annotationModule` is used to manipulate and add annotation in chart.
            */
        annotationModule: ChartAnnotation;
        /**
            * `stripLineModule` is used to manipulate and add stripLine in chart.
            */
        stripLineModule: StripLine;
        /**
            * `multiLevelLabelModule` is used to manipulate and add multiLevelLabel in chart.
            */
        multiLevelLabelModule: MultiLevelLabel;
        /**
            * 'TrendlineModule' is used to predict the market trend using trendlines
            */
        trendLineModule: Trendlines;
        /**
            * `sMAIndicatorModule` is used to predict the market trend using SMA approach
            */
        sMAIndicatorModule: SmaIndicator;
        /**
            * `eMAIndicatorModule` is used to predict the market trend using EMA approach
            */
        eMAIndicatorModule: EmaIndicator;
        /**
            * `tMAIndicatorModule` is used to predict the market trend using TMA approach
            */
        tMAIndicatorModule: TmaIndicator;
        /**
            * `accumulationDistributionIndicatorModule` is used to predict the market trend using Accumulation Distribution approach
            */
        accumulationDistributionIndicatorModule: AccumulationDistributionIndicator;
        /**
            * `atrIndicatorModule` is used to predict the market trend using ATR approach
            */
        atrIndicatorModule: AtrIndicator;
        /**
            * `rSIIndicatorModule` is used to predict the market trend using RSI approach
            */
        rsiIndicatorModule: RsiIndicator;
        /**
            * `macdIndicatorModule` is used to predict the market trend using Macd approach
            */
        macdIndicatorModule: MacdIndicator;
        /**
            * `stochasticIndicatorModule` is used to predict the market trend using Stochastic approach
            */
        stochasticIndicatorModule: StochasticIndicator;
        /**
            * `momentumIndicatorModule` is used to predict the market trend using Momentum approach
            */
        momentumIndicatorModule: MomentumIndicator;
        /**
            * `bollingerBandsModule` is used to predict the market trend using Bollinger approach
            */
        bollingerBandsModule: BollingerBands;
        /**
            * ScrollBar Module is used to render scrollbar in chart while zooming.
            */
        scrollBarModule: ScrollBar;
        /**
            * Export Module is used to export chart.
            */
        exportModule: Export;
        /**
            * The width of the chart as a string accepts input as both like '100px' or '100%'.
            * If specified as '100%, chart renders to the full width of its parent element.
            *
            * @default null
            */
        width: string;
        /**
            * The height of the chart as a string accepts input both as '100px' or '100%'.
            * If specified as '100%, chart renders to the full height of its parent element.
            *
            * @default null
            */
        height: string;
        /**
            * Title of the chart
            *
            * @default ''
            */
        title: string;
        /**
            * Specifies the DataSource for the chart. It can be an array of JSON objects or an instance of DataManager.
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let dataManager: DataManager = new DataManager({
            *         url: 'http://mvc.syncfusion.com/Services/Northwnd.svc/Tasks/'
            * });
            * let query: Query = new Query().take(50).where('Estimate', 'greaterThan', 0, false);
            * let chart: Chart = new Chart({
            * ...
            *  dataSource:dataManager,
            *   series: [{
            *        xName: 'Id',
            *        yName: 'Estimate',
            *        query: query
            *    }],
            * ...
            * });
            * chart.appendTo('#Chart');
            * ```
            *
            * @default ''
            */
        dataSource: Object | DataManager;
        /**
            * Options for customizing the title of the Chart.
            */
        titleStyle: FontModel;
        /**
            * SubTitle of the chart
            *
            * @default ''
            */
        subTitle: string;
        /**
            * Options for customizing the Subtitle of the Chart.
            */
        subTitleStyle: FontModel;
        /**
            *  Options to customize left, right, top and bottom margins of the chart.
            */
        margin: MarginModel;
        /**
            * Options for customizing the color and width of the chart border.
            */
        border: BorderModel;
        /**
            * The background color of the chart that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        background: string;
        /**
            * Options for configuring the border and background of the chart area.
            */
        chartArea: ChartAreaModel;
        /**
            * Options to configure the horizontal axis.
            */
        primaryXAxis: AxisModel;
        /**
            * Options to configure the vertical axis.
            */
        primaryYAxis: AxisModel;
        /**
            * Options to split Chart into multiple plotting areas horizontally.
            * Each object in the collection represents a plotting area in the Chart.
            */
        rows: RowModel[];
        /**
            * Options to split chart into multiple plotting areas vertically.
            * Each object in the collection represents a plotting area in the chart.
            */
        columns: ColumnModel[];
        /**
            * Secondary axis collection for the chart.
            */
        axes: AxisModel[];
        /**
            * The configuration for series in the chart.
            */
        series: SeriesModel[];
        /**
            * The configuration for annotation in chart.
            */
        annotations: ChartAnnotationSettingsModel[];
        /**
            * Palette for the chart series.
            *
            * @default []
            */
        palettes: string[];
        /**
            * Specifies the theme for the chart.
            *
            * @default 'Material'
            */
        theme: ChartTheme;
        /**
            * Options for customizing the tooltip of the chart.
            */
        tooltip: TooltipSettingsModel;
        /**
            * Options for customizing the crosshair of the chart.
            */
        crosshair: CrosshairSettingsModel;
        /**
            * Options for customizing the legend of the chart.
            */
        legendSettings: LegendSettingsModel;
        /**
            * Options for customizing the points fill color based on condition.
            */
        rangeColorSettings: RangeColorSettingModel[];
        /**
            * Options to enable the zooming feature in the chart.
            */
        zoomSettings: ZoomSettingsModel;
        /**
            * Specifies whether series or data point has to be selected. They are,
            * * none: Disables the selection.
            * * series: selects a series.
            * * point: selects a point.
            * * cluster: selects a cluster of point
            * * dragXY: selects points by dragging with respect to both horizontal and vertical axes
            * * dragX: selects points by dragging with respect to horizontal axis.
            * * dragY: selects points by dragging with respect to vertical axis.
            * * lasso: selects points by dragging with respect to free form.
            *
            * @default None
            */
        selectionMode: SelectionMode;
        /**
            * Specifies whether series or data point has to be selected. They are,
            * * none: Disables the highlight.
            * * series: highlight a series.
            * * point: highlight a point.
            * * cluster: highlight a cluster of point
            *
            * @default None
            */
        highlightMode: HighlightMode;
        /**
            * Specifies whether series or data point has to be selected. They are,
            * * none: sets none as selecting pattern.
            * * chessboard: sets chess board as selecting pattern.
            * * dots: sets dots as  selecting pattern.
            * * diagonalForward: sets diagonal forward as selecting pattern.
            * * crosshatch: sets crosshatch as selecting pattern.
            * * pacman: sets pacman selecting pattern.
            * * diagonalbackward: sets diagonal backward as selecting pattern.
            * * grid: sets grid as selecting pattern.
            * * turquoise: sets turquoise as selecting pattern.
            * * star: sets star as selecting pattern.
            * * triangle: sets triangle as selecting pattern.
            * * circle: sets circle as selecting pattern.
            * * tile: sets tile as selecting pattern.
            * * horizontaldash: sets horizontal dash as selecting pattern.
            * * verticaldash: sets vertical dash as selecting pattern.
            * * rectangle: sets rectangle as selecting pattern.
            * * box: sets box as selecting pattern.
            * * verticalstripe: sets vertical stripe as  selecting pattern.
            * * horizontalstripe: sets horizontal stripe as selecting pattern.
            * * bubble: sets bubble as selecting pattern.
            *
            * @default None
            */
        selectionPattern: SelectionPattern;
        /**
            * Specifies whether series or data point has to be selected. They are,
            * * none: sets none as highlighting pattern.
            * * chessboard: sets chess board as highlighting pattern.
            * * dots: sets dots as highlighting pattern.
            * * diagonalForward: sets diagonal forward as highlighting pattern.
            * * crosshatch: sets crosshatch as highlighting pattern.
            * * pacman: sets pacman highlighting  pattern.
            * * diagonalbackward: sets diagonal backward as highlighting pattern.
            * * grid: sets grid as highlighting pattern.
            * * turquoise: sets turquoise as highlighting pattern.
            * * star: sets star as highlighting  pattern.
            * * triangle: sets triangle as highlighting pattern.
            * * circle: sets circle as highlighting  pattern.
            * * tile: sets tile as highlighting pattern.
            * * horizontaldash: sets horizontal dash as highlighting pattern.
            * * verticaldash: sets vertical dash as highlighting pattern.
            * * rectangle: sets rectangle as highlighting  pattern.
            * * box: sets box as highlighting pattern.
            * * verticalstripe: sets vertical stripe as highlighting  pattern.
            * * horizontalstripe: sets horizontal stripe as highlighting  pattern.
            * * bubble: sets bubble as highlighting  pattern.
            *
            * @default None
            */
        highlightPattern: SelectionPattern;
        /**
            * If set true, enables the multi selection in chart. It requires `selectionMode` to be `Point` | `Series` | or `Cluster`.
            *
            * @default false
            */
        isMultiSelect: boolean;
        /**
            * If set true, enables the multi drag selection in chart. It requires `selectionMode` to be `Dragx` | `DragY` | or `DragXY`.
            *
            * @default false
            */
        allowMultiSelection: boolean;
        /**
            * To enable export feature in chart.
            *
            * @default true
            */
        enableExport: boolean;
        /**
            * To enable export feature in blazor chart.
            *
            * @default false
            */
        allowExport: boolean;
        /**
            * Specifies the point indexes to be selected while loading a chart.
            * It requires `selectionMode` or `highlightMode` to be `Point` | `Series` | or `Cluster`.
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let chart: Chart = new Chart({
            * ...
            *   selectionMode: 'Point',
            *   selectedDataIndexes: [ { series: 0, point: 1},
            *                          { series: 2, point: 3} ],
            * ...
            * });
            * chart.appendTo('#Chart');
            * ```
            *
            * @default []
            */
        selectedDataIndexes: IndexesModel[];
        /**
            * Specifies whether a grouping separator should be used for a number.
            *
            * @default false
            */
        useGroupingSeparator: boolean;
        /**
            * If set to true, both axis interval will be calculated automatically with respect to the zoomed range.
            *
            * @default false
            */
        enableAutoIntervalOnBothAxis: boolean;
        /**
            * It specifies whether the chart should be render in transposed manner or not.
            *
            * @default false
            */
        isTransposed: boolean;
        /**
            * It specifies whether the chart should be rendered in canvas mode
            *
            * @default false
            */
        enableCanvas: boolean;
        /**
            * The background image of the chart that accepts value in string as url link or location of an image.
            *
            * @default null
            */
        backgroundImage: string;
        /**
            * Defines the collection of technical indicators, that are used in financial markets
            */
        indicators: TechnicalIndicatorModel[];
        /**
            * If set true, Animation process will be executed.
            *
            * @default true
            */
        enableAnimation: boolean;
        /**
            * Description for chart.
            *
            * @default null
            */
        description: string;
        /**
            * TabIndex value for the chart.
            *
            * @default 1
            */
        tabIndex: number;
        /**
            * To enable the side by side placing the points for column type series.
            *
            * @default true
            */
        enableSideBySidePlacement: boolean;
        /**
            * Triggers after resizing of chart
            *
            * @event resized
            * @blazorProperty 'Resized'
            */
        resized: EmitType<IResizeEventArgs>;
        /**
            * Triggers before resizing of chart
            * @event
            * @blazorProperty 'BeforeResize'
            */
        beforeResize: EmitType<IBeforeResizeEventArgs>;
        /**
            * Triggers before the annotation gets rendered.
            *
            * @event annotationRender
            * @deprecated
            */
        annotationRender: EmitType<IAnnotationRenderEventArgs>;
        /**
            * Triggers before the prints gets started.
            *
            * @event beforePrint
            * @blazorProperty 'OnPrint'
            */
        beforePrint: EmitType<IPrintEventArgs>;
        /**
            * Triggers after chart load.
            *
            * @event loaded
            * @blazorProperty 'Loaded'
            */
        loaded: EmitType<ILoadedEventArgs>;
        /**
            * Triggers before the export gets started.
            *
            * @event beforeExport
            */
        beforeExport: EmitType<IExportEventArgs>;
        /**
            * Triggers after the export completed.
            *
            * @event afterExport
            * @blazorProperty 'AfterExport'
            */
        afterExport: EmitType<IAfterExportEventArgs>;
        /**
            * Triggers before chart load.
            *
            * @event load
            */
        load: EmitType<ILoadedEventArgs>;
        /**
            * Triggers after animation is completed for the series.
            *
            * @event animationComplete
            * @blazorProperty 'OnAnimationComplete'
            */
        animationComplete: EmitType<IAnimationCompleteEventArgs>;
        /**
            * Triggers before the legend is rendered.
            *
            * @event legendRender
            * @deprecated
            */
        legendRender: EmitType<ILegendRenderEventArgs>;
        /**
            * Triggers before the data label for series is rendered.
            *
            * @event textRender
            * @deprecated
            */
        textRender: EmitType<ITextRenderEventArgs>;
        /**
            * Triggers before each points for the series is rendered.
            *
            * @event pointRender
            * @deprecated
            */
        pointRender: EmitType<IPointRenderEventArgs>;
        /**
            * Triggers before the series is rendered.
            *
            * @event seriesRender
            * @deprecated
            */
        seriesRender: EmitType<ISeriesRenderEventArgs>;
        /**
            * Triggers before each axis label is rendered.
            *
            * @event axisLabelRender
            * @deprecated
            */
        axisLabelRender: EmitType<IAxisLabelRenderEventArgs>;
        /**
            * Triggers when x axis label clicked.
            *
            * @event axisLabelClick
            * @deprecated
            */
        axisLabelClick: EmitType<IAxisLabelClickEventArgs>;
        /**
            * Triggers before each axis range is rendered.
            *
            * @event axisRangeCalculated
            * @deprecated
            */
        axisRangeCalculated: EmitType<IAxisRangeCalculatedEventArgs>;
        /**
            * Triggers before each axis multi label is rendered.
            *
            * @event axisMultiLabelRender
            * @deprecated
            */
        axisMultiLabelRender: EmitType<IAxisMultiLabelRenderEventArgs>;
        /**
            * Triggers after click on legend
            *
            * @event legendClick
            */
        legendClick: EmitType<ILegendClickEventArgs>;
        /**
            * Triggers after click on multiLevelLabelClick
            *
            * @event multiLevelLabelClick
            */
        multiLevelLabelClick: EmitType<IMultiLevelLabelClickEventArgs>;
        /**
            * Triggers before the tooltip for series is rendered.
            *
            * @event tooltipRender
            */
        tooltipRender: EmitType<ITooltipRenderEventArgs>;
        /**
            * Triggers before the shared tooltip for series is rendered.
            * This applicable for blazor only.
            *
            * @event sharedTooltipRender
            */
        sharedTooltipRender: EmitType<ISharedTooltipRenderEventArgs>;
        /**
            * Triggers on hovering the chart.
            *
            * @event chartMouseMove
            * @blazorProperty 'OnChartMouseMove'
            */
        chartMouseMove: EmitType<IMouseEventArgs>;
        /**
            * Triggers on clicking the chart.
            *
            * @event chartMouseClick
            * @blazorProperty 'OnChartMouseClick'
            */
        chartMouseClick: EmitType<IMouseEventArgs>;
        /**
            * Triggers on point click.
            *
            * @event pointClick
            * @blazorProperty 'OnPointClick'
            */
        pointClick: EmitType<IPointEventArgs>;
        /**
            * Triggers on point double click.
            *
            * @event pointDoubleClick
            * @blazorProperty 'OnPointDoubleClick'
            */
        pointDoubleClick: EmitType<IPointEventArgs>;
        /**
            * Triggers on point move.
            *
            * @event pointMove
            * @blazorProperty 'PointMoved'
            */
        pointMove: EmitType<IPointEventArgs>;
        /**
            * Triggers when cursor leaves the chart.
            *
            * @event chartMouseLeave
            * @blazorProperty 'OnChartMouseLeave'
            */
        chartMouseLeave: EmitType<IMouseEventArgs>;
        /**
            * Triggers on mouse down.
            *
            * @event chartMouseDown
            * @blazorProperty 'OnChartMouseDown'
            */
        chartMouseDown: EmitType<IMouseEventArgs>;
        /**
            * Triggers on mouse up.
            *
            * @event chartMouseUp
            * @blazorProperty 'OnChartMouseUp'
            */
        chartMouseUp: EmitType<IMouseEventArgs>;
        /**
            * Triggers after the drag selection is completed.
            *
            * @event dragComplete
            * @blazorProperty 'OnDragComplete'
            */
        dragComplete: EmitType<IDragCompleteEventArgs>;
        /**
            * Triggers after the selection is completed.
            *
            * @event selectionComplete
            * @blazorProperty 'OnSelectionComplete'
            */
        selectionComplete: EmitType<ISelectionCompleteEventArgs>;
        /**
            * Triggers after the zoom selection is completed.
            *
            * @event zoomComplete
            * @deprecated
            */
        zoomComplete: EmitType<IZoomCompleteEventArgs>;
        /**
            * Triggers after the zoom selection is triggered.
            *
            * @event onZooming
            */
        onZooming: EmitType<IZoomingEventArgs>;
        /**
            * Triggers when start the scroll.
            *
            * @event scrollStart
            * @blazorProperty 'OnScrollStart'
            */
        scrollStart: EmitType<IScrollEventArgs>;
        /**
            * Triggers after the scroll end.
            *
            * @event scrollEnd
            * @blazorProperty 'OnScrollEnd'
            */
        scrollEnd: EmitType<IScrollEventArgs>;
        /**
            * Triggers when change the scroll.
            *
            * @event scrollChanged
            * @blazorProperty 'ScrollChanged'
            */
        scrollChanged: EmitType<IScrollEventArgs>;
        /**
            * Triggers when the point drag start.
            *
            * @event dragStart
            */
        dragStart: EmitType<IDataEditingEventArgs>;
        /**
            * Triggers when the point is dragging.
            *
            * @event drag
            */
        drag: EmitType<IDataEditingEventArgs>;
        /**
            * Triggers when the point drag end.
            *
            * @event dragEnd
            */
        dragEnd: EmitType<IDataEditingEventArgs>;
        /** @private */
        stockChart: StockChart;
        /**
            * localization object
            *
            * @private
            */
        localeObject: L10n;
        /**
            * Gets the current visible axis of the Chart.
            *
            * @hidden
            */
        axisCollections: Axis[];
        /**
            * Gets the current visible series of the Chart.
            *
            * @hidden
            */
        visibleSeries: Series[];
        /**
            * Render panel for chart.
            *
            * @hidden
            */
        chartAxisLayoutPanel: CartesianAxisLayoutPanel | PolarRadarPanel;
        /**
            * Gets all the horizontal axis of the Chart.
            *
            * @hidden
            */
        horizontalAxes: Axis[];
        /**
            * Gets all the vertical axis of the Chart.
            *
            * @hidden
            */
        verticalAxes: Axis[];
        /**
            * Gets the inverted chart.
            *
            * @hidden
            */
        requireInvertedAxis: boolean;
        /** @private */
        svgObject: Element;
        /** @private */
        isTouch: boolean;
        /** @private */
        renderer: SvgRenderer | CanvasRenderer;
        /** @private */
        svgRenderer: SvgRenderer;
        /** @private */
        canvasRender: CanvasRenderer;
        /** @private */
        initialClipRect: Rect;
        /** @private */
        seriesElements: Element;
        /** @private */
        indicatorElements: Element;
        /** @private */
        trendLineElements: Element;
        /** @private */
        visibleSeriesCount: number;
        /** @private */
        intl: Internationalization;
        /** @private */
        dataLabelCollections: Rect[];
        /** @private */
        rotatedDataLabelCollections: ChartLocation[][];
        /** @private */
        dataLabelElements: Element;
        /** @private */
        mouseX: number;
        /** @private */
        mouseY: number;
        /** @private */
        animateSeries: boolean;
        /** @private */
        redraw: boolean;
        /** @public */
        animated: boolean;
        /** @public */
        duration: number;
        /** @private */
        availableSize: Size;
        /** @private */
        delayRedraw: boolean;
        /** @private */
        isDoubleTap: boolean;
        /** @private */
        mouseDownX: number;
        /** @private */
        mouseDownY: number;
        /** @private */
        previousMouseMoveX: number;
        /** @private */
        previousMouseMoveY: number;
        /** @private */
        isChartDrag: boolean;
        /** @private */
        isPointMouseDown: boolean;
        /** @private */
        isScrolling: boolean;
        /** @private */
        dragY: number;
        /** @private */
        disableTrackTooltip: boolean;
        /** @private */
        startMove: boolean;
        /** @private */
        yAxisElements: Element;
        /** @private */
        radius: number;
        /** @private */
        visible: number;
        /** @private */
        clickCount: number;
        /** @private */
        singleClickTimer: number;
        /** @private */
        chartAreaType: string;
        /** @private */
        isRtlEnabled: boolean;
        /**
            * `markerModule` is used to manipulate and add marker to the series.
            *
            * @private
            */
        markerRender: Marker;
        /** @private */
        themeStyle: IThemeStyle;
        /** @private */
        scrollElement: Element;
        /** @private */
        scrollSettingEnabled: boolean;
        /** @private */
        svgId: string;
        /** @private */
        isBlazor: boolean;
        /** @private */
        isRedrawSelection: boolean;
        /** @private */
        resizeBound: any;
        /** @private */
        longPressBound: any;
        /**
            * Constructor for creating the widget
            *
            * @hidden
            */
        constructor(options?: ChartModel, element?: string | HTMLElement);
        /**
            * Initialize the event handler.
            */
        protected preRender(): void;
        /**
            * To Initialize the control rendering.
            */
        protected render(): void;
        /**
            * Gets the localized label by locale keyword.
            *
            * @param  {string} key key
            * @returns {string} localized label
            */
        getLocalizedLabel(key: string): string;
        /**
            * Animate the series bounds.
            *
            * @private
            */
        animate(duration?: number): void;
        /**
            * Refresh the chart bounds.
            *
            * @private
            */
        refreshBound(): void;
        /**
            * To render the legend
            *
            * @private
            */
        renderAxes(): Element;
        /**
            * @private
            */
        renderSeries(): void;
        protected renderCanvasSeries(item: Series): void;
        processData(render?: boolean): void;
        /**
            * Handles the print method for chart control.
            */
        print(id?: string[] | string | Element): void;
        /** @private */
        refreshTechnicalIndicator(series: SeriesBase): void;
        /**
            * @private
            */
        renderAreaBorder(): void;
        /**
            * To add series for the chart
            *
            * @param {SeriesModel[]} seriesCollection - Defines the series collection to be added in chart.
            * @returns {void}.
            */
        addSeries(seriesCollection: SeriesModel[]): void;
        /**
            * To Remove series for the chart
            *
            * @param {number} index - Defines the series index to be remove in chart series
            * @returns {void}
            */
        removeSeries(index: number): void;
        /**
            * To Clear all series for the chart
            *
            * @returns {void}.
            */
        clearSeries(): void;
        /**
            * To add secondary axis for the chart
            *
            * @param {AxisModel[]} axisCollection - Defines the axis collection to be added in chart.
            * @returns {void}.
            */
        addAxes(axisCollection: AxisModel[]): void;
        /**
            * To remove secondary axis for the chart
            *
            * @param {number} index - Defines the axis collection to be removed in chart.
            * @returns {void}
            */
        removeAxis(index: number): void;
        /**
            * To destroy the widget
            *
            * @function destroy
            * @returns {void}.
            * @member of Chart
            */
        destroy(): void;
        /**
            * Get component name
            */
        getModuleName(): string;
        /**
            * Get the properties to be maintained in the persisted state.
            *
            * @private
            */
        getPersistData(): string;
        /**
            * Method to create SVG element.
            */
        createChartSvg(): void;
        /**
            * Finds the orientation.
            *
            * @returns {boolean}
            * @private
            */
        isOrientation(): boolean;
        /**
            * Handles the long press on chart.
            *
            * @returns {boolean} false
            * @private
            */
        longPress(e?: TapEventArgs): boolean;
        /**
            * Export method for the chart.
            */
        export(type: ExportType, fileName: string): void;
        /**
            * Handles the chart resize.
            *
            * @returns {boolean} false
            * @private
            */
        chartResize(): boolean;
        /**
            * Handles the mouse move.
            *
            * @returns {boolean} false
            * @private
            */
        mouseMove(e: PointerEvent): boolean;
        /**
            * Handles the mouse leave.
            *
            * @returns {boolean} false
            * @private
            */
        mouseLeave(e: PointerEvent): boolean;
        /**
            * Handles the mouse leave on chart.
            *
            * @returns {boolean} false
            * @private
            */
        chartOnMouseLeave(e: PointerEvent | TouchEvent): boolean;
        /**
            * Handles the mouse click on chart.
            *
            * @returns {boolean} false
            * @private
            */
        chartOnMouseClick(e: PointerEvent | TouchEvent): boolean;
        /**
            * Handles the mouse move on chart.
            *
            * @returns {boolean} false
            * @private
            */
        chartOnMouseMove(e: PointerEvent | TouchEvent): boolean;
        /**
            * Handles the mouse down on chart.
            *
            * @returns {boolean} false
            * @private
            */
        chartOnMouseDown(e: PointerEvent): boolean;
        /**
            * Handles the mouse up.
            *
            * @returns {boolean} false
            * @private
            */
        mouseEnd(e: PointerEvent): boolean;
        /**
            * Handles the mouse up.
            *
            * @returns {boolean}
            * @private
            */
        chartOnMouseUp(e: PointerEvent | TouchEvent): boolean;
        /**
            * Method to set the annotation content dynamically for chart.
            */
        setAnnotationValue(annotationIndex: number, content: string): void;
        /**
            * To provide the array of modules needed for control rendering
            *
            * @returns {ModuleDeclaration[]}
            * @private
            */
        requiredModules(): ModuleDeclaration[];
        /**
            * To Remove the SVG.
            * @return {boolean}
            * @private
            */
        removeSvg(): void;
        /**
            * Refresh the axis default value.
            *
            * @returns {boolean}
            * @private
            */
        refreshAxis(): void;
        /**
            * Fix for live data update flicker issue
            */
        refreshLiveData(): void;
        /**
            * Called internally if any of the property value changed.
            * @private
            */
        onPropertyChanged(newProp: ChartModel, oldProp: ChartModel): void;
}

/**
    * Interface for a class RangeColorSetting
    */
export interface RangeColorSettingModel {
        /**
            * Specify the start value of color mapping range
            */
        start?: number;
        /**
            * Specify the end value of color mapping range
            */
        end?: number;
        /**
            * Specify the fill colors of point those lies on the given range, if multiple colors mentioned, then we need to fill gradient
            */
        colors?: string[];
        /**
            * Specify name for the range mapping item.
            */
        label?: string;
}
/**
    * Interface for a class CrosshairSettings
    */
export interface CrosshairSettingsModel {
        /**
            * If set to true, crosshair line becomes visible.
            *
            * @default false
            */
        enable?: boolean;
        /**
            * DashArray for crosshair.
            *
            * @default ''
            */
        dashArray?: string;
        /**
            * Options to customize the crosshair line.
            */
        line?: BorderModel;
        /**
            * Specifies the line type. Horizontal mode enables the horizontal line and Vertical mode enables the vertical line. They are,
            * * None: Hides both vertical and horizontal crosshair lines.
            * * Both: Shows both vertical and horizontal crosshair lines.
            * * Vertical: Shows the vertical line.
            * * Horizontal: Shows the horizontal line.
            *
            * @default Both
            */
        lineType?: LineType;
        /**
            * The color of the border that accepts value in hex and rgba as a valid CSS color string.
            * @default ''
            */
        verticalLineColor?: string;
        /**
            * The color of the border that accepts value in hex and rgba as a valid CSS color string.
            * @default ''
            */
        horizontalLineColor?: string;
        /**
            * The opacity for background.
            * @default 1
            */
        opacity?: number;
}
/**
    * Interface for a class ZoomSettings
    */
export interface ZoomSettingsModel {
        /**
            * If set to true, chart can be zoomed by a rectangular selecting region on the plot area.
            *
            * @default false
            */
        enableSelectionZooming?: boolean;
        /**
            * If to true, chart can be pinched to zoom in / zoom out.
            *
            * @default false
            */
        enablePinchZooming?: boolean;
        /**
            * If set to true, chart can be zoomed by using mouse wheel.
            *
            * @default false
            */
        enableMouseWheelZooming?: boolean;
        /**
            * If set to true, zooming will be performed on mouse up. It requires `enableSelectionZooming` to be true.
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let chart: Chart = new Chart({
            * ...
            *    zoomSettings: {
            *      enableSelectionZooming: true,
            *      enableDeferredZooming: false
            *    }
            * ...
            * });
            * chart.appendTo('#Chart');
            * ```
            *
            * @default true
            */
        enableDeferredZooming?: boolean;
        /**
            * Specifies whether to allow zooming vertically or horizontally or in both ways. They are,
            * * x,y: Chart can be zoomed both vertically and horizontally.
            * * x: Chart can be zoomed horizontally.
            * * y: Chart can be zoomed  vertically.
            *  It requires `enableSelectionZooming` to be true.
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let chart: Chart = new Chart({
            * ...
            *    zoomSettings: {
            *      enableSelectionZooming: true,
            *      mode: 'XY'
            *    }
            * ...
            * });
            * chart.appendTo('#Chart');
            * ```
            *
            * @default 'XY'
            */
        mode?: ZoomMode;
        /**
            * Specifies the toolkit options for the zooming as follows:
            * * Zoom
            * * ZoomIn
            * * ZoomOut
            * * Pan
            * * Reset
            *
            * @default '["Zoom", "ZoomIn", "ZoomOut", "Pan", "Reset"]'
            */
        toolbarItems?: ToolbarItems[];
        /**
            * Specifies whether chart needs to be panned by default.
            *
            * @default false.
            */
        enablePan?: boolean;
        /**
            * Specifies whether axis needs to have scrollbar.
            *
            * @default false.
            */
        enableScrollbar?: boolean;
}
/**
    * Interface for a class Chart
    */
export interface ChartModel extends ComponentModel {
        /**
            * The width of the chart as a string accepts input as both like '100px' or '100%'.
            * If specified as '100%, chart renders to the full width of its parent element.
            *
            * @default null
            */
        width?: string;
        /**
            * The height of the chart as a string accepts input both as '100px' or '100%'.
            * If specified as '100%, chart renders to the full height of its parent element.
            *
            * @default null
            */
        height?: string;
        /**
            * Title of the chart
            *
            * @default ''
            */
        title?: string;
        /**
            * Specifies the DataSource for the chart. It can be an array of JSON objects or an instance of DataManager.
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let dataManager: DataManager = new DataManager({
            *         url: 'http://mvc.syncfusion.com/Services/Northwnd.svc/Tasks/'
            * });
            * let query: Query = new Query().take(50).where('Estimate', 'greaterThan', 0, false);
            * let chart: Chart = new Chart({
            * ...
            *  dataSource:dataManager,
            *   series: [{
            *        xName: 'Id',
            *        yName: 'Estimate',
            *        query: query
            *    }],
            * ...
            * });
            * chart.appendTo('#Chart');
            * ```
            *
            * @default ''
            */
        dataSource?: Object | DataManager;
        /**
            * Options for customizing the title of the Chart.
            */
        titleStyle?: FontModel;
        /**
            * SubTitle of the chart
            *
            * @default ''
            */
        subTitle?: string;
        /**
            * Options for customizing the Subtitle of the Chart.
            */
        subTitleStyle?: FontModel;
        /**
            *  Options to customize left, right, top and bottom margins of the chart.
            */
        margin?: MarginModel;
        /**
            * Options for customizing the color and width of the chart border.
            */
        border?: BorderModel;
        /**
            * The background color of the chart that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        background?: string;
        /**
            * Options for configuring the border and background of the chart area.
            */
        chartArea?: ChartAreaModel;
        /**
            * Options to configure the horizontal axis.
            */
        primaryXAxis?: AxisModel;
        /**
            * Options to configure the vertical axis.
            */
        primaryYAxis?: AxisModel;
        /**
            * Options to split Chart into multiple plotting areas horizontally.
            * Each object in the collection represents a plotting area in the Chart.
            */
        rows?: RowModel[];
        /**
            * Options to split chart into multiple plotting areas vertically.
            * Each object in the collection represents a plotting area in the chart.
            */
        columns?: ColumnModel[];
        /**
            * Secondary axis collection for the chart.
            */
        axes?: AxisModel[];
        /**
            * The configuration for series in the chart.
            */
        series?: SeriesModel[];
        /**
            * The configuration for annotation in chart.
            */
        annotations?: ChartAnnotationSettingsModel[];
        /**
            * Palette for the chart series.
            *
            * @default []
            */
        palettes?: string[];
        /**
            * Specifies the theme for the chart.
            *
            * @default 'Material'
            */
        theme?: ChartTheme;
        /**
            * Options for customizing the tooltip of the chart.
            */
        tooltip?: TooltipSettingsModel;
        /**
            * Options for customizing the crosshair of the chart.
            */
        crosshair?: CrosshairSettingsModel;
        /**
            * Options for customizing the legend of the chart.
            */
        legendSettings?: LegendSettingsModel;
        /**
            * Options for customizing the points fill color based on condition.
            */
        rangeColorSettings?: RangeColorSettingModel[];
        /**
            * Options to enable the zooming feature in the chart.
            */
        zoomSettings?: ZoomSettingsModel;
        /**
            * Specifies whether series or data point has to be selected. They are,
            * * none: Disables the selection.
            * * series: selects a series.
            * * point: selects a point.
            * * cluster: selects a cluster of point
            * * dragXY: selects points by dragging with respect to both horizontal and vertical axes
            * * dragX: selects points by dragging with respect to horizontal axis.
            * * dragY: selects points by dragging with respect to vertical axis.
            * * lasso: selects points by dragging with respect to free form.
            *
            * @default None
            */
        selectionMode?: SelectionMode;
        /**
            * Specifies whether series or data point has to be selected. They are,
            * * none: Disables the highlight.
            * * series: highlight a series.
            * * point: highlight a point.
            * * cluster: highlight a cluster of point
            *
            * @default None
            */
        highlightMode?: HighlightMode;
        /**
            * Specifies whether series or data point has to be selected. They are,
            * * none: sets none as selecting pattern.
            * * chessboard: sets chess board as selecting pattern.
            * * dots: sets dots as  selecting pattern.
            * * diagonalForward: sets diagonal forward as selecting pattern.
            * * crosshatch: sets crosshatch as selecting pattern.
            * * pacman: sets pacman selecting pattern.
            * * diagonalbackward: sets diagonal backward as selecting pattern.
            * * grid: sets grid as selecting pattern.
            * * turquoise: sets turquoise as selecting pattern.
            * * star: sets star as selecting pattern.
            * * triangle: sets triangle as selecting pattern.
            * * circle: sets circle as selecting pattern.
            * * tile: sets tile as selecting pattern.
            * * horizontaldash: sets horizontal dash as selecting pattern.
            * * verticaldash: sets vertical dash as selecting pattern.
            * * rectangle: sets rectangle as selecting pattern.
            * * box: sets box as selecting pattern.
            * * verticalstripe: sets vertical stripe as  selecting pattern.
            * * horizontalstripe: sets horizontal stripe as selecting pattern.
            * * bubble: sets bubble as selecting pattern.
            *
            * @default None
            */
        selectionPattern?: SelectionPattern;
        /**
            * Specifies whether series or data point has to be selected. They are,
            * * none: sets none as highlighting pattern.
            * * chessboard: sets chess board as highlighting pattern.
            * * dots: sets dots as highlighting pattern.
            * * diagonalForward: sets diagonal forward as highlighting pattern.
            * * crosshatch: sets crosshatch as highlighting pattern.
            * * pacman: sets pacman highlighting  pattern.
            * * diagonalbackward: sets diagonal backward as highlighting pattern.
            * * grid: sets grid as highlighting pattern.
            * * turquoise: sets turquoise as highlighting pattern.
            * * star: sets star as highlighting  pattern.
            * * triangle: sets triangle as highlighting pattern.
            * * circle: sets circle as highlighting  pattern.
            * * tile: sets tile as highlighting pattern.
            * * horizontaldash: sets horizontal dash as highlighting pattern.
            * * verticaldash: sets vertical dash as highlighting pattern.
            * * rectangle: sets rectangle as highlighting  pattern.
            * * box: sets box as highlighting pattern.
            * * verticalstripe: sets vertical stripe as highlighting  pattern.
            * * horizontalstripe: sets horizontal stripe as highlighting  pattern.
            * * bubble: sets bubble as highlighting  pattern.
            *
            * @default None
            */
        highlightPattern?: SelectionPattern;
        /**
            * If set true, enables the multi selection in chart. It requires `selectionMode` to be `Point` | `Series` | or `Cluster`.
            *
            * @default false
            */
        isMultiSelect?: boolean;
        /**
            * If set true, enables the multi drag selection in chart. It requires `selectionMode` to be `Dragx` | `DragY` | or `DragXY`.
            *
            * @default false
            */
        allowMultiSelection?: boolean;
        /**
            * To enable export feature in chart.
            *
            * @default true
            */
        enableExport?: boolean;
        /**
            * To enable export feature in blazor chart.
            *
            * @default false
            */
        allowExport?: boolean;
        /**
            * Specifies the point indexes to be selected while loading a chart.
            * It requires `selectionMode` or `highlightMode` to be `Point` | `Series` | or `Cluster`.
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let chart: Chart = new Chart({
            * ...
            *   selectionMode: 'Point',
            *   selectedDataIndexes: [ { series: 0, point: 1},
            *                          { series: 2, point: 3} ],
            * ...
            * });
            * chart.appendTo('#Chart');
            * ```
            *
            * @default []
            */
        selectedDataIndexes?: IndexesModel[];
        /**
            * Specifies whether a grouping separator should be used for a number.
            *
            * @default false
            */
        useGroupingSeparator?: boolean;
        /**
            * If set to true, both axis interval will be calculated automatically with respect to the zoomed range.
            *
            * @default false
            */
        enableAutoIntervalOnBothAxis?: boolean;
        /**
            * It specifies whether the chart should be render in transposed manner or not.
            *
            * @default false
            */
        isTransposed?: boolean;
        /**
            * It specifies whether the chart should be rendered in canvas mode
            *
            * @default false
            */
        enableCanvas?: boolean;
        /**
            * The background image of the chart that accepts value in string as url link or location of an image.
            *
            * @default null
            */
        backgroundImage?: string;
        /**
            * Defines the collection of technical indicators, that are used in financial markets
            */
        indicators?: TechnicalIndicatorModel[];
        /**
            * If set true, Animation process will be executed.
            *
            * @default true
            */
        enableAnimation?: boolean;
        /**
            * Description for chart.
            *
            * @default null
            */
        description?: string;
        /**
            * TabIndex value for the chart.
            *
            * @default 1
            */
        tabIndex?: number;
        /**
            * To enable the side by side placing the points for column type series.
            *
            * @default true
            */
        enableSideBySidePlacement?: boolean;
        /**
            * Triggers after resizing of chart
            *
            * @event resized
            * @blazorProperty 'Resized'
            */
        resized?: EmitType<IResizeEventArgs>;
        /**
            * Triggers before resizing of chart
            * @event
            * @blazorProperty 'BeforeResize'
            */
        beforeResize?: EmitType<IBeforeResizeEventArgs>;
        /**
            * Triggers before the annotation gets rendered.
            *
            * @event annotationRender
            * @deprecated
            */
        annotationRender?: EmitType<IAnnotationRenderEventArgs>;
        /**
            * Triggers before the prints gets started.
            *
            * @event beforePrint
            * @blazorProperty 'OnPrint'
            */
        beforePrint?: EmitType<IPrintEventArgs>;
        /**
            * Triggers after chart load.
            *
            * @event loaded
            * @blazorProperty 'Loaded'
            */
        loaded?: EmitType<ILoadedEventArgs>;
        /**
            * Triggers before the export gets started.
            *
            * @event beforeExport
            */
        beforeExport?: EmitType<IExportEventArgs>;
        /**
            * Triggers after the export completed.
            *
            * @event afterExport
            * @blazorProperty 'AfterExport'
            */
        afterExport?: EmitType<IAfterExportEventArgs>;
        /**
            * Triggers before chart load.
            *
            * @event load
            */
        load?: EmitType<ILoadedEventArgs>;
        /**
            * Triggers after animation is completed for the series.
            *
            * @event animationComplete
            * @blazorProperty 'OnAnimationComplete'
            */
        animationComplete?: EmitType<IAnimationCompleteEventArgs>;
        /**
            * Triggers before the legend is rendered.
            *
            * @event legendRender
            * @deprecated
            */
        legendRender?: EmitType<ILegendRenderEventArgs>;
        /**
            * Triggers before the data label for series is rendered.
            *
            * @event textRender
            * @deprecated
            */
        textRender?: EmitType<ITextRenderEventArgs>;
        /**
            * Triggers before each points for the series is rendered.
            *
            * @event pointRender
            * @deprecated
            */
        pointRender?: EmitType<IPointRenderEventArgs>;
        /**
            * Triggers before the series is rendered.
            *
            * @event seriesRender
            * @deprecated
            */
        seriesRender?: EmitType<ISeriesRenderEventArgs>;
        /**
            * Triggers before each axis label is rendered.
            *
            * @event axisLabelRender
            * @deprecated
            */
        axisLabelRender?: EmitType<IAxisLabelRenderEventArgs>;
        /**
            * Triggers when x axis label clicked.
            *
            * @event axisLabelClick
            * @deprecated
            */
        axisLabelClick?: EmitType<IAxisLabelClickEventArgs>;
        /**
            * Triggers before each axis range is rendered.
            *
            * @event axisRangeCalculated
            * @deprecated
            */
        axisRangeCalculated?: EmitType<IAxisRangeCalculatedEventArgs>;
        /**
            * Triggers before each axis multi label is rendered.
            *
            * @event axisMultiLabelRender
            * @deprecated
            */
        axisMultiLabelRender?: EmitType<IAxisMultiLabelRenderEventArgs>;
        /**
            * Triggers after click on legend
            *
            * @event legendClick
            */
        legendClick?: EmitType<ILegendClickEventArgs>;
        /**
            * Triggers after click on multiLevelLabelClick
            *
            * @event multiLevelLabelClick
            */
        multiLevelLabelClick?: EmitType<IMultiLevelLabelClickEventArgs>;
        /**
            * Triggers before the tooltip for series is rendered.
            *
            * @event tooltipRender
            */
        tooltipRender?: EmitType<ITooltipRenderEventArgs>;
        /**
            * Triggers before the shared tooltip for series is rendered.
            * This applicable for blazor only.
            *
            * @event sharedTooltipRender
            */
        sharedTooltipRender?: EmitType<ISharedTooltipRenderEventArgs>;
        /**
            * Triggers on hovering the chart.
            *
            * @event chartMouseMove
            * @blazorProperty 'OnChartMouseMove'
            */
        chartMouseMove?: EmitType<IMouseEventArgs>;
        /**
            * Triggers on clicking the chart.
            *
            * @event chartMouseClick
            * @blazorProperty 'OnChartMouseClick'
            */
        chartMouseClick?: EmitType<IMouseEventArgs>;
        /**
            * Triggers on point click.
            *
            * @event pointClick
            * @blazorProperty 'OnPointClick'
            */
        pointClick?: EmitType<IPointEventArgs>;
        /**
            * Triggers on point double click.
            *
            * @event pointDoubleClick
            * @blazorProperty 'OnPointDoubleClick'
            */
        pointDoubleClick?: EmitType<IPointEventArgs>;
        /**
            * Triggers on point move.
            *
            * @event pointMove
            * @blazorProperty 'PointMoved'
            */
        pointMove?: EmitType<IPointEventArgs>;
        /**
            * Triggers when cursor leaves the chart.
            *
            * @event chartMouseLeave
            * @blazorProperty 'OnChartMouseLeave'
            */
        chartMouseLeave?: EmitType<IMouseEventArgs>;
        /**
            * Triggers on mouse down.
            *
            * @event chartMouseDown
            * @blazorProperty 'OnChartMouseDown'
            */
        chartMouseDown?: EmitType<IMouseEventArgs>;
        /**
            * Triggers on mouse up.
            *
            * @event chartMouseUp
            * @blazorProperty 'OnChartMouseUp'
            */
        chartMouseUp?: EmitType<IMouseEventArgs>;
        /**
            * Triggers after the drag selection is completed.
            *
            * @event dragComplete
            * @blazorProperty 'OnDragComplete'
            */
        dragComplete?: EmitType<IDragCompleteEventArgs>;
        /**
            * Triggers after the selection is completed.
            *
            * @event selectionComplete
            * @blazorProperty 'OnSelectionComplete'
            */
        selectionComplete?: EmitType<ISelectionCompleteEventArgs>;
        /**
            * Triggers after the zoom selection is completed.
            *
            * @event zoomComplete
            * @deprecated
            */
        zoomComplete?: EmitType<IZoomCompleteEventArgs>;
        /**
            * Triggers after the zoom selection is triggered.
            *
            * @event onZooming
            */
        onZooming?: EmitType<IZoomingEventArgs>;
        /**
            * Triggers when start the scroll.
            *
            * @event scrollStart
            * @blazorProperty 'OnScrollStart'
            */
        scrollStart?: EmitType<IScrollEventArgs>;
        /**
            * Triggers after the scroll end.
            *
            * @event scrollEnd
            * @blazorProperty 'OnScrollEnd'
            */
        scrollEnd?: EmitType<IScrollEventArgs>;
        /**
            * Triggers when change the scroll.
            *
            * @event scrollChanged
            * @blazorProperty 'ScrollChanged'
            */
        scrollChanged?: EmitType<IScrollEventArgs>;
        /**
            * Triggers when the point drag start.
            *
            * @event dragStart
            */
        dragStart?: EmitType<IDataEditingEventArgs>;
        /**
            * Triggers when the point is dragging.
            *
            * @event drag
            */
        drag?: EmitType<IDataEditingEventArgs>;
        /**
            * Triggers when the point drag end.
            *
            * @event dragEnd
            */
        dragEnd?: EmitType<IDataEditingEventArgs>;
        /**
            * Defines the currencyCode format of the chart
            *
            * @private
            * @aspType string
            */
        currencyCode?: string;
}

/**
    * Configures the `rows` of the chart.
    */
export class Row extends ChildProperty<Row> {
        /**
            * The height of the row as a string accept input both as '100px' and '100%'.
            * If specified as '100%, row renders to the full height of its chart.
            *
            * @default '100%'
            */
        height: string;
        /**
            * Options to customize the border of the rows.
            */
        border: BorderModel;
        /** @private */
        axes: Axis[];
        /** @private */
        computedHeight: number;
        /** @private */
        computedTop: number;
        /** @private */
        nearSizes: number[];
        /** @private */
        farSizes: number[];
        /**
            * Measure the row size
            *
            * @returns {void}
            * @private
            */
        computeSize(axis: Axis, scrollBarHeight: number): void;
}
/**
    * Configures the `columns` of the chart.
    */
export class Column extends ChildProperty<Column> {
        /**
            * The width of the column as a string accepts input both as like '100px' or '100%'.
            * If specified as '100%, column renders to the full width of its chart.
            *
            * @default '100%'
            */
        width: string;
        /**
            * Options to customize the border of the columns.
            */
        border: BorderModel;
        /** @private */
        axes: Axis[];
        /** @private */
        computedWidth: number;
        /** @private */
        computedLeft: number;
        /** @private */
        nearSizes: number[];
        /** @private */
        farSizes: number[];
        /**
            * Measure the column size
            *
            * @returns {void}
            * @private
            */
        computeSize(axis: Axis, scrollBarHeight: number): void;
}
/**
    * Configures the major grid lines in the `axis`.
    */
export class MajorGridLines extends ChildProperty<MajorGridLines> {
        /**
            * The width of the line in pixels.
            *
            * @default 1
            */
        width: number;
        /**
            * The dash array of the grid lines.
            *
            * @default ''
            */
        dashArray: string;
        /**
            * The color of the major grid line that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        color: string;
}
/**
    * Configures the minor grid lines in the `axis`.
    */
export class MinorGridLines extends ChildProperty<MinorGridLines> {
        /**
            * The width of the line in pixels.
            *
            * @default 0.7
            */
        width: number;
        /**
            * The dash array of grid lines.
            *
            * @default ''
            */
        dashArray: string;
        /**
            * The color of the minor grid line that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        color: string;
}
/**
    * Configures the axis line of a chart.
    */
export class AxisLine extends ChildProperty<AxisLine> {
        /**
            * The width of the line in pixels.
            *
            * @default 1
            */
        width: number;
        /**
            * The dash array of the axis line.
            *
            * @default ''
            */
        dashArray: string;
        /**
            * The color of the axis line that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        color: string;
}
/**
    * Configures the major tick lines.
    */
export class MajorTickLines extends ChildProperty<MajorTickLines> {
        /**
            * The width of the tick lines in pixels.
            *
            * @default 1
            */
        width: number;
        /**
            * The height of the ticks in pixels.
            *
            * @default 5
            */
        height: number;
        /**
            * The color of the major tick line that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        color: string;
}
/**
    * Configures the minor tick lines.
    */
export class MinorTickLines extends ChildProperty<MinorTickLines> {
        /**
            * The width of the tick line in pixels.
            *
            * @default 0.7
            */
        width: number;
        /**
            * The height of the ticks in pixels.
            *
            * @default 5
            */
        height: number;
        /**
            * The color of the minor tick line that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        color: string;
}
/**
    * Configures the crosshair ToolTip.
    */
export class CrosshairTooltip extends ChildProperty<CrosshairTooltip> {
        /**
            * If set to true, crosshair ToolTip will be visible.
            *
            *  @default false
            */
        enable: Boolean;
        /**
            * The fill color of the ToolTip accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        fill: string;
        /**
            * Options to customize the crosshair ToolTip text.
            */
        textStyle: FontModel;
}
/**
    * Configures the axes in the chart.
    *
    * @public
    */
export class Axis extends ChildProperty<Axis> {
        /**
            * Options to customize the axis label.
            */
        labelStyle: FontModel;
        /**
            * Options to customize the crosshair ToolTip.
            */
        crosshairTooltip: CrosshairTooltipModel;
        /**
            * Specifies the title of an axis.
            *
            * @default ''
            */
        title: string;
        /**
            * Options for customizing the axis title.
            */
        titleStyle: FontModel;
        /**
            * Used to format the axis label that accepts any global string format like 'C', 'n1', 'P' etc.
            * It also accepts placeholder like '{value}°C' in which value represent the axis label, e.g, 20°C.
            *
            * @default ''
            */
        labelFormat: string;
        /**
            * Specifies the skeleton format in which the dateTime format will process.
            *
            * @default ''
            */
        skeleton: string;
        /**
            * It specifies the type of format to be used in dateTime format process.
            *
            * @default 'DateTime'
            * @deprecated
            */
        skeletonType: SkeletonType;
        /**
            * It specifies alignment of the line break labels.
            * @default 'Center'
            */
        lineBreakAlignment: TextAlignment;
        /**
            * Left and right padding for the plot area in pixels.
            *
            * @default 0
            */
        plotOffset: number;
        /**
            * Left padding for the plot area in pixels.
            *
            * @default null
            */
        plotOffsetLeft: number;
        /**
            * Top padding for the plot area in pixels.
            *
            * @default null
            */
        plotOffsetTop: number;
        /**
            * Right padding for the plot area in pixels.
            *
            * @default null
            */
        plotOffsetRight: number;
        /**
            * Bottom padding for the plot area in pixels.
            *
            * @default null
            */
        plotOffsetBottom: number;
        /**
            * Specifies indexed category  axis.
            *
            * @default false
            */
        isIndexed: boolean;
        /**
            * The base value for logarithmic axis. It requires `valueType` to be `Logarithmic`.
            *
            * @default 10
            */
        logBase: number;
        /**
            * Specifies the index of the column where the axis is associated,
            * when the chart area is divided into multiple plot areas by using `columns`.
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let chart: Chart = new Chart({
            * ...
            *     columns: [{ width: '50%' },
            *               { width: '50%' }],
            *     axes: [{
            *                name: 'xAxis 1',
            *                columnIndex: 1,
            *     }],
            * ...
            * });
            * chart.appendTo('#Chart');
            * ```
            *
            * @default 0
            */
        columnIndex: number;
        /**
            * Specifies the index of the row where the axis is associated, when the chart area is divided into multiple plot areas by using `rows`.
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let chart: Chart = new Chart({
            * ...
            *     rows: [{ height: '50%' },
            *            { height: '50%' }],
            *     axes: [{
            *                name: 'yAxis 1',
            *                rowIndex: 1,
            *      }],
            * ...
            * });
            * chart.appendTo('#Chart');
            * ```
            *
            * @default 0
            */
        rowIndex: number;
        /**
            * Specifies the number of `columns` or `rows` an axis has to span horizontally or vertically.
            *
            * @default 1
            */
        span: number;
        /**
            * With this property, you can request axis to calculate intervals approximately equal to your specified interval.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        desiredIntervals: number;
        /**
            * The maximum number of label count per 100 pixels with respect to the axis length.
            *
            * @default 3
            */
        maximumLabels: number;
        /**
            * The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Value ranges from 0 to 1.
            *
            * @default 1
            */
        zoomFactor: number;
        /**
            * Position of the zoomed axis. Value ranges from 0 to 1.
            *
            * @default 0
            */
        zoomPosition: number;
        /**
            * Enables the scrollbar for zooming.
            *
            * @default true
            */
        enableScrollbarOnZooming: boolean;
        /**
            * If set to true, the axis will render at the opposite side of its default position.
            *
            * @default false
            */
        opposedPosition: boolean;
        /**
            * If set to true, axis interval will be calculated automatically with respect to the zoomed range.
            *
            * @default true
            */
        enableAutoIntervalOnZooming: boolean;
        /**
            * Specifies the padding for the axis range in terms of interval.They are,
            * * none: Padding cannot be applied to the axis.
            * * normal: Padding is applied to the axis based on the range calculation.
            * * additional: Interval of the axis is added as padding to the minimum and maximum values of the range.
            * * round: Axis range is rounded to the nearest possible value divided by the interval.
            *
            * @default 'Auto'
            */
        rangePadding: ChartRangePadding;
        /**
            * Specifies the type of data the axis is handling.
            * * Double:  Renders a numeric axis.
            * * DateTime: Renders a dateTime axis.
            * * Category: Renders a category axis.
            * * Logarithmic: Renders a log axis.
            *
            * @default 'Double'
            * @blazorType Syncfusion.EJ2.Blazor.Charts.ValueType
            * @isEnumeration true
            */
        valueType: ValueType;
        /**
            * Specifies the position of labels at the edge of the axis.They are,
            * * None: No action will be performed.
            * * Hide: Edge label will be hidden.
            * * Shift: Shifts the edge labels.
            *
            * @default 'None'
            */
        edgeLabelPlacement: EdgeLabelPlacement;
        /**
            * Specifies the types like `Years`, `Months`, `Days`, `Hours`, `Minutes`, `Seconds` in date time axis.They are,
            * * Auto: Defines the interval of the axis based on data.
            * * Years: Defines the interval of the axis in years.
            * * Months: Defines the interval of the axis in months.
            * * Days: Defines the interval of the axis in days.
            * * Hours: Defines the interval of the axis in hours.
            * * Minutes: Defines the interval of the axis in minutes.
            *
            * @default 'Auto'
            */
        intervalType: IntervalType;
        /**
            * Specifies the placement of a label for category axis. They are,
            * * betweenTicks: Renders the label between the ticks.
            * * onTicks: Renders the label on the ticks.
            *
            * @default 'BetweenTicks'
            */
        labelPlacement: LabelPlacement;
        /**
            * Specifies the placement of a ticks to the axis line. They are,
            * * inside: Renders the ticks inside to the axis line.
            * * outside: Renders the ticks outside to the axis line.
            *
            * @default 'Outside'
            */
        tickPosition: AxisPosition;
        /**
            * Specifies the placement of a labels to the axis line. They are,
            * * inside: Renders the labels inside to the axis line.
            * * outside: Renders the labels outside to the axis line.
            *
            * @default 'Outside'
            */
        labelPosition: AxisPosition;
        /**
            * Unique identifier of an axis.
            * To associate an axis with the series, set this name to the xAxisName/yAxisName properties of the series.
            *
            * @default ''
            */
        name: string;
        /**
            * If set to true, axis label will be visible.
            *
            * @default true
            */
        visible: boolean;
        /**
            * Specifies the number of minor ticks per interval.
            *
            * @default 0
            */
        minorTicksPerInterval: number;
        /**
            * The angle to which the axis label gets rotated.
            *
            * @default 0
            */
        labelRotation: number;
        /**
            * Specifies the value at which the axis line has to be intersect with the vertical axis or vice versa.
            *
            * @default null
            */
        crossesAt: Object;
        /**
            * Specifies whether axis elements like axis labels, axis title, etc has to be crossed with axis line
            *
            * @default true
            */
        placeNextToAxisLine: boolean;
        /**
            * Specifies axis name with which the axis line has to be crossed
            *
            * @default null
            */
        crossesInAxis: string;
        /**
            * Specifies the minimum range of an axis.
            *
            * @default null
            */
        minimum: Object;
        /**
            * Specifies the maximum range of an axis.
            *
            * @default null
            */
        maximum: Object;
        /**
            * Specifies the interval for an axis.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        interval: number;
        /**
            * Specifies the maximum width of an axis label.
            *
            * @default 34.
            */
        maximumLabelWidth: number;
        /**
            * Specifies the Trim property for an axis.
            *
            * @default false
            */
        enableTrim: boolean;
        /**
            * Specifies the labelPadding from axis
            *
            * @default 5
            */
        labelPadding: number;
        /**
            * Specifies the titlePadding from axis label
            *
            * @default 5
            */
        titlePadding: number;
        /**
            * Options for customizing major tick lines.
            */
        majorTickLines: MajorTickLinesModel;
        /**
            * Options for customizing minor tick lines.
            */
        minorTickLines: MinorTickLinesModel;
        /**
            * Options for customizing major grid lines.
            */
        majorGridLines: MajorGridLinesModel;
        /**
            * Options for customizing minor grid lines.
            */
        minorGridLines: MinorGridLinesModel;
        /**
            * Options for customizing axis lines.
            */
        lineStyle: AxisLineModel;
        /**
            * Specifies the actions like `None`, `Hide`, `Trim`, `Wrap`, `MultipleRows`, `Rotate45`, and `Rotate90`
            * when the axis labels intersect with each other.They are,
            * * None: Shows all the labels.
            * * Hide: Hides the label when it intersects.
            * * Trim: Trim the label when it intersects.
            * * Wrap: Wrap the label when it intersects.
            * * MultipleRows: Shows the label in MultipleRows when it intersects.
            * * Rotate45: Rotates the label to 45 degree when it intersects.
            * * Rotate90: Rotates the label to 90 degree when it intersects.
            *
            * @default Trim
            */
        labelIntersectAction: LabelIntersectAction;
        /**
            * It specifies whether the axis to be rendered in inversed manner or not.
            *
            * @default false
            */
        isInversed: boolean;
        /**
            * The polar radar radius position.
            *
            * @default 100
            */
        coefficient: number;
        /**
            * The start angle for the series.
            *
            * @default 0
            */
        startAngle: number;
        /**
            * It specifies whether the axis to be start from zero.
            *
            * @default true
            */
        startFromZero: boolean;
        /**
            * Description for axis and its element.
            *
            * @default null
            */
        description: string;
        /**
            * TabIndex value for the axis.
            *
            * @default 2
            */
        tabIndex: number;
        /**
            * Specifies the stripLine collection for the axis
            */
        stripLines: StripLineSettingsModel[];
        /**
            * Specifies the multi level labels collection for the axis
            */
        multiLevelLabels: MultiLevelLabelsModel[];
        /**
            * Border of the multi level labels.
            */
        border: LabelBorderModel;
        /**
            * Option to customize scrollbar with lazy loading
            */
        scrollbarSettings: ScrollbarSettingsModel;
        /** @private */
        visibleRange: VisibleRangeModel;
        /** @private */
        visibleLabels: VisibleLabels[];
        /** @private */
        actualRange: VisibleRangeModel;
        /** @private */
        series: Series[];
        /** @private */
        doubleRange: DoubleRange;
        /** @private */
        maxLabelSize: Size;
        /** @private */
        rotatedLabel: string;
        /** @private */
        rect: Rect;
        /** @private */
        axisBottomLine: BorderModel;
        /** @private */
        orientation: Orientation;
        /** @private */
        intervalDivs: number[];
        /** @private */
        actualIntervalType: IntervalType;
        /** @private */
        labels: string[];
        /** @private */
        format: Function;
        /** @private */
        baseModule: Double | DateTime | Category | DateTimeCategory;
        /** @private */
        startLabel: string;
        /** @private */
        endLabel: string;
        /** @private */
        angle: number;
        /** @private */
        dateTimeInterval: number;
        /** @private */
        isStack100: boolean;
        /** @private */
        crossInAxis: this;
        /** @private */
        crossAt: number;
        /** @private */
        updatedRect: Rect;
        /** @private */
        multiLevelLabelHeight: number;
        zoomingScrollBar: ScrollBar;
        /** @private */
        scrollBarHeight: number;
        /** @private */
        isChart: boolean;
        /** @private */
        maxPointLength: number;
        /** @private */
        isIntervalInDecimal: boolean;
        /** @private */
        titleCollection: string[];
        /** @private */
        titleSize: Size;
        /**
            * Task: BLAZ-2044
            * This property used to hide the axis when series hide from legend click
            *
            * @private
            */
        internalVisibility: boolean;
        constructor(parent: any, propName: string, defaultValue: Object, isArray?: boolean);
        /**
            * The function used to find tick size.
            *
            * @returns {number} tick line size
            * @private
            */
        findTickSize(crossAxis: Axis): number;
        /**
            * The function used to find axis position.
            *
            * @returns {number}
            * @private
            */
        isInside(range: VisibleRangeModel): boolean;
        /**
            * The function used to find label Size.
            *
            * @returns {number} labelSize
            * @private
            */
        findLabelSize(crossAxis: Axis, innerPadding: number): number;
        /**
            * The function used to find axis position.
            *
            * @returns {void}
            * @private
            */
        updateCrossValue(): void;
        /**
            * Calculate visible range for axis.
            *
            * @returns {void}
            * @private
            */
        calculateVisibleRangeOnZooming(size: Size): void;
        /**
            * Calculate range for x and y axis after zoom.
            *
            * @returns {void}
            * @private
            */
        calculateAxisRange(size: Size, chart: Chart): void;
        /**
            * Triggers the event.
            *
            * @returns {void}
            * @private
            */
        triggerRangeRender(chart: Chart, minimum: number, maximum: number, interval: number): void;
        /**
            * Calculate padding for the axis.
            *
            * @returns {string}
            * @private
            */
        getRangePadding(chart: Chart): string;
        /**
            * Calculate maximum label width for the axis.
            *
            * @returns {void}
            * @private
            */
        getMaxLabelWidth(chart: Chart): void;
        /**
            * Finds the default module for axis.
            *
            * @returns {void}
            * @private
            */
        getModule(chart: Chart): void;
}
/**
    * Axis visible range
    * @public
    */
export interface VisibleRangeModel {
        /** axis minimum value */
        min?: number;
        /** axis maximum value */
        max?: number;
        /** axis interval value */
        interval?: number;
        /** axis delta value */
        delta?: number;
}
/** @private */
export class VisibleLabels {
        text: string | string[];
        value: number;
        labelStyle: FontModel;
        size: Size;
        breakLabelSize: Size;
        index: number;
        originalText: string;
        constructor(text: string | string[], value: number, labelStyle: FontModel, originalText: string | string[], size?: Size, breakLabelSize?: Size, index?: number);
}

/**
    * Numeric module is used to render numeric axis.
    */
export class Double {
        /** @private */
        chart: Chart;
        /** @private */
        min: Object;
        /** @private */
        max: Object;
        /**
            * Constructor for the dateTime module.
            *
            * @private
            */
        constructor(chart?: Chart);
        /**
            * Numeric Nice Interval for the axis.
            *
            * @private
            */
        protected calculateNumericNiceInterval(axis: Axis, delta: number, size: Size): number;
        /**
            * Actual Range for the axis.
            *
            * @private
            */
        getActualRange(axis: Axis, size: Size): void;
        /**
            * Range for the axis.
            *
            * @private
            */
        initializeDoubleRange(axis: Axis): void;
        /**
            * The function to calculate the range and labels for the axis.
            *
            * @returns {void}
            * @private
            */
        calculateRangeAndInterval(size: Size, axis: Axis): void;
        /**
            * Calculate Range for the axis.
            *
            * @private
            */
        protected calculateRange(axis: Axis): void;
        /**
            * Apply padding for the range.
            *
            * @private
            */
        applyRangePadding(axis: Axis, size: Size): void;
        updateActualRange(axis: Axis, minimum: number, maximum: number, interval: number): void;
        /**
            * Calculate visible range for axis.
            *
            * @private
            */
        protected calculateVisibleRange(size: Size, axis: Axis): void;
        /**
            * Calculate label for the axis.
            *
            * @private
            */
        calculateVisibleLabels(axis: Axis, chart: Chart | RangeNavigator): void;
        /**
            * Format of the axis label.
            *
            * @private
            */
        protected getFormat(axis: Axis): string;
        /**
            * Formatted the axis label.
            *
            * @private
            */
        formatValue(axis: Axis, isCustom: boolean, format: string, tempInterval: number): string;
}

/**
    * `DateTime` module is used to render datetime axis.
    */
export class DateTime extends NiceInterval {
        min: number;
        max: number;
        /**
            * Constructor for the dateTime module.
            *
            * @private
            */
        constructor(chart?: Chart);
        /**
            * The function to calculate the range and labels for the axis.
            *
            * @returns {void}
            */
        calculateRangeAndInterval(size: Size, axis: Axis): void;
        /**
            * Actual Range for the axis.
            *
            * @private
            */
        getActualRange(axis: Axis, size: Size): void;
        /**
            * Apply padding for the range.
            *
            * @private
            */
        applyRangePadding(axis: Axis, size: Size): void;
        /**
            * Calculate visible range for axis.
            *
            * @private
            */
        protected calculateVisibleRange(size: Size, axis: Axis): void;
        /**
            * Calculate visible labels for the axis.
            *
            * @param {Axis} axis axis
            * @param {Chart | RangeNavigator} chart chart
            * @returns {void}
            * @private
            */
        calculateVisibleLabels(axis: Axis, chart: Chart | RangeNavigator): void;
        /** @private */
        increaseDateTimeInterval(axis: Axis, value: number, interval: number): Date;
        /**
            * Get module name
            */
        protected getModuleName(): string;
        /**
            * To destroy the category axis.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `Category` module is used to render category axis.
    */
export class Category extends NiceInterval {
        /**
            * Constructor for the category module.
            *
            * @private
            */
        constructor(chart: Chart);
        /**
            * The function to calculate the range and labels for the axis.
            *
            * @returns {void}
            */
        calculateRangeAndInterval(size: Size, axis: Axis): void;
        /**
            * Actual Range for the axis.
            *
            * @private
            */
        getActualRange(axis: Axis, size: Size): void;
        /**
            * Padding for the axis.
            *
            * @private
            */
        applyRangePadding(axis: Axis, size: Size): void;
        /**
            * Calculate label for the axis.
            *
            * @private
            */
        calculateVisibleLabels(axis: Axis): void;
        /**
            * Get module name
            */
        protected getModuleName(): string;
        /**
            * To destroy the category axis.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `Logarithmic` module is used to render log axis.
    */
export class Logarithmic extends Double {
        /**
            * Constructor for the logerithmic module.
            *
            * @private
            */
        constructor(chart: Chart);
        /**
            * The method to calculate the range and labels for the axis.
            *
            * @returns {void}
            */
        calculateRangeAndInterval(size: Size, axis: Axis): void;
        /**
            * Calculates actual range for the axis.
            *
            * @private
            */
        getActualRange(axis: Axis, size: Size): void;
        /**
            * Calculates visible range for the axis.
            *
            * @private
            */
        protected calculateVisibleRange(size: Size, axis: Axis): void;
        /**
            * Calculates log iInteval for the axis.
            *
            * @private
            */
        protected calculateLogNiceInterval(delta: number, size: Size, axis: Axis): number;
        /**
            * Calculates labels for the axis.
            *
            * @private
            */
        calculateVisibleLabels(axis: Axis, chart: Chart | RangeNavigator): void;
        /**
            * Get module name
            */
        protected getModuleName(): string;
        /**
            * To destroy the category axis.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * Category module is used to render category axis.
    */
export class DateTimeCategory extends Category {
        /**
            * Constructor for the category module.
            *
            * @private
            */
        constructor(chart: Chart);
        /**
            * The function to calculate the range and labels for the axis.
            *
            * @returns {void}
            * @private
            */
        calculateRangeAndInterval(size: Size, axis: Axis): void;
        /**
            * Calculate label for the axis.
            *
            * @private
            */
        calculateVisibleLabels(axis: Axis): void;
        /**
            * To get the Indexed axis label text with axis format for DateTimeCategory axis
            *
            * @param {string} value value
            * @param {Function} format format
            * @returns {string} Indexed axis label text
            */
        getIndexedAxisLabel(value: string, format: Function): string;
        /**
            * Get module name
            */
        protected getModuleName(): string;
        /**
            * To destroy the category axis.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * Common axis classes
    *
    * @private
    */
export class NiceInterval extends Double {
        /**
            * Method to calculate numeric datetime interval
            */
        calculateDateTimeNiceInterval(axis: Axis, size: Size, start: number, end: number, isChart?: boolean): number;
        /**
            * To get the skeleton for the DateTime axis.
            *
            * @returns {string} skeleton format
            * @private
            */
        getSkeleton(axis: Axis, currentValue: number, previousValue: number, isBlazor?: boolean): string;
        /**
            * Find label format for axis
            *
            * @param {Axis} axis axis
            * @param {number} currentValue currentValue
            * @param {number} previousValue previousValue
            * @private
            */
        findCustomFormats(axis: Axis, currentValue: number, previousValue: number): string;
}

/**
    * `StripLine` module is used to render the stripLine in chart.
    */
export class StripLine {
        /**
            * To render strip lines based start and end.
            *
            * @param {Chart} chart chart
            * @param {ZIndex} position position
            * @param {Axis[]} axes axes
            * @private
            */
        renderStripLine(chart: Chart, position: ZIndex, axes: Axis[]): void;
        /**
            * To get the module name for `StripLine`.
            *
            * @private
            */
        getModuleName(): string;
        /**
            * To destroy the `StripLine` module.
            *
            * @private
            */
        destroy(): void;
}

/**
    * Defines the appearance of the connectors
    */
export class Connector extends ChildProperty<Connector> {
        /**
            * specifies the type of the connector line. They are
            * * Smooth
            * * Line
            *
            * @default 'Line'
            */
        type: ConnectorType;
        /**
            * Color of the connector line.
            *
            * @default null
            */
        color: string;
        /**
            * Width of the connector line in pixels.
            *
            * @default 1
            */
        width: number;
        /**
            * Length of the connector line in pixels.
            *
            * @default null
            */
        length: string;
        /**
            * dashArray of the connector line.
            *
            * @default ''
            */
        dashArray: string;
}
/**
    * Configures the fonts in charts.
    */
export class Font extends ChildProperty<Font> {
        /**
            * FontStyle for the text.
            *
            * @default 'Normal'
            */
        fontStyle: string;
        /**
            * Font size for the text.
            *
            * @default '16px'
            */
        size: string;
        /**
            * FontWeight for the text.
            *
            * @default 'Normal'
            */
        fontWeight: string;
        /**
            * Color for the text.
            *
            * @default ''
            */
        color: string;
        /**
            * text alignment
            *
            * @default 'Center'
            */
        textAlignment: Alignment;
        /**
            * FontFamily for the text.
            */
        fontFamily: string;
        /**
            * Opacity for the text.
            *
            * @default 1
            */
        opacity: number;
        /**
            * Specifies the chart title text overflow
            *
            * @default 'Trim'
            */
        textOverflow: TextOverflow;
}
/**
    * Configures the borders in the chart.
    */
export class Border extends ChildProperty<Border> {
        /**
            * The color of the border that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default ''
            */
        color: string;
        /**
            * The width of the border in pixels.
            *
            * @default 1
            */
        width: number;
}
/**
    * Configures the marker position in the chart.
    */
export class Offset extends ChildProperty<Offset> {
        /**
            * x value of the marker position
            *
            * @default 0
            */
        x: number;
        /**
            * y value of the marker position
            *
            * @default 0
            */
        y: number;
}
/**
    * Configures the chart area.
    */
export class ChartArea extends ChildProperty<ChartArea> {
        /**
            * Options to customize the border of the chart area.
            */
        border: BorderModel;
        /**
            * The background of the chart area that accepts value in hex and rgba as a valid CSS color string..
            *
            * @default 'transparent'
            */
        background: string;
        /**
            * The opacity for background.
            *
            * @default 1
            */
        opacity: number;
        /**
            * The background image of the chart area that accepts value in string as url link or location of an image.
            *
            * @default null
            */
        backgroundImage: string;
}
/**
    * Configures the chart margins.
    */
export class Margin extends ChildProperty<Margin> {
        /**
            * Left margin in pixels.
            *
            * @default 10
            */
        left: number;
        /**
            * Right margin in pixels.
            *
            * @default 10
            */
        right: number;
        /**
            * Top margin in pixels.
            *
            * @default 10
            */
        top: number;
        /**
            * Bottom margin in pixels.
            *
            * @default 10
            */
        bottom: number;
}
/**
    * Configures the chart Legend Container Padding.
    */
export class ContainerPadding extends ChildProperty<ContainerPadding> {
        /**
            * Left padding in pixels.
            * @default 0
            */
        left: number;
        /**
            * Right padding in pixels.
            * @default 0
            */
        right: number;
        /**
            * Top padding in pixels.
            * @default 0
            */
        top: number;
        /**
            * Bottom padding in pixels.
            * @default 0
            */
        bottom: number;
}
/**
    * Configures the animation behavior for chart series.
    */
export class Animation extends ChildProperty<Animation> {
        /**
            * If set to true, series gets animated on initial loading.
            *
            * @default true
            */
        enable: boolean;
        /**
            * The duration of animation in milliseconds.
            *
            * @default 1000
            */
        duration: number;
        /**
            * The option to delay animation of the series.
            *
            * @default 0
            */
        delay: number;
}
/**
    * Series and point index
    *
    * @public
    */
export class Indexes extends ChildProperty<Indexes> {
        /**
            * Specifies the series index
            *
            * @default 0
            * @aspType int
            */
        series: number;
        /**
            * Specifies the point index
            *
            * @default 0
            * @aspType int
            */
        point: number;
}
/**
    * Column series rounded corner options
    */
export class CornerRadius extends ChildProperty<CornerRadius> {
        /**
            * Specifies the top left corner radius value
            *
            * @default 0
            */
        topLeft: number;
        /**
            * Specifies the top right corner radius value
            *
            * @default 0
            */
        topRight: number;
        /**
            * Specifies the bottom left corner radius value
            *
            * @default 0
            */
        bottomLeft: number;
        /**
            * Specifies the bottom right corner radius value
            *
            * @default 0
            */
        bottomRight: number;
}
/**
    * @private
    */
export class Index {
        series: number;
        point: number;
        constructor(seriesIndex: number, pointIndex?: number);
}
/**
    * Configures the Empty Points of series
    */
export class EmptyPointSettings extends ChildProperty<EmptyPointSettings> {
        /**
            * To customize the fill color of empty points.
            *
            * @default null
            */
        fill: string;
        /**
            * Options to customize the border of empty points.
            *
            * @default "{color: 'transparent', width: 0}"
            */
        border: BorderModel;
        /**
            * To customize the mode of empty points.
            *
            * @default Gap
            */
        mode: EmptyPointMode | AccEmptyPointMode;
}
/**
    * Configures the drag settings of series
    */
export class DragSettings extends ChildProperty<DragSettings> {
        /**
            * To enable the drag the points
            *
            * @default false
            */
        enable: boolean;
        /**
            * To set the minimum y of the point
            *
            * @default null
            */
        minY: number;
        /**
            * To set the maximum y of the point
            *
            * @default null
            */
        maxY: number;
        /**
            * To set the color of the edited point
            *
            * @default null
            */
        fill: string;
}
/**
    * Configures the ToolTips in the chart.
    *
    * @public
    */
export class TooltipSettings extends ChildProperty<TooltipSettings> {
        /**
            * Enables / Disables the visibility of the tooltip.
            *
            * @default false.
            */
        enable: boolean;
        /**
            * Enables / Disables the visibility of the marker.
            *
            * @default true.
            */
        enableMarker: boolean;
        /**
            * If set to true, a single ToolTip will be displayed for every index.
            *
            * @default false.
            */
        shared: boolean;
        /**
            * The fill color of the tooltip that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        fill: string;
        /**
            * Header for tooltip.
            *
            * @default null
            */
        header: string;
        /**
            * The fill color of the tooltip that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default 0.75
            */
        opacity: number;
        /**
            * Options to customize the ToolTip text.
            */
        textStyle: FontModel;
        /**
            * Format the ToolTip content.
            *
            * @default null.
            */
        format: string;
        /**
            * Custom template to format the ToolTip content. Use ${x} and ${y} as the placeholder text to display the corresponding data point.
            *
            * @default null.
            */
        template: string;
        /**
            * If set to true, ToolTip will animate while moving from one point to another.
            *
            * @default true.
            */
        enableAnimation: boolean;
        /**
            * Duration for the ToolTip animation.
            *
            * @default 300
            */
        duration: number;
        /**
            * Fade Out duration for the ToolTip hide.
            *
            * @default 1000
            */
        fadeOutDuration: number;
        /**
            * Fade Out duration for the Tooltip hide.
            *
            * @default Move
            */
        fadeOutMode: FadeOutMode;
        /**
            * To wrap the tooltip long text based on available space.
            * This is only application for chart tooltip.
            *
            * @default false
            */
        enableTextWrap: boolean;
        /**
            * Options to customize tooltip borders.
            */
        border: BorderModel;
}
/**
    * button settings in period selector
    */
export class Periods extends ChildProperty<Periods> {
        /**
            * IntervalType of button
            *
            * @default 'Years'
            */
        intervalType: RangeIntervalType;
        /**
            * Count value for the button
            *
            * @default 1
            */
        interval: number;
        /**
            * Text to be displayed on the button
            *
            * @default null
            */
        text: string;
        /**
            * To select the default period
            *
            * @default false
            */
        selected: boolean;
}
/**
    * Period Selector Settings
    */
export class PeriodSelectorSettings extends ChildProperty<PeriodSelectorSettings> {
        /**
            * Height for the period selector
            *
            * @default 43
            */
        height: number;
        /**
            * vertical position of the period selector
            *
            * @default 'Bottom'
            */
        position: PeriodSelectorPosition;
        /**
            * Buttons
            */
        periods: PeriodsModel[];
}

/**
    * `LineSeries` module used to render the line series.
    */
export class LineSeries extends LineBase {
        /**
            * Render Line Series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the line series.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `ColumnSeries` Module used to render the column series.
    */
export class ColumnSeries extends ColumnBase {
        /**
            * Render Column series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series): void;
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the column series.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `AreaSeries` module is used to render the area series.
    */
export class AreaSeries extends MultiColoredSeries {
        /**
            * Render Area series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
        /**
            * To destroy the area series.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
        /**
            * Get module name
            */
        protected getModuleName(): string;
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
}

/**
    * `BarSeries` module is used to render the bar series.
    */
export class BarSeries extends ColumnBase {
        /**
            * Render Bar series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series): void;
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
        /**
            * To destroy the bar series.
            *
            * @returns {void}
            * @private
            */
        protected destroy(): void;
        /**
            * Get module name
            */
        protected getModuleName(): string;
}

/**
    * `PolarSeries` module is used to render the polar series.
    */
export class PolarSeries extends PolarRadarPanel {
        /**
            * Render Polar Series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series, xAxis: Axis, yAxis: Axis, inverted: boolean): void;
        /**
            * Render Column DrawType.
            *
            * @returns {void}
            * @private
            */
        columnDrawTypeRender(series: Series, xAxis: Axis, yAxis: Axis): void;
        /**
            * To trigger the point rendering event.
            *
            * @returns {void}
            * @private
            */
        triggerEvent(chart: Chart, series: Series, point: Points): IPointRenderEventArgs;
        /** get position for column drawtypes
            *
            * @returns {void}
            * @private
            */
        getSeriesPosition(series: Series): void;
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
        /**
            * To do the Polar Radar draw type column animation.
            *
            * @returns {void}
            * @private
            */
        doPolarRadarAnimation(animateElement: Element, delay: number, duration: number, series: Series): void;
        getPolarIsInversedPath(xAxis: Axis, endPoint: string): string;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the polar series.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `RadarSeries` module is used to render the radar series.
    */
export class RadarSeries extends PolarSeries {
        /**
            * Render radar Series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series, xAxis: Axis, yAxis: Axis, inverted: boolean): void;
        getRadarIsInversedPath(xAxis: Axis, endPoint: string): string;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the radar series.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `StackingBarSeries` module is used to render the stacking bar series.
    */
export class StackingBarSeries extends ColumnBase {
        /**
            * Render the Stacking bar series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series): void;
        /**
            * To destroy the stacking bar.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
}

/**
    * `CandleSeries` module is used to render the candle series.
    */
export class CandleSeries extends ColumnBase {
        /**
            * Render Candle series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series): void;
        /**
            * Trigger point rendering event
            */
        protected triggerPointRenderEvent(series: Series, point: Points): IPointRenderEventArgs;
        /**
            * Finds the path of the candle shape
            *
            * @private
            */
        getPathString(topRect: Rect, midRect: Rect, series: Series): string;
        /**
            * Draws the candle shape
            *
            * @param {Series} series series
            * @param {Points} point point
            * @param {Rect} rect point region
            * @param {IPointRenderEventArgs} argsData argsData
            * @param {string} direction path direction
            * @returns {void}
            * @private
            */
        drawCandle(series: Series, point: Points, rect: Rect, argsData: IPointRenderEventArgs, direction: string): void;
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the candle series.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `StackingColumnSeries` module used to render the stacking column series.
    */
export class StackingColumnSeries extends ColumnBase {
        /**
            * Render the Stacking column series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series): void;
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
        /**
            * To destroy the stacking column.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
}

/**
    * `StepLineSeries` module is used to render the step line series.
    */
export class StepLineSeries extends LineBase {
        /**
            * Render the Step line series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
        /**
            * To destroy the step line series.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
}

/**
    * `StepAreaSeries` Module used to render the step area series.
    */
export class StepAreaSeries extends LineBase {
        /**
            * Render StepArea series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
        /**
            * To destroy the step Area series.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
}

/**
    * `StackingAreaSeries` module used to render the Stacking Area series.
    */
export class StackingAreaSeries extends LineBase {
        /**
            * Render the Stacking area series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
        /**
            * To destroy the stacking area.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
}

/**
    * `StackingStepAreaSeries` module used to render the Stacking Step Area series.
    */
export class StackingStepAreaSeries extends LineBase {
        /**
            * Render the Stacking step area series.
            *
            * @returns {void}
            * @private
            */
        render(stackSeries: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
        /**
            * To destroy the stacking step area.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
}

/**
    * `StackingLineSeries` module used to render the Stacking Line series.
    */
export class StackingLineSeries extends LineBase {
        /**
            * Render the Stacking line series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
        /**
            * To destroy the stacking line.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
}

/**
    * `ScatterSeries` module is used to render the scatter series.
    */
export class ScatterSeries {
        /**
            * Render the scatter series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
        /**
            * To improve the chart performance.
            *
            * @returns {void}
            * @private
            */
        enableComplexProperty(series: Series): Points[];
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the scatter.
            *
            * @returns {void}
            */
        destroy(): void;
}

/**
    * `RangeColumnSeries` module is used to render the range column series.
    */
export class RangeColumnSeries extends ColumnBase {
        /**
            * Render Range Column series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
        /**
            * To destroy the range column series.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `WaterfallSeries` module is used to render the waterfall series.
    */
export class WaterfallSeries extends ColumnBase {
        /**
            * Render waterfall series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series): void;
        /**
            * Add sumIndex and intermediateSumIndex data.
            *
            * @returns {object[]} data
            * @private
            */
        processInternalData(json: Object[], series: Series): Object[];
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the waterfall series.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `HiloSeries` module is used to render the hilo series.
    */
export class HiloSeries extends ColumnBase {
        /**
            * Render Hiloseries.
            *
            * @returns {void}
            * @private
            */
        render(series: Series): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
        /**
            * To destroy the Hilo series.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `HiloOpenCloseSeries` module is used to render the hiloOpenClose series.
    */
export class HiloOpenCloseSeries extends ColumnBase {
        /**
            * Render HiloOpenCloseSeries series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series): void;
        /**
            * To draw the rectangle for points.
            *
            * @returns {void}
            * @private
            */
        protected drawHiloOpenClosePath(series: Series, point: Points, open: ChartLocation, close: ChartLocation, rect: Rect, argsData: IPointRenderEventArgs): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
        /**
            * To destroy the column series.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `RangeAreaSeries` module is used to render the range area series.
    */
export class RangeAreaSeries extends LineBase {
        /**
            * Render RangeArea Series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series, xAxis: Axis, yAxis: Axis, inverted: boolean): void;
        /**
            * path for rendering the low points
            *
            * @returns {void}.
            * @private
            */
        protected closeRangeAreaPath(visiblePoints: Points[], point: Points, series: Series, direction: string, i: number): string;
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the line series.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `SplineRangeAreaSeries` module is used to render the range area series.
    */
export class SplineRangeAreaSeries extends SplineBase {
        /**
            * Render SplineRangeArea Series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series, xAxis: Axis, yAxis: Axis, inverted: boolean): void;
        /**
            * path for rendering the low points in SplineRangeArea
            *
            * @returns {void}.
            * @private
            */
        protected closeSplineRangeAreaPath(visiblePoint: Points[], point: Points, series: Series, direction: string, i: number, xAxis: Axis, yAxis: Axis, inverted: boolean): string;
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the line series.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `BubbleSeries` module is used to render the bubble series.
    */
export class BubbleSeries {
        /**
            * Render the Bubble series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
        /**
            * To destroy the Bubble.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
}

/**
    * `SplineSeries` module is used to render the spline series.
    */
export class SplineSeries extends SplineBase {
        /**
            * Render the spline series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the spline.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `HistogramSeries` Module used to render the histogram series.
    */
export class HistogramSeries extends ColumnSeries {
        /**
            * Render Histogram series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series): void;
        /**
            * Add data points for Histogram series.
            *
            * @returns {object[]} data
            * @private
            */
        processInternalData(data: Object[], series: Series): Object[];
        /**
            * Calculates bin values.
            *
            * @returns null
            * @private
            */
        calculateBinValues(series: Series): void;
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the histogram series.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `SplineAreaSeries` module used to render the spline area series.
    */
export class SplineAreaSeries extends SplineBase {
        /**
            * Render the splineArea series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the spline.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * Defines how to represent the market trend using technical indicators
    */
export class TechnicalIndicator extends SeriesBase {
        /**
            * Defines the type of the technical indicator
            *
            * @default 'Sma'
            */
        type: TechnicalIndicators;
        /**
            * Defines the period, the price changes over which will be considered to predict the trend
            *
            * @default 14
            */
        period: number;
        /**
            * Defines the look back period, the price changes over which will define the %K value in stochastic indicators
            *
            * @default 14
            */
        kPeriod: number;
        /**
            * Defines the period, the price changes over which will define the %D value in stochastic indicators
            *
            * @default 3
            */
        dPeriod: number;
        /**
            * Defines the over-bought(threshold) values. It is applicable for RSI and stochastic indicators
            *
            * @default 80
            */
        overBought: number;
        /**
            * Defines the over-sold(threshold) values. It is applicable for RSI and stochastic indicators
            *
            * @default 20
            */
        overSold: number;
        /**
            * Sets the standard deviation values that helps to define the upper and lower bollinger bands
            *
            * @default 2
            */
        standardDeviation: number;
        /**
            * Defines the field to compare the current value with previous values
            *
            * @default 'Close'
            */
        field: FinancialDataFields;
        /**
            * Sets the slow period to define the Macd line
            *
            * @default 12
            */
        slowPeriod: number;
        /**
            * Sets the fast period to define the Macd line
            *
            * @default 26
            */
        fastPeriod: number;
        /**
            * Enables/Disables the over-bought and over-sold regions
            *
            * @default true
            */
        showZones: boolean;
        /**
            * Defines the appearance of the the MacdLine of Macd indicator
            *
            * @default { color: '#ff9933', width: 2 }
            */
        macdLine: ConnectorModel;
        /**
            * Defines the type of the Macd indicator.
            *
            * @default 'Both'
            */
        macdType: MacdType;
        /**
            * Defines the color of the positive bars in Macd indicators
            *
            * @default '#2ecd71'
            */
        macdPositiveColor: string;
        /**
            * Defines the color of the negative bars in Macd indicators
            *
            * @default '#e74c3d'
            */
        macdNegativeColor: string;
        /**
            * Options for customizing the BollingerBand in the indicator.
            *
            * @default 'rgba(211,211,211,0.25)'
            */
        bandColor: string;
        /**
            * Defines the appearance of the upper line in technical indicators
            */
        upperLine: ConnectorModel;
        /**
            * Defines the appearance of lower line in technical indicators
            */
        lowerLine: ConnectorModel;
        /**
            * Defines the appearance of period line in technical indicators
            */
        periodLine: ConnectorModel;
        /**
            * Defines the name of the series, the data of which has to be depicted as indicator
            *
            * @default ''
            */
        seriesName: string;
        /** @private */
        targetSeries: Series[];
        /** @private */
        sourceSeries: Series;
        /** @private */
        indicatorElement: Element;
        /** @private */
        clipRectElement: Element;
        /** @private */
        clipRect: Rect;
        /** @private */
        setDataSource(series: Series, chart: Chart): void;
}

/**
    * Interface for a class TechnicalIndicator
    */
export interface TechnicalIndicatorModel extends SeriesBaseModel {
        /**
            * Defines the type of the technical indicator
            *
            * @default 'Sma'
            */
        type?: TechnicalIndicators;
        /**
            * Defines the period, the price changes over which will be considered to predict the trend
            *
            * @default 14
            */
        period?: number;
        /**
            * Defines the look back period, the price changes over which will define the %K value in stochastic indicators
            *
            * @default 14
            */
        kPeriod?: number;
        /**
            * Defines the period, the price changes over which will define the %D value in stochastic indicators
            *
            * @default 3
            */
        dPeriod?: number;
        /**
            * Defines the over-bought(threshold) values. It is applicable for RSI and stochastic indicators
            *
            * @default 80
            */
        overBought?: number;
        /**
            * Defines the over-sold(threshold) values. It is applicable for RSI and stochastic indicators
            *
            * @default 20
            */
        overSold?: number;
        /**
            * Sets the standard deviation values that helps to define the upper and lower bollinger bands
            *
            * @default 2
            */
        standardDeviation?: number;
        /**
            * Defines the field to compare the current value with previous values
            *
            * @default 'Close'
            */
        field?: FinancialDataFields;
        /**
            * Sets the slow period to define the Macd line
            *
            * @default 12
            */
        slowPeriod?: number;
        /**
            * Sets the fast period to define the Macd line
            *
            * @default 26
            */
        fastPeriod?: number;
        /**
            * Enables/Disables the over-bought and over-sold regions
            *
            * @default true
            */
        showZones?: boolean;
        /**
            * Defines the appearance of the the MacdLine of Macd indicator
            *
            * @default { color: '#ff9933', width: 2 }
            */
        macdLine?: ConnectorModel;
        /**
            * Defines the type of the Macd indicator.
            *
            * @default 'Both'
            */
        macdType?: MacdType;
        /**
            * Defines the color of the positive bars in Macd indicators
            *
            * @default '#2ecd71'
            */
        macdPositiveColor?: string;
        /**
            * Defines the color of the negative bars in Macd indicators
            *
            * @default '#e74c3d'
            */
        macdNegativeColor?: string;
        /**
            * Options for customizing the BollingerBand in the indicator.
            *
            * @default 'rgba(211,211,211,0.25)'
            */
        bandColor?: string;
        /**
            * Defines the appearance of the upper line in technical indicators
            */
        upperLine?: ConnectorModel;
        /**
            * Defines the appearance of lower line in technical indicators
            */
        lowerLine?: ConnectorModel;
        /**
            * Defines the appearance of period line in technical indicators
            */
        periodLine?: ConnectorModel;
        /**
            * Defines the name of the series, the data of which has to be depicted as indicator
            *
            * @default ''
            */
        seriesName?: string;
}

/**
    * `SmaIndicator` module is used to render SMA indicator.
    */
export class SmaIndicator extends TechnicalAnalysis {
        /**
            * Defines the predictions based on SMA approach
            *
            * @private
            */
        initDataSource(indicator: TechnicalIndicator, chart: Chart): void;
        /**
            * To destroy the SMA indicator
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
}

/**
    * `EmaIndicator` module is used to render EMA indicator.
    */
export class EmaIndicator extends TechnicalAnalysis {
        /**
            * Defines the predictions based on EMA approach
            *
            * @private
            */
        initDataSource(indicator: TechnicalIndicator, chart: Chart): void;
        /**
            * To destroy the EMA Indicator
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
}

/**
    * `TmaIndicator` module is used to render TMA indicator.
    */
export class TmaIndicator extends TechnicalAnalysis {
        /**
            * Defines the predictions based on TMA approach
            *
            * @private
            */
        initDataSource(indicator: TechnicalIndicator, chart: Chart): void;
        /**
            * To destroy the TMA indicator.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
}

/**
    * `AccumulationDistributionIndicator` module is used to render accumulation distribution indicator.
    */
export class AccumulationDistributionIndicator extends TechnicalAnalysis {
        /**
            * Defines the predictions using accumulation distribution approach
            *
            * @private
            */
        initDataSource(indicator: TechnicalIndicator): void;
        /**
            * To destroy the Accumulation Distribution Technical Indicator.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
}

/**
    * `AtrIndicator` module is used to render ATR indicator.
    */
export class AtrIndicator extends TechnicalAnalysis {
        /**
            * Defines the predictions using Average True Range approach
            *
            * @private
            */
        initDataSource(indicator: TechnicalIndicator, chart: Chart): void;
        /**
            * To destroy the Average true range indicator.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
}

/**
    * `MomentumIndicator` module is used to render Momentum indicator.
    */
export class MomentumIndicator extends TechnicalAnalysis {
        /**
            * Defines the collection of series to represent a momentum indicator
            *
            * @private
            */
        initSeriesCollection(indicator: TechnicalIndicator, chart: Chart): void;
        /**
            * Defines the predictions using momentum approach
            *
            * @private
            */
        initDataSource(indicator: TechnicalIndicator, chart: Chart): void;
        /**
            * To destroy the momentum indicator
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
}

/**
    * `RsiIndicator` module is used to render RSI indicator.
    */
export class RsiIndicator extends TechnicalAnalysis {
        /**
            * Initializes the series collection to represent the RSI Indicator
            *
            * @private
            */
        initSeriesCollection(indicator: TechnicalIndicator, chart: Chart): void;
        /**
            * Defines the predictions using RSI approach
            *
            * @private
            */
        initDataSource(indicator: TechnicalIndicator, chart: Chart): void;
        /**
            * To destroy the RSI Indicator.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
}

/**
    * `StochasticIndicator` module is used to render stochastic indicator.
    */
export class StochasticIndicator extends TechnicalAnalysis {
        /**
            * Defines the collection of series that represents the stochastic indicator
            *
            * @private
            */
        initSeriesCollection(indicator: TechnicalIndicator, chart: Chart): void;
        /**
            * Defines the predictions based on stochastic approach
            *
            * @private
            */
        initDataSource(indicator: TechnicalIndicator, chart: Chart): void;
        /**
            * To destroy the Stocastic Indicator.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
}

/**
    * `BollingerBands` module is used to render bollinger band indicator.
    */
export class BollingerBands extends TechnicalAnalysis {
        /**
            * Initializes the series collection to represent bollinger band
            */
        initSeriesCollection(indicator: TechnicalIndicator, chart: Chart): void;
        /**
            * Defines the predictions using Bollinger Band Approach
            *
            * @private
            */
        initDataSource(indicator: TechnicalIndicator, chart: Chart): void;
        /**
            * To destroy the Bollinger Band.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
}

/**
    * `MacdIndicator` module is used to render MACD indicator.
    */
export class MacdIndicator extends TechnicalAnalysis {
        /**
            * Defines the collection of series to represent the MACD indicator
            *
            * @private
            */
        initSeriesCollection(indicator: TechnicalIndicator, chart: Chart): void;
        /**
            * Defines the predictions using MACD approach
            *
            * @private
            */
        initDataSource(indicator: TechnicalIndicator, chart: Chart): void;
        /**
            * To destroy the MACD Indicator.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
}

/**
    * `Trendline` module is used to render 6 types of trendlines in chart.
    */
export class Trendlines {
        /**
            * Defines the collection of series, that are used to represent a trendline
            *
            * @private
            */
        initSeriesCollection(trendline: Trendline, chart: Chart): void;
        /**
            * Defines the points to draw the trendlines
            */
        initDataSource(trendline: Trendline): void;
        /**
            * Defines the trendline elements
            */
        getTrendLineElements(series: Series, chart: Chart): void;
        /**
            * To destroy the trendline
            */
        destroy(): void;
        /**
            * Get module name
            */
        protected getModuleName(): string;
}
/** @private */
export interface SlopeIntercept {
        slope?: number;
        intercept?: number;
}

/**
    * Defines Orientation of axis. They are
    * * horizontal
    * * vertical
    *
    * @private
    */
export type Orientation = 
/**  Horizontal Axis. */
'Horizontal' | 
/**  Vertical Axis. */
'Vertical';
/**
    * Defines area type of chart. They are
    * * none
    * * cartesianAxes
    * * polarAxes
    *
    * @private
    */
export type ChartAreaType = 
/**  Cartesian panel. */
'CartesianAxes' | 
/**  Polar panel. */
'PolarAxes';
/**
    * Defines series type of chart. They are
    * * xy
    * * highLow
    *
    * @private
    */
export type SeriesValueType = 
/**  XY value. */
'XY' | 
/**  HighLow value. */
'HighLow' | 
/**  HighLowOpenClose value. */
'HighLowOpenClose' | 
/** BoxPlot */
'BoxPlot';
/**
    * Defines the range padding of axis. They are
    * * none - Padding cannot be applied to the axis.
    * * normal - Padding is applied to the axis based on the range calculation.
    * * additional - Interval of the axis is added as padding to the minimum and maximum values of the range.
    * * round - Axis range is rounded to the nearest possible value divided by the interval.
    */
export type ChartRangePadding = 
/**  Padding Normal is applied for orientation vertical axis and None is applied for orientation horizontal axis */
'Auto' | 
/**  Padding wiil not be applied to the axis. */
'None' | 
/**  Padding is applied to the axis based on the range calculation. */
'Normal' | 
/**  Interval of the axis is added as padding to the minimum and maximum values of the range. */
'Additional' | 
/**  Axis range is rounded to the nearest possible value divided by the interval. */
'Round';
/**
    * Defines the segment axis. They are,
    * * X - Segment calculation rendered based on horizontal axis
    * * Y - Segment calculation rendered based on vertical axis
    */
export type Segment = 
/** Segment calculation rendered based on horizontal axis */
'X' | 
/** Segment calculation rendered based on verticalal axis */
'Y';
/**
    * Defines the unit of Strip line Size. They are
    * * auto
    * * pixel
    * * year
    * * month
    * * day
    * * hour
    * * minutes
    * * seconds
    */
export type SizeType = 
/**  Auto - In numeric axis, it will consider a number and DateTime axis, it will consider as milliseconds. */
'Auto' | 
/**  Pixel - The stripline gets their size in pixel */
'Pixel' | 
/**  Years - The stipline size is based on year in the DateTime axis. */
'Years' | 
/**  Months - The stipline size is based on month in the DateTime axis. */
'Months' | 
/**  Days - The stipline size is based on day in the DateTime axis. */
'Days' | 
/**  Hours - The stipline size is based on hour in the DateTime axis. */
'Hours' | 
/**  Minutes - The stipline size is based on minutes in the DateTime axis. */
'Minutes' | 
/**  Seconds - The stipline size is based on seconds in the DateTime axis. */
'Seconds';
/**
    * Defines the type series in chart. They are
    * * line - Renders the line series.
    * * column - Renders the column series.
    * * area - Renders the area series.
    * * pie - Renders the pie series.
    * * polar - Renders the polar series.
    * * radar - Renders the radar series.
    * * bar - Renders the stacking column series
    * * histogram - Renders the histogram series
    * * stackingColumn - Renders the stacking column series.
    * * stackingArea - Renders the stacking area series.
    * * stackingLine - Renders the stacking line series.
    * * stackingBar - Renders the stacking bar series.
    * * StackingColumn100 - Renders the stacking column series.
    * * StackingArea100 - Renders the stacking area 100 percent series
    * * stackingLine100 - Renders the stacking line 100 percent series.
    * * StackingBar100 - Renders the stacking bar 100 percent series.
    * * stepLine -  Renders the step line series.
    * * stepArea -  Renders the step area series.
    * * scatter - Renders the scatter series.
    * * spline - Renders the spline series
    * * rangeColumn - Renders the rangeColumn series.
    * * hilo - Renders the hilo series
    * * hiloOpenClose - Renders the HiloOpenClose Series
    * * Waterfall - Renders the Waterfall Series
    * * rangeArea - Renders the rangeArea series.
    * * splineRangeArea - Renders the splineRangeArea series.
    * * Pareto-Render the Pareto series
    */
export type ChartSeriesType = 
/**  Define the line series. */
'Line' | 
/**  Define the Column series. */
'Column' | 
/**  Define the Area series. */
'Area' | 
/**  Define the Bar series. */
'Bar' | 
/**  Define the Histogram series. */
'Histogram' | 
/**  Define the StackingColumn series. */
'StackingColumn' | 
/**  Define the StackingArea series. */
'StackingArea' | 
/**  Define the StackingStepArea series. */
'StackingStepArea' | 
/**  Define the StackingLine series. */
'StackingLine' | 
/**  Define the StackingBar series. */
'StackingBar' | 
/**  Define the Stepline series. */
'StepLine' | 
/**  Define the Steparea series. */
'StepArea' | 
/**  Define the Steparea series. */
'SplineArea' | 
/**  Define the Scatter series. */
'Scatter' | 
/**  Define the Spline series. */
'Spline' | 
/** Define the StackingColumn100 series */
'StackingColumn100' | 
/** Define the StackingBar100 series */
'StackingBar100' | 
/** Define the StackingLine100 series */
'StackingLine100' | 
/** Define the StackingArea100 series */
'StackingArea100' | 
/** Define the RangeColumn Series */
'RangeColumn' | 
/** Define the Hilo Series */
'Hilo' | 
/** Define the HiloOpenClose Series */
'HiloOpenClose' | 
/** Define the Waterfall Series */
'Waterfall' | 
/** Define the RangeArea Series */
'RangeArea' | 
/** Define the SplineRangeArea Series */
'SplineRangeArea' | 
/** Define the Bubble Series */
'Bubble' | 
/** Define the Candle Series */
'Candle' | 
/** Define the polar series */
'Polar' | 
/** Define the radar series */
'Radar' | 
/** Define the Box and whisker Series */
'BoxAndWhisker' | 
/** Define the multi color line series */
'MultiColoredLine' | 
/** Define the multi color area series */
'MultiColoredArea' | 
/** Define the Pareto series */
'Pareto';
/**
    * * Type of series to be drawn in radar or polar series. They are
    * * line - Renders the line series.
    * * column - Renders the column series.
    * * area - Renders the area series.
    * * scatter - Renders the scatter series.
    * * spline - Renders the spline series.
    * * stackingColumn - Renders the stacking column series.
    * * stackingArea - Renders the stacking area series.
    * * rangeColumn - Renders the range column series.
    * * splineArea - Renders the spline area series.
    */
export type ChartDrawType = 
/**  Define the line series. */
'Line' | 
/**  Define the Column series. */
'Column' | 
/**  Define the stacking Column series. */
'StackingColumn' | 
/**  Define the Area series. */
'Area' | 
/**  Define the Scatter series. */
'Scatter' | 
/** Define the Range column series */
'RangeColumn' | 
/** Define the Spline series */
'Spline' | 
/** Define the Spline Area series */
'SplineArea' | 
/** Define the spline series */
'StackingArea' | 
/** Define the Stacking line series */
'StackingLine';
/**
    * Defines the Edge Label Placement for an axis. They are
    * * none - No action will be perform.
    * * hide - Edge label will be hidden.
    * * shift - Shift the edge labels.
    */
export type EdgeLabelPlacement = 
/**  Render the edge label in axis. */
'None' | 
/**  Hides the edge label in axis. */
'Hide' | 
/**  Shift the edge series in axis. */
'Shift';
/**
    * Defines the Label Placement for category axis. They are
    * * betweenTicks - Render the label between the ticks.
    * * onTicks - Render the label on the ticks.
    */
export type LabelPlacement = 
/**  Render the label between the ticks. */
'BetweenTicks' | 
/**  Render the label on the ticks. */
'OnTicks';
/**
    * Defines the shape of marker. They are
    * * circle - Renders a circle.
    * * rectangle - Renders a rectangle.
    * * triangle - Renders a triangle.
    * * diamond - Renders a diamond.
    * * cross - Renders a cross.
    * * horizontalLine - Renders a horizontalLine.
    * * verticalLine - Renders a verticalLine.
    * * pentagon- Renders a pentagon.
    * * invertedTriangle - Renders a invertedTriangle.
    * * image - Renders a image.
    */
export type ChartShape = 
/** Render a circle. */
'Circle' | 
/** Render a Rectangle. */
'Rectangle' | 
/** Render a Triangle. */
'Triangle' | 
/** Render a Diamond. */
'Diamond' | 
/** Render a Cross. */
'Cross' | 
/** Render a HorizontalLine. */
'HorizontalLine' | 
/** Render a VerticalLine. */
'VerticalLine' | 
/** Render a Pentagon. */
'Pentagon' | 
/** Render a InvertedTriangle. */
'InvertedTriangle' | 
/** Render a Image. */
'Image' | 
/** Render a none */
'None';
/**
    * Defines the type of axis. They are
    * * double -  Renders a numeric axis.
    * * dateTime - Renders a dateTime axis.
    * * category - Renders a category axis.
    * * logarithmic - Renders a log axis.
    * * DateTimeCategory - Renders a datetime DateTimeCategory axis
    */
export type ValueType = 
/** Define the numeric axis. */
'Double' | 
/** Define the DateTime axis. */
'DateTime' | 
/** Define the Category axis . */
'Category' | 
/** Define the Logarithmic axis . */
'Logarithmic' | 
/** Define the datetime category axis */
'DateTimeCategory';
/**
    * Defines the type of error bar. They are
    * * fixed -  Renders a fixed type error bar.
    * * percentage - Renders a percentage type error bar.
    * * standardDeviation - Renders a standard deviation type error bar.
    * * standardError -Renders a standard error type error bar.
    * * custom -Renders a custom type error bar.
    */
export type ErrorBarType = 
/** Define the Fixed type. */
'Fixed' | 
/** Define the Percentage type. */
'Percentage' | 
/** Define the StandardDeviation type . */
'StandardDeviation' | 
/** Define the StandardError type . */
'StandardError' | 
/** Define the Custom type . */
'Custom';
/**
    * Defines the direction of error bar. They are
    * * both -  Renders both direction of error bar.
    * * minus - Renders minus direction of error bar.
    * * plus - Renders plus direction error bar.
    */
export type ErrorBarDirection = 
/** Define the Both direction. */
'Both' | 
/** Define the Minus direction. */
'Minus' | 
/** Define the Plus direction . */
'Plus';
/**
    * Defines the modes of error bar. They are
    * * vertical -  Renders a vertical error bar.
    * * horizontal - Renders a horizontal error bar.
    * * both - Renders both side error bar.
    */
export type ErrorBarMode = 
/** Define the Vertical mode. */
'Vertical' | 
/** Define the Horizontal mode. */
'Horizontal' | 
/** Define the Both mode . */
'Both';
/**
    * Defines the interval type of datetime axis. They are
    * * auto - Define the interval of the axis based on data.
    * * years - Define the interval of the axis in years.
    * * months - Define the interval of the axis in months.
    * * days - Define the interval of the axis in days.
    * * hours - Define the interval of the axis in hours.
    * * minutes - Define the interval of the axis in minutes.
    */
export type IntervalType = 
/** Define the interval of the axis based on data. */
'Auto' | 
/** Define the interval of the axis in years. */
'Years' | 
/** Define the interval of the axis in months. */
'Months' | 
/** Define the interval of the axis in days. */
'Days' | 
/** Define the interval of the axis in hours. */
'Hours' | 
/** Define the interval of the axis in minutes. */
'Minutes' | 
/** Define the interval of the axis in seconds. */
'Seconds';
/**
    * Defines the mode of line in crosshair. They are
    * * none - Hides both vertical and horizontal crosshair line.
    * * both - Shows both vertical and horizontal crosshair line.
    * * vertical - Shows the vertical line.
    * * horizontal - Shows the horizontal line.
    */
export type LineType = 
/** Hides both vertical and horizontal crosshair line. */
'None' | 
/** Shows both vertical and horizontal crosshair line. */
'Both' | 
/** Shows the vertical line. */
'Vertical' | 
/** Shows the horizontal line. */
'Horizontal';
export type MacdType = 'Line' | 'Histogram' | 'Both';
/**
    * Defines the position of the legend. They are
    * * auto - Places the legend based on area type.
    * * top - Displays the legend on the top of chart.
    * * left - Displays the legend on the left of chart.
    * * bottom - Displays the legend on the bottom of chart.
    * * right - Displays the legend on the right of chart.
    * * custom - Displays the legend  based on given x and y value.
    */
export type LegendPosition = 
/** Places the legend based on area type. */
'Auto' | 
/** Places the legend on the top of chart. */
'Top' | 
/** Places the legend on the left of chart. */
'Left' | 
/** Places the legend on the bottom of chart. */
'Bottom' | 
/** Places the legend on the right of chart. */
'Right' | 
/** Places the legend based on given x and y. */
'Custom';
/**
    * Defines the shape of legend. They are
    * * circle - Renders a circle.
    * * rectangle - Renders a rectangle.
    * * triangle - Renders a triangle.
    * * diamond - Renders a diamond.
    * * cross - Renders a cross.
    * * horizontalLine - Renders a horizontalLine.
    * * verticalLine - Renders a verticalLine.
    * * pentagon - Renders a pentagon.
    * * invertedTriangle - Renders a invertedTriangle.
    * * SeriesType -Render a legend shape based on series type.
    * * image - Renders a image.
    */
export type LegendShape = 
/** Render a circle. */
'Circle' | 
/** Render a Rectangle. */
'Rectangle' | 
/** Render a Triangle. */
'Triangle' | 
/** Render a Diamond. */
'Diamond' | 
/** Render a Cross. */
'Cross' | 
/** Render a Cross. */
'Multiply' | 
/** Render a actual bar. */
'ActualRect' | 
/** Render a target bar. */
'TargetRect' | 
/** Render a HorizontalLine. */
'HorizontalLine' | 
/** Render a VerticalLine. */
'VerticalLine' | 
/** Render a Pentagon. */
'Pentagon' | 
/** Render a InvertedTriangle. */
'InvertedTriangle' | 
/** Render a legend shape based on series type. */
'SeriesType' | 
/** Render a Image. */
'Image';
/**
    * Defines the zooming mode, They are.
    * * x,y - Chart will be zoomed with respect to both vertical and horizontal axis.
    * * x - Chart will be zoomed with respect to horizontal axis.
    * * y - Chart will be zoomed with respect to vertical axis.
    */
export type ZoomMode = 
/** Chart will be zoomed with respect to both vertical and horizontal axis. */
'XY' | 
/** Chart will be zoomed with respect to horizontal axis. */
'X' | 
/** Chart will be zoomed with respect to vertical axis. */
'Y';
/**
    * Defines the ZoomingToolkit, They are.
    * * zoom - Renders the zoom button.
    * * zoomIn - Renders the zoomIn button.
    * * zoomOut - Renders the zoomOut button.
    * * pan - Renders the pan button.
    * * reset - Renders the reset button.
    */
export type ToolbarItems = 
/** Renders the zoom button. */
'Zoom' | 
/** Renders the zoomIn button. */
'ZoomIn' | 
/** Renders the zoomOut button. */
'ZoomOut' | 
/** Renders the pan button. */
'Pan' | 
/** Renders the reset button. */
'Reset';
/**
    * Defines the SelectionMode, They are.
    * * none - Disable the selection.
    * * series - To select a series.
    * * point - To select a point.
    * * cluster - To select a cluster of point
    * * dragXY - To select points, by dragging with respect to both horizontal and vertical axis
    * * dragX - To select points, by dragging with respect to horizontal axis.
    * * dragY - To select points, by dragging with respect to vertical axis.
    * * lasso - To select points, by dragging with respect to free form.
    */
export type SelectionMode = 
/** Disable the selection. */
'None' | 
/** To select a series. */
'Series' | 
/** To select a point. */
'Point' | 
/** To select a cluster of point. */
'Cluster' | 
/** To select points, by dragging with respect to both horizontal and vertical axis. */
'DragXY' | 
/** To select points, by dragging with respect to vertical axis. */
'DragY' | 
/** To select points, by dragging with respect to horizontal axis. */
'DragX' | 
/** To select points, by dragging with respect to free form. */
'Lasso';
/**
    * Defines the LabelPosition, They are.
    * * outer - Position the label outside the point.
    * * top - Position the label on top of the point.
    * * bottom - Position the label on bottom of the point.
    * * middle - Position the label to middle of the point.
    * * auto - Position the label based on series.
    */
export type LabelPosition = 
/** Position the label outside the point. */
'Outer' | 
/** Position the label on top of the point. */
'Top' | 
/** Position the label on bottom of the point. */
'Bottom' | 
/** Position the label to middle of the point. */
'Middle' | 
/** Position the label based on series. */
'Auto';
/**
    * Defines the Alignment. They are
    * * none - Shows all the labels.
    * * hide - Hide the label when it intersect.
    * * rotate45 - Rotate the label to 45 degree when it intersect.
    * * rotate90 - Rotate the label to 90 degree when it intersect.
    * *
    */
export type LabelIntersectAction = 
/** Shows all the labels. */
'None' | 
/** Hide the label when it intersect. It is also applicable for polar radar chart */
'Hide' | 
/** Trim the label when it intersect. */
'Trim' | 
/** Wrap the label when it intersect. */
'Wrap' | 
/** Arrange the label in multiple row when it intersect. */
'MultipleRows' | 
/** Rotate the label to 45 degree when it intersect. */
'Rotate45' | 
/** Rotate the label to 90 degree when it intersect. */
'Rotate90';
/**
    * Defines the Alignment. They are
    * * none - Shows all the labels.
    * * hide - Hide the label when it intersect.
    * *
    */
export type DataLabelIntersectAction = 
/** Shows all the labels. */
'None' | 
/** Hide the label when it intersect. It is also applicable for polar radar chart */
'Hide';
/**
    * Defines the Position. They are
    * * inside - Place the ticks or labels inside to the axis line.
    * * outside - Place the ticks or labels outside to the axis line.
    * *
    */
export type AxisPosition = 
/** Place the ticks or labels inside to the axis line. */
'Inside' | 
/** Place the ticks or labels outside to the axis line. */
'Outside';
/**
    * Defines Theme of the chart. They are
    * * Material - Render a chart with Material theme.
    * * Fabric - Render a chart with Fabric theme
    */
export type ChartTheme = 
/**  Render a chart with Material theme. */
'Material' | 
/**  Render a chart with Fabric theme. */
'Fabric' | 
/**  Render a chart with Bootstrap theme. */
'Bootstrap' | 
/**  Render a chart with HighcontrastLight theme. */
'HighContrastLight' | 
/**  Render a chart with MaterialDark theme. */
'MaterialDark' | 
/**  Render a chart with FabricDark theme. */
'FabricDark' | 
/**  Render a chart with HighContrast theme. */
'HighContrast' | 
/**  Render a chart with BootstrapDark theme. */
'BootstrapDark' | 
/**  Render a chart with Bootstrap4 theme. */
'Bootstrap4' | 
/**  Render a chart with Tailwind theme. */
'Tailwind' | 
/**  Render a chart with TailwindDark theme. */
'TailwindDark' | 
/**  Render a chart with Bootstrap5 theme. */
'Bootstrap5' | 
/**  Render a chart with Bootstrap5Dark theme. */
'Bootstrap5Dark';
/**
    *  Specifies the order of the strip line. `Over` | `Behind`.
    * * Over - Places the strip line over the series elements.
    * * Behind - laces the strip line behind the series elements.
    */
export type ZIndex = 
/** Places the strip line over the series elements. */
'Over' | 
/** Places the strip line behind the series elements. */
'Behind';
/**
    * Defines the strip line text position.
    * * Start - Places the strip line text at the start.
    * * Middle - Places the strip line text in the middle.
    * * End - Places the strip line text at the end.
    */
export type Anchor = 
/** Places the strip line text at the start. */
'Start' | 
/** Places the strip line text in the middle. */
'Middle' | 
/** Places the strip line text at the end. */
'End';
/**
    * Defines the empty point mode of the chart.
    * * Gap - Used to display empty points as space.
    * * Zero - Used to display empty points as zero.
    * * Drop - Used to ignore the empty point while rendering.
    * * Average - Used to display empty points as previous and next point average.
    */
export type EmptyPointMode = 
/** Used to display empty points as space  */
'Gap' | 
/** Used to display empty points as zero  */
'Zero' | 
/** Used to ignore the empty point while rendering  */
'Drop' | 
/** Used to display empty points as previous and next point average  */
'Average';
/**
    * Defines the tooltip fade out mode of the chart.
    * * Click - Used to remove the tooltip on click.
    * * Move - Used to remove the tooltip with some delay.
    */
export type FadeOutMode = 
/** Used to remove the tooltip on click  */
'Click' | 
/** Used to remove the tooltip with some delay  */
'Move';
/**
    * Defines the type of technical indicators. They are
    * * Sma - Predicts the trend using Simple Moving Average approach
    * * Ema - Predicts the trend using Exponential Moving Average approach
    * * Tma - Predicts the trend using Triangle Moving Average approach
    * * Atr - Predicts the trend using Average True Range approach
    * * AccumulationDistribution - Predicts the trend using Accumulation Distribution approach
    * * Momentum - Predicts the trend using Momentum approach
    * * Rsi - Predicts the trend using RSI approach
    * * Macd - Predicts the trend using Moving Average Convergence Divergence approach
    * * Stochastic - Predicts the trend using Stochastic approach
    * * BollingerBands - Predicts the trend using Bollinger approach
    */
export type TechnicalIndicators = 
/** Predicts the trend using Simple Moving Average approach */
'Sma' | 
/** Predicts the trend using Exponential Moving Average approach */
'Ema' | 
/** Predicts the trend using Triangle Moving Average approach */
'Tma' | 
/** Predicts the trend using Momentum approach */
'Momentum' | 
/** Predicts the trend using Average True Range approach */
'Atr' | 
/** Predicts the trend using Accumulation Distribution approach */
'AccumulationDistribution' | 
/** Predicts the trend using Bollinger approach */
'BollingerBands' | 
/** Predicts the trend using Moving Average Convergence Divergence approach */
'Macd' | 
/** Predicts the trend using Stochastic approach */
'Stochastic' | 
/** Predicts the trend using RSI approach */
'Rsi';
/**
    * Defines the type of trendlines. They are
    * * Linear - Defines the linear trendline
    * * Exponential - Defines the exponential trendline
    * * Polynomial - Defines the polynomial trendline
    * * Power - Defines the power trendline
    * * Logarithmic - Defines the logarithmic trendline
    * * MovingAverage - Defines the moving average trendline
    */
export type TrendlineTypes = 
/** Defines the linear trendline */
'Linear' | 
/** Defines the exponential trendline */
'Exponential' | 
/** Defines the polynomial trendline */
'Polynomial' | 
/** Defines the power trendline */
'Power' | 
/** Defines the logarithmic trendline */
'Logarithmic' | 
/** Defines the moving average trendline */
'MovingAverage';
/**
    * Defines the financial data fields
    * * High - Represents the highest price in the stocks over time
    * * Low - Represents the lowest price in the stocks over time
    * * Open - Represents the opening price in the stocks over time
    * * Close - Represents the closing price in the stocks over time
    */
export type FinancialDataFields = 
/** Represents the highest price in the stocks over time */
'High' | 
/** Represents the lowest price in the stocks over time */
'Low' | 
/** Represents the opening price in the stocks over time */
'Open' | 
/** Represents the closing price in the stocks over time */
'Close';
/**
    * It defines type of spline.
    * Natural - Used to render Natural spline.
    * Cardinal - Used to render cardinal spline.
    * Clamped - Used to render Clamped spline
    * Monotonic - Used to render monotonic spline
    */
export type SplineType = 
/** Used to render natural spline type */
'Natural' | 
/** Used to render Monotonicspline  */
'Monotonic' | 
/** Used to render Cardinal */
'Cardinal' | 
/** Used to render Clamped */
'Clamped';
/**
    * Defines the BoxPlotMode for box and whisker chart series, They are.
    * * exclusive - Series render based on exclusive mode.
    * * inclusive - Series render based on inclusive mode.
    * * normal - Series render based on normal mode.
    */
export type BoxPlotMode = 
/** Defines the Exclusive mode. */
'Exclusive' | 
/** Defines the InClusive mode. */
'Inclusive' | 
/** Defines the Normal mode. */
'Normal';
/**
    * Defines the skeleton type for the axis.
    * * Date - it formats date only.
    * * DateTime - it formats date and time.
    * * Time - it formats time only.
    */
export type SkeletonType = 
/** Used to format date */
'Date' | 
/** Used to format date and time */
'DateTime' | 
/** Used to format time */
'Time';
/**
    * Defines border type for multi level labels.
    *  * Rectangle
    *  * Brace
    *  * WithoutBorder
    *  * Without top Border
    *  * Without top and bottom border
    *  * Curly brace
    */
export type BorderType = 
/** Rectangle */
'Rectangle' | 
/** Brace */
'Brace' | 
/** WithoutBorder */
'WithoutBorder' | 
/** WithoutTopBorder */
'WithoutTopBorder' | 
/** WithoutTopandBottomBorder */
'WithoutTopandBottomBorder' | 
/** CurlyBrace */
'CurlyBrace';
/**
    * Defines the SelectionMode, They are.
    * * none - Disable the selection.
    * * series - To select a series.
    * * point - To select a point.
    * * cluster - To select a cluster of point.
    */
export type HighlightMode = 
/** Disable the selection. */
'None' | 
/** To select a series. */
'Series' | 
/** To select a point. */
'Point' | 
/** To select a cluster of point. */
'Cluster';
export type LegendMode = 
/** Render legend items based on visible series */
'Series' | 
/** Render legend items based on points  */
'Point' | 
/** Render legend item based on range color mapping conditions */
'Range' | 
/** Render legend items based on range color mapping conditions */
'Gradient';

/**
    * Function to sort the dataSource, by default it sort the data in ascending order.
    *
    * @param  {Object} data chart data
    * @param  {string} fields date fields
    * @param  {boolean} isDescending boolean values of descending
    * @returns {Object[]} It returns chart data which be sorted.
    */
export function sort(data: Object[], fields: string[], isDescending?: boolean): Object[];
/** @private */
export function isBreakLabel(label: string): boolean;
/** @private */
export function getVisiblePoints(series: Series): Points[];
/** @private */
export function rotateTextSize(font: FontModel, text: string, angle: number, chart: Chart): Size;
/** @private */
export function removeElement(id: string | Element): void;
/** @private */
export function logBase(value: number, base: number): number;
/** @private */
export function showTooltip(text: string, x: number, y: number, areaWidth: number, id: string, element: Element, isTouch?: boolean, isTitleOrLegendEnabled?: boolean): void;
/** @private */
export function inside(value: number, range: VisibleRangeModel): boolean;
/** @private */
export function withIn(value: number, range: VisibleRangeModel): boolean;
/** @private */
export function logWithIn(value: number, axis: Axis): number;
/** @private */
export function withInRange(previousPoint: Points, currentPoint: Points, nextPoint: Points, series: Series): boolean;
/** @private */
export function sum(values: number[]): number;
/** @private */
export function subArraySum(values: Object[], first: number, last: number, index: number[], series: Series): number;
/** @private */
export function subtractThickness(rect: Rect, thickness: Thickness): Rect;
/** @private */
export function subtractRect(rect: Rect, thickness: Rect): Rect;
/** @private */
export function degreeToLocation(degree: number, radius: number, center: ChartLocation): ChartLocation;
/** @private */
export function degreeToRadian(degree: number): number;
/** @private */
export function getRotatedRectangleCoordinates(actualPoints: ChartLocation[], centerX: number, centerY: number, angle: number): ChartLocation[];
/**
    * Helper function to determine whether there is an intersection between the two polygons described
    * by the lists of vertices. Uses the Separating Axis Theorem
    *
    * @param {ChartLocation[]} a an array of connected points [{x:, y:}, {x:, y:},...] that form a closed polygon
    * @param {ChartLocation[]} b an array of connected points [{x:, y:}, {x:, y:},...] that form a closed polygon
    * @returns {boolean} if there is any intersection between the 2 polygons, false otherwise
    */
export function isRotatedRectIntersect(a: ChartLocation[], b: ChartLocation[]): boolean;
/** @private */
export function getAngle(center: ChartLocation, point: ChartLocation): number;
/** @private */
export function subArray(values: number[], index: number): number[];
/** @private */
export function valueToCoefficient(value: number, axis: Axis): number;
/** @private */
export function TransformToVisible(x: number, y: number, xAxis: Axis, yAxis: Axis, isInverted?: boolean, series?: Series): ChartLocation;
/**
    * method to find series, point index by element id
    *
    * @private
    */
export function indexFinder(id: string, isPoint?: boolean): Index;
/** @private */
export function CoefficientToVector(coefficient: number, startAngle: number): ChartLocation;
/** @private */
export function valueToPolarCoefficient(value: number, axis: Axis): number;
/** @private */
export class Mean {
        verticalStandardMean: number;
        horizontalStandardMean: number;
        verticalSquareRoot: number;
        horizontalSquareRoot: number;
        verticalMean: number;
        horizontalMean: number;
        constructor(verticalStandardMean: number, verticalSquareRoot: number, horizontalStandardMean: number, horizontalSquareRoot: number, verticalMean: number, horizontalMean: number);
}
/** @private */
export class PolarArc {
        startAngle: number;
        endAngle: number;
        innerRadius: number;
        radius: number;
        currentXPosition: number;
        constructor(startAngle?: number, endAngle?: number, innerRadius?: number, radius?: number, currentXPosition?: number);
}
/** @private */
export function createTooltip(id: string, text: string, top: number, left: number, fontSize: string): void;
/** @private */
export function createZoomingLabels(chart: Chart, axis: Axis, parent: Element, index: number, isVertical: boolean, rect: Rect): Element;
/** @private */
export function withInBounds(x: number, y: number, bounds: Rect, width?: number, height?: number): boolean;
/** @private */
export function getValueXByPoint(value: number, size: number, axis: Axis): number;
/** @private */
export function getValueYByPoint(value: number, size: number, axis: Axis): number;
/** @private */
export function findClipRect(series: Series): void;
/** @private */
export function firstToLowerCase(str: string): string;
/** @private */
export function getTransform(xAxis: Axis, yAxis: Axis, invertedAxis: boolean): Rect;
/** @private */
export function getMinPointsDelta(axis: Axis, seriesCollection: Series[]): number;
/** @private */
export function getAnimationFunction(effect: string): Function;
/**
    * Animation Effect Calculation Started Here
    *
    * @param {number} currentTime currentTime
    * @param {number} startValue startValue of the animation
    * @param {number} endValue endValue of the animation
    * @param {number} duration duration of the animation
    * @private
    */
export function linear(currentTime: number, startValue: number, endValue: number, duration: number): number;
/**
    * Animation Effect Calculation End
    *
    * @private
    */
export function markerAnimate(element: Element, delay: number, duration: number, series: Series | AccumulationSeries, pointIndex: number, point: ChartLocation, isLabel: boolean): void;
/**
    * Animate the rect element
    */
export function animateRectElement(element: Element, delay: number, duration: number, currentRect: Rect, previousRect: Rect): void;
/**
    * Animation after legend click a path
    *
    * @param {Element} element element to be animated
    * @param {string} direction current direction of the path
    * @param {boolean} redraw chart redraw
    * @param {string} previousDirection previous direction of the path
    * @param {number} animateDuration animateDuration of the path
    */
export function pathAnimation(element: Element, direction: string, redraw: boolean, previousDirection?: string, animateDuration?: number): void;
/**
    * To append the clip rect element
    *
    * @param {boolean} redraw chart redraw value
    * @param {BaseAttibutes} options element options
    * @param {SvgRenderer} renderer svg renderer values
    * @param {string} clipPath clipPath of the element
    */
export function appendClipElement(redraw: boolean, options: BaseAttibutes, renderer: SvgRenderer, clipPath?: string): Element;
/**
    * Triggers the event.
    *
    * @returns {void}
    * @private
    */
export function triggerLabelRender(chart: Chart | RangeNavigator, tempInterval: number, text: string, labelStyle: FontModel, axis: Axis): void;
/**
    * The function used to find whether the range is set.
    *
    * @returns {boolean} It returns true if the axis range is set otherwise false.
    * @private
    */
export function setRange(axis: Axis): boolean;
/**
    * To check whether the axis is zoomed or not.
    *
    * @param {Axis} axis axis model
    */
export function isZoomSet(axis: Axis): boolean;
/**
    * Calculate desired interval for the axis.
    *
    * @returns {void} It returns desired interval count.
    * @private
    */
export function getActualDesiredIntervalsCount(availableSize: Size, axis: Axis): number;
/**
    * Animation for template
    *
    * @private
    */
export function templateAnimate(element: Element, delay: number, duration: number, name: Effect, isRemove?: boolean): void;
/** @private */
export function drawSymbol(location: ChartLocation, shape: string, size: Size, url: string, options: PathOption, label: string, renderer?: SvgRenderer | CanvasRenderer, clipRect?: Rect, isChartControl?: boolean, control?: BulletChart): Element;
/** @private */
export function calculateShapes(location: ChartLocation, size: Size, shape: string, options: PathOption, url: string, isChart?: boolean, control?: BulletChart): IShapes;
/** @private */
export function getRectLocation(startLocation: ChartLocation, endLocation: ChartLocation, outerRect: Rect): Rect;
/** @private */
export function minMax(value: number, min: number, max: number): number;
/** @private */
export function getElement(id: string): Element;
/** @private */
export function getTemplateFunction(template: string): Function;
/** @private */
export function accReactTemplate(childElement: HTMLElement, chart: AccumulationChart, isTemplate: boolean, points: AccPoints[], argsData: IAccTextRenderEventArgs, point?: AccPoints, datalabelGroup?: Element, id?: string, dataLabel?: AccumulationDataLabelSettingsModel, redraw?: boolean): void;
/** @private */
export function chartReactTemplate(childElement: HTMLElement, chart: Chart, point: Points, series: Series, labelIndex: number, redraw?: boolean): void;
/** @private */
export function createTemplate(childElement: HTMLElement, pointIndex: number, content: string, chart: Chart | AccumulationChart | RangeNavigator, point?: Points | AccPoints, series?: Series | AccumulationSeries, dataLabelId?: string, labelIndex?: number, argsData?: IAccTextRenderEventArgs, isTemplate?: boolean, points?: AccPoints[], datalabelGroup?: Element, id?: string, dataLabel?: AccumulationDataLabelSettingsModel, redraw?: boolean): HTMLElement;
/** @private */
export function getFontStyle(font: FontModel): string;
/** @private */
export function measureElementRect(element: HTMLElement, redraw?: boolean, isReactCallback?: boolean): ClientRect;
/** @private */
export function findlElement(elements: NodeList, id: string): Element;
/** @private */
export function getPoint(x: number, y: number, xAxis: Axis, yAxis: Axis, isInverted?: boolean): ChartLocation;
/** @private */
export function appendElement(child: Element, parent: Element, redraw?: boolean, animate?: boolean, x?: string, y?: string): void;
/**
    * Method to append child element
    *
    * @param {boolean} isCanvas canvas mode value
    * @param {Element} parent parent element
    * @param {Element} childElement childElement element
    * @param {boolean} redraw chart redraw value
    * @param {boolean} isAnimate animation value
    * @param {string} x x position
    * @param {string} y y position
    * @param {ChartLocation} start start location value
    * @param {string} direction direction of the element
    * @param {boolean} forceAnimate forceAnimate
    * @param {boolean} isRect isRect
    * @param {Rect} previousRect previousRect
    * @param {number} animateDuration duration of the animation
    */
export function appendChildElement(isCanvas: boolean, parent: Element | HTMLElement, childElement: Element | HTMLElement, redraw?: boolean, isAnimate?: boolean, x?: string, y?: string, start?: ChartLocation, direction?: string, forceAnimate?: boolean, isRect?: boolean, previousRect?: Rect, animateDuration?: number): void;
/** @private */
export function getDraggedRectLocation(x1: number, y1: number, x2: number, y2: number, outerRect: Rect): Rect;
/** @private */
export function checkBounds(start: number, size: number, min: number, max: number): number;
/** @private */
export function getLabelText(currentPoint: Points, series: Series, chart: Chart): string[];
/** @private */
export function stopTimer(timer: number): void;
/** @private */
export function isCollide(rect: Rect, collections: Rect[], clipRect: Rect): boolean;
/** @private */
export function isOverlap(currentRect: Rect, rect: Rect): boolean;
/** @private */
export function containsRect(currentRect: Rect, rect: Rect): boolean;
/** @private */
export function calculateRect(location: ChartLocation, textSize: Size, margin: MarginModel): Rect;
/** @private */
export function convertToHexCode(value: ColorValue): string;
/** @private */
export function componentToHex(value: number): string;
/** @private */
export function convertHexToColor(hex: string): ColorValue;
/** @private */
export function colorNameToHex(color: string): string;
/** @private */
export function getSaturationColor(color: string, factor: number): string;
/** @private */
export function getMedian(values: number[]): number;
/** @private */
export function calculateLegendShapes(location: ChartLocation, size: Size, shape: string, options: PathOption): IShapes;
/** @private */
export function textTrim(maxWidth: number, text: string, font: FontModel): string;
/** @private */
export function lineBreakLabelTrim(maxWidth: number, text: string, font: FontModel): string[];
/** @private */
export function stringToNumber(value: string, containerSize: number): number;
/** @private */
export function redrawElement(redraw: boolean, id: string, options?: PathAttributes | RectAttributes | CircleAttributes, renderer?: SvgRenderer | CanvasRenderer): Element;
/** @private */
export function animateRedrawElement(element: Element | HTMLElement, duration: number, start: ChartLocation, end: ChartLocation, x?: string, y?: string): void;
/** @private */
export function textElement(renderer: SvgRenderer | CanvasRenderer, option: TextOption, font: FontModel, color: string, parent: HTMLElement | Element, isMinus?: boolean, redraw?: boolean, isAnimate?: boolean, forceAnimate?: boolean, animateDuration?: number, seriesClipRect?: Rect, labelSize?: Size, isRotatedLabelIntersect?: boolean, isCanvas?: boolean): Element;
/**
    * Method to calculate the width and height of the chart
    */
export function calculateSize(chart: Chart | AccumulationChart | RangeNavigator | StockChart): void;
/**
    * To create svg element.
    *
    * @param {Chart} chart chart instance
    */
export function createSvg(chart: Chart | AccumulationChart | RangeNavigator): void;
/**
    * To calculate chart title and height
    *
    * @param {string} title text of the title
    * @param {FontModel} style style of the title
    * @param {number} width width of the title
    */
export function getTitle(title: string, style: FontModel, width: number): string[];
/**
    * Method to calculate x position of title
    */
export function titlePositionX(rect: Rect, titleStyle: FontModel): number;
/**
    * Method to find new text and element size based on textOverflow
    */
export function textWrap(currentLabel: string, maximumWidth: number, font: FontModel): string[];
/**
    * Method to support the subscript and superscript value to text
    */
export function getUnicodeText(text: string, regexp: RegExp): string;
/**
    * Method to reset the blazor templates
    */
export function blazorTemplatesReset(control: Chart | AccumulationChart): void;
/** @private */
export class CustomizeOption {
        id: string;
        constructor(id?: string);
}
/** @private */
export class StackValues {
        startValues?: number[];
        endValues?: number[];
        constructor(startValue?: number[], endValue?: number[]);
}
/** @private */
export class RectOption extends PathOption {
        x: number;
        y: number;
        height: number;
        width: number;
        rx: number;
        ry: number;
        transform: string;
        constructor(id: string, fill: string, border: BorderModel, opacity: number, rect: Rect, rx?: number, ry?: number, transform?: string, dashArray?: string);
}
/** @private */
export class ImageOption {
        height: number;
        width: number;
        href: string;
        x: number;
        y: number;
        id: string;
        visibility: string;
        preserveAspectRatio: string;
        constructor(height: number, width: number, href: string, x: number, y: number, id: string, visibility: string, preserveAspectRatio: string);
}
/** @private */
export class CircleOption extends PathOption {
        cy: number;
        cx: number;
        r: number;
        constructor(id: string, fill: string, border: BorderModel, opacity: number, cx: number, cy: number, r: number);
}
/** @private */
export class PolygonOption {
        id: string;
        points: string;
        fill: string;
        constructor(id: string, points: string, fill: string);
}
/** @private */
export class ChartLocation {
        x: number;
        y: number;
        constructor(x: number, y: number);
}
/** @private */
export class LabelLocation {
        x: number;
        y: number;
        constructor(x: number, y: number);
}
/** @private */
export class Thickness {
        left: number;
        right: number;
        top: number;
        bottom: number;
        constructor(left: number, right: number, top: number, bottom: number);
}
/** @private */
export class ColorValue {
        r: number;
        g: number;
        b: number;
        constructor(r?: number, g?: number, b?: number);
}
/** @private */
export class PointData {
        point: Points;
        series: Series;
        lierIndex: number;
        constructor(point: Points, series: Series, index?: number);
}
/** @private */
export class AccPointData {
        point: AccPoints;
        series: AccumulationSeries;
        index: number;
        constructor(point: AccPoints, series: AccumulationSeries, index?: number);
}
/** @private */
export class ControlPoints {
        controlPoint1: ChartLocation;
        controlPoint2: ChartLocation;
        constructor(controlPoint1: ChartLocation, controlPoint2: ChartLocation);
}
/** @private */
export interface IHistogramValues {
        sDValue?: number;
        mean?: number;
        binWidth?: number;
        yValues?: number[];
}
/** @private */
export function getColorByValue(colorMap: RangeColorSettingModel, value: number): string;
/** @private */
export function getGradientColor(value: number, colorMap: RangeColorSettingModel): ColorValue;
/** @private */
export function getPercentageColor(percent: number, previous: string, next: string): ColorValue;
/** @private */
export function getPercentage(percent: number, previous: number, next: number): number;

/**
    * `Crosshair` module is used to render the crosshair for chart.
    */
export class Crosshair {
        /**
            * Constructor for crosshair module.
            *
            * @private
            */
        constructor(chart: Chart);
        /**
            * Renders the crosshair.
            *
            * @returns {void}
            */
        crosshair(): void;
        /**
            * Removes the crosshair on mouse leave.
            *
            * @returns {void}
            * @private
            */
        removeCrosshair(duration: number): void;
        /**
            * Get module name.
            *
            * @returns {string} module name
            */
        protected getModuleName(): string;
        /**
            * To destroy the crosshair.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `Tooltip` module is used to render the tooltip for chart series.
    */
export class Tooltip extends BaseTooltip {
        /**
            * Constructor for tooltip module.
            *
            * @private
            */
        constructor(chart: Chart);
        /**
            * Renders the tooltip.
            *
            * @returns {void}
            */
        tooltip(): void;
        removeHighlightedMarker(data: PointData[]): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the tooltip.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `Zooming` module handles the zooming for chart.
    */
export class Zoom {
        /** @private */
        zoomingRect: Rect;
        /** @private */
        toolkit: Toolkit;
        /** @private */
        toolkitElements: Element;
        /** @private */
        isPanning: boolean;
        /** @private */
        isZoomed: boolean;
        /** @private */
        isPointer: Boolean;
        /** @private */
        pinchTarget: Element;
        /** @private */
        isDevice: Boolean;
        /** @private */
        browserName: string;
        /** @private */
        touchStartList: ITouches[] | TouchList;
        /** @private */
        touchMoveList: ITouches[] | TouchList;
        /** @private */
        offset: Rect;
        /** @private */
        zoomAxes: IZoomAxisRange[];
        /** @private */
        isIOS: Boolean;
        /** @private */
        performedUI: boolean;
        /**
            * Constructor for Zooming module.
            *
            * @private
            */
        constructor(chart: Chart);
        /**
            * Function that handles the Rectangular zooming.
            *
            * @returns {void}
            */
        renderZooming(e: PointerEvent | TouchEvent, chart: Chart, isTouch: boolean): void;
        /**
            * Redraw the chart on zooming.
            *
            * @returns {void}
            * @private
            */
        performZoomRedraw(chart: Chart): void;
        /**
            * Function that handles the Mouse wheel zooming.
            *
            * @returns {void}
            * @private
            */
        performMouseWheelZooming(e: WheelEvent, mouseX: number, mouseY: number, chart: Chart, axes: AxisModel[]): void;
        /**
            * Function that handles the Pinch zooming.
            *
            * @returns {void}
            * @private
            */
        performPinchZooming(e: TouchEvent, chart: Chart): boolean;
        /**
            * To the show the zooming toolkit.
            *
            * @returns {void}
            * @private
            */
        applyZoomToolkit(chart: Chart, axes: AxisModel[]): void;
        /**
            * Return boolean property to show zooming toolkit.
            *
            * @returns {void}
            * @private
            */
        isAxisZoomed(axes: AxisModel[]): boolean;
        /**
            * @hidden
            */
        addEventListener(): void;
        /**
            * @hidden
            */
        removeEventListener(): void;
        /**
            * Handles the mouse wheel on chart.
            *
            * @returns {boolean} false
            * @private
            */
        chartMouseWheel(e: WheelEvent): boolean;
        /**
            * Handles the touch pointer.
            *
            * @returns {ITouches[]} touchList collection
            * @private
            */
        addTouchPointer(touchList: ITouches[], e: PointerEvent, touches: TouchList): ITouches[];
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the zooming.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `Selection` module handles the selection for chart.
    *
    * @private
    */
export class Selection extends BaseSelection {
        /** @private */
        renderer: SvgRenderer | CanvasRenderer;
        /** @private */
        isSeriesMode: boolean;
        /** @private */
        rectPoints: Rect;
        /** @private */
        selectedDataIndexes: Indexes[];
        /** @private */
        highlightDataIndexes: Indexes[];
        multiDataIndexes: Points[][];
        pathIndex: number;
        seriesIndex: number;
        /** @private */
        series: Series[];
        filterArray: Rect[];
        /** @private */
        chart: Chart;
        /** @private */
        currentMode: SelectionMode | HighlightMode;
        /** @private */
        previousSelectedEle: Element[];
        /**
            * Constructor for selection module.
            *
            * @private
            */
        constructor(chart: Chart);
        /**
            * Method to select the point and series.
            *
            * @returns {void}
            */
        invokeSelection(chart: Chart): void;
        generateStyle(series: SeriesModel): string;
        /**
            *  Method to get the selected data index
            *
            * @private
            */
        selectDataIndex(chart: Chart, indexes: Index[]): void;
        /**
            *  Method to get the selected index element
            *
            * @private
            */
        getElementByIndex(chart: Chart, index: Index, suffix?: string, marker?: boolean): Element[];
        /**
            *  Method to get the selected cluster element
            *
            * @private
            */
        getClusterElements(chart: Chart, index: Index): Element[];
        /**
            *  Method to get trackball elements
            *
            * @private
            */
        findTrackballElements(selectedElements: Element[] | NodeListOf<HTMLElement>, className: string): void;
        /**
            *  Method to get the selected element
            *
            * @private
            */
        findElements(chart: Chart, series: SeriesModel, index: Index, suffix?: string, marker?: boolean): Element[];
        /**
            * To find the selected element.
            *
            * @returns {void}
            * @private
            */
        isAlreadySelected(event: Event | PointerEvent): boolean;
        /**
            * To find the selected element.
            *
            * @returns {void}
            * @private
            */
        calculateSelectedElements(event: Event): void;
        /**
            *  Method to perform the selection
            *
            * @private
            */
        performSelection(index: Index, chart: Chart, element?: Element): void;
        /**
            *  Method to get the selected data index
            *
            * @private
            */
        selectionComplete(chart: Chart, index: Index, selectionMode: SelectionMode | HighlightMode): void;
        /**
            *  Method to perform selection
            *
            * @private
            */
        selection(chart: Chart, index: Index, selectedElements: Element[]): void;
        /**
            *  Method to get the cluster selection element
            *
            * @private
            */
        clusterSelection(chart: Chart, index: Index): void;
        /**
            * Method to remove the multi selected elements
            *
            * @private
            */
        removeMultiSelectElements(chart: Chart, index: Index[], currentIndex: Index, seriesCollection: SeriesModel[]): void;
        /**
            * Method to remove the selection
            *
            * @private
            */
        blurEffect(chartId: string, visibleSeries: Series[], legendClick?: boolean): void;
        /**
            * Method to add the add/remove class to element
            *
            * @private
            */
        checkSelectionElements(element: Element, className: string, visibility: boolean, legendClick: boolean, series: number): void;
        /**
            *  Method to apply the styles
            *
            * @private
            */
        applyStyles(elements: Element[]): void;
        /**
            *  Method to get the selection class
            *
            * @private
            */
        getSelectionClass(id: string): string;
        /**
            *  Method to remove styles
            *
            * @private
            */
        removeStyles(elements: Element[]): void;
        /**
            *  Method to remove the selected data index
            *
            * @private
            */
        addOrRemoveIndex(indexes: Index[], index: Index, isAdd?: boolean): void;
        /**
            *  Method to get the equal index
            *
            * @private
            */
        toEquals(first: Index, second: Index, checkSeriesOnly: boolean): boolean;
        /**
            * To redraw the selected points.
            *
            * @returns {void}
            * @private
            */
        redrawSelection(chart: Chart, oldMode: SelectionMode | HighlightMode, chartRedraw?: boolean): void;
        /** @private */
        legendSelection(chart: Chart, series: number, event: Event | PointerEvent): void;
        removeSelection(chart: Chart, series: number, selectedElements: NodeListOf<HTMLElement>, seriesStyle: string, isBlurEffectNeeded: boolean): void;
        /** @private */
        getSeriesElements(series: SeriesModel): Element[];
        /** @private */
        indexFinder(id: string): Index;
        /**
            * Drag selection that returns the selected data.
            *
            * @returns {void}
            * @private
            */
        calculateDragSelectedElements(chart: Chart, dragRect: Rect, isClose?: boolean): void;
        /**
            * Method to draw dragging rect.
            *
            * @returns {void}
            * @private
            */
        drawDraggingRect(chart: Chart, dragRect: Rect, target?: Element): void;
        /**
            * Method to remove dragged element.
            *
            * @returns {void}
            * @private
            */
        removeDraggedElements(chart: Chart, event: Event): void;
        /**
            * Method to resize the drag rect.
            *
            * @returns {void}
            * @private
            */
        resizingSelectionRect(chart: Chart, location: ChartLocation, tapped?: boolean, target?: Element): void;
        /**
            * Method to move the dragged rect.
            *
            * @returns {void}
            * @private
            */
        draggedRectMoved(chart: Chart, grabbedPoint: Rect, doDrawing?: boolean, target?: Element): void;
        /**
            * To complete the selection.
            *
            * @returns {void}
            * @private
            */
        completeSelection(e: Event): void;
        /** @private */
        dragStart(chart: Chart, seriesClipRect: Rect, mouseDownX: number, mouseDownY: number, event: Event): void;
        /** @private */
        mouseMove(event: PointerEvent | TouchEvent): void;
        /**
            * Get module name.
            *
            * @private
            */
        getModuleName(): string;
        /**
            * To destroy the selection.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `DataEditing` module handles data editing
    */
export class DataEditing {
        /**
            * It is used to identify point is dragging for data editing in other modules.
            *
            * @private
            */
        isPointDragging: boolean;
        /**
            * Constructor for DataEditing module.
            *
            * @private
            */
        constructor(chart: Chart);
        /**
            * Point drag start here
            */
        pointMouseDown(): void;
        /**
            * Point dragging
            */
        pointMouseMove(event: PointerEvent | TouchEvent): void;
        /**
            * Point drag ends here
            */
        pointMouseUp(): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the DataEditing.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `Highlight` module handles the selection for chart.
    *
    * @private
    */
export class Highlight extends Selection {
        /**
            * Constructor for selection module.
            *
            * @private
            */
        constructor(chart: Chart);
        /**
            * Method to select the point and series.
            *
            * @returns {void}
            */
        invokeHighlight(chart: Chart): void;
        /**
            * Get module name.
            *
            * @private
            */
        getModuleName(): string;
        /**
            * To destroy the highlight.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `DataLabel` module is used to render data label for the data point.
    */
export class DataLabel {
        /**
            * Constructor for the data label module.
            *
            * @private
            */
        constructor(chart: Chart);
        /**
            * Render the data label for series.
            *
            * @returns {void}
            */
        render(series: Series, chart: Chart, dataLabel: DataLabelSettingsModel): void;
        calculateTemplateLabelSize(parentElement: HTMLElement, childElement: HTMLElement, point: Points, series: Series, dataLabel: DataLabelSettingsModel, labelIndex: number, clip: Rect, redraw: boolean, isReactCallback?: boolean): void;
        /**
            * Animates the data label.
            *
            * @param  {Series} series - Data label of the series gets animated.
            * @returns {void}
            */
        doDataLabelAnimation(series: Series, element?: Element): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the dataLabel for series.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `ErrorBar` module is used to render the error bar for series.
    */
export class ErrorBar {
        errorHeight: number;
        error: number;
        positiveHeight: number;
        negativeHeight: number;
        /**
            * Constructor for the error bar module.
            *
            * @private
            */
        constructor(chart: Chart);
        /**
            * Render the error bar for series.
            *
            * @returns {void}
            */
        render(series: Series): void;
        meanCalculation(series: Series, mode: ErrorBarMode): Mean;
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doErrorBarAnimation(series: Series): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the errorBar for series.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * Configures the data label in the series.
    */
export class DataLabelSettings extends ChildProperty<DataLabelSettings> {
        /**
            * If set true, data label for series renders.
            *
            * @default false
            */
        visible: boolean;
        /**
            * If set true, data label for zero values in series renders.
            *
            * @default true
            */
        showZero: boolean;
        /**
            * The DataSource field that contains the data label value.
            *
            * @default null
            */
        name: string;
        /**
            * The background color of the data label accepts value in hex and rgba as a valid CSS color string.
            *
            * @default 'transparent'
            */
        fill: string;
        /**
            * The opacity for the background.
            *
            * @default 1
            */
        opacity: number;
        /**
            * Specifies angle for data label.
            *
            * @default 0
            */
        angle: number;
        /**
            * Enables rotation for data label.
            *
            * @default false
            */
        enableRotation: boolean;
        /**
            * Specifies the position of the data label. They are,
            * * Outer: Positions the label outside the point.
            * * top: Positions the label on top of the point.
            * * Bottom: Positions the label at the bottom of the point.
            * * Middle: Positions the label to the middle of the point.
            * * Auto: Positions the label based on series.
            *
            * @default 'Auto'
            */
        position: LabelPosition;
        /**
            * The roundedCornerX for the data label. It requires `border` values not to be null.
            *
            * @default 5
            */
        rx: number;
        /**
            * The roundedCornerY for the data label. It requires `border` values not to be null.
            *
            * @default 5
            */
        ry: number;
        /**
            * Specifies the alignment for data Label. They are,
            * * Near: Aligns the label to the left of the point.
            * * Center: Aligns the label to the center of the point.
            * * Far: Aligns the label to the right of the point.
            *
            * @default 'Center'
            */
        alignment: Alignment;
        /**
            * Option for customizing the border lines.
            */
        border: BorderModel;
        /**
            * Margin configuration for the data label.
            */
        margin: MarginModel;
        /**
            * Option for customizing the data label text.
            */
        font: FontModel;
        /**
            * Custom template to show the data label. Use ${point.x} and ${point.y} as a placeholder
            * text to display the corresponding data point.
            *
            * @default null
            */
        template: string;
        /**
            * Show Datalabel Even two Data Labels Are Overflow
            *
            * @default 'Hide'
            */
        labelIntersectAction: DataLabelIntersectAction;
}
/**
    *  Configures the marker in the series.
    */
export class MarkerSettings extends ChildProperty<MarkerSettings> {
        /**
            * If set to true the marker for series is rendered. This is applicable only for line and area type series.
            *
            * @default false
            */
        visible: boolean;
        /**
            * The different shape of a marker:
            * * Circle
            * * Rectangle
            * * Triangle
            * * Diamond
            * * HorizontalLine
            * * VerticalLine
            * * Pentagon
            * * InvertedTriangle
            * * Image
            *
            * @default 'Circle'
            */
        shape: ChartShape;
        /**
            * The URL for the Image that is to be displayed as a marker.  It requires marker `shape` value to be an `Image`.
            *
            * @default ''
            */
        imageUrl: string;
        /**
            * The height of the marker in pixels.
            *
            * @default 5
            */
        height: number;
        /**
            * The width of the marker in pixels.
            *
            * @default 5
            */
        width: number;
        /**
            * Options for customizing the border of a marker.
            */
        border: BorderModel;
        /**
            * Options for customizing the marker position.
            */
        offset: OffsetModel;
        /**
            *  The fill color of the marker that accepts value in hex and rgba as a valid CSS color string. By default, it will take series' color.
            *
            * @default null
            */
        fill: string;
        /**
            * The opacity of the marker.
            *
            * @default 1
            */
        opacity: number;
        /**
            * The data label for the series.
            */
        dataLabel: DataLabelSettingsModel;
}
/**
    * Points model for the series.
    *
    * @public
    */
export class Points {
        /** point x */
        x: Object;
        /** point y */
        y: Object;
        /** point visibility */
        visible: boolean;
        /** point text */
        text: string;
        /** point tooltip */
        tooltip: string;
        /** point color */
        color: string;
        /** point open value */
        open: Object;
        /** point close value */
        close: Object;
        /** point symbol location */
        symbolLocations: ChartLocation[];
        /** point x value */
        xValue: number;
        /** point y value */
        yValue: number;
        /** point color mapping column */
        colorValue: number;
        /** point index value */
        index: number;
        /** point region */
        regions: Rect[];
        /** point percentage value */
        percentage: number;
        /** point high value */
        high: Object;
        /** point low value */
        low: Object;
        /** point volume value */
        volume: Object;
        /** point size value */
        size: Object;
        /** point empty checking */
        isEmpty: boolean;
        /** point region data */
        regionData: PolarArc;
        /** point minimum value */
        minimum: number;
        /** point maximum value */
        maximum: number;
        /** point upper quartile value */
        upperQuartile: number;
        /** point lower quartile value */
        lowerQuartile: number;
        /** point median value */
        median: number;
        /** point outliers value */
        outliers: number[];
        /** point average value */
        average: number;
        /** point error value */
        error: number;
        /** point interior value */
        interior: string;
        /** To know the point is selected */
        isSelect: boolean;
        /** point marker */
        marker: MarkerSettingsModel;
        /**
            * To identify point y value with in the range.
            *
            * @private
            */
        isPointInRange: boolean;
}
/**
    * Defines the behavior of the Trendlines
    */
export class Trendline extends ChildProperty<Trendline> {
        /**
            * Defines the name of trendline
            *
            * @default ''
            */
        name: string;
        /**
            * Defines the pattern of dashes and gaps to stroke.
            *
            * @default '0'
            */
        dashArray: string;
        /**
            * Specifies the visibility of trendline.
            *
            * @default true
            */
        visible: boolean;
        /**
            * Defines the type of the trendline
            *
            * @default 'Linear'
            */
        type: TrendlineTypes;
        /**
            * Defines the period, the price changes over which will be considered to predict moving average trend line
            *
            * @default 2
            */
        period: number;
        /**
            * Defines the polynomial order of the polynomial trendline
            *
            * @default 2
            */
        polynomialOrder: number;
        /**
            * Defines the period, by which the trend has to backward forecast
            *
            * @default 0
            */
        backwardForecast: number;
        /**
            * Defines the period, by which the trend has to forward forecast
            *
            * @default 0
            */
        forwardForecast: number;
        /**
            * Options to customize the animation for trendlines
            */
        animation: AnimationModel;
        /**
            * Options to customize the marker for trendlines
            *
            * @deprecated
            */
        marker: MarkerSettingsModel;
        /**
            * Enables/disables tooltip for trendlines
            *
            * @default true
            */
        enableTooltip: boolean;
        /**
            * Defines the intercept of the trendline
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        intercept: number;
        /**
            * Defines the fill color of trendline
            *
            * @default ''
            */
        fill: string;
        /**
            * Defines the width of the trendline
            *
            * @default 1
            */
        width: number;
        /**
            * Sets the legend shape of the trendline
            *
            * @default 'SeriesType'
            */
        legendShape: LegendShape;
        /** @private */
        targetSeries: Series;
        /** @private */
        trendLineElement: Element;
        /** @private */
        points: Points[];
        /** @private */
        clipRectElement: Element;
        /** @private */
        clipRect: Rect;
        /** @private */
        polynomialSlopes: number[];
        /** @private */
        sourceIndex: number;
        /** @private */
        index: number;
        /** @private */
        setDataSource(series: Series, chart: Chart): void;
}
/**
    * Configures Error bar in series.
    */
export class ErrorBarCapSettings extends ChildProperty<ErrorBarCapSettings> {
        /**
            * The width of the error bar in pixels.
            *
            * @default 1
            */
        width: number;
        /**
            * The length of the error bar in pixels.
            *
            * @default 10
            */
        length: number;
        /**
            *  The stroke color of the cap, which accepts value in hex, rgba as a valid CSS color string.
            *
            * @default null
            */
        color: string;
        /**
            * The opacity of the cap.
            *
            * @default 1
            */
        opacity: number;
}
export class ChartSegment extends ChildProperty<ChartSegment> {
        /**
            * Defines the starting point of region.
            *
            * @default null
            */
        value: Object;
        /**
            * Defines the color of a region.
            *
            * @default null
            */
        color: string;
        /**
            * Defines the pattern of dashes and gaps to stroke.
            *
            * @default '0'
            */
        dashArray: string;
        /** @private */
        startValue: number;
        /** @private */
        endValue: number;
}
/**
    * Error bar settings
    *
    * @public
    */
export class ErrorBarSettings extends ChildProperty<ErrorBarSettings> {
        /**
            * If set true, error bar for data gets rendered.
            *
            * @default false
            */
        visible: boolean;
        /**
            * The type of the error bar . They are
            * * Fixed -  Renders a fixed type error bar.
            * * Percentage - Renders a percentage type error bar.
            * * StandardDeviation - Renders a standard deviation type error bar.
            * * StandardError -Renders a standard error type error bar.
            * * Custom -Renders a custom type error bar.
            *
            * @default 'Fixed'
            */
        type: ErrorBarType;
        /**
            * The direction of the error bar . They are
            * * both -  Renders both direction of error bar.
            * * minus - Renders minus direction of error bar.
            * * plus - Renders plus direction error bar.
            *
            * @default 'Both'
            */
        direction: ErrorBarDirection;
        /**
            * The mode of the error bar . They are
            * * Vertical -  Renders a vertical error bar.
            * * Horizontal - Renders a horizontal error bar.
            * * Both - Renders both side error bar.
            *
            * @default 'Vertical'
            */
        mode: ErrorBarMode;
        /**
            *  The color for stroke of the error bar, which accepts value in hex, rgba as a valid CSS color string.
            *
            * @default null
            */
        color: string;
        /**
            * The vertical error of the error bar.
            *
            * @default 1
            */
        verticalError: number;
        /**
            * The stroke width of the error bar..
            *
            * @default 1
            */
        width: number;
        /**
            * The horizontal error of the error bar.
            *
            * @default 1
            */
        horizontalError: number;
        /**
            * The vertical positive error of the error bar.
            *
            * @default 3
            */
        verticalPositiveError: number;
        /**
            * The vertical negative error of the error bar.
            *
            * @default 3
            */
        verticalNegativeError: number;
        /**
            * The horizontal positive error of the error bar.
            *
            * @default 1
            */
        horizontalPositiveError: number;
        /**
            * The horizontal negative error of the error bar.
            *
            * @default 1
            */
        horizontalNegativeError: number;
        /**
            * Options for customizing the cap of the error bar.
            */
        errorBarCap: ErrorBarCapSettingsModel;
}
/**
    * Defines the common behavior of Series and Technical Indicators
    */
export class SeriesBase extends ChildProperty<SeriesBase> {
        /**
            * The DataSource field that contains the x value.
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        xName: string;
        /**
            * The Data Source field that contains the color mapping value.
            * It is applicable for range color mapping properly.
            */
        colorName: string;
        /**
            * The DataSource field that contains the high value of y
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        high: string;
        /**
            * The DataSource field that contains the low value of y
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        low: string;
        /**
            * The DataSource field that contains the open value of y
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        open: string;
        /**
            * The DataSource field that contains the close value of y
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        close: string;
        /**
            * Defines the data source field that contains the volume value in candle charts
            * It is applicable for financial series and technical indicators
            *
            * @default ''
            */
        volume: string;
        /**
            * The DataSource field that contains the color value of point
            * It is applicable for series
            *
            * @default ''
            */
        pointColorMapping: string;
        /**
            * Specifies the visibility of series.
            *
            * @default true
            */
        visible: boolean;
        /**
            * The name of the horizontal axis associated with the series. It requires `axes` of the chart.
            * It is applicable for series and technical indicators
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let chart: Chart = new Chart({
            * ...
            *     columns: [{ width: '50%' },
            *               { width: '50%' }],
            *     axes: [{
            *                name: 'xAxis 1',
            *                columnIndex: 1,
            *            }],
            *     series: [{
            *                dataSource: data,
            *                xName: 'x', yName: 'y',
            *                xAxisName: 'xAxis 1',
            *     }],
            * });
            * chart.appendTo('#Chart');
            * ```
            *
            * @default null
            */
        xAxisName: string;
        /**
            * The name of the vertical axis associated with the series. It requires `axes` of the chart.
            * It is applicable for series and technical indicators
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let chart: Chart = new Chart({
            * ...
            *     rows: [{ height: '50%' },
            *            { height: '50%' }],
            *     axes: [{
            *                name: 'yAxis 1',
            *                rowIndex: 1,
            *            }],
            *     series: [{
            *                dataSource: data,
            *                xName: 'x', yName: 'y',
            *                yAxisName: 'yAxis 1'
            *     }],
            * });
            * chart.appendTo('#Chart');
            * ```
            *
            * @default null
            */
        yAxisName: string;
        /**
            * Options to customizing animation for the series.
            */
        animation: AnimationModel;
        /**
            * The fill color for the series that accepts value in hex and rgba as a valid CSS color string.
            * It also represents the color of the signal lines in technical indicators.
            * For technical indicators, the default value is 'blue' and for series, it has null.
            *
            * @default null
            */
        fill: string;
        /**
            * The stroke width for the series that is applicable only for `Line` type series.
            * It also represents the stroke width of the signal lines in technical indicators.
            *
            * @default 1
            */
        width: number;
        /**
            * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.
            *
            * @default '0'
            */
        dashArray: string;
        /**
            * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager.
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let dataManager: DataManager = new DataManager({
            *         url: 'http://mvc.syncfusion.com/Services/Northwnd.svc/Tasks/'
            * });
            * let query: Query = new Query().take(50).where('Estimate', 'greaterThan', 0, false);
            * let chart: Chart = new Chart({
            * ...
            *     series: [{
            *        dataSource: dataManager,
            *        xName: 'Id',
            *        yName: 'Estimate',
            *        query: query
            *    }],
            * ...
            * });
            * chart.appendTo('#Chart');
            * ```
            *
            * @default ''
            */
        dataSource: Object | DataManager;
        /**
            * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.
            *
            * @default ''
            */
        query: Query;
        /**
            * Defines the collection of regions that helps to differentiate a line series.
            */
        segments: ChartSegmentModel[];
        /**
            * Defines the axis, based on which the line series will be split.
            */
        segmentAxis: Segment;
        /**
            * This property used to improve chart performance via data mapping for series dataSource.
            *
            * @default false
            */
        enableComplexProperty: boolean;
        /**
            * Process data for the series.
            *
            * @hidden
            */
        processJsonData(): void;
        /** @private */
        protected dataPoint(i: number, textMappingName: string, xName: string): Points;
        /**
            * To set empty point value based on empty point mode
            *
            * @private
            */
        setEmptyPoint(point: Points, i: number): void;
        /** @private */
        protected pushCategoryData(point: Points, index: number, pointX: string): void;
        /**
            * To find the control points for spline.
            *
            * @returns {void}
            * @private
            */
        refreshDataManager(chart: Chart): void;
        /** @private */
        xMin: number;
        /** @private */
        xMax: number;
        /** @private */
        yMin: number;
        /** @private */
        yMax: number;
        /** @private */
        xAxis: Axis;
        /** @private */
        yAxis: Axis;
        /** @private */
        chart: Chart;
        /** @private */
        currentViewData: Object;
        /** @private */
        clipRect: Rect;
        /** @private */
        xData: number[];
        /** @private */
        yData: number[];
        /** @private */
        index: number;
        /** @private */
        dataModule: Data;
        /** @private */
        points: Points[];
        /** @private */
        visiblePoints: Points[];
        /** @private */
        seriesType: SeriesValueType;
        /** @private */
        sizeMax: number;
}
/**
    * Configures the series in charts.
    *
    * @public
    */
export class Series extends SeriesBase {
        /**
            * The name of the series visible in legend.
            *
            * @default ''
            */
        name: string;
        /**
            * The DataSource field that contains the y value.
            *
            * @default ''
            */
        yName: string;
        /**
            * Type of series to be drawn in radar or polar series. They are
            *  'Line'
            *  'Column'
            *  'Area'
            *  'Scatter'
            *  'Spline'
            *  'StackingColumn'
            *  'StackingArea'
            *  'RangeColumn'
            *  'SplineArea'
            *
            * @default 'Line'
            */
        drawType: ChartDrawType;
        /**
            * Specifies whether to join start and end point of a line/area series used in polar/radar chart to form a closed path.
            *
            * @default true
            */
        isClosed: boolean;
        /**
            * This property is used in financial charts to visualize the price movements in stock.
            * It defines the color of the candle/point, when the opening price is less than the closing price.
            *
            * @default '#2ecd71'
            */
        bearFillColor: string;
        /**
            * This property is used in financial charts to visualize the price movements in stock.
            * It defines the color of the candle/point, when the opening price is higher than the closing price.
            *
            * @default '#e74c3d'
            */
        bullFillColor: string;
        /**
            * This property is applicable for candle series.
            * It enables/disables to visually compare the current values with the previous values in stock.
            *
            * @default false
            */
        enableSolidCandles: boolean;
        /**
            * The DataSource field that contains the size value of y
            *
            * @default ''
            */
        size: string;
        /**
            * The bin interval of each histogram points.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        binInterval: number;
        /**
            * The normal distribution of histogram series.
            *
            * @default false
            */
        showNormalDistribution: boolean;
        /**
            * This property allows grouping series in `stacked column / bar` charts.
            * Any string value can be provided to the stackingGroup property.
            * If any two or above series have the same value, those series will be grouped together.
            *
            * @default ''
            */
        stackingGroup: string;
        /**
            * Options to customizing the border of the series. This is applicable only for `Column` and `Bar` type series.
            */
        border: BorderModel;
        /**
            * The opacity of the series.
            *
            * @default 1
            */
        opacity: number;
        /**
            * The z order of the series.
            *
            * @default 0
            */
        zOrder: number;
        /**
            * The type of the series are
            * * Line
            * * Column
            * * Area
            * * Bar
            * * Histogram
            * * StackingColumn
            * * StackingArea
            * * StackingBar
            * * StepLine
            * * StepArea
            * * Scatter
            * * Spline
            * * StackingColumn100
            * * StackingBar100
            * * StackingArea100
            * * RangeColumn
            * * Hilo
            * * HiloOpenClose
            * * Waterfall
            * * RangeArea
            * * SplineRangeArea
            * * Bubble
            * * Candle
            * * Polar
            * * Radar
            * * BoxAndWhisker
            * * Pareto
            *
            * @default 'Line'
            */
        type: ChartSeriesType;
        /**
            * Options for displaying and customizing error bar for individual point in a series.
            */
        errorBar: ErrorBarSettingsModel;
        /**
            * Options for displaying and customizing markers for individual points in a series.
            */
        marker: MarkerSettingsModel;
        /**
            * Options to customize the drag settings for series
            */
        dragSettings: DragSettingsModel;
        /**
            * Defines the collection of trendlines that are used to predict the trend
            */
        trendlines: TrendlineModel[];
        /**
            * If set true, the Tooltip for series will be visible.
            *
            * @default true
            */
        enableTooltip: boolean;
        /**
            * user can format now each series tooltip format separately.
            *
            * @default ''
            */
        tooltipFormat: string;
        /**
            * The provided value will be considered as a Tooltip name
            *
            * @default ''
            */
        tooltipMappingName: string;
        /**
            * The shape of the legend. Each series has its own legend shape. They are,
            * * Circle
            * * Rectangle
            * * Triangle
            * * Diamond
            * * Cross
            * * HorizontalLine
            * * VerticalLine
            * * Pentagon
            * * InvertedTriangle
            * * SeriesType
            * * Image
            * @default 'SeriesType'
            */
        legendShape: LegendShape;
        /**
            * The URL for the Image that is to be displayed as a Legend icon.  It requires  `legendShape` value to be an `Image`.
            * @default ''
            */
        legendImageUrl: string;
        /**
            * Custom style for the selected series or points.
            *
            * @default null
            */
        selectionStyle: string;
        /**
            * Custom style for the deselected series or points.
            *
            * @default null
            */
        unSelectedStyle: string;
        /**
            * Custom style for the non-highlighted series or points.
            *
            * @default null
            */
        nonHighlightStyle: string;
        /**
            * Minimum radius
            *
            * @default 1
            */
        minRadius: number;
        /**
            * Maximum radius
            *
            * @default 3
            */
        maxRadius: number;
        /**
            * Defines type of spline to be rendered.
            *
            * @default 'Natural'
            */
        splineType: SplineType;
        /**
            * It defines tension of cardinal spline types
            *
            * @default 0.5
            */
        cardinalSplineTension: number;
        /**
            * options to customize the empty points in series
            */
        emptyPointSettings: EmptyPointSettingsModel;
        /**
            * If set true, the mean value for box and whisker will be visible.
            *
            * @default true
            */
        showMean: boolean;
        /**
            * The mode of the box and whisker char series. They are,
            * Exclusive
            * Inclusive
            * Normal
            *
            * @default 'Normal'
            */
        boxPlotMode: BoxPlotMode;
        /**
            * To render the column series points with particular column width. If the series type is histogram the
            * default value is 1 otherwise 0.7.
            *
            * @default null
            * @aspDefaultValueIgnore
            * @blazorDefaultValue Double.NaN
            */
        columnWidth: number;
        /**
            * To render the column series points with particular column width as pixel.
            *
            * @default null
            * @aspDefaultValueIgnore
            * @blazorDefaultValue Double.NaN
            */
        columnWidthInPixel: number;
        /**
            * To render the column series points with particular column spacing. It takes value from 0 - 1.
            *
            * @default 0
            */
        columnSpacing: number;
        /**
            * Defines the visual representation of the negative changes in waterfall charts.
            *
            * @default '#C64E4A'
            */
        negativeFillColor: string;
        /**
            * Defines the visual representation of the summaries in waterfall charts.
            *
            * @default '#4E81BC'
            */
        summaryFillColor: string;
        /**
            * Defines the collection of indexes of the intermediate summary columns in waterfall charts.
            *
            * @default []
            * @aspType int[]
            */
        intermediateSumIndexes: number[];
        /**
            * Defines the collection of indexes of the overall summary columns in waterfall charts.
            *
            * @default []
            * @aspType int[]
            */
        sumIndexes: number[];
        /**
            * Defines the appearance of line connecting adjacent points in waterfall charts.
            */
        connector: ConnectorModel;
        /**
            * To render the column series points with particular rounded corner.
            */
        cornerRadius: CornerRadiusModel;
        visibleSeriesCount: number;
        /** @private */
        position: number;
        /** @private */
        rectCount: number;
        /** @private */
        seriesElement: Element;
        /** @private */
        errorBarElement: Element;
        /** @private */
        symbolElement: Element;
        /** @private */
        shapeElement: Element;
        /** @private */
        textElement: Element;
        /** @private */
        pathElement: Element;
        /** @private */
        sourceIndex: number;
        /** @private */
        category: SeriesCategories;
        /** @private */
        isRectSeries: boolean;
        /** @private */
        clipRectElement: Element;
        /** @private */
        stackedValues: StackValues;
        /** @private */
        interior: string;
        /** @private */
        histogramValues: IHistogramValues;
        /** @private */
        drawPoints: ControlPoints[];
        /** @private */
        lowDrawPoints: ControlPoints[];
        /** @private */
        delayedAnimation: boolean;
        constructor(parent: any, propName: string, defaultValue: Object, isArray?: boolean);
        /**
            * Refresh the axis label.
            *
            * @returns {void}
            * @private
            */
        refreshAxisLabel(): void;
        /**
            * To get the series collection.
            *
            * @returns {void}
            * @private
            */
        findSeriesCollection(column: Column, row: Row, isStack: boolean): Series[];
        /**
            * To calculate the stacked values.
            *
            * @returns {void}
            * @private
            */
        calculateStackedValue(isStacking100: boolean, chart: Chart): void;
        /** @private */
        renderSeries(chart: Chart): void;
        /**
            * To create seris element.
            *
            * @returns {void}
            * @private
            */
        createSeriesElements(chart: Chart): void;
        /**
            * To append the series.
            *
            * @returns {void}
            * @private
            */
        appendSeriesElement(element: Element, chart: Chart): void;
        /**
            * To perform animation for chart series.
            *
            * @returns {void}
            * @private
            */
        performAnimation(chart: Chart, type: string, errorBar: ErrorBarSettingsModel, marker: MarkerSettingsModel, dataLabel: DataLabelSettingsModel): void;
        /**
            * To set border color for empty point
            *
            * @private
            */
        setPointColor(point: Points, color: string): string;
        /**
            * To set border color for empty point
            *
            * @private
            */
        setBorderColor(point: Points, border: BorderModel): BorderModel;
}

export interface ISelectorRenderArgs {
        /** Defines the thumb size of the slider */
        thumbSize: number;
        /** Defines the selector appending element */
        element: HTMLElement;
        /** Defines the selector width */
        width: number;
        /** Defines the selector height */
        height: number;
}
/** @private */
export interface IFontMapping {
        size?: string;
        color?: string;
        fontWeight?: string;
        fontStyle?: string;
        fontFamily?: string;
        opacity?: number;
}
/** @private */
export interface IShapes {
        renderOption?: Object;
        functionName?: string;
}
/**
    * Specifies the Theme style for scrollbar.
    */
export interface IScrollbarThemeStyle {
        backRect: string;
        thumb: string;
        circle: string;
        circleHover: string;
        arrow: string;
        grip: string;
        arrowHover?: string;
        backRectBorder?: string;
}
export interface ILegendRegions {
        rect: Rect;
        index: number;
}
/**
    * Period selector component interface
    *
    * @private
    */
export interface IPeriodSelectorControl {
        /**
            * Element for the control
            */
        element: HTMLElement;
        /**
            * Series min value.
            */
        seriesXMin: number;
        /**
            * Series max value.
            */
        seriesXMax: number;
        /**
            * Start value for the axis.
            */
        startValue: number;
        /**
            * End value for the axis.
            */
        endValue: number;
        /**
            * Range slider instance.
            */
        rangeSlider: RangeSlider;
        /**
            * To disable the range selector.
            */
        disableRangeSelector: boolean;
        /**
            * To config period selector settings.
            */
        periods: PeriodsModel[];
        /**
            * Range navigator
            */
        rangeNavigatorControl: RangeNavigator;
}
/**
    * Header Footer Content
    *
    * @private
    */
export interface IPDFArgs {
        /**
            * Content of the header
            */
        content: string;
        /**
            * FontSize of the content
            */
        fontSize?: number;
        /**
            * x position for the content
            */
        x?: number;
        /**
            * y position for the content
            */
        y?: number;
}

export interface IChartEventArgs {
        /** Defines the name of the event */
        name: string;
        /** Defines the event cancel status */
        cancel: boolean;
}
export interface IAnimationCompleteEventArgs extends IChartEventArgs {
        /** Defines the current animation series */
        series: Series;
}
export interface IAxisMultiLabelRenderEventArgs extends IChartEventArgs {
        /** Defines the current axis */
        axis: Axis;
        /** Defines axis current label text */
        text: string;
        /** Defines font style for multi labels */
        textStyle: FontModel;
        /** Defines text alignment for multi labels */
        alignment: Alignment;
        /** Defines custom objects for multi labels */
        customAttributes: object;
}
export interface IMultiLevelLabelClickEventArgs extends IChartEventArgs {
        /** Defines the current axis */
        axis: Axis;
        /** Defines label current label text */
        text: string;
        level: number;
        start: number | Date | string;
        end: number | Date | string;
        /** Defines custom objects for multi labels */
        customAttributes: object;
}
export interface IPointEventArgs extends IChartEventArgs {
        /** Defines the current series */
        series: SeriesModel;
        /** Defines the current point */
        point: Points;
        /** Defines the point index */
        pointIndex: number;
        /** Defines the series index */
        seriesIndex: number;
        /** Defines the current chart instance */
        chart: Chart;
        /** Defines current mouse x location */
        x: number;
        /** Defines current mouse y location */
        y: number;
        /** Defines current window page x location */
        pageX?: number;
        /** Defines current window page y location */
        pageY?: number;
}
export interface ISharedTooltipRenderEventArgs extends IChartEventArgs {
        /** Defines tooltip text collections */
        text?: string[];
        /** Defines tooltip text style */
        textStyle?: FontModel;
        /** Defines the header text for the tooltip */
        headerText?: string;
        /** point informations */
        data?: IPointInformation[];
        /** Defines the tooltip template */
        template?: string;
}
/**
    * Defines the scroll events
    */
export interface IScrollEventArgs {
        /** Defines the name of the event */
        name?: string;
        /** Defines the current Zoom Position */
        zoomPosition?: number;
        /** Defines the current Zoom Factor */
        zoomFactor?: number;
        /** Defines the current range */
        range?: VisibleRangeModel;
        /** Defines the previous Zoom Position */
        previousZoomPosition?: number;
        /** Defines the previous Zoom Factor */
        previousZoomFactor?: number;
        /** Defines the previous range */
        previousRange?: VisibleRangeModel;
        /** Defines the current scroll axis */
        axis?: Axis;
        /** Defines axis previous range */
        previousAxisRange?: ScrollbarSettingsRangeModel;
        /** Defines axis current range */
        currentRange?: ScrollbarSettingsRangeModel;
}
export interface IZoomCompleteEventArgs extends IChartEventArgs {
        /** Defines the zoomed axis */
        axis: AxisModel;
        /** Defines the previous zoom factor */
        previousZoomFactor: number;
        /** Defines the previous zoom position */
        previousZoomPosition: number;
        /** Defines the current zoom factor */
        currentZoomFactor: number;
        /** Defines the current zoom position */
        currentZoomPosition: number;
        /** Defines the current axis visible range */
        currentVisibleRange: VisibleRangeModel;
        /** Defines the previous axis visible range */
        previousVisibleRange: VisibleRangeModel;
}
export interface ITooltipRenderEventArgs extends IChartEventArgs {
        /** Defines tooltip text collections */
        text?: string;
        /** Defines tooltip text style */
        textStyle?: FontModel;
        /** Defines current tooltip series */
        series: Series | AccumulationSeries;
        /** Defines current tooltip point */
        point: Points | AccPoints;
        /** Defines the header text for the tooltip */
        headerText?: string;
        /** point informations */
        data?: IPointInformation;
        /** Defines the tooltip template */
        template?: string;
}
export interface IPointInformation {
        /** point xValue */
        pointX: object;
        /** point yValue */
        pointY: object;
        /** point index */
        pointIndex: number;
        /** series index */
        seriesIndex: number;
        /** series name */
        seriesName: string;
        /** point text */
        pointText: string;
}
export interface IAxisLabelRenderEventArgs extends IChartEventArgs {
        /** Defines the current axis */
        axis: Axis;
        /** Defines axis current label text */
        text: string;
        /** Defines axis current label value */
        value: number;
        /** Defines axis current label font style */
        labelStyle: FontModel;
}
export interface IAxisLabelClickEventArgs extends IChartEventArgs {
        /** Defines the chart when labelClick */
        chart: Chart;
        /** Defines the current axis */
        axis: Axis;
        /** Defines axis current label text */
        text: string;
        /** Defines axis current label element id */
        labelID: string;
        /** Defines axis current label index */
        index: number;
        /** Defines the current annotation location */
        location: ChartLocation;
        /** Defines axis current label value */
        value: number;
}
export interface ILegendRenderEventArgs extends IChartEventArgs {
        /** Defines the current legend text */
        text: string;
        /** Defines the current legend fill color */
        fill: string;
        /** Defines the current legend shape */
        shape: LegendShape;
        /** Defines the current legend marker shape */
        markerShape?: ChartShape;
}
export interface ILegendClickEventArgs extends IChartEventArgs {
        /** Defines the chart when legendClick */
        chart: Chart;
        /** Defines the current legend shape */
        legendShape: LegendShape;
        /** Defines the current series */
        series: Series;
        /** Defines the list of points mapped to a legend */
        points: Points[];
        /** Defines the current legend text */
        legendText: string;
}
export interface ITextRenderEventArgs extends IChartEventArgs {
        /** Defines the current series of the label */
        series: SeriesModel;
        /** Defines the current point of the label */
        point: Points;
        /** Defines the current text */
        text: string;
        /** Defines the width and height of the current text */
        textSize: Size;
        /** Defines the current label fill color */
        color: string;
        /** Defines the current label border */
        border: BorderModel;
        /** Defines the current label template */
        template: string;
        /** Defines the current font */
        font: FontModel;
        /** Defines the current data label position can change */
        location: LabelLocation;
}
export interface IAnnotationRenderEventArgs extends IChartEventArgs {
        /** Defines the current annotation content */
        content: HTMLElement;
        /** Defines the current annotation location */
        location: ChartLocation;
}
export interface IPointRenderEventArgs extends IChartEventArgs {
        /** Defines the current series of the point */
        series: Series;
        /** Defines the current point */
        point: Points;
        /** Defines the current point fill color */
        fill: string;
        /** Defines the current point border */
        border: BorderModel;
        /** Defines the current point height */
        height?: number;
        /** Defines the current point width */
        width?: number;
        /** Defines the current point marker shape */
        shape?: ChartShape;
}
export interface ISeriesRenderEventArgs {
        /** Defines the current series */
        series: Series;
        /** Defines the current series data object */
        data: Object;
        /** Defines name of the event */
        name: string;
        /** Defines the current series fill */
        fill: string;
}
export interface IAxisRangeCalculatedEventArgs extends IChartEventArgs {
        /** Defines the current axis */
        axis: Axis;
        /** Defines axis current range */
        minimum: number;
        /** Defines axis current range */
        maximum: number;
        /** Defines axis current interval */
        interval: number;
}
export interface IMouseEventArgs extends IChartEventArgs {
        /** Defines current mouse event target id */
        target: string;
        /** Defines current mouse x location */
        x: number;
        /** Defines current mouse y location */
        y: number;
}
export interface IDragCompleteEventArgs extends IChartEventArgs {
        /** Defines current selected Data X, Y values */
        selectedDataValues: {
                x: string | number | Date;
                y: number;
        }[][];
}
export interface ISelectionCompleteEventArgs extends IChartEventArgs {
        /** Defines current selected Data X, Y values */
        selectedDataValues: {
                x?: string | number | Date;
                y?: number;
                seriesIndex?: number;
                pointIndex?: number;
        }[];
}
export interface ILoadedEventArgs extends IChartEventArgs {
        /** Defines the current chart instance */
        chart: Chart;
        theme?: ChartTheme;
}
export interface IPrintEventArgs extends IChartEventArgs {
        htmlContent: Element;
}
export interface IExportEventArgs extends IChartEventArgs {
        width: number;
        height: number;
}
export interface IAfterExportEventArgs extends IChartEventArgs {
        dataUrl: string;
}
export interface IZoomingEventArgs extends IChartEventArgs {
        axisCollection: IAxisData[];
}
export interface IAxisData {
        zoomFactor: number;
        zoomPosition: number;
        axisRange: VisibleRangeModel;
        axisName: string;
}
/** @private */
export interface IBoxPlotQuartile {
        minimum: number;
        maximum: number;
        outliers: number[];
        upperQuartile: number;
        lowerQuartile: number;
        average: number;
        median: number;
}
/**
    * Specifies the Theme style for chart and accumulation.
    */
export interface IThemeStyle {
        axisLabel: string;
        axisTitle: string;
        axisLine: string;
        majorGridLine: string;
        minorGridLine: string;
        majorTickLine: string;
        minorTickLine: string;
        chartTitle: string;
        legendLabel: string;
        background: string;
        areaBorder: string;
        errorBar: string;
        crosshairLine: string;
        crosshairFill: string;
        crosshairLabel: string;
        tooltipFill: string;
        tooltipBoldLabel: string;
        tooltipLightLabel: string;
        tooltipHeaderLine: string;
        markerShadow: string;
        selectionRectFill: string;
        selectionRectStroke: string;
        selectionCircleStroke: string;
}
export interface IRangeSelectorRenderEventArgs extends IChartEventArgs {
        /** Defines selector collections */
        selector: ItemModel[];
        /** enable custom format for calendar */
        enableCustomFormat: boolean;
        /** content fro calendar format */
        content: string;
}
/** @private */
export interface ITouches {
        pageX?: number;
        pageY?: number;
        pointerId?: number;
}
/** @private */
export interface IZoomAxisRange {
        actualMin?: number;
        actualDelta?: number;
        min?: number;
        delta?: number;
}
export interface IResizeEventArgs {
        /** Defines the name of the Event */
        name: string;
        /** Defines the previous size of the accumulation chart */
        previousSize: Size;
        /** Defines the current size of the accumulation chart */
        currentSize: Size;
        /** Defines the accumulation chart instance */
        chart: Chart | AccumulationChart | StockChart;
}
export interface IBeforeResizeEventArgs {
        /** Defines the name of the Event */
        name: string;
        /** It is  used to cancel the resized event */
        cancelResizedEvent: boolean;
}
/**
    * Interface for point drag and drop
    */
export interface IDataEditingEventArgs {
        /**
            * current series index
            */
        seriesIndex: number;
        /**
            * Current point index
            */
        pointIndex: number;
        /**
            * current point old value
            */
        oldValue: number;
        /**
            * current point new value
            */
        newValue: number;
        /**
            * current series
            */
        series: Series;
        /**
            * current point
            */
        point: Points;
}
export interface IChartTemplate {
        /** point x */
        x?: object;
        /** point y */
        y?: object;
        /** point text */
        text?: string;
        /** point open value */
        open?: object;
        /** point close value */
        close?: object;
        /** point high value */
        high?: object;
        /** point low value */
        low?: object;
        /** point volume value */
        volume?: object;
}

/**
    * Interface for a class Row
    */
export interface RowModel {
        /**
            * The height of the row as a string accept input both as '100px' and '100%'.
            * If specified as '100%, row renders to the full height of its chart.
            *
            * @default '100%'
            */
        height?: string;
        /**
            * Options to customize the border of the rows.
            */
        border?: BorderModel;
}
/**
    * Interface for a class Column
    */
export interface ColumnModel {
        /**
            * The width of the column as a string accepts input both as like '100px' or '100%'.
            * If specified as '100%, column renders to the full width of its chart.
            *
            * @default '100%'
            */
        width?: string;
        /**
            * Options to customize the border of the columns.
            */
        border?: BorderModel;
}
/**
    * Interface for a class MajorGridLines
    */
export interface MajorGridLinesModel {
        /**
            * The width of the line in pixels.
            *
            * @default 1
            */
        width?: number;
        /**
            * The dash array of the grid lines.
            *
            * @default ''
            */
        dashArray?: string;
        /**
            * The color of the major grid line that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        color?: string;
}
/**
    * Interface for a class MinorGridLines
    */
export interface MinorGridLinesModel {
        /**
            * The width of the line in pixels.
            *
            * @default 0.7
            */
        width?: number;
        /**
            * The dash array of grid lines.
            *
            * @default ''
            */
        dashArray?: string;
        /**
            * The color of the minor grid line that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        color?: string;
}
/**
    * Interface for a class AxisLine
    */
export interface AxisLineModel {
        /**
            * The width of the line in pixels.
            *
            * @default 1
            */
        width?: number;
        /**
            * The dash array of the axis line.
            *
            * @default ''
            */
        dashArray?: string;
        /**
            * The color of the axis line that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        color?: string;
}
/**
    * Interface for a class MajorTickLines
    */
export interface MajorTickLinesModel {
        /**
            * The width of the tick lines in pixels.
            *
            * @default 1
            */
        width?: number;
        /**
            * The height of the ticks in pixels.
            *
            * @default 5
            */
        height?: number;
        /**
            * The color of the major tick line that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        color?: string;
}
/**
    * Interface for a class MinorTickLines
    */
export interface MinorTickLinesModel {
        /**
            * The width of the tick line in pixels.
            *
            * @default 0.7
            */
        width?: number;
        /**
            * The height of the ticks in pixels.
            *
            * @default 5
            */
        height?: number;
        /**
            * The color of the minor tick line that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        color?: string;
}
/**
    * Interface for a class CrosshairTooltip
    */
export interface CrosshairTooltipModel {
        /**
            * If set to true, crosshair ToolTip will be visible.
            *
            *  @default false
            */
        enable?: Boolean;
        /**
            * The fill color of the ToolTip accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        fill?: string;
        /**
            * Options to customize the crosshair ToolTip text.
            */
        textStyle?: FontModel;
}
/**
    * Interface for a class Axis
    */
export interface AxisModel {
        /**
            * Options to customize the axis label.
            */
        labelStyle?: FontModel;
        /**
            * Options to customize the crosshair ToolTip.
            */
        crosshairTooltip?: CrosshairTooltipModel;
        /**
            * Specifies the title of an axis.
            *
            * @default ''
            */
        title?: string;
        /**
            * Options for customizing the axis title.
            */
        titleStyle?: FontModel;
        /**
            * Used to format the axis label that accepts any global string format like 'C', 'n1', 'P' etc.
            * It also accepts placeholder like '{value}°C' in which value represent the axis label, e.g, 20°C.
            *
            * @default ''
            */
        labelFormat?: string;
        /**
            * Specifies the skeleton format in which the dateTime format will process.
            *
            * @default ''
            */
        skeleton?: string;
        /**
            * It specifies the type of format to be used in dateTime format process.
            *
            * @default 'DateTime'
            * @deprecated
            */
        skeletonType?: SkeletonType;
        /**
            * It specifies alignment of the line break labels.
            * @default 'Center'
            */
        lineBreakAlignment?: TextAlignment;
        /**
            * Left and right padding for the plot area in pixels.
            *
            * @default 0
            */
        plotOffset?: number;
        /**
            * Left padding for the plot area in pixels.
            *
            * @default null
            */
        plotOffsetLeft?: number;
        /**
            * Top padding for the plot area in pixels.
            *
            * @default null
            */
        plotOffsetTop?: number;
        /**
            * Right padding for the plot area in pixels.
            *
            * @default null
            */
        plotOffsetRight?: number;
        /**
            * Bottom padding for the plot area in pixels.
            *
            * @default null
            */
        plotOffsetBottom?: number;
        /**
            * Specifies indexed category  axis.
            *
            * @default false
            */
        isIndexed?: boolean;
        /**
            * The base value for logarithmic axis. It requires `valueType` to be `Logarithmic`.
            *
            * @default 10
            */
        logBase?: number;
        /**
            * Specifies the index of the column where the axis is associated,
            * when the chart area is divided into multiple plot areas by using `columns`.
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let chart: Chart = new Chart({
            * ...
            *     columns: [{ width: '50%' },
            *               { width: '50%' }],
            *     axes: [{
            *                name: 'xAxis 1',
            *                columnIndex: 1,
            *     }],
            * ...
            * });
            * chart.appendTo('#Chart');
            * ```
            *
            * @default 0
            */
        columnIndex?: number;
        /**
            * Specifies the index of the row where the axis is associated, when the chart area is divided into multiple plot areas by using `rows`.
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let chart: Chart = new Chart({
            * ...
            *     rows: [{ height: '50%' },
            *            { height: '50%' }],
            *     axes: [{
            *                name: 'yAxis 1',
            *                rowIndex: 1,
            *      }],
            * ...
            * });
            * chart.appendTo('#Chart');
            * ```
            *
            * @default 0
            */
        rowIndex?: number;
        /**
            * Specifies the number of `columns` or `rows` an axis has to span horizontally or vertically.
            *
            * @default 1
            */
        span?: number;
        /**
            * With this property, you can request axis to calculate intervals approximately equal to your specified interval.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        desiredIntervals?: number;
        /**
            * The maximum number of label count per 100 pixels with respect to the axis length.
            *
            * @default 3
            */
        maximumLabels?: number;
        /**
            * The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Value ranges from 0 to 1.
            *
            * @default 1
            */
        zoomFactor?: number;
        /**
            * Position of the zoomed axis. Value ranges from 0 to 1.
            *
            * @default 0
            */
        zoomPosition?: number;
        /**
            * Enables the scrollbar for zooming.
            *
            * @default true
            */
        enableScrollbarOnZooming?: boolean;
        /**
            * If set to true, the axis will render at the opposite side of its default position.
            *
            * @default false
            */
        opposedPosition?: boolean;
        /**
            * If set to true, axis interval will be calculated automatically with respect to the zoomed range.
            *
            * @default true
            */
        enableAutoIntervalOnZooming?: boolean;
        /**
            * Specifies the padding for the axis range in terms of interval.They are,
            * * none: Padding cannot be applied to the axis.
            * * normal: Padding is applied to the axis based on the range calculation.
            * * additional: Interval of the axis is added as padding to the minimum and maximum values of the range.
            * * round: Axis range is rounded to the nearest possible value divided by the interval.
            *
            * @default 'Auto'
            */
        rangePadding?: ChartRangePadding;
        /**
            * Specifies the type of data the axis is handling.
            * * Double:  Renders a numeric axis.
            * * DateTime: Renders a dateTime axis.
            * * Category: Renders a category axis.
            * * Logarithmic: Renders a log axis.
            *
            * @default 'Double'
            * @blazorType Syncfusion.EJ2.Blazor.Charts.ValueType
            * @isEnumeration true
            */
        valueType?: ValueType;
        /**
            * Specifies the position of labels at the edge of the axis.They are,
            * * None: No action will be performed.
            * * Hide: Edge label will be hidden.
            * * Shift: Shifts the edge labels.
            *
            * @default 'None'
            */
        edgeLabelPlacement?: EdgeLabelPlacement;
        /**
            * Specifies the types like `Years`, `Months`, `Days`, `Hours`, `Minutes`, `Seconds` in date time axis.They are,
            * * Auto: Defines the interval of the axis based on data.
            * * Years: Defines the interval of the axis in years.
            * * Months: Defines the interval of the axis in months.
            * * Days: Defines the interval of the axis in days.
            * * Hours: Defines the interval of the axis in hours.
            * * Minutes: Defines the interval of the axis in minutes.
            *
            * @default 'Auto'
            */
        intervalType?: IntervalType;
        /**
            * Specifies the placement of a label for category axis. They are,
            * * betweenTicks: Renders the label between the ticks.
            * * onTicks: Renders the label on the ticks.
            *
            * @default 'BetweenTicks'
            */
        labelPlacement?: LabelPlacement;
        /**
            * Specifies the placement of a ticks to the axis line. They are,
            * * inside: Renders the ticks inside to the axis line.
            * * outside: Renders the ticks outside to the axis line.
            *
            * @default 'Outside'
            */
        tickPosition?: AxisPosition;
        /**
            * Specifies the placement of a labels to the axis line. They are,
            * * inside: Renders the labels inside to the axis line.
            * * outside: Renders the labels outside to the axis line.
            *
            * @default 'Outside'
            */
        labelPosition?: AxisPosition;
        /**
            * Unique identifier of an axis.
            * To associate an axis with the series, set this name to the xAxisName/yAxisName properties of the series.
            *
            * @default ''
            */
        name?: string;
        /**
            * If set to true, axis label will be visible.
            *
            * @default true
            */
        visible?: boolean;
        /**
            * Specifies the number of minor ticks per interval.
            *
            * @default 0
            */
        minorTicksPerInterval?: number;
        /**
            * The angle to which the axis label gets rotated.
            *
            * @default 0
            */
        labelRotation?: number;
        /**
            * Specifies the value at which the axis line has to be intersect with the vertical axis or vice versa.
            *
            * @default null
            */
        crossesAt?: Object;
        /**
            * Specifies whether axis elements like axis labels, axis title, etc has to be crossed with axis line
            *
            * @default true
            */
        placeNextToAxisLine?: boolean;
        /**
            * Specifies axis name with which the axis line has to be crossed
            *
            * @default null
            */
        crossesInAxis?: string;
        /**
            * Specifies the minimum range of an axis.
            *
            * @default null
            */
        minimum?: Object;
        /**
            * Specifies the maximum range of an axis.
            *
            * @default null
            */
        maximum?: Object;
        /**
            * Specifies the interval for an axis.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        interval?: number;
        /**
            * Specifies the maximum width of an axis label.
            *
            * @default 34.
            */
        maximumLabelWidth?: number;
        /**
            * Specifies the Trim property for an axis.
            *
            * @default false
            */
        enableTrim?: boolean;
        /**
            * Specifies the labelPadding from axis
            *
            * @default 5
            */
        labelPadding?: number;
        /**
            * Specifies the titlePadding from axis label
            *
            * @default 5
            */
        titlePadding?: number;
        /**
            * Options for customizing major tick lines.
            */
        majorTickLines?: MajorTickLinesModel;
        /**
            * Options for customizing minor tick lines.
            */
        minorTickLines?: MinorTickLinesModel;
        /**
            * Options for customizing major grid lines.
            */
        majorGridLines?: MajorGridLinesModel;
        /**
            * Options for customizing minor grid lines.
            */
        minorGridLines?: MinorGridLinesModel;
        /**
            * Options for customizing axis lines.
            */
        lineStyle?: AxisLineModel;
        /**
            * Specifies the actions like `None`, `Hide`, `Trim`, `Wrap`, `MultipleRows`, `Rotate45`, and `Rotate90`
            * when the axis labels intersect with each other.They are,
            * * None: Shows all the labels.
            * * Hide: Hides the label when it intersects.
            * * Trim: Trim the label when it intersects.
            * * Wrap: Wrap the label when it intersects.
            * * MultipleRows: Shows the label in MultipleRows when it intersects.
            * * Rotate45: Rotates the label to 45 degree when it intersects.
            * * Rotate90: Rotates the label to 90 degree when it intersects.
            *
            * @default Trim
            */
        labelIntersectAction?: LabelIntersectAction;
        /**
            * It specifies whether the axis to be rendered in inversed manner or not.
            *
            * @default false
            */
        isInversed?: boolean;
        /**
            * The polar radar radius position.
            *
            * @default 100
            */
        coefficient?: number;
        /**
            * The start angle for the series.
            *
            * @default 0
            */
        startAngle?: number;
        /**
            * It specifies whether the axis to be start from zero.
            *
            * @default true
            */
        startFromZero?: boolean;
        /**
            * Description for axis and its element.
            *
            * @default null
            */
        description?: string;
        /**
            * TabIndex value for the axis.
            *
            * @default 2
            */
        tabIndex?: number;
        /**
            * Specifies the stripLine collection for the axis
            */
        stripLines?: StripLineSettingsModel[];
        /**
            * Specifies the multi level labels collection for the axis
            */
        multiLevelLabels?: MultiLevelLabelsModel[];
        /**
            * Border of the multi level labels.
            */
        border?: LabelBorderModel;
        /**
            * Option to customize scrollbar with lazy loading
            */
        scrollbarSettings?: ScrollbarSettingsModel;
}
/**
    * Interface for a class VisibleLabels
    * @private
    */
export interface VisibleLabelsModel {
}

/**
    * `Legend` module is used to render legend for the chart.
    */
export class Legend extends BaseLegend {
        constructor(chart: Chart);
        /**
            * Get the legend options.
            *
            * @returns {void}
            * @private
            */
        getLegendOptions(visibleSeriesCollection: Series[], chart: Chart): void;
        /** @private */
        getLegendBounds(availableSize: Size, legendBounds: Rect, legend: LegendSettingsModel): void;
        /** @private */
        getRenderPoint(legendOption: LegendOptions, start: ChartLocation, textPadding: number, prevLegend: LegendOptions, rect: Rect, count: number, firstLegend: number): void;
        /** @private */
        LegendClick(index: number, event: Event | PointerEvent): void;
        /**
            * To show the tooltip for the trimmed text in legend.
            *
            * @returns {void}
            */
        click(event: Event | PointerEvent): void;
        /**
            * To check click position is within legend bounds
            */
        protected checkWithinBounds(pageX: number, pageY: number): void;
        /**
            * Get module name
            */
        protected getModuleName(): string;
        /**
            * To destroy the Legend.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * Interface for a class DataLabelSettings
    */
export interface DataLabelSettingsModel {
        /**
            * If set true, data label for series renders.
            *
            * @default false
            */
        visible?: boolean;
        /**
            * If set true, data label for zero values in series renders.
            *
            * @default true
            */
        showZero?: boolean;
        /**
            * The DataSource field that contains the data label value.
            *
            * @default null
            */
        name?: string;
        /**
            * The background color of the data label accepts value in hex and rgba as a valid CSS color string.
            *
            * @default 'transparent'
            */
        fill?: string;
        /**
            * The opacity for the background.
            *
            * @default 1
            */
        opacity?: number;
        /**
            * Specifies angle for data label.
            *
            * @default 0
            */
        angle?: number;
        /**
            * Enables rotation for data label.
            *
            * @default false
            */
        enableRotation?: boolean;
        /**
            * Specifies the position of the data label. They are,
            * * Outer: Positions the label outside the point.
            * * top: Positions the label on top of the point.
            * * Bottom: Positions the label at the bottom of the point.
            * * Middle: Positions the label to the middle of the point.
            * * Auto: Positions the label based on series.
            *
            * @default 'Auto'
            */
        position?: LabelPosition;
        /**
            * The roundedCornerX for the data label. It requires `border` values not to be null.
            *
            * @default 5
            */
        rx?: number;
        /**
            * The roundedCornerY for the data label. It requires `border` values not to be null.
            *
            * @default 5
            */
        ry?: number;
        /**
            * Specifies the alignment for data Label. They are,
            * * Near: Aligns the label to the left of the point.
            * * Center: Aligns the label to the center of the point.
            * * Far: Aligns the label to the right of the point.
            *
            * @default 'Center'
            */
        alignment?: Alignment;
        /**
            * Option for customizing the border lines.
            */
        border?: BorderModel;
        /**
            * Margin configuration for the data label.
            */
        margin?: MarginModel;
        /**
            * Option for customizing the data label text.
            */
        font?: FontModel;
        /**
            * Custom template to show the data label. Use ${point.x} and ${point.y} as a placeholder
            * text to display the corresponding data point.
            *
            * @default null
            */
        template?: string;
        /**
            * Show Datalabel Even two Data Labels Are Overflow
            *
            * @default 'Hide'
            */
        labelIntersectAction?: DataLabelIntersectAction;
}
/**
    * Interface for a class MarkerSettings
    */
export interface MarkerSettingsModel {
        /**
            * If set to true the marker for series is rendered. This is applicable only for line and area type series.
            *
            * @default false
            */
        visible?: boolean;
        /**
            * The different shape of a marker:
            * * Circle
            * * Rectangle
            * * Triangle
            * * Diamond
            * * HorizontalLine
            * * VerticalLine
            * * Pentagon
            * * InvertedTriangle
            * * Image
            *
            * @default 'Circle'
            */
        shape?: ChartShape;
        /**
            * The URL for the Image that is to be displayed as a marker.  It requires marker `shape` value to be an `Image`.
            *
            * @default ''
            */
        imageUrl?: string;
        /**
            * The height of the marker in pixels.
            *
            * @default 5
            */
        height?: number;
        /**
            * The width of the marker in pixels.
            *
            * @default 5
            */
        width?: number;
        /**
            * Options for customizing the border of a marker.
            */
        border?: BorderModel;
        /**
            * Options for customizing the marker position.
            */
        offset?: OffsetModel;
        /**
            *  The fill color of the marker that accepts value in hex and rgba as a valid CSS color string. By default, it will take series' color.
            *
            * @default null
            */
        fill?: string;
        /**
            * The opacity of the marker.
            *
            * @default 1
            */
        opacity?: number;
        /**
            * The data label for the series.
            */
        dataLabel?: DataLabelSettingsModel;
}
/**
    * Interface for a class Points
    */
export interface PointsModel {
}
/**
    * Interface for a class Trendline
    */
export interface TrendlineModel {
        /**
            * Defines the name of trendline
            *
            * @default ''
            */
        name?: string;
        /**
            * Defines the pattern of dashes and gaps to stroke.
            *
            * @default '0'
            */
        dashArray?: string;
        /**
            * Specifies the visibility of trendline.
            *
            * @default true
            */
        visible?: boolean;
        /**
            * Defines the type of the trendline
            *
            * @default 'Linear'
            */
        type?: TrendlineTypes;
        /**
            * Defines the period, the price changes over which will be considered to predict moving average trend line
            *
            * @default 2
            */
        period?: number;
        /**
            * Defines the polynomial order of the polynomial trendline
            *
            * @default 2
            */
        polynomialOrder?: number;
        /**
            * Defines the period, by which the trend has to backward forecast
            *
            * @default 0
            */
        backwardForecast?: number;
        /**
            * Defines the period, by which the trend has to forward forecast
            *
            * @default 0
            */
        forwardForecast?: number;
        /**
            * Options to customize the animation for trendlines
            */
        animation?: AnimationModel;
        /**
            * Options to customize the marker for trendlines
            *
            * @deprecated
            */
        marker?: MarkerSettingsModel;
        /**
            * Enables/disables tooltip for trendlines
            *
            * @default true
            */
        enableTooltip?: boolean;
        /**
            * Defines the intercept of the trendline
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        intercept?: number;
        /**
            * Defines the fill color of trendline
            *
            * @default ''
            */
        fill?: string;
        /**
            * Defines the width of the trendline
            *
            * @default 1
            */
        width?: number;
        /**
            * Sets the legend shape of the trendline
            *
            * @default 'SeriesType'
            */
        legendShape?: LegendShape;
}
/**
    * Interface for a class ErrorBarCapSettings
    */
export interface ErrorBarCapSettingsModel {
        /**
            * The width of the error bar in pixels.
            *
            * @default 1
            */
        width?: number;
        /**
            * The length of the error bar in pixels.
            *
            * @default 10
            */
        length?: number;
        /**
            *  The stroke color of the cap, which accepts value in hex, rgba as a valid CSS color string.
            *
            * @default null
            */
        color?: string;
        /**
            * The opacity of the cap.
            *
            * @default 1
            */
        opacity?: number;
}
/**
    * Interface for a class ChartSegment
    */
export interface ChartSegmentModel {
        /**
            * Defines the starting point of region.
            *
            * @default null
            */
        value?: Object;
        /**
            * Defines the color of a region.
            *
            * @default null
            */
        color?: string;
        /**
            * Defines the pattern of dashes and gaps to stroke.
            *
            * @default '0'
            */
        dashArray?: string;
}
/**
    * Interface for a class ErrorBarSettings
    */
export interface ErrorBarSettingsModel {
        /**
            * If set true, error bar for data gets rendered.
            *
            * @default false
            */
        visible?: boolean;
        /**
            * The type of the error bar . They are
            * * Fixed -  Renders a fixed type error bar.
            * * Percentage - Renders a percentage type error bar.
            * * StandardDeviation - Renders a standard deviation type error bar.
            * * StandardError -Renders a standard error type error bar.
            * * Custom -Renders a custom type error bar.
            *
            * @default 'Fixed'
            */
        type?: ErrorBarType;
        /**
            * The direction of the error bar . They are
            * * both -  Renders both direction of error bar.
            * * minus - Renders minus direction of error bar.
            * * plus - Renders plus direction error bar.
            *
            * @default 'Both'
            */
        direction?: ErrorBarDirection;
        /**
            * The mode of the error bar . They are
            * * Vertical -  Renders a vertical error bar.
            * * Horizontal - Renders a horizontal error bar.
            * * Both - Renders both side error bar.
            *
            * @default 'Vertical'
            */
        mode?: ErrorBarMode;
        /**
            *  The color for stroke of the error bar, which accepts value in hex, rgba as a valid CSS color string.
            *
            * @default null
            */
        color?: string;
        /**
            * The vertical error of the error bar.
            *
            * @default 1
            */
        verticalError?: number;
        /**
            * The stroke width of the error bar..
            *
            * @default 1
            */
        width?: number;
        /**
            * The horizontal error of the error bar.
            *
            * @default 1
            */
        horizontalError?: number;
        /**
            * The vertical positive error of the error bar.
            *
            * @default 3
            */
        verticalPositiveError?: number;
        /**
            * The vertical negative error of the error bar.
            *
            * @default 3
            */
        verticalNegativeError?: number;
        /**
            * The horizontal positive error of the error bar.
            *
            * @default 1
            */
        horizontalPositiveError?: number;
        /**
            * The horizontal negative error of the error bar.
            *
            * @default 1
            */
        horizontalNegativeError?: number;
        /**
            * Options for customizing the cap of the error bar.
            */
        errorBarCap?: ErrorBarCapSettingsModel;
}
/**
    * Interface for a class SeriesBase
    */
export interface SeriesBaseModel {
        /**
            * The DataSource field that contains the x value.
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        xName?: string;
        /**
            * The Data Source field that contains the color mapping value.
            * It is applicable for range color mapping properly.
            */
        colorName?: string;
        /**
            * The DataSource field that contains the high value of y
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        high?: string;
        /**
            * The DataSource field that contains the low value of y
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        low?: string;
        /**
            * The DataSource field that contains the open value of y
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        open?: string;
        /**
            * The DataSource field that contains the close value of y
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        close?: string;
        /**
            * Defines the data source field that contains the volume value in candle charts
            * It is applicable for financial series and technical indicators
            *
            * @default ''
            */
        volume?: string;
        /**
            * The DataSource field that contains the color value of point
            * It is applicable for series
            *
            * @default ''
            */
        pointColorMapping?: string;
        /**
            * Specifies the visibility of series.
            *
            * @default true
            */
        visible?: boolean;
        /**
            * The name of the horizontal axis associated with the series. It requires `axes` of the chart.
            * It is applicable for series and technical indicators
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let chart: Chart = new Chart({
            * ...
            *     columns: [{ width: '50%' },
            *               { width: '50%' }],
            *     axes: [{
            *                name: 'xAxis 1',
            *                columnIndex: 1,
            *            }],
            *     series: [{
            *                dataSource: data,
            *                xName: 'x', yName: 'y',
            *                xAxisName: 'xAxis 1',
            *     }],
            * });
            * chart.appendTo('#Chart');
            * ```
            *
            * @default null
            */
        xAxisName?: string;
        /**
            * The name of the vertical axis associated with the series. It requires `axes` of the chart.
            * It is applicable for series and technical indicators
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let chart: Chart = new Chart({
            * ...
            *     rows: [{ height: '50%' },
            *            { height: '50%' }],
            *     axes: [{
            *                name: 'yAxis 1',
            *                rowIndex: 1,
            *            }],
            *     series: [{
            *                dataSource: data,
            *                xName: 'x', yName: 'y',
            *                yAxisName: 'yAxis 1'
            *     }],
            * });
            * chart.appendTo('#Chart');
            * ```
            *
            * @default null
            */
        yAxisName?: string;
        /**
            * Options to customizing animation for the series.
            */
        animation?: AnimationModel;
        /**
            * The fill color for the series that accepts value in hex and rgba as a valid CSS color string.
            * It also represents the color of the signal lines in technical indicators.
            * For technical indicators, the default value is 'blue' and for series, it has null.
            *
            * @default null
            */
        fill?: string;
        /**
            * The stroke width for the series that is applicable only for `Line` type series.
            * It also represents the stroke width of the signal lines in technical indicators.
            *
            * @default 1
            */
        width?: number;
        /**
            * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.
            *
            * @default '0'
            */
        dashArray?: string;
        /**
            * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager.
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let dataManager: DataManager = new DataManager({
            *         url: 'http://mvc.syncfusion.com/Services/Northwnd.svc/Tasks/'
            * });
            * let query: Query = new Query().take(50).where('Estimate', 'greaterThan', 0, false);
            * let chart: Chart = new Chart({
            * ...
            *     series: [{
            *        dataSource: dataManager,
            *        xName: 'Id',
            *        yName: 'Estimate',
            *        query: query
            *    }],
            * ...
            * });
            * chart.appendTo('#Chart');
            * ```
            *
            * @default ''
            */
        dataSource?: Object | DataManager;
        /**
            * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.
            *
            * @default ''
            */
        query?: Query;
        /**
            * Defines the collection of regions that helps to differentiate a line series.
            */
        segments?: ChartSegmentModel[];
        /**
            * Defines the axis, based on which the line series will be split.
            */
        segmentAxis?: Segment;
        /**
            * This property used to improve chart performance via data mapping for series dataSource.
            *
            * @default false
            */
        enableComplexProperty?: boolean;
}
/**
    * Interface for a class Series
    */
export interface SeriesModel extends SeriesBaseModel {
        /**
            * The name of the series visible in legend.
            *
            * @default ''
            */
        name?: string;
        /**
            * The DataSource field that contains the y value.
            *
            * @default ''
            */
        yName?: string;
        /**
            * Type of series to be drawn in radar or polar series. They are
            *  'Line'
            *  'Column'
            *  'Area'
            *  'Scatter'
            *  'Spline'
            *  'StackingColumn'
            *  'StackingArea'
            *  'RangeColumn'
            *  'SplineArea'
            *
            * @default 'Line'
            */
        drawType?: ChartDrawType;
        /**
            * Specifies whether to join start and end point of a line/area series used in polar/radar chart to form a closed path.
            *
            * @default true
            */
        isClosed?: boolean;
        /**
            * This property is used in financial charts to visualize the price movements in stock.
            * It defines the color of the candle/point, when the opening price is less than the closing price.
            *
            * @default '#2ecd71'
            */
        bearFillColor?: string;
        /**
            * This property is used in financial charts to visualize the price movements in stock.
            * It defines the color of the candle/point, when the opening price is higher than the closing price.
            *
            * @default '#e74c3d'
            */
        bullFillColor?: string;
        /**
            * This property is applicable for candle series.
            * It enables/disables to visually compare the current values with the previous values in stock.
            *
            * @default false
            */
        enableSolidCandles?: boolean;
        /**
            * The DataSource field that contains the size value of y
            *
            * @default ''
            */
        size?: string;
        /**
            * The bin interval of each histogram points.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        binInterval?: number;
        /**
            * The normal distribution of histogram series.
            *
            * @default false
            */
        showNormalDistribution?: boolean;
        /**
            * This property allows grouping series in `stacked column / bar` charts.
            * Any string value can be provided to the stackingGroup property.
            * If any two or above series have the same value, those series will be grouped together.
            *
            * @default ''
            */
        stackingGroup?: string;
        /**
            * Options to customizing the border of the series. This is applicable only for `Column` and `Bar` type series.
            */
        border?: BorderModel;
        /**
            * The opacity of the series.
            *
            * @default 1
            */
        opacity?: number;
        /**
            * The z order of the series.
            *
            * @default 0
            */
        zOrder?: number;
        /**
            * The type of the series are
            * * Line
            * * Column
            * * Area
            * * Bar
            * * Histogram
            * * StackingColumn
            * * StackingArea
            * * StackingBar
            * * StepLine
            * * StepArea
            * * Scatter
            * * Spline
            * * StackingColumn100
            * * StackingBar100
            * * StackingArea100
            * * RangeColumn
            * * Hilo
            * * HiloOpenClose
            * * Waterfall
            * * RangeArea
            * * SplineRangeArea
            * * Bubble
            * * Candle
            * * Polar
            * * Radar
            * * BoxAndWhisker
            * * Pareto
            *
            * @default 'Line'
            */
        type?: ChartSeriesType;
        /**
            * Options for displaying and customizing error bar for individual point in a series.
            */
        errorBar?: ErrorBarSettingsModel;
        /**
            * Options for displaying and customizing markers for individual points in a series.
            */
        marker?: MarkerSettingsModel;
        /**
            * Options to customize the drag settings for series
            */
        dragSettings?: DragSettingsModel;
        /**
            * Defines the collection of trendlines that are used to predict the trend
            */
        trendlines?: TrendlineModel[];
        /**
            * If set true, the Tooltip for series will be visible.
            *
            * @default true
            */
        enableTooltip?: boolean;
        /**
            * user can format now each series tooltip format separately.
            *
            * @default ''
            */
        tooltipFormat?: string;
        /**
            * The provided value will be considered as a Tooltip name
            *
            * @default ''
            */
        tooltipMappingName?: string;
        /**
            * The shape of the legend. Each series has its own legend shape. They are,
            * * Circle
            * * Rectangle
            * * Triangle
            * * Diamond
            * * Cross
            * * HorizontalLine
            * * VerticalLine
            * * Pentagon
            * * InvertedTriangle
            * * SeriesType
            * * Image
            * @default 'SeriesType'
            */
        legendShape?: LegendShape;
        /**
            * The URL for the Image that is to be displayed as a Legend icon.  It requires  `legendShape` value to be an `Image`.
            * @default ''
            */
        legendImageUrl?: string;
        /**
            * Custom style for the selected series or points.
            *
            * @default null
            */
        selectionStyle?: string;
        /**
            * Custom style for the deselected series or points.
            *
            * @default null
            */
        unSelectedStyle?: string;
        /**
            * Custom style for the non-highlighted series or points.
            *
            * @default null
            */
        nonHighlightStyle?: string;
        /**
            * Minimum radius
            *
            * @default 1
            */
        minRadius?: number;
        /**
            * Maximum radius
            *
            * @default 3
            */
        maxRadius?: number;
        /**
            * Defines type of spline to be rendered.
            *
            * @default 'Natural'
            */
        splineType?: SplineType;
        /**
            * It defines tension of cardinal spline types
            *
            * @default 0.5
            */
        cardinalSplineTension?: number;
        /**
            * options to customize the empty points in series
            */
        emptyPointSettings?: EmptyPointSettingsModel;
        /**
            * If set true, the mean value for box and whisker will be visible.
            *
            * @default true
            */
        showMean?: boolean;
        /**
            * The mode of the box and whisker char series. They are,
            * Exclusive
            * Inclusive
            * Normal
            *
            * @default 'Normal'
            */
        boxPlotMode?: BoxPlotMode;
        /**
            * To render the column series points with particular column width. If the series type is histogram the
            * default value is 1 otherwise 0.7.
            *
            * @default null
            * @aspDefaultValueIgnore
            * @blazorDefaultValue Double.NaN
            */
        columnWidth?: number;
        /**
            * To render the column series points with particular column width as pixel.
            *
            * @default null
            * @aspDefaultValueIgnore
            * @blazorDefaultValue Double.NaN
            */
        columnWidthInPixel?: number;
        /**
            * To render the column series points with particular column spacing. It takes value from 0 - 1.
            *
            * @default 0
            */
        columnSpacing?: number;
        /**
            * Defines the visual representation of the negative changes in waterfall charts.
            *
            * @default '#C64E4A'
            */
        negativeFillColor?: string;
        /**
            * Defines the visual representation of the summaries in waterfall charts.
            *
            * @default '#4E81BC'
            */
        summaryFillColor?: string;
        /**
            * Defines the collection of indexes of the intermediate summary columns in waterfall charts.
            *
            * @default []
            * @aspType int[]
            */
        intermediateSumIndexes?: number[];
        /**
            * Defines the collection of indexes of the overall summary columns in waterfall charts.
            *
            * @default []
            * @aspType int[]
            */
        sumIndexes?: number[];
        /**
            * Defines the appearance of line connecting adjacent points in waterfall charts.
            */
        connector?: ConnectorModel;
        /**
            * To render the column series points with particular rounded corner.
            */
        cornerRadius?: CornerRadiusModel;
}

/**
    * Interface for a class Connector
    */
export interface ConnectorModel {
        /**
            * specifies the type of the connector line. They are
            * * Smooth
            * * Line
            *
            * @default 'Line'
            */
        type?: ConnectorType;
        /**
            * Color of the connector line.
            *
            * @default null
            */
        color?: string;
        /**
            * Width of the connector line in pixels.
            *
            * @default 1
            */
        width?: number;
        /**
            * Length of the connector line in pixels.
            *
            * @default null
            */
        length?: string;
        /**
            * dashArray of the connector line.
            *
            * @default ''
            */
        dashArray?: string;
}
/**
    * Interface for a class Font
    */
export interface FontModel {
        /**
            * FontStyle for the text.
            *
            * @default 'Normal'
            */
        fontStyle?: string;
        /**
            * Font size for the text.
            *
            * @default '16px'
            */
        size?: string;
        /**
            * FontWeight for the text.
            *
            * @default 'Normal'
            */
        fontWeight?: string;
        /**
            * Color for the text.
            *
            * @default ''
            */
        color?: string;
        /**
            * text alignment
            *
            * @default 'Center'
            */
        textAlignment?: Alignment;
        /**
            * FontFamily for the text.
            */
        fontFamily?: string;
        /**
            * Opacity for the text.
            *
            * @default 1
            */
        opacity?: number;
        /**
            * Specifies the chart title text overflow
            *
            * @default 'Trim'
            */
        textOverflow?: TextOverflow;
}
/**
    * Interface for a class Border
    */
export interface BorderModel {
        /**
            * The color of the border that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default ''
            */
        color?: string;
        /**
            * The width of the border in pixels.
            *
            * @default 1
            */
        width?: number;
}
/**
    * Interface for a class Offset
    */
export interface OffsetModel {
        /**
            * x value of the marker position
            *
            * @default 0
            */
        x?: number;
        /**
            * y value of the marker position
            *
            * @default 0
            */
        y?: number;
}
/**
    * Interface for a class ChartArea
    */
export interface ChartAreaModel {
        /**
            * Options to customize the border of the chart area.
            */
        border?: BorderModel;
        /**
            * The background of the chart area that accepts value in hex and rgba as a valid CSS color string..
            *
            * @default 'transparent'
            */
        background?: string;
        /**
            * The opacity for background.
            *
            * @default 1
            */
        opacity?: number;
        /**
            * The background image of the chart area that accepts value in string as url link or location of an image.
            *
            * @default null
            */
        backgroundImage?: string;
}
/**
    * Interface for a class Margin
    */
export interface MarginModel {
        /**
            * Left margin in pixels.
            *
            * @default 10
            */
        left?: number;
        /**
            * Right margin in pixels.
            *
            * @default 10
            */
        right?: number;
        /**
            * Top margin in pixels.
            *
            * @default 10
            */
        top?: number;
        /**
            * Bottom margin in pixels.
            *
            * @default 10
            */
        bottom?: number;
}
/**
    * Interface for a class ContainerPadding
    */
export interface ContainerPaddingModel {
        /**
            * Left padding in pixels.
            * @default 0
            */
        left?: number;
        /**
            * Right padding in pixels.
            * @default 0
            */
        right?: number;
        /**
            * Top padding in pixels.
            * @default 0
            */
        top?: number;
        /**
            * Bottom padding in pixels.
            * @default 0
            */
        bottom?: number;
}
/**
    * Interface for a class Animation
    */
export interface AnimationModel {
        /**
            * If set to true, series gets animated on initial loading.
            *
            * @default true
            */
        enable?: boolean;
        /**
            * The duration of animation in milliseconds.
            *
            * @default 1000
            */
        duration?: number;
        /**
            * The option to delay animation of the series.
            *
            * @default 0
            */
        delay?: number;
}
/**
    * Interface for a class Indexes
    */
export interface IndexesModel {
        /**
            * Specifies the series index
            *
            * @default 0
            * @aspType int
            */
        series?: number;
        /**
            * Specifies the point index
            *
            * @default 0
            * @aspType int
            */
        point?: number;
}
/**
    * Interface for a class CornerRadius
    */
export interface CornerRadiusModel {
        /**
            * Specifies the top left corner radius value
            *
            * @default 0
            */
        topLeft?: number;
        /**
            * Specifies the top right corner radius value
            *
            * @default 0
            */
        topRight?: number;
        /**
            * Specifies the bottom left corner radius value
            *
            * @default 0
            */
        bottomLeft?: number;
        /**
            * Specifies the bottom right corner radius value
            *
            * @default 0
            */
        bottomRight?: number;
}
/**
    * Interface for a class Index
    * @private
    */
export interface IndexModel {
}
/**
    * Interface for a class EmptyPointSettings
    */
export interface EmptyPointSettingsModel {
        /**
            * To customize the fill color of empty points.
            *
            * @default null
            */
        fill?: string;
        /**
            * Options to customize the border of empty points.
            *
            * @default "{color: 'transparent', width: 0}"
            */
        border?: BorderModel;
        /**
            * To customize the mode of empty points.
            *
            * @default Gap
            */
        mode?: EmptyPointMode | AccEmptyPointMode;
}
/**
    * Interface for a class DragSettings
    */
export interface DragSettingsModel {
        /**
            * To enable the drag the points
            *
            * @default false
            */
        enable?: boolean;
        /**
            * To set the minimum y of the point
            *
            * @default null
            */
        minY?: number;
        /**
            * To set the maximum y of the point
            *
            * @default null
            */
        maxY?: number;
        /**
            * To set the color of the edited point
            *
            * @default null
            */
        fill?: string;
}
/**
    * Interface for a class TooltipSettings
    */
export interface TooltipSettingsModel {
        /**
            * Enables / Disables the visibility of the tooltip.
            *
            * @default false.
            */
        enable?: boolean;
        /**
            * Enables / Disables the visibility of the marker.
            *
            * @default true.
            */
        enableMarker?: boolean;
        /**
            * If set to true, a single ToolTip will be displayed for every index.
            *
            * @default false.
            */
        shared?: boolean;
        /**
            * The fill color of the tooltip that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        fill?: string;
        /**
            * Header for tooltip.
            *
            * @default null
            */
        header?: string;
        /**
            * The fill color of the tooltip that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default 0.75
            */
        opacity?: number;
        /**
            * Options to customize the ToolTip text.
            */
        textStyle?: FontModel;
        /**
            * Format the ToolTip content.
            *
            * @default null.
            */
        format?: string;
        /**
            * Custom template to format the ToolTip content. Use ${x} and ${y} as the placeholder text to display the corresponding data point.
            *
            * @default null.
            */
        template?: string;
        /**
            * If set to true, ToolTip will animate while moving from one point to another.
            *
            * @default true.
            */
        enableAnimation?: boolean;
        /**
            * Duration for the ToolTip animation.
            *
            * @default 300
            */
        duration?: number;
        /**
            * Fade Out duration for the ToolTip hide.
            *
            * @default 1000
            */
        fadeOutDuration?: number;
        /**
            * Fade Out duration for the Tooltip hide.
            *
            * @default Move
            */
        fadeOutMode?: FadeOutMode;
        /**
            * To wrap the tooltip long text based on available space.
            * This is only application for chart tooltip.
            *
            * @default false
            */
        enableTextWrap?: boolean;
        /**
            * Options to customize tooltip borders.
            */
        border?: BorderModel;
}
/**
    * Interface for a class Periods
    */
export interface PeriodsModel {
        /**
            * IntervalType of button
            *
            * @default 'Years'
            */
        intervalType?: RangeIntervalType;
        /**
            * Count value for the button
            *
            * @default 1
            */
        interval?: number;
        /**
            * Text to be displayed on the button
            *
            * @default null
            */
        text?: string;
        /**
            * To select the default period
            *
            * @default false
            */
        selected?: boolean;
}
/**
    * Interface for a class PeriodSelectorSettings
    */
export interface PeriodSelectorSettingsModel {
        /**
            * Height for the period selector
            *
            * @default 43
            */
        height?: number;
        /**
            * vertical position of the period selector
            *
            * @default 'Bottom'
            */
        position?: PeriodSelectorPosition;
        /**
            * Buttons
            */
        periods?: PeriodsModel[];
}

/**
    * `ChartAnnotation` module handles the annotation for chart.
    */
export class ChartAnnotation extends AnnotationBase {
        /**
            * Constructor for chart annotation.
            *
            * @private
            */
        constructor(control: Chart, annotations: ChartAnnotationSettings[]);
        /**
            * Method to render the annotation for chart
            *
            * @param {Element} element annotation element
            * @private
            */
        renderAnnotations(element: Element): void;
        /**
            * To destroy the annotation.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
}

/**
    * Configures the Annotation for chart.
    */
export class ChartAnnotationSettings extends ChildProperty<ChartAnnotationSettings> {
        /**
            * if set coordinateUnit as `Pixel` X specifies the axis value
            * else is specifies pixel or percentage of coordinate
            *
            * @default '0'
            * @aspType object
            */
        x: string | Date | number;
        /**
            * if set coordinateUnit as `Pixel` Y specifies the axis value
            * else is specifies pixel or percentage of coordinate
            *
            * @default '0'
            */
        y: string | number;
        /**
            * Content of the annotation, which accepts the id of the custom element.
            *
            * @default null
            */
        content: string;
        /**
            * Specifies the alignment of the annotation. They are
            * * Near - Align the annotation element as left side.
            * * Far - Align the annotation element as right side.
            * * Center - Align the annotation element as mid point.
            *
            * @default 'Center'
            * @deprecated
            */
        horizontalAlignment: Alignment;
        /**
            * Specifies the coordinate units of the annotation. They are
            * * Pixel - Annotation renders based on x and y pixel value.
            * * Point - Annotation renders based on x and y axis value.
            *
            * @default 'Pixel'
            */
        coordinateUnits: Units;
        /**
            * Specifies the regions of the annotation. They are
            * * Chart - Annotation renders based on chart coordinates.
            * * Series - Annotation renders based on series coordinates.
            *
            * @default 'Chart'
            */
        region: Regions;
        /**
            * Specifies the position of the annotation. They are
            * * Top - Align the annotation element as top side.
            * * Bottom - Align the annotation element as bottom side.
            * * Middle - Align the annotation element as mid point.
            *
            * @default 'Middle'
            * @deprecated
            */
        verticalAlignment: Position;
        /**
            * The name of horizontal axis associated with the annotation.
            * It requires `axes` of chart.
            *
            * @default null
            */
        xAxisName: string;
        /**
            * The name of vertical axis associated with the annotation.
            * It requires `axes` of chart.
            *
            * @default null
            */
        yAxisName: string;
        /**
            * Information about annotation for assistive technology.
            *
            * @default null
            */
        description: string;
}
/**
    * label border properties.
    */
export class LabelBorder extends ChildProperty<LabelBorder> {
        /**
            * The color of the border that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default ''
            */
        color: string;
        /**
            * The width of the border in pixels.
            *
            * @default 1
            */
        width: number;
        /**
            * Border type for labels
            * * Rectangle
            * * Without Top Border
            * * Without Top and BottomBorder
            * * Without Border
            * * Brace
            * * CurlyBrace
            *
            * @default 'Rectangle'
            */
        type: BorderType;
}
/**
    * categories for multi level labels
    */
export class MultiLevelCategories extends ChildProperty<MultiLevelCategories> {
        /**
            * Start value of the multi level labels
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        start: number | Date | string;
        /**
            * End value of the multi level labels
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        end: number | Date | string;
        /**
            * multi level labels text.
            *
            * @default ''
            */
        text: string;
        /**
            * Maximum width of the text for multi level labels.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        maximumTextWidth: number;
        /**
            * multi level labels custom data.
            *
            * @default null
            */
        customAttributes: object;
        /**
            * Border type for labels
            * * Rectangle
            * * Without Top Border
            * * Without Top and BottomBorder
            * * Without Border
            * * Brace
            * * CurlyBrace
            *
            * @default 'Rectangle'
            * @aspDefaultValueIgnore
            * @blazorDefaultValueIgnore
            */
        type: BorderType;
}
/**
    * Strip line properties
    */
export class StripLineSettings extends ChildProperty<StripLineSettings> {
        /**
            * If set true, strip line for axis renders.
            *
            * @default true
            */
        visible: boolean;
        /**
            *  If set true, strip line get render from axis origin.
            *
            *  @default false
            */
        startFromAxis: boolean;
        /**
            * Start value of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        start: Object | number | Date;
        /**
            * End value of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        end: Object | number | Date;
        /**
            * Size of the strip line, when it starts from the origin.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        size: number;
        /**
            * Color of the strip line.
            *
            * @default '#808080'
            */
        color: string;
        /**
            * Dash Array of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        dashArray: string;
        /**
            * Size type of the strip line
            *
            * @default Auto
            */
        sizeType: SizeType;
        /**
            * isRepeat value of the strip line.
            *
            * @default false
            * @aspDefaultValueIgnore
            */
        isRepeat: boolean;
        /**
            * repeatEvery value of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        repeatEvery: Object | number | Date;
        /**
            * repeatUntil value of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        repeatUntil: Object | number | Date;
        /**
            * isSegmented value of the strip line
            *
            * @default false
            * @aspDefaultValueIgnore
            */
        isSegmented: boolean;
        /**
            * segmentStart value of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        segmentStart: Object | number | Date;
        /**
            * segmentEnd value of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        segmentEnd: Object | number | Date;
        /**
            * segmentAxisName of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        segmentAxisName: string;
        /**
            * Border of the strip line.
            */
        border: BorderModel;
        /**
            * Strip line text.
            *
            * @default ''
            */
        text: string;
        /**
            * The angle to which the strip line text gets rotated.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        rotation: number;
        /**
            * Defines the position of the strip line text horizontally. They are,
            * * Start: Places the strip line text at the start.
            * * Middle: Places the strip line text in the middle.
            * * End: Places the strip line text at the end.
            *
            * @default 'Middle'
            */
        horizontalAlignment: Anchor;
        /**
            * Defines the position of the strip line text vertically. They are,
            * * Start: Places the strip line text at the start.
            * * Middle: Places the strip line text in the middle.
            * * End: Places the strip line text at the end.
            *
            * @default 'Middle'
            */
        verticalAlignment: Anchor;
        /**
            * Options to customize the strip line text.
            */
        textStyle: FontModel;
        /**
            * Specifies the order of the strip line. They are,
            * * Behind: Places the strip line behind the series elements.
            * * Over: Places the strip line over the series elements.
            *
            * @default 'Behind'
            */
        zIndex: ZIndex;
        /**
            * Strip line Opacity
            *
            * @default 1
            */
        opacity: number;
}
/**
    * MultiLevelLabels properties
    */
export class MultiLevelLabels extends ChildProperty<MultiLevelLabels[]> {
        /**
            * Defines the position of the multi level labels. They are,
            * * Near: Places the multi level labels at Near.
            * * Center: Places the multi level labels at Center.
            * * Far: Places the multi level labels at Far.
            *
            * @default 'Center'
            */
        alignment: Alignment;
        /**
            * Defines the textOverFlow for multi level labels. They are,
            * * Trim: Trim textOverflow for multi level labels.
            * * Wrap: Wrap textOverflow for multi level labels.
            * * none: None textOverflow for multi level labels.
            *
            * @default 'Wrap'
            */
        overflow: TextOverflow;
        /**
            * Options to customize the multi level labels.
            */
        textStyle: FontModel;
        /**
            * Border of the multi level labels.
            */
        border: LabelBorderModel;
        /**
            * multi level categories for multi level labels.
            */
        categories: MultiLevelCategoriesModel[];
}
/**
    * Specifies range for scrollbarSettings property
    *
    * @public
    */
export class ScrollbarSettingsRange extends ChildProperty<ScrollbarSettingsRange> {
        /**
            * Specifies the minimum range of an scrollbar.
            *
            * @default null
            */
        minimum: Date | string | number;
        /**
            * Specifies the maximum range of an scrollbar.
            *
            * @default null
            */
        maximum: Date | string | number;
}
/**
    * Scrollbar Settings Properties for Lazy Loading
    */
export class ScrollbarSettings extends ChildProperty<ScrollbarSettings> {
        /**
            * Enables the scrollbar for lazy loading.
            *
            * @default false
            */
        enable: boolean;
        /**
            * Defines the length of the points for numeric and logarithmic values.
            *
            * @default null
            */
        pointsLength: number;
        /**
            * Specifies the range for date time values alone.
            */
        range: ScrollbarSettingsRangeModel;
}

/**
    * Interface for a class ChartAnnotationSettings
    */
export interface ChartAnnotationSettingsModel {
        /**
            * if set coordinateUnit as `Pixel` X specifies the axis value
            * else is specifies pixel or percentage of coordinate
            *
            * @default '0'
            * @aspType object
            */
        x?: string | Date | number;
        /**
            * if set coordinateUnit as `Pixel` Y specifies the axis value
            * else is specifies pixel or percentage of coordinate
            *
            * @default '0'
            */
        y?: string | number;
        /**
            * Content of the annotation, which accepts the id of the custom element.
            *
            * @default null
            */
        content?: string;
        /**
            * Specifies the alignment of the annotation. They are
            * * Near - Align the annotation element as left side.
            * * Far - Align the annotation element as right side.
            * * Center - Align the annotation element as mid point.
            *
            * @default 'Center'
            * @deprecated
            */
        horizontalAlignment?: Alignment;
        /**
            * Specifies the coordinate units of the annotation. They are
            * * Pixel - Annotation renders based on x and y pixel value.
            * * Point - Annotation renders based on x and y axis value.
            *
            * @default 'Pixel'
            */
        coordinateUnits?: Units;
        /**
            * Specifies the regions of the annotation. They are
            * * Chart - Annotation renders based on chart coordinates.
            * * Series - Annotation renders based on series coordinates.
            *
            * @default 'Chart'
            */
        region?: Regions;
        /**
            * Specifies the position of the annotation. They are
            * * Top - Align the annotation element as top side.
            * * Bottom - Align the annotation element as bottom side.
            * * Middle - Align the annotation element as mid point.
            *
            * @default 'Middle'
            * @deprecated
            */
        verticalAlignment?: Position;
        /**
            * The name of horizontal axis associated with the annotation.
            * It requires `axes` of chart.
            *
            * @default null
            */
        xAxisName?: string;
        /**
            * The name of vertical axis associated with the annotation.
            * It requires `axes` of chart.
            *
            * @default null
            */
        yAxisName?: string;
        /**
            * Information about annotation for assistive technology.
            *
            * @default null
            */
        description?: string;
}
/**
    * Interface for a class LabelBorder
    */
export interface LabelBorderModel {
        /**
            * The color of the border that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default ''
            */
        color?: string;
        /**
            * The width of the border in pixels.
            *
            * @default 1
            */
        width?: number;
        /**
            * Border type for labels
            * * Rectangle
            * * Without Top Border
            * * Without Top and BottomBorder
            * * Without Border
            * * Brace
            * * CurlyBrace
            *
            * @default 'Rectangle'
            */
        type?: BorderType;
}
/**
    * Interface for a class MultiLevelCategories
    */
export interface MultiLevelCategoriesModel {
        /**
            * Start value of the multi level labels
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        start?: number | Date | string;
        /**
            * End value of the multi level labels
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        end?: number | Date | string;
        /**
            * multi level labels text.
            *
            * @default ''
            */
        text?: string;
        /**
            * Maximum width of the text for multi level labels.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        maximumTextWidth?: number;
        /**
            * multi level labels custom data.
            *
            * @default null
            */
        customAttributes?: object;
        /**
            * Border type for labels
            * * Rectangle
            * * Without Top Border
            * * Without Top and BottomBorder
            * * Without Border
            * * Brace
            * * CurlyBrace
            *
            * @default 'Rectangle'
            * @aspDefaultValueIgnore
            * @blazorDefaultValueIgnore
            */
        type?: BorderType;
}
/**
    * Interface for a class StripLineSettings
    */
export interface StripLineSettingsModel {
        /**
            * If set true, strip line for axis renders.
            *
            * @default true
            */
        visible?: boolean;
        /**
            *  If set true, strip line get render from axis origin.
            *
            *  @default false
            */
        startFromAxis?: boolean;
        /**
            * Start value of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        start?: Object | number | Date;
        /**
            * End value of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        end?: Object | number | Date;
        /**
            * Size of the strip line, when it starts from the origin.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        size?: number;
        /**
            * Color of the strip line.
            *
            * @default '#808080'
            */
        color?: string;
        /**
            * Dash Array of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        dashArray?: string;
        /**
            * Size type of the strip line
            *
            * @default Auto
            */
        sizeType?: SizeType;
        /**
            * isRepeat value of the strip line.
            *
            * @default false
            * @aspDefaultValueIgnore
            */
        isRepeat?: boolean;
        /**
            * repeatEvery value of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        repeatEvery?: Object | number | Date;
        /**
            * repeatUntil value of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        repeatUntil?: Object | number | Date;
        /**
            * isSegmented value of the strip line
            *
            * @default false
            * @aspDefaultValueIgnore
            */
        isSegmented?: boolean;
        /**
            * segmentStart value of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        segmentStart?: Object | number | Date;
        /**
            * segmentEnd value of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        segmentEnd?: Object | number | Date;
        /**
            * segmentAxisName of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        segmentAxisName?: string;
        /**
            * Border of the strip line.
            */
        border?: BorderModel;
        /**
            * Strip line text.
            *
            * @default ''
            */
        text?: string;
        /**
            * The angle to which the strip line text gets rotated.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        rotation?: number;
        /**
            * Defines the position of the strip line text horizontally. They are,
            * * Start: Places the strip line text at the start.
            * * Middle: Places the strip line text in the middle.
            * * End: Places the strip line text at the end.
            *
            * @default 'Middle'
            */
        horizontalAlignment?: Anchor;
        /**
            * Defines the position of the strip line text vertically. They are,
            * * Start: Places the strip line text at the start.
            * * Middle: Places the strip line text in the middle.
            * * End: Places the strip line text at the end.
            *
            * @default 'Middle'
            */
        verticalAlignment?: Anchor;
        /**
            * Options to customize the strip line text.
            */
        textStyle?: FontModel;
        /**
            * Specifies the order of the strip line. They are,
            * * Behind: Places the strip line behind the series elements.
            * * Over: Places the strip line over the series elements.
            *
            * @default 'Behind'
            */
        zIndex?: ZIndex;
        /**
            * Strip line Opacity
            *
            * @default 1
            */
        opacity?: number;
}
/**
    * Interface for a class MultiLevelLabels
    */
export interface MultiLevelLabelsModel {
        /**
            * Defines the position of the multi level labels. They are,
            * * Near: Places the multi level labels at Near.
            * * Center: Places the multi level labels at Center.
            * * Far: Places the multi level labels at Far.
            *
            * @default 'Center'
            */
        alignment?: Alignment;
        /**
            * Defines the textOverFlow for multi level labels. They are,
            * * Trim: Trim textOverflow for multi level labels.
            * * Wrap: Wrap textOverflow for multi level labels.
            * * none: None textOverflow for multi level labels.
            *
            * @default 'Wrap'
            */
        overflow?: TextOverflow;
        /**
            * Options to customize the multi level labels.
            */
        textStyle?: FontModel;
        /**
            * Border of the multi level labels.
            */
        border?: LabelBorderModel;
        /**
            * multi level categories for multi level labels.
            */
        categories?: MultiLevelCategoriesModel[];
}
/**
    * Interface for a class ScrollbarSettingsRange
    */
export interface ScrollbarSettingsRangeModel {
        /**
            * Specifies the minimum range of an scrollbar.
            *
            * @default null
            */
        minimum?: Date | string | number;
        /**
            * Specifies the maximum range of an scrollbar.
            *
            * @default null
            */
        maximum?: Date | string | number;
}
/**
    * Interface for a class ScrollbarSettings
    */
export interface ScrollbarSettingsModel {
        /**
            * Enables the scrollbar for lazy loading.
            *
            * @default false
            */
        enable?: boolean;
        /**
            * Defines the length of the points for numeric and logarithmic values.
            *
            * @default null
            */
        pointsLength?: number;
        /**
            * Specifies the range for date time values alone.
            */
        range?: ScrollbarSettingsRangeModel;
}

/**
    * Defines Coordinate units of an annotation. They are
    * * Pixel
    * * Point
    */
export type Units = 
/**  Specifies the pixel value */
'Pixel' | 
/**  Specifies the axis value. */
'Point';
/**
    * Defines the Alignment. They are
    * * near - Align the element to the left.
    * * center - Align the element to the center.
    * * far - Align the element to the right.
    * *
    */
export type Alignment = 
/** Define the left alignment. */
'Near' | 
/** Define the center alignment. */
'Center' | 
/** Define the right alignment. */
'Far';
/** @private */
export type SeriesCategories = 
/** Defines the trenline */
'TrendLine' | 
/** Defines the indicator */
'Indicator' | 
/** Defines the normal series */
'Series' | 
/** Defines the Pareto series */
'Pareto';
/**
    * Defines regions of an annotation. They are
    * * Chart
    * * Series
    */
export type Regions = 
/**  Specifies the chart coordinates */
'Chart' | 
/**  Specifies the series coordinates */
'Series';
/**
    * Defines the Position. They are
    * * top - Align the element to the top.
    * * middle - Align the element to the center.
    * * bottom - Align the element to the bottom.
    * *
    */
export type Position = 
/** Define the top position. */
'Top' | 
/** Define the middle position. */
'Middle' | 
/** Define the bottom position. */
'Bottom';
/**
    * Defines the export file format.
    * * PNG - export the image file format as png.
    * * JPEG - export the image file format as jpeg.
    */
export type ExportType = 
/** Used to export a image as png format */
'PNG' | 
/** Used to export a image as jpeg format */
'JPEG' | 
/** Used to export a file as svg format */
'SVG' | 
/** Used to export a file as pdf format */
'PDF' | 
/** Used to print the chart */
'Print';
/**
    * Defines the Text overflow.
    * * None - Shown the chart title with overlap if exceed.
    * * Wrap - Shown the chart title with wrap if exceed.
    * * Trim - Shown the chart title with trim if exceed.
    */
export type TextOverflow = 
/** Used to show the chart title with overlap to other element */
'None' | 
/** Used to show the chart title with Wrap support */
'Wrap' | 
/** Used to show the chart title with Trim */
'Trim';
/**
    * Defines the interval type of datetime axis. They are
    * * auto - Define the interval of the axis based on data.
    * * quarter - Define the interval of the axis based on data.
    * * years - Define the interval of the axis in years.
    * * months - Define the interval of the axis in months.
    * * weeks - Define the interval of the axis in weeks
    * * days - Define the interval of the axis in days.
    * * hours - Define the interval of the axis in hours.
    * * minutes - Define the interval of the axis in minutes.
    */
export type RangeIntervalType = 
/** Define the interval of the axis based on data. */
'Auto' | 
/** Define the interval of the axis in years. */
'Years' | 
/** Define the interval of the axis based on quarter */
'Quarter' | 
/** Define the interval of the axis in months. */
'Months' | 
/** Define the intervl of the axis in weeks */
'Weeks' | 
/** Define the interval of the axis in days. */
'Days' | 
/** Define the interval of the axis in hours. */
'Hours' | 
/** Define the interval of the axis in minutes. */
'Minutes' | 
/** Define the interval of the axis in seconds. */
'Seconds';
/**
    * Period selector position
    * *Top
    * *Bottom
    */
export type PeriodSelectorPosition = 
/** Top position */
'Top' | 
/** Bottom position */
'Bottom';
/**
    * Flag type for stock events
    */
export type FlagType = 
/** Circle  */
'Circle' | 
/** Square */
'Square' | 
/** Flag */
'Flag' | 
/** Pin type flags */
'Pin' | 
/** Triangle Up */
'Triangle' | 
/** Triangle Down */
'InvertedTriangle' | 
/** Triangle Right */
'TriangleRight' | 
/** Triangle Left */
'TriangleLeft' | 
/** Arrow Up */
'ArrowUp' | 
/** Arrow down */
'ArrowDown' | 
/** Arrow Left */
'ArrowLeft' | 
/** Arrow right */
'ArrowRight' | 
/** Text type */
'Text';
/**
    * Highlighting or selecting patterns in Chart, They are.
    * * none -Sets none as highlighting or selecting pattern.
    * * chessboard - Sets chess board as highlighting or selecting pattern.
    * * dots - Set dots as highlighting or selecting pattern.
    * * diagonalForward - Sets diagonal forward as highlighting or selecting pattern.
    * * crosshatch -Sets crosshatch as highlighting or selecting pattern.
    * * pacman - Sets pacman highlighting or selecting pattern.
    * * diagonalbackward - Set diagonal backward as highlighting or selecting pattern.
    * * grid - Set grid as highlighting or selecting pattern.
    * * turquoise - Sets turquoise as highlighting or selecting pattern.
    * * star - Sets star as highlighting or selecting pattern.
    * * triangle - Sets triangle as highlighting or selecting pattern.
    * * circle - Sets circle as highlighting or selecting pattern.
    * * tile - Sets tile as highlighting or selecting pattern.
    * * horizontaldash - Sets horizontal dash as highlighting or selecting pattern.
    * * verticaldash - Sets vertical dash as highlighting or selecting pattern.
    * * rectangle - Sets rectangle as highlighting or selecting pattern.
    * * box - Sets box as highlighting or selecting pattern.
    * * verticalstripe - Sets vertical stripe as highlighting or selecting pattern.
    * * horizontalstripe - Sets horizontal stripe as highlighting or selecting pattern.
    * * bubble - Sets bubble as highlighting or selecting pattern.
    */
export type SelectionPattern = 
/** Sets none as highlighting or selecting pattern. */
'None' | 
/** Sets chess board as highlighting or selecting pattern. */
'Chessboard' | 
/** Set dots as highlighting or selecting pattern. */
'Dots' | 
/** Sets diagonal forward as highlighting or selecting pattern. */
'DiagonalForward' | 
/** Sets cross hatch as highlighting or selecting pattern. */
'Crosshatch' | 
/** Sets pacman as highlighting or selecting pattern. */
'Pacman' | 
/** Set diagonal backward as highlighting or selecting pattern. */
'DiagonalBackward' | 
/** Set grid as highlighting or selecting pattern. */
'Grid' | 
/** Set turquoise as highlighting or selecting pattern. */
'Turquoise' | 
/** Set star as highlighting or selecting pattern. */
'Star' | 
/** Set triangle as highlighting or selecting pattern. */
'Triangle' | 
/** Set circle as highlighting or selecting pattern. */
'Circle' | 
/** Set tile as highlighting or selecting pattern. */
'Tile' | 
/** Set horizontal dash as highlighting or selecting pattern. */
'HorizontalDash' | 
/** Set vertical dash as highlighting or selecting pattern. */
'VerticalDash' | 
/** Set rectangle as highlighting or selecting pattern. */
'Rectangle' | 
/** Set box as highlighting or selecting pattern. */
'Box' | 
/** Set vertical stripe as highlighting or selecting pattern. */
'VerticalStripe' | 
/** Set horizontal stripe as highlighting or selecting pattern. */
'HorizontalStripe' | 
/** Set dots as bubble or selecting pattern. */
'Bubble';
/**
    * Defines the position of the legend title. They are
    * *top - Align the title to the top.
    * *left - Align the title to the left.
    * *right - Align the title to the right.
    */
export type LegendTitlePosition = 
/** Define the top position. */
'Top' | 
/** Define the left position. */
'Left' | 
/** Define the right position. */
'Right';
/**
    * Defines the alignment of the line break axis labels. They are
    * * center - align the label with center.
    * * left - align the label with left.
    * * right - align the label with right.
    */
export type TextAlignment = 
/** align the label with left. */
'Left' | 
/** align the label with center. */
'Center' | 
/** align the label with right. */
'Right';

/**
    * `BoxAndWhiskerSeries` module is used to render the box and whisker series.
    */
export class BoxAndWhiskerSeries extends ColumnBase {
        /**
            * Render BoxAndWhisker series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
        /**
            * Calculation for path direction performed here
            *
            * @param {Points} point point
            * @param {Series} series series
            * @param {ChartLocation} median median
            * @param {ChartLocation} average average
            * @returns {string} direction
            */
        getPathString(point: Points, series: Series, median: ChartLocation, average: ChartLocation): string;
        /**
            * Rendering for box and whisker append here.
            *
            * @param {Series} series series
            * @param {Points} point point
            * @param {IPointRenderEventArgs} argsData argsData
            * @param {string} direction path direction
            * @param {number} median median
            * @returns {void}
            */
        renderBoxAndWhisker(series: Series, point: Points, argsData: IPointRenderEventArgs, direction: string, median: number): void;
        /**
            * To find the box plot values
            *
            * @param {number[]} yValues yValues
            * @param {Points} point point
            * @param {BoxPlotMode} mode mode
            * @returns {void}
            */
        findBoxPlotValues(yValues: number[], point: Points, mode: BoxPlotMode): void;
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
        /**
            * Get module name.
            *
            * @returns {string} module name
            */
        protected getModuleName(): string;
        /**
            * To destroy the candle series.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `MultiColoredAreaSeries` module used to render the area series with multi color.
    */
export class MultiColoredAreaSeries extends MultiColoredSeries {
        /**
            * Render Area series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
        /**
            * To destroy the area series.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
        /**
            * Get module name
            */
        protected getModuleName(): string;
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
}

/**
    * `MultiColoredLineSeries` used to render the line series with multi color.
    */
export class MultiColoredLineSeries extends MultiColoredSeries {
        /**
            * Render Line Series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series, xAxis: Axis, yAxis: Axis, isInverted: boolean): void;
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the line series.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * Base class for multi colored series
    */
export class MultiColoredSeries extends LineBase {
        /**
            * To Generate the area path direction
            *
            * @param {number} xValue xValue
            * @param {number} yValue yValue
            * @param {Series} series series
            * @param {boolean} isInverted isInverted
            * @param {Function} getPointLocation getPointLocation
            * @param {ChartLocation} startPoint startPoint
            * @param {string} startPath startPath
            */
        getAreaPathDirection(xValue: number, yValue: number, series: Series, isInverted: boolean, getPointLocation: Function, startPoint: ChartLocation, startPath: string): string;
        /**
            * To Generate the empty point direction
            *
            * @param {ChartLocation} firstPoint firstPoint
            * @param {ChartLocation} secondPoint secondPoint
            * @param {Series} series series
            * @param {boolean} isInverted isInverted
            * @param {Function} getPointLocation getPointLocation
            */
        getAreaEmptyDirection(firstPoint: ChartLocation, secondPoint: ChartLocation, series: Series, isInverted: boolean, getPointLocation: Function): string;
        /**
            * To set point color
            */
        setPointColor(currentPoint: Points, previous: Points, series: Series, isXSegment: boolean, segments: ChartSegmentModel[]): boolean;
        sortSegments(series: Series, chartSegments: ChartSegmentModel[]): ChartSegmentModel[];
        /**
            * Segment calculation performed here
            *
            * @param {Series} series series
            * @param {PathOption[]} options options
            * @param {ChartSegmentModel[]} segments chartSegments
            */
        applySegmentAxis(series: Series, options: PathOption[], segments: ChartSegmentModel[]): void;
        /**
            * To create clip rect for segment axis
            *
            * @param {number} startValue startValue
            * @param {number} endValue endValue
            * @param {Series} series series
            * @param {number} index index
            * @param {boolean} isX isX
            */
        createClipRect(startValue: number, endValue: number, series: Series, index: number, isX: boolean): string;
        /**
            * To get exact value from segment value
            *
            * @param {Object} segmentValue segmentValue
            * @param {Axis} axis axis
            * @param {Chart} chart chart
            */
        getAxisValue(segmentValue: Object, axis: Axis, chart: Chart): number;
}

/**
    * MultiLevel Labels src
    */
/**
    * `MultiLevelLabel` module is used to render the multi level label in chart.
    */
export class MultiLevelLabel {
        /** @private */
        chart: Chart;
        /** @private */
        xAxisPrevHeight: number[];
        /** @private */
        xAxisMultiLabelHeight: number[];
        /** @private */
        yAxisPrevHeight: number[];
        /** @private */
        yAxisMultiLabelHeight: number[];
        /** @private */
        multiElements: Element;
        /** @private */
        labelElement: Element;
        /** @private */
        multiLevelLabelRectXRegion: Rect[];
        /** @private */
        xLabelCollection: TextOption[];
        /**
            * Constructor for the logerithmic module.
            *
            * @private
            */
        constructor(chart: Chart);
        /**
            * Finds multilevel label height
            *
            * @returns {void}
            */
        getMultilevelLabelsHeight(axis: Axis): void;
        /**
            * render x axis multi level labels
            *
            * @private
            * @returns {void}
            */
        renderXAxisMultiLevelLabels(axis: Axis, index: number, parent: Element, axisRect: Rect): void;
        /**
            * render y axis multi level labels
            *
            * @private
            * @returns {void}
            */
        renderYAxisMultiLevelLabels(axis: Axis, index: number, parent: Element, rect: Rect): void;
        /**
            * create cliprect
            *
            * @returns {void}
            * @private
            */
        createClipRect(x: number, y: number, height: number, width: number, clipId: string, axisId: string): void;
        /**
            * create borer element
            *
            * @returns {void}
            * @private
            */
        createBorderElement(borderIndex: number, axisIndex: number, axis: Axis, path: string, pointIndex?: number): void;
        /**
            * Triggers the event.
            *
            * @returns {void}
            * @private
            */
        triggerMultiLabelRender(axis: Axis, text: string, textStyle: FontModel, textAlignment: Alignment, customAttributes: object): IAxisMultiLabelRenderEventArgs;
        /**
            * Triggers the event.
            *
            * @returns {void}
            * @private
            */
        MultiLevelLabelClick(labelIndex: string, axisIndex: number): IMultiLevelLabelClickEventArgs;
        /**
            * To click the multi level label
            *
            * @returns {void}
            * @private
            */
        click(event: Event): void;
        /**
            * To get the module name for `MultiLevelLabel`.
            *
            * @private
            */
        getModuleName(): string;
        /**
            * To destroy the `MultiLevelLabel` module.
            *
            * @private
            */
        destroy(): void;
}

/**
    * Scrollbar Base
    */
export class ScrollBar {
        axis: Axis;
        component: Chart;
        zoomFactor: number;
        zoomPosition: number;
        svgObject: Element;
        width: number;
        height: number;
        /** @private */
        elements: Element[];
        /** @private */
        isVertical: boolean;
        /** @private */
        isThumbDrag: boolean;
        /** @private */
        mouseX: number;
        /** @private */
        mouseY: number;
        /** @private */
        startX: number;
        /** @private */
        scrollX: number;
        /** @private */
        scrollY: number;
        /** @private */
        animateDuration: number;
        /** @private */
        browserName: string;
        /** @private */
        isPointer: Boolean;
        /** @private */
        isScrollUI: boolean;
        /** @private */
        scrollbarThemeStyle: IScrollbarThemeStyle;
        /** @private */
        actualRange: number;
        /** @private */
        scrollRange: VisibleRangeModel;
        /** @private */
        isLazyLoad: boolean;
        /** @private */
        previousStart: number;
        /** @private */
        previousEnd: number;
        axes: Axis[];
        /**
            * Constructor for creating scrollbar
            *
            * @param component
            * @param axis
            */
        constructor(component: Chart, axis?: Axis);
        /**
            * Handles the mouse down on scrollbar
            *
            * @param e
            */
        scrollMouseDown(e: PointerEvent): void;
        /**
            * Handles the mouse move on scrollbar
            *
            * @param e
            */
        scrollMouseMove(e: PointerEvent): void;
        /**
            * Handles the mouse wheel on scrollbar
            *
            * @param e
            */
        scrollMouseWheel(e: WheelEvent): void;
        /**
            * Handles the mouse up on scrollbar
            *
            * @param e
            */
        scrollMouseUp(): void;
        calculateMouseWheelRange(scrollThumbX: number, scrollThumbWidth: number): IScrollEventArgs;
        /**
            * Range calculation for lazy loading
            *
            * @param scrollThumbX
            * @param scrollThumbWidth
            * @param thumbMove
            * @param scrollThumbX
            * @param scrollThumbWidth
            * @param thumbMove
            * @param scrollThumbX
            * @param scrollThumbWidth
            * @param thumbMove
            */
        calculateLazyRange(scrollThumbX: number, scrollThumbWidth: number, thumbMove?: string): IScrollEventArgs;
        /**
            * To render scroll bar
            *
            * @param isScrollExist
            * @private
            */
        render(isScrollExist: boolean): Element;
        /**
            * Method to remove existing scrollbar
            *
            * @returns {void}
            */
        removeScrollSvg(): void;
        /**
            * Lazy load default values
            *
            * @param axis
            */
        getLazyDefaults(axis: Axis): void;
        /**
            * Method to get log range
            *
            * @param axis
            */
        getLogRange(axis: Axis): ScrollbarSettingsRangeModel;
        /**
            * Method for injecting scrollbar module
            *
            * @param axis
            * @param component
            */
        injectTo(axis: Axis, component: Chart): void;
        /**
            * Method to destroy scrollbar
            *
            * @returns {void}
            */
        destroy(): void;
        /**
            * Method to get scrollbar module name
            *
            * @returns {string}
            */
        getModuleName(): string;
}

/**
    * `Pareto series` module used to render the Pareto series.
    */
export class ParetoSeries extends ColumnBase {
        paretoAxes: Axis[];
        /**
            * Defines the Line initialization
            */
        initSeries(targetSeries: Series, chart: Chart): void;
        /**
            * Defines the Axis initialization for Line
            */
        initAxis(paretoSeries: Series, targetSeries: Series, chart: Chart): void;
        /**
            * Render Pareto series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series): void;
        /**
            * To perform the cumulative calculation for pareto series.
            */
        performCumulativeCalculation(json: Object, series: Series): Object[];
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the pareto series.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `ExportModule` module is used to print and export the rendered chart.
    */
export class Export {
        /**
            * Constructor for export module.
            *
            * @private
            */
        constructor(chart: Chart);
        /**
            * Handles the export method for chart control.
            */
        export(type: ExportType, fileName: string, orientation?: PdfPageOrientation, controls?: (Chart | AccumulationChart | RangeNavigator | StockChart)[], width?: number, height?: number, isVertical?: boolean, header?: IPDFArgs, footer?: IPDFArgs): void;
        /**
            * To get data url for charts.
            */
        getDataUrl(chart: Chart | AccumulationChart): {
                element: HTMLCanvasElement;
                dataUrl?: string;
                blobUrl?: string;
        };
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the chart.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * AccumulationChart file
    */
/**
    * Represents the AccumulationChart control.
    * ```html
    * <div id="accumulation"/>
    * <script>
    *   var accObj = new AccumulationChart({ });
    *   accObj.appendTo("#accumulation");
    * </script>
    * ```
    *
    * @public
    */
export class AccumulationChart extends Component<HTMLElement> implements INotifyPropertyChanged {
        /**
            * `accBaseModue` is used to define the common functionalities of accumulation series
            *
            * @private
            */
        accBaseModule: AccumulationBase;
        /**
            * `pieSeriesModule` is used to render pie series.
            *
            * @private
            */
        pieSeriesModule: PieSeries;
        /**
            * `funnelSeriesModule` is used to render funnel series.
            *
            * @private
            */
        funnelSeriesModule: FunnelSeries;
        /**
            * `pyramidSeriesModule` is used to render funnel series.
            *
            * @private
            */
        pyramidSeriesModule: PyramidSeries;
        /**
            * `accumulationLegendModule` is used to manipulate and add legend in accumulation chart.
            */
        accumulationLegendModule: AccumulationLegend;
        /**
            * `accumulationDataLabelModule` is used to manipulate and add dataLabel in accumulation chart.
            */
        accumulationDataLabelModule: AccumulationDataLabel;
        /**
            * `accumulationTooltipModule` is used to manipulate and add tooltip in accumulation chart.
            */
        accumulationTooltipModule: AccumulationTooltip;
        /**
            * `accumulationSelectionModule` is used to manipulate and add selection in accumulation chart.
            */
        accumulationSelectionModule: AccumulationSelection;
        /**
            * `annotationModule` is used to manipulate and add annotation in chart.
            */
        annotationModule: AccumulationAnnotation;
        /**
            * Export Module is used to export Accumulation chart.
            */
        exportModule: Export;
        /**
            * The width of the chart as a string in order to provide input as both like '100px' or '100%'.
            * If specified as '100%, chart will render to the full width of its parent element.
            *
            * @default null
            */
        width: string;
        /**
            * The height of the chart as a string in order to provide input as both like '100px' or '100%'.
            * If specified as '100%, chart will render to the full height of its parent element.
            *
            * @default null
            */
        height: string;
        /**
            * Title for accumulation chart
            *
            * @default null
            */
        title: string;
        /**
            * The background image of the chart that accepts value in string as url link or location of an image.
            *
            * @default null
            */
        backgroundImage: string;
        /**
            * Center of pie
            */
        center: PieCenterModel;
        /**
            * Specifies the dataSource for the AccumulationChart. It can be an array of JSON objects or an instance of DataManager.
            * ```html
            * <div id='Pie'></div>
            * ```
            * ```typescript
            * let dataManager: DataManager = new DataManager({
            *         url: 'http://mvc.syncfusion.com/Services/Northwnd.svc/Tasks/'
            * });
            * let query: Query = new Query().take(50).where('Estimate', 'greaterThan', 0, false);
            * let pie: AccumulationChart = new AccumulationChart({
            * ...
            *     dataSource: dataManager,
            *     series: [{
            *        xName: 'Id',
            *        yName: 'Estimate',
            *        query: query
            *    }],
            * ...
            * });
            * pie.appendTo('#Pie');
            * ```
            *
            * @default ''
            */
        dataSource: Object | DataManager;
        /**
            * Options for customizing the `title` of accumulation chart.
            */
        titleStyle: FontModel;
        /**
            * SubTitle for accumulation chart
            *
            * @default null
            */
        subTitle: string;
        /**
            * Options for customizing the `subtitle` of accumulation chart.
            */
        subTitleStyle: FontModel;
        /**
            * Options for customizing the legend of accumulation chart.
            */
        legendSettings: LegendSettingsModel;
        /**
            * Options for customizing the tooltip of accumulation chart.
            */
        tooltip: TooltipSettingsModel;
        /**
            * Specifies whether point has to get selected or not. Takes value either 'None 'or 'Point'
            *
            * @default None
            */
        selectionMode: AccumulationSelectionMode;
        /**
            * Specifies whether point has to get highlighted or not. Takes value either 'None 'or 'Point'
            *
            * @default None
            */
        highLightMode: AccumulationSelectionMode;
        /**
            * Specifies whether series or data point for accumulation chart has to be selected. They are,
            * * none: sets none as selecting pattern to accumulation chart .
            * * chessboard: sets chess board as selecting pattern accumulation chart .
            * * dots: sets dots as  selecting pattern accumulation chart .
            * * diagonalForward: sets diagonal forward as selecting pattern to accumulation chart .
            * * crosshatch: sets crosshatch as selecting pattern to accumulation chart.
            * * pacman: sets pacman selecting pattern to accumulation chart.
            * * diagonalbackward: sets diagonal backward as selecting pattern to accumulation chart.
            * * grid: sets grid as selecting pattern to accumulation chart.
            * * turquoise: sets turquoise as selecting pattern to accumulation chart.
            * * star: sets star as selecting pattern to accumulation chart.
            * * triangle: sets triangle as selecting pattern to accumulation chart.
            * * circle: sets circle as selecting pattern to accumulation chart.
            * * tile: sets tile as selecting pattern to accumulation chart.
            * * horizontaldash: sets horizontal dash as selecting pattern to accumulation chart.
            * * verticaldash: sets vertical dash as selecting pattern to accumulation chart.
            * * rectangle: sets rectangle as selecting pattern.
            * * box: sets box as selecting pattern to accumulation chart.
            * * verticalstripe: sets vertical stripe as  selecting pattern to accumulation chart.
            * * horizontalstripe: sets horizontal stripe as selecting pattern to accumulation chart.
            * * bubble: sets bubble as selecting pattern to accumulation chart.
            *
            * @default None
            */
        selectionPattern: SelectionPattern;
        /**
            * Specifies whether series or data point has to be selected. They are,
            * * none: sets none as highlighting pattern to accumulation chart.
            * * chessboard: sets chess board as highlighting pattern to accumulation chart.
            * * dots: sets dots as highlighting pattern to accumulation chart.
            * * diagonalForward: sets diagonal forward as highlighting pattern to accumulation chart.
            * * crosshatch: sets crosshatch as highlighting pattern to accumulation chart.
            * * pacman: sets pacman highlighting  pattern to accumulation chart.
            * * diagonalbackward: sets diagonal backward as highlighting pattern to accumulation chart.
            * * grid: sets grid as highlighting pattern to accumulation chart.
            * * turquoise: sets turquoise as highlighting pattern to accumulation chart.
            * * star: sets star as highlighting  pattern to accumulation chart.
            * * triangle: sets triangle as highlighting pattern to accumulation chart.
            * * circle: sets circle as highlighting  pattern to accumulation chart.
            * * tile: sets tile as highlighting pattern to accumulation chart.
            * * horizontaldash: sets horizontal dash as highlighting pattern to accumulation chart.
            * * verticaldash: sets vertical dash as highlighting pattern to accumulation chart.
            * * rectangle: sets rectangle as highlighting  pattern to accumulation chart.
            * * box: sets box as highlighting pattern to accumulation chart.
            * * verticalstripe: sets vertical stripe as highlighting  pattern to accumulation chart.
            * * horizontalstripe: sets horizontal stripe as highlighting  pattern to accumulation chart.
            * * bubble: sets bubble as highlighting  pattern to accumulation chart.
            *
            * @default None
            */
        highlightPattern: SelectionPattern;
        /**
            * If set true, enables the border in pie and accumulation chart while mouse moving.
            *
            * @default true
            */
        enableBorderOnMouseMove: boolean;
        /**
            * If set true, enables the multi selection in accumulation chart. It requires `selectionMode` to be `Point`.
            *
            * @default false
            */
        isMultiSelect: boolean;
        /**
            * If set true, enables the animation for both chart and accumulation.
            *
            * @default true
            */
        enableAnimation: boolean;
        /**
            * Specifies the point indexes to be selected while loading a accumulation chart.
            * It requires `selectionMode` to be `Point`.
            * ```html
            * <div id='Pie'></div>
            * ```
            * ```typescript
            * let pie: AccumulationChart = new AccumulationChart({
            * ...
            *   selectionMode: 'Point',
            *   selectedDataIndexes: [ { series: 0, point: 1},
            *                          { series: 2, point: 3} ],
            * ...
            * });
            * pie.appendTo('#Pie');
            * ```
            *
            * @default []
            */
        selectedDataIndexes: IndexesModel[];
        /**
            *  Options to customize the left, right, top and bottom margins of accumulation chart.
            */
        margin: MarginModel;
        /**
            * If set true, labels for the point will be placed smartly without overlapping.
            *
            * @default true
            */
        enableSmartLabels: boolean;
        /**
            * Options for customizing the color and width of the chart border.
            */
        border: BorderModel;
        /**
            * The background color of the chart, which accepts value in hex, rgba as a valid CSS color string.
            *
            * @default null
            */
        background: string;
        /**
            * The configuration for series in accumulation chart.
            */
        series: AccumulationSeriesModel[];
        /**
            * The configuration for annotation in chart.
            */
        annotations: AccumulationAnnotationSettingsModel[];
        /**
            * Specifies the theme for accumulation chart.
            *
            * @default 'Material'
            */
        theme: AccumulationTheme;
        /**
            * Specifies whether a grouping separator should be used for a number.
            *
            * @default false
            */
        useGroupingSeparator: boolean;
        /**
            * To enable export feature in chart.
            *
            * @default true
            */
        enableExport: boolean;
        /**
            * To enable export feature in blazor chart.
            *
            * @default false
            */
        allowExport: boolean;
        /**
            * Triggers after accumulation chart loaded.
            *
            * @event
            * @blazorProperty 'Loaded'
            */
        loaded: EmitType<IAccLoadedEventArgs>;
        /**
            * Triggers before accumulation chart load.
            *
            * @event
            */
        load: EmitType<IAccLoadedEventArgs>;
        /**
            * Triggers before the series gets rendered.
            *
            * @event
            * @deprecated
            */
        seriesRender: EmitType<IAccSeriesRenderEventArgs>;
        /**
            * Triggers before the legend gets rendered.
            *
            * @event
            * @deprecated
            */
        legendRender: EmitType<ILegendRenderEventArgs>;
        /**
            * Triggers before the data label for series gets rendered.
            *
            * @event
            * @deprecated
            */
        textRender: EmitType<IAccTextRenderEventArgs>;
        /**
            * Triggers before the tooltip for series gets rendered.
            *
            * @event
            */
        tooltipRender: EmitType<ITooltipRenderEventArgs>;
        /**
            * Triggers before each points for series gets rendered.
            *
            * @event
            * @deprecated
            */
        pointRender: EmitType<IAccPointRenderEventArgs>;
        /**
            * Triggers before the annotation gets rendered.
            *
            * @event
            * @deprecated
            */
        annotationRender: EmitType<IAnnotationRenderEventArgs>;
        /**
            * Triggers before the prints gets started.
            *
            * @event
            * @blazorProperty 'OnPrint'
            */
        beforePrint: EmitType<IPrintEventArgs>;
        /**
            * Triggers on hovering the accumulation chart.
            *
            * @event
            * @blazorProperty 'OnChartMouseMove'
            */
        chartMouseMove: EmitType<IMouseEventArgs>;
        /**
            * Triggers on clicking the accumulation chart.
            *
            * @event
            * @blazorProperty 'OnChartMouseClick'
            */
        chartMouseClick: EmitType<IMouseEventArgs>;
        /**
            * Triggers on point click.
            *
            * @event
            * @blazorProperty 'OnPointClick'
            */
        pointClick: EmitType<IPointEventArgs>;
        /**
            * Triggers on point move.
            *
            * @event
            * @blazorProperty 'PointMoved'
            */
        pointMove: EmitType<IPointEventArgs>;
        /**
            * Triggers after animation gets completed for series.
            *
            * @event
            * @blazorProperty 'OnAnimationComplete'
            */
        animationComplete: EmitType<IAccAnimationCompleteEventArgs>;
        /**
            * Triggers on mouse down.
            *
            * @event
            * @blazorProperty 'OnChartMouseDown'
            */
        chartMouseDown: EmitType<IMouseEventArgs>;
        /**
            * Triggers while cursor leaves the accumulation chart.
            *
            * @event
            * @blazorProperty 'OnChartMouseLeave'
            */
        chartMouseLeave: EmitType<IMouseEventArgs>;
        /**
            * Triggers on mouse up.
            *
            * @event
            * @blazorProperty 'OnChartMouseUp'
            */
        chartMouseUp: EmitType<IMouseEventArgs>;
        /**
            * Triggers before window resize.
            * @event
            * @blazorProperty 'BeforeResize'
            */
        beforeResize: EmitType<IAccBeforeResizeEventArgs>;
        /**
            * Triggers after window resize.
            *
            * @event
            * @blazorProperty 'Resized'
            */
        resized: EmitType<IAccResizeEventArgs>;
        /**
            * Triggers after the export completed.
            *
            * @event
            * @blazorProperty 'AfterExport'
            */
        afterExport: EmitType<IAfterExportEventArgs>;
        /**
            * Animate the series bounds on data change.
            *
            * @private
            */
        animate(duration?: number): void;
        /** @private */
        svgObject: Element;
        /** @public */
        duration: number;
        /** @private */
        initialClipRect: Rect;
        /** @private */
        availableSize: Size;
        /** @private */
        renderer: SvgRenderer | CanvasRenderer;
        /** @private */
        intl: Internationalization;
        /** @private */
        visibleSeries: AccumulationSeries[];
        /** @private */
        seriesCounts: number;
        /** @private */
        explodeDistance: number;
        /** @private */
        mouseX: number;
        /** @private */
        mouseY: number;
        /** @private */
        origin: ChartLocation;
        /** @private */
        get type(): AccumulationType;
        /** @private */
        isTouch: boolean;
        /** @private */
        redraw: boolean;
        /** @private */
        animateSeries: boolean;
        /** @private */
        themeStyle: IThemeStyle;
        /** @private */
        isBlazor: boolean;
        /** @private */
        accumulationResizeBound: EventListenerOrEventListenerObject;
        /**
            * Constructor for creating the AccumulationChart widget
            *
            * @private
            */
        constructor(options?: AccumulationChartModel, element?: string | HTMLElement);
        /**
            *  To create svg object, renderer and binding events for the container.
            */
        protected preRender(): void;
        /**
            * To render the accumulation chart elements
            */
        protected render(): void;
        /**
            * Handles the mouse end.
            *
            * @returns {boolean} Mouse end of accumulation chart.
            * @private
            */
        accumulationMouseEnd(e: PointerEvent): boolean;
        /**
            * Handles the mouse start.
            *
            * @returns {boolean} Mouse start of accumulation chart.
            * @private
            */
        accumulationMouseStart(e: PointerEvent): boolean;
        /**
            * Handles the accumulation chart resize.
            *
            * @returns {boolean} Resize method of accumulation chart.
            * @private
            */
        accumulationResize(): boolean;
        /**
            * Handles the print method for accumulation chart control.
            */
        print(id?: string[] | string | Element): void;
        /**
            * Export method for the chart.
            */
        export(type: ExportType, fileName: string): void;
        /**
            * Method to set the annotation content dynamically for accumulation.
            */
        setAnnotationValue(annotationIndex: number, content: string): void;
        /**
            * Handles the mouse move on accumulation chart.
            *
            * @returns {boolean} Mouse move of accumulation chart.
            * @private
            */
        accumulationMouseMove(e: PointerEvent): boolean;
        titleTooltip(event: Event, x: number, y: number, isTouch?: boolean): void;
        /**
            * Handles the mouse click on accumulation chart.
            *
            * @returns {boolean} Mouse click of accumulation chart.
            * @private
            */
        accumulationOnMouseClick(e: PointerEvent): boolean;
        /**
            * Handles the mouse right click on accumulation chart.
            *
            * @returns {boolean} Right click of accumulation chart.
            * @private
            */
        accumulationRightClick(event: MouseEvent | PointerEvent): boolean;
        /**
            * Handles the mouse leave on accumulation chart.
            *
            * @returns {boolean} Mouse leave of accumulation chart.
            * @private
            */
        accumulationMouseLeave(e: PointerEvent): boolean;
        /**
            * To Remove the SVG from accumulation chart.
            *
            * @returns {boolean} Remove svg.
            * @private
            */
        removeSvg(): void;
        /**
            * To refresh the accumulation chart
            *
            * @private
            */
        refreshChart(): void;
        /**
            * To render elements for accumulation chart
            *
            * @private
            */
        renderElements(): void;
        /**
            * To set the left and top position for data label template for center aligned chart
            *
            * @private
            */
        setSecondaryElementPosition(): void;
        /**
            * To render the annotaitions for accumulation series.
            *
            * @private
            */
        renderAnnotation(): void;
        /**
            * Method to process the explode in accumulation chart
            *
            * @private
            */
        processExplode(): void;
        /**
            * To process the selection in accumulation chart
            *
            * @private
            */
        processSelection(): void;
        /**
            * To get the series parent element
            *
            * @private
            */
        getSeriesElement(): Element;
        /**
            * To refresh the all visible series points
            *
            * @private
            */
        refreshSeries(): void;
        /**
            * To refresh points label region and visible
            *
            * @private
            */
        refreshPoints(points: AccPoints[]): void;
        /**
            * To get Module name
            *
            *  @private
            */
        getModuleName(): string;
        /**
            * To destroy the accumulationcharts
            *
            * @private
            */
        destroy(): void;
        /**
            * To provide the array of modules needed for control rendering
            *
            * @returns {ModuleDeclaration[]} required modules
            * @private
            */
        requiredModules(): ModuleDeclaration[];
        /**
            * Get the properties to be maintained in the persisted state.
            *
            * @private
            */
        getPersistData(): string;
        /**
            * Called internally if any of the property value changed.
            *
            * @private
            */
        onPropertyChanged(newProp: AccumulationChartModel, oldProp: AccumulationChartModel): void;
}

/**
    * Interface for a class AccumulationChart
    */
export interface AccumulationChartModel extends ComponentModel {
        /**
            * The width of the chart as a string in order to provide input as both like '100px' or '100%'.
            * If specified as '100%, chart will render to the full width of its parent element.
            *
            * @default null
            */
        width?: string;
        /**
            * The height of the chart as a string in order to provide input as both like '100px' or '100%'.
            * If specified as '100%, chart will render to the full height of its parent element.
            *
            * @default null
            */
        height?: string;
        /**
            * Title for accumulation chart
            *
            * @default null
            */
        title?: string;
        /**
            * The background image of the chart that accepts value in string as url link or location of an image.
            *
            * @default null
            */
        backgroundImage?: string;
        /**
            * Center of pie
            */
        center?: PieCenterModel;
        /**
            * Specifies the dataSource for the AccumulationChart. It can be an array of JSON objects or an instance of DataManager.
            * ```html
            * <div id='Pie'></div>
            * ```
            * ```typescript
            * let dataManager: DataManager = new DataManager({
            *         url: 'http://mvc.syncfusion.com/Services/Northwnd.svc/Tasks/'
            * });
            * let query: Query = new Query().take(50).where('Estimate', 'greaterThan', 0, false);
            * let pie: AccumulationChart = new AccumulationChart({
            * ...
            *     dataSource: dataManager,
            *     series: [{
            *        xName: 'Id',
            *        yName: 'Estimate',
            *        query: query
            *    }],
            * ...
            * });
            * pie.appendTo('#Pie');
            * ```
            *
            * @default ''
            */
        dataSource?: Object | DataManager;
        /**
            * Options for customizing the `title` of accumulation chart.
            */
        titleStyle?: FontModel;
        /**
            * SubTitle for accumulation chart
            *
            * @default null
            */
        subTitle?: string;
        /**
            * Options for customizing the `subtitle` of accumulation chart.
            */
        subTitleStyle?: FontModel;
        /**
            * Options for customizing the legend of accumulation chart.
            */
        legendSettings?: LegendSettingsModel;
        /**
            * Options for customizing the tooltip of accumulation chart.
            */
        tooltip?: TooltipSettingsModel;
        /**
            * Specifies whether point has to get selected or not. Takes value either 'None 'or 'Point'
            *
            * @default None
            */
        selectionMode?: AccumulationSelectionMode;
        /**
            * Specifies whether point has to get highlighted or not. Takes value either 'None 'or 'Point'
            *
            * @default None
            */
        highLightMode?: AccumulationSelectionMode;
        /**
            * Specifies whether series or data point for accumulation chart has to be selected. They are,
            * * none: sets none as selecting pattern to accumulation chart .
            * * chessboard: sets chess board as selecting pattern accumulation chart .
            * * dots: sets dots as  selecting pattern accumulation chart .
            * * diagonalForward: sets diagonal forward as selecting pattern to accumulation chart .
            * * crosshatch: sets crosshatch as selecting pattern to accumulation chart.
            * * pacman: sets pacman selecting pattern to accumulation chart.
            * * diagonalbackward: sets diagonal backward as selecting pattern to accumulation chart.
            * * grid: sets grid as selecting pattern to accumulation chart.
            * * turquoise: sets turquoise as selecting pattern to accumulation chart.
            * * star: sets star as selecting pattern to accumulation chart.
            * * triangle: sets triangle as selecting pattern to accumulation chart.
            * * circle: sets circle as selecting pattern to accumulation chart.
            * * tile: sets tile as selecting pattern to accumulation chart.
            * * horizontaldash: sets horizontal dash as selecting pattern to accumulation chart.
            * * verticaldash: sets vertical dash as selecting pattern to accumulation chart.
            * * rectangle: sets rectangle as selecting pattern.
            * * box: sets box as selecting pattern to accumulation chart.
            * * verticalstripe: sets vertical stripe as  selecting pattern to accumulation chart.
            * * horizontalstripe: sets horizontal stripe as selecting pattern to accumulation chart.
            * * bubble: sets bubble as selecting pattern to accumulation chart.
            *
            * @default None
            */
        selectionPattern?: SelectionPattern;
        /**
            * Specifies whether series or data point has to be selected. They are,
            * * none: sets none as highlighting pattern to accumulation chart.
            * * chessboard: sets chess board as highlighting pattern to accumulation chart.
            * * dots: sets dots as highlighting pattern to accumulation chart.
            * * diagonalForward: sets diagonal forward as highlighting pattern to accumulation chart.
            * * crosshatch: sets crosshatch as highlighting pattern to accumulation chart.
            * * pacman: sets pacman highlighting  pattern to accumulation chart.
            * * diagonalbackward: sets diagonal backward as highlighting pattern to accumulation chart.
            * * grid: sets grid as highlighting pattern to accumulation chart.
            * * turquoise: sets turquoise as highlighting pattern to accumulation chart.
            * * star: sets star as highlighting  pattern to accumulation chart.
            * * triangle: sets triangle as highlighting pattern to accumulation chart.
            * * circle: sets circle as highlighting  pattern to accumulation chart.
            * * tile: sets tile as highlighting pattern to accumulation chart.
            * * horizontaldash: sets horizontal dash as highlighting pattern to accumulation chart.
            * * verticaldash: sets vertical dash as highlighting pattern to accumulation chart.
            * * rectangle: sets rectangle as highlighting  pattern to accumulation chart.
            * * box: sets box as highlighting pattern to accumulation chart.
            * * verticalstripe: sets vertical stripe as highlighting  pattern to accumulation chart.
            * * horizontalstripe: sets horizontal stripe as highlighting  pattern to accumulation chart.
            * * bubble: sets bubble as highlighting  pattern to accumulation chart.
            *
            * @default None
            */
        highlightPattern?: SelectionPattern;
        /**
            * If set true, enables the border in pie and accumulation chart while mouse moving.
            *
            * @default true
            */
        enableBorderOnMouseMove?: boolean;
        /**
            * If set true, enables the multi selection in accumulation chart. It requires `selectionMode` to be `Point`.
            *
            * @default false
            */
        isMultiSelect?: boolean;
        /**
            * If set true, enables the animation for both chart and accumulation.
            *
            * @default true
            */
        enableAnimation?: boolean;
        /**
            * Specifies the point indexes to be selected while loading a accumulation chart.
            * It requires `selectionMode` to be `Point`.
            * ```html
            * <div id='Pie'></div>
            * ```
            * ```typescript
            * let pie: AccumulationChart = new AccumulationChart({
            * ...
            *   selectionMode: 'Point',
            *   selectedDataIndexes: [ { series: 0, point: 1},
            *                          { series: 2, point: 3} ],
            * ...
            * });
            * pie.appendTo('#Pie');
            * ```
            *
            * @default []
            */
        selectedDataIndexes?: IndexesModel[];
        /**
            *  Options to customize the left, right, top and bottom margins of accumulation chart.
            */
        margin?: MarginModel;
        /**
            * If set true, labels for the point will be placed smartly without overlapping.
            *
            * @default true
            */
        enableSmartLabels?: boolean;
        /**
            * Options for customizing the color and width of the chart border.
            */
        border?: BorderModel;
        /**
            * The background color of the chart, which accepts value in hex, rgba as a valid CSS color string.
            *
            * @default null
            */
        background?: string;
        /**
            * The configuration for series in accumulation chart.
            */
        series?: AccumulationSeriesModel[];
        /**
            * The configuration for annotation in chart.
            */
        annotations?: AccumulationAnnotationSettingsModel[];
        /**
            * Specifies the theme for accumulation chart.
            *
            * @default 'Material'
            */
        theme?: AccumulationTheme;
        /**
            * Specifies whether a grouping separator should be used for a number.
            *
            * @default false
            */
        useGroupingSeparator?: boolean;
        /**
            * To enable export feature in chart.
            *
            * @default true
            */
        enableExport?: boolean;
        /**
            * To enable export feature in blazor chart.
            *
            * @default false
            */
        allowExport?: boolean;
        /**
            * Triggers after accumulation chart loaded.
            *
            * @event
            * @blazorProperty 'Loaded'
            */
        loaded?: EmitType<IAccLoadedEventArgs>;
        /**
            * Triggers before accumulation chart load.
            *
            * @event
            */
        load?: EmitType<IAccLoadedEventArgs>;
        /**
            * Triggers before the series gets rendered.
            *
            * @event
            * @deprecated
            */
        seriesRender?: EmitType<IAccSeriesRenderEventArgs>;
        /**
            * Triggers before the legend gets rendered.
            *
            * @event
            * @deprecated
            */
        legendRender?: EmitType<ILegendRenderEventArgs>;
        /**
            * Triggers before the data label for series gets rendered.
            *
            * @event
            * @deprecated
            */
        textRender?: EmitType<IAccTextRenderEventArgs>;
        /**
            * Triggers before the tooltip for series gets rendered.
            *
            * @event
            */
        tooltipRender?: EmitType<ITooltipRenderEventArgs>;
        /**
            * Triggers before each points for series gets rendered.
            *
            * @event
            * @deprecated
            */
        pointRender?: EmitType<IAccPointRenderEventArgs>;
        /**
            * Triggers before the annotation gets rendered.
            *
            * @event
            * @deprecated
            */
        annotationRender?: EmitType<IAnnotationRenderEventArgs>;
        /**
            * Triggers before the prints gets started.
            *
            * @event
            * @blazorProperty 'OnPrint'
            */
        beforePrint?: EmitType<IPrintEventArgs>;
        /**
            * Triggers on hovering the accumulation chart.
            *
            * @event
            * @blazorProperty 'OnChartMouseMove'
            */
        chartMouseMove?: EmitType<IMouseEventArgs>;
        /**
            * Triggers on clicking the accumulation chart.
            *
            * @event
            * @blazorProperty 'OnChartMouseClick'
            */
        chartMouseClick?: EmitType<IMouseEventArgs>;
        /**
            * Triggers on point click.
            *
            * @event
            * @blazorProperty 'OnPointClick'
            */
        pointClick?: EmitType<IPointEventArgs>;
        /**
            * Triggers on point move.
            *
            * @event
            * @blazorProperty 'PointMoved'
            */
        pointMove?: EmitType<IPointEventArgs>;
        /**
            * Triggers after animation gets completed for series.
            *
            * @event
            * @blazorProperty 'OnAnimationComplete'
            */
        animationComplete?: EmitType<IAccAnimationCompleteEventArgs>;
        /**
            * Triggers on mouse down.
            *
            * @event
            * @blazorProperty 'OnChartMouseDown'
            */
        chartMouseDown?: EmitType<IMouseEventArgs>;
        /**
            * Triggers while cursor leaves the accumulation chart.
            *
            * @event
            * @blazorProperty 'OnChartMouseLeave'
            */
        chartMouseLeave?: EmitType<IMouseEventArgs>;
        /**
            * Triggers on mouse up.
            *
            * @event
            * @blazorProperty 'OnChartMouseUp'
            */
        chartMouseUp?: EmitType<IMouseEventArgs>;
        /**
            * Triggers before window resize.
            * @event
            * @blazorProperty 'BeforeResize'
            */
        beforeResize?: EmitType<IAccBeforeResizeEventArgs>;
        /**
            * Triggers after window resize.
            *
            * @event
            * @blazorProperty 'Resized'
            */
        resized?: EmitType<IAccResizeEventArgs>;
        /**
            * Triggers after the export completed.
            *
            * @event
            * @blazorProperty 'AfterExport'
            */
        afterExport?: EmitType<IAfterExportEventArgs>;
        /**
            * Defines the currencyCode format of the accumulation chart
            *
            * @private
            * @aspType string
            */
        currencyCode?: string;
}

/**
    * AccumulationChart base file
    */
/**
    * Annotation for accumulation series
    */
export class AccumulationAnnotationSettings extends ChildProperty<AccumulationAnnotationSettings> {
        /**
            * Content of the annotation, which accepts the id of the custom element.
            *
            * @default null
            */
        content: string;
        /**
            * if set coordinateUnit as `Pixel` X specifies the axis value
            * else is specifies pixel or percentage of coordinate
            *
            * @default '0'
            */
        x: string | Date | number;
        /**
            * if set coordinateUnit as `Pixel` Y specifies the axis value
            * else is specifies pixel or percentage of coordinate
            *
            * @default '0'
            */
        y: string | number;
        /**
            * Specifies the coordinate units of the annotation. They are
            * * Pixel - Annotation renders based on x and y pixel value.
            * * Point - Annotation renders based on x and y axis value.
            *
            * @default 'Pixel'
            */
        coordinateUnits: Units;
        /**
            * Specifies the regions of the annotation. They are
            * * Chart - Annotation renders based on chart coordinates.
            * * Series - Annotation renders based on series coordinates.
            *
            * @default 'Chart'
            */
        region: Regions;
        /**
            * Specifies the position of the annotation. They are
            * * Top - Align the annotation element as top side.
            * * Bottom - Align the annotation element as bottom side.
            * * Middle - Align the annotation element as mid point.
            *
            * @default 'Middle'
            * @deprecated
            */
        verticalAlignment: Position;
        /**
            * Specifies the alignment of the annotation. They are
            * * Near - Align the annotation element as top side.
            * * Far - Align the annotation element as bottom side.
            * * Center - Align the annotation element as mid point.
            *
            * @default 'Center'
            * @deprecated
            */
        horizontalAlignment: Alignment;
        /**
            * Information about annotation for assistive technology.
            *
            * @default null
            */
        description: string;
}
/**
    * Configures the dataLabel in accumulation chart.
    */
export class AccumulationDataLabelSettings extends ChildProperty<AccumulationDataLabelSettings> {
        /**
            * If set true, data label for series gets render.
            *
            * @default false
            */
        visible: boolean;
        /**
            * If set true, data label for zero values in series gets render.
            *
            * @default true
            */
        showZero: boolean;
        /**
            * The DataSource field which contains the data label value.
            *
            * @default null
            */
        name: string;
        /**
            * The background color of the data label, which accepts value in hex, rgba as a valid CSS color string.
            *
            * @default 'transparent'
            */
        fill: string;
        /**
            * Specifies the position of data label. They are.
            * * Outside - Places label outside the point.
            * * Inside - Places label inside the point.
            *
            * @default 'Inside'
            */
        position: AccumulationLabelPosition;
        /**
            * The roundedCornerX for the data label. It requires `border` values not to be null.
            *
            * @default 5
            */
        rx: number;
        /**
            * The roundedCornerY for the data label. It requires `border` values not to be null.
            *
            * @default 5
            */
        ry: number;
        /**
            * Specifies angle for data label.
            *
            * @default 0
            */
        angle: number;
        /**
            * Enables rotation for data label.
            *
            * @default false
            */
        enableRotation: boolean;
        /**
            * Option for customizing the border lines.
            */
        border: BorderModel;
        /**
            * Option for customizing the data label text.
            */
        font: FontModel;
        /**
            * Options for customize the connector line in series.
            * This property is applicable for Pie, Funnel and Pyramid series.
            * The default connector length for Pie series is '4%'. For other series, it is null.
            */
        connectorStyle: ConnectorModel;
        /**
            * Custom template to format the data label content. Use ${point.x} and ${point.y} as a placeholder
            * text to display the corresponding data point.
            *
            * @default null
            */
        template: string;
}
/**
    * Center value of the Pie series.
    */
export class PieCenter extends ChildProperty<PieCenter> {
        /**
            * X value of the center.
            *
            * @default '50%'
            */
        x: string;
        /**
            * Y value of the center.
            *
            * @default '50%'
            */
        y: string;
}
/**
    * Points model for the series.
    *
    * @public
    */
export class AccPoints {
        /** accumulation point x value */
        x: Object;
        /** accumulation point y value */
        y: number;
        /** accumulation point visibility */
        visible: boolean;
        /** accumulation point text */
        text: string;
        /** accumulation point tooltip */
        tooltip: string;
        /** accumulation point slice radius */
        sliceRadius: string;
        /** accumulation point original text */
        originalText: string;
        /** @private */
        label: string;
        /** accumulation point color */
        color: string;
        /** accumulation point percentage value */
        percentage: number;
        /** accumulation point symbol location */
        symbolLocation: ChartLocation;
        /** accumulation point index */
        index: number;
        /** @private */
        midAngle: number;
        /** @private */
        startAngle: number;
        /** @private */
        endAngle: number;
        /** @private */
        labelAngle: number;
        /** @private */
        region: Rect;
        /** @private */
        labelRegion: Rect;
        /** @private */
        labelVisible: boolean;
        /** @private */
        labelPosition: AccumulationLabelPosition;
        /** @private */
        yRatio: number;
        /** @private */
        heightRatio: number;
        /** @private */
        labelOffset: ChartLocation;
        regions: Rect[];
        /** @private */
        isExplode: boolean;
        /** @private */
        isClubbed: boolean;
        /** @private */
        isSliced: boolean;
        /** @private */
        start: number;
        /** @private */
        degree: number;
        /** @private */
        transform: string;
        /** @private */
        separatorY: string;
        /** @private */
        adjustedLabel: boolean;
        /** @private */
        connectorLength: number;
        /** @private  */
        argsData: IAccTextRenderEventArgs;
        /** @private  */
        textSize: Size;
        /** @private */
        isLabelUpdated: number;
        /** @private */
        initialLabelRegion: Rect;
        /** @private */
        templateElement: HTMLElement;
        /** @private */
        legendImageUrl: string;
}
/**
    *  Configures the series in accumulation chart.
    */
export class AccumulationSeries extends ChildProperty<AccumulationSeries> {
        /**
            * Specifies the dataSource for the series. It can be an array of JSON objects or an instance of DataManager.
            * ```html
            * <div id='Pie'></div>
            * ```
            * ```typescript
            * let dataManager: DataManager = new DataManager({
            *         url: 'http://mvc.syncfusion.com/Services/Northwnd.svc/Tasks/'
            * });
            * let query: Query = new Query().take(50).where('Estimate', 'greaterThan', 0, false);
            * let pie: AccumulationChart = new AccumulationChart({
            * ...
            *     series: [{
            *        dataSource: dataManager,
            *        xName: 'Id',
            *        yName: 'Estimate',
            *        query: query
            *    }],
            * ...
            * });
            * pie.appendTo('#Pie');
            * ```
            *
            * @default ''
            */
        dataSource: Object | DataManager;
        /**
            * Specifies Query to select data from dataSource. This property is applicable only when the dataSource is `ej.DataManager`.
            *
            * @default null
            */
        query: Query;
        /**
            * The DataSource field which contains the x value.
            *
            * @default ''
            */
        xName: string;
        /**
            * Specifies the series name
            *
            * @default ''
            */
        name: string;
        /**
            * The provided value will be considered as a Tooltip Mapping name
            *
            * @default ''
            */
        tooltipMappingName: string;
        /**
            * The DataSource field which contains the y value.
            *
            * @default ''
            */
        yName: string;
        /**
            * Specifies the series visibility.
            *
            * @default true
            */
        visible: boolean;
        /**
            * Options for customizing the border of the series.
            */
        border: BorderModel;
        /**
            * Options for customizing the animation for series.
            */
        animation: AnimationModel;
        /**
            * The shape of the legend. Each series has its own legend shape. They are
            * * Circle - Renders a circle.
            * * Rectangle - Renders a rectangle.
            * * Triangle - Renders a triangle.
            * * Diamond - Renders a diamond.
            * * Cross - Renders a cross.
            * * HorizontalLine - Renders a horizontalLine.
            * * VerticalLine - Renders a verticalLine.
            * * Pentagon - Renders a pentagon.
            * * InvertedTriangle - Renders a invertedTriangle.
            * * SeriesType -Render a legend shape based on series type.
            * * Image -Render a image.     *
            * @default 'SeriesType'
            */
        legendShape: LegendShape;
        /**
            * The URL for the Image that is to be displayed as a Legend icon.  It requires  `legendShape` value to be an `Image`.
            * @default ''
            */
        legendImageUrl: string;
        /**
            * The DataSource field that contains the color value of point
            * It is applicable for series
            *
            * @default ''
            */
        pointColorMapping: string;
        /**
            * Custom style for the selected series or points.
            *
            * @default null
            */
        selectionStyle: string;
        /**
            * AccumulationSeries y values less than groupTo are combined into single slice named others
            *
            * @default null
            */
        groupTo: string;
        /**
            * AccumulationSeries y values less than groupMode are combined into single slice named others
            *
            * @default Value
            */
        groupMode: GroupModes;
        /**
            * The data label for the series.
            */
        dataLabel: AccumulationDataLabelSettingsModel;
        /**
            * Palette for series points.
            *
            * @default []
            */
        palettes: string[];
        /**
            * Start angle for a series.
            *
            * @default 0
            */
        startAngle: number;
        /**
            * End angle for a series.
            *
            * @default null
            */
        endAngle: number;
        /**
            * Radius of the pie series and its values in percentage.
            *
            * @default '80%'
            */
        radius: string;
        /**
            * When the innerRadius value is greater than 0 percentage, a donut will appear in pie series. It takes values only in percentage.
            *
            * @default '0'
            */
        innerRadius: string;
        /**
            * Specify the type of the series in accumulation chart.
            *
            * @default 'Pie'
            */
        type: AccumulationType;
        /**
            * To enable or disable tooltip for a series.
            *
            * @default true
            */
        enableTooltip: boolean;
        /**
            * If set true, series points will be exploded on mouse click or touch.
            *
            * @default false
            */
        explode: boolean;
        /**
            * Distance of the point from the center, which takes values in both pixels and percentage.
            *
            * @default '30%'
            */
        explodeOffset: string;
        /**
            * If set true, all the points in the series will get exploded on load.
            *
            * @default false
            */
        explodeAll: boolean;
        /**
            * Index of the point, to be exploded on load.
            *
            * @default null
            *
            * @aspDefaultValueIgnore
            *
            * @blazorDefaultValue Double.NaN
            */
        explodeIndex: number;
        /**
            * options to customize the empty points in series
            */
        emptyPointSettings: EmptyPointSettingsModel;
        /**
            * Defines the distance between the segments of a funnel/pyramid series. The range will be from 0 to 1
            *
            * @default 0
            */
        gapRatio: number;
        /**
            * Defines the width of the funnel/pyramid with respect to the chart area
            *
            * @default '80%'
            */
        width: string;
        /**
            * Defines the height of the funnel/pyramid with respect to the chart area
            *
            * @default '80%'
            */
        height: string;
        /**
            * Defines the width of the funnel neck with respect to the chart area
            *
            * @default '20%'
            */
        neckWidth: string;
        /**
            * Defines the height of the funnel neck with respect to the chart area
            *
            * @default '20%'
            */
        neckHeight: string;
        /**
            * Defines how the values have to be reflected, whether through height/surface of the segments
            *
            * @default 'Linear'
            */
        pyramidMode: PyramidModes;
        /**
            * The opacity of the series.
            *
            * @default 1.
            */
        opacity: number;
        /** @private */
        points: AccPoints[];
        /** @private */
        clubbedPoints: AccPoints[];
        /** @private */
        dataModule: Data;
        /** @private */
        sumOfPoints: number;
        /** @private */
        index: number;
        /** @private */
        sumOfClub: number;
        /** @private */
        resultData: Object;
        /** @private */
        lastGroupTo: string;
        /** @private */
        isRectSeries: boolean;
        /** @private */
        clipRect: Rect;
        /** @private */
        category: SeriesCategories;
        /** @private */
        rightSidePoints: AccPoints[];
        /** @private */
        leftSidePoints: AccPoints[];
        /**
            * To find the max bounds of the data label to place smart legend
            *
            * @private
            */
        labelBound: Rect;
        /**
            * To find the max bounds of the accumulation segment to place smart legend
            *
            * @private
            */
        accumulationBound: Rect;
        /**
            * Defines the funnel size
            *
            * @private
            */
        triangleSize: Size;
        /**
            * Defines the size of the funnel neck
            *
            * @private
            */
        neckSize: Size;
        /**
            * To refresh the Datamanager for series
            *
            * @private
            */
        refreshDataManager(accumulation: AccumulationChart, render: boolean): void;
        /**
            * To get points on dataManager is success
            *
            * @private
            */
        dataManagerSuccess(e: {
                result: Object;
                count: number;
        }, accumulation: AccumulationChart, render?: boolean): void;
        /** @private To find points from result data */
        getPoints(result: Object, accumulation: AccumulationChart): void;
        generateClubPoint(): AccPoints;
        /**
            * Method render the series elements for accumulation chart
            * @private
            */
        renderSeries(accumulation: AccumulationChart, redraw?: boolean): void;
        /**
            * To find maximum bounds for smart legend placing
            *
            * @private
            */
        findMaxBounds(totalbound: Rect, bound: Rect): void;
        /**
            * To set empty point value for null points
            * @private
            */
        setAccEmptyPoint(point: AccPoints, i: number, data: Object, colors: string[]): void;
}
/**
    * method to get series from index
    * @private
    */
export function getSeriesFromIndex(index: number, visibleSeries: AccumulationSeries[]): AccumulationSeries;
/**
    * method to get point from index
    * @private
    */
export function pointByIndex(index: number, points: AccPoints[]): AccPoints;

/**
    * Interface for a class AccumulationAnnotationSettings
    */
export interface AccumulationAnnotationSettingsModel {
        /**
            * Content of the annotation, which accepts the id of the custom element.
            *
            * @default null
            */
        content?: string;
        /**
            * if set coordinateUnit as `Pixel` X specifies the axis value
            * else is specifies pixel or percentage of coordinate
            *
            * @default '0'
            */
        x?: string | Date | number;
        /**
            * if set coordinateUnit as `Pixel` Y specifies the axis value
            * else is specifies pixel or percentage of coordinate
            *
            * @default '0'
            */
        y?: string | number;
        /**
            * Specifies the coordinate units of the annotation. They are
            * * Pixel - Annotation renders based on x and y pixel value.
            * * Point - Annotation renders based on x and y axis value.
            *
            * @default 'Pixel'
            */
        coordinateUnits?: Units;
        /**
            * Specifies the regions of the annotation. They are
            * * Chart - Annotation renders based on chart coordinates.
            * * Series - Annotation renders based on series coordinates.
            *
            * @default 'Chart'
            */
        region?: Regions;
        /**
            * Specifies the position of the annotation. They are
            * * Top - Align the annotation element as top side.
            * * Bottom - Align the annotation element as bottom side.
            * * Middle - Align the annotation element as mid point.
            *
            * @default 'Middle'
            * @deprecated
            */
        verticalAlignment?: Position;
        /**
            * Specifies the alignment of the annotation. They are
            * * Near - Align the annotation element as top side.
            * * Far - Align the annotation element as bottom side.
            * * Center - Align the annotation element as mid point.
            *
            * @default 'Center'
            * @deprecated
            */
        horizontalAlignment?: Alignment;
        /**
            * Information about annotation for assistive technology.
            *
            * @default null
            */
        description?: string;
}
/**
    * Interface for a class AccumulationDataLabelSettings
    */
export interface AccumulationDataLabelSettingsModel {
        /**
            * If set true, data label for series gets render.
            *
            * @default false
            */
        visible?: boolean;
        /**
            * If set true, data label for zero values in series gets render.
            *
            * @default true
            */
        showZero?: boolean;
        /**
            * The DataSource field which contains the data label value.
            *
            * @default null
            */
        name?: string;
        /**
            * The background color of the data label, which accepts value in hex, rgba as a valid CSS color string.
            *
            * @default 'transparent'
            */
        fill?: string;
        /**
            * Specifies the position of data label. They are.
            * * Outside - Places label outside the point.
            * * Inside - Places label inside the point.
            *
            * @default 'Inside'
            */
        position?: AccumulationLabelPosition;
        /**
            * The roundedCornerX for the data label. It requires `border` values not to be null.
            *
            * @default 5
            */
        rx?: number;
        /**
            * The roundedCornerY for the data label. It requires `border` values not to be null.
            *
            * @default 5
            */
        ry?: number;
        /**
            * Specifies angle for data label.
            *
            * @default 0
            */
        angle?: number;
        /**
            * Enables rotation for data label.
            *
            * @default false
            */
        enableRotation?: boolean;
        /**
            * Option for customizing the border lines.
            */
        border?: BorderModel;
        /**
            * Option for customizing the data label text.
            */
        font?: FontModel;
        /**
            * Options for customize the connector line in series.
            * This property is applicable for Pie, Funnel and Pyramid series.
            * The default connector length for Pie series is '4%'. For other series, it is null.
            */
        connectorStyle?: ConnectorModel;
        /**
            * Custom template to format the data label content. Use ${point.x} and ${point.y} as a placeholder
            * text to display the corresponding data point.
            *
            * @default null
            */
        template?: string;
}
/**
    * Interface for a class PieCenter
    */
export interface PieCenterModel {
        /**
            * X value of the center.
            *
            * @default '50%'
            */
        x?: string;
        /**
            * Y value of the center.
            *
            * @default '50%'
            */
        y?: string;
}
/**
    * Interface for a class AccPoints
    */
export interface AccPointsModel {
}
/**
    * Interface for a class AccumulationSeries
    */
export interface AccumulationSeriesModel {
        /**
            * Specifies the dataSource for the series. It can be an array of JSON objects or an instance of DataManager.
            * ```html
            * <div id='Pie'></div>
            * ```
            * ```typescript
            * let dataManager: DataManager = new DataManager({
            *         url: 'http://mvc.syncfusion.com/Services/Northwnd.svc/Tasks/'
            * });
            * let query: Query = new Query().take(50).where('Estimate', 'greaterThan', 0, false);
            * let pie: AccumulationChart = new AccumulationChart({
            * ...
            *     series: [{
            *        dataSource: dataManager,
            *        xName: 'Id',
            *        yName: 'Estimate',
            *        query: query
            *    }],
            * ...
            * });
            * pie.appendTo('#Pie');
            * ```
            *
            * @default ''
            */
        dataSource?: Object | DataManager;
        /**
            * Specifies Query to select data from dataSource. This property is applicable only when the dataSource is `ej.DataManager`.
            *
            * @default null
            */
        query?: Query;
        /**
            * The DataSource field which contains the x value.
            *
            * @default ''
            */
        xName?: string;
        /**
            * Specifies the series name
            *
            * @default ''
            */
        name?: string;
        /**
            * The provided value will be considered as a Tooltip Mapping name
            *
            * @default ''
            */
        tooltipMappingName?: string;
        /**
            * The DataSource field which contains the y value.
            *
            * @default ''
            */
        yName?: string;
        /**
            * Specifies the series visibility.
            *
            * @default true
            */
        visible?: boolean;
        /**
            * Options for customizing the border of the series.
            */
        border?: BorderModel;
        /**
            * Options for customizing the animation for series.
            */
        animation?: AnimationModel;
        /**
            * The shape of the legend. Each series has its own legend shape. They are
            * * Circle - Renders a circle.
            * * Rectangle - Renders a rectangle.
            * * Triangle - Renders a triangle.
            * * Diamond - Renders a diamond.
            * * Cross - Renders a cross.
            * * HorizontalLine - Renders a horizontalLine.
            * * VerticalLine - Renders a verticalLine.
            * * Pentagon - Renders a pentagon.
            * * InvertedTriangle - Renders a invertedTriangle.
            * * SeriesType -Render a legend shape based on series type.
            * * Image -Render a image.     *
            * @default 'SeriesType'
            */
        legendShape?: LegendShape;
        /**
            * The URL for the Image that is to be displayed as a Legend icon.  It requires  `legendShape` value to be an `Image`.
            * @default ''
            */
        legendImageUrl?: string;
        /**
            * The DataSource field that contains the color value of point
            * It is applicable for series
            *
            * @default ''
            */
        pointColorMapping?: string;
        /**
            * Custom style for the selected series or points.
            *
            * @default null
            */
        selectionStyle?: string;
        /**
            * AccumulationSeries y values less than groupTo are combined into single slice named others
            *
            * @default null
            */
        groupTo?: string;
        /**
            * AccumulationSeries y values less than groupMode are combined into single slice named others
            *
            * @default Value
            */
        groupMode?: GroupModes;
        /**
            * The data label for the series.
            */
        dataLabel?: AccumulationDataLabelSettingsModel;
        /**
            * Palette for series points.
            *
            * @default []
            */
        palettes?: string[];
        /**
            * Start angle for a series.
            *
            * @default 0
            */
        startAngle?: number;
        /**
            * End angle for a series.
            *
            * @default null
            */
        endAngle?: number;
        /**
            * Radius of the pie series and its values in percentage.
            *
            * @default '80%'
            */
        radius?: string;
        /**
            * When the innerRadius value is greater than 0 percentage, a donut will appear in pie series. It takes values only in percentage.
            *
            * @default '0'
            */
        innerRadius?: string;
        /**
            * Specify the type of the series in accumulation chart.
            *
            * @default 'Pie'
            */
        type?: AccumulationType;
        /**
            * To enable or disable tooltip for a series.
            *
            * @default true
            */
        enableTooltip?: boolean;
        /**
            * If set true, series points will be exploded on mouse click or touch.
            *
            * @default false
            */
        explode?: boolean;
        /**
            * Distance of the point from the center, which takes values in both pixels and percentage.
            *
            * @default '30%'
            */
        explodeOffset?: string;
        /**
            * If set true, all the points in the series will get exploded on load.
            *
            * @default false
            */
        explodeAll?: boolean;
        /**
            * Index of the point, to be exploded on load.
            *
            * @default null
            *
            * @aspDefaultValueIgnore
            *
            * @blazorDefaultValue Double.NaN
            */
        explodeIndex?: number;
        /**
            * options to customize the empty points in series
            */
        emptyPointSettings?: EmptyPointSettingsModel;
        /**
            * Defines the distance between the segments of a funnel/pyramid series. The range will be from 0 to 1
            *
            * @default 0
            */
        gapRatio?: number;
        /**
            * Defines the width of the funnel/pyramid with respect to the chart area
            *
            * @default '80%'
            */
        width?: string;
        /**
            * Defines the height of the funnel/pyramid with respect to the chart area
            *
            * @default '80%'
            */
        height?: string;
        /**
            * Defines the width of the funnel neck with respect to the chart area
            *
            * @default '20%'
            */
        neckWidth?: string;
        /**
            * Defines the height of the funnel neck with respect to the chart area
            *
            * @default '20%'
            */
        neckHeight?: string;
        /**
            * Defines how the values have to be reflected, whether through height/surface of the segments
            *
            * @default 'Linear'
            */
        pyramidMode?: PyramidModes;
        /**
            * The opacity of the series.
            *
            * @default 1.
            */
        opacity?: number;
}

/**
    * Interface for Accumulation chart
    */
/**
    * Accumulation Chart SeriesRender event arguments.
    */
export interface IAccSeriesRenderEventArgs {
        /** Defines the current series */
        series: AccumulationSeries;
        /** Defines the current data object */
        data: Object;
        /** Defines the current series name */
        name: string;
}
/**
    * Accumulation Chart TextRender event arguments.
    */
export interface IAccTextRenderEventArgs extends IChartEventArgs {
        /** Defines the current series */
        series: AccumulationSeriesModel;
        /** Defines the current point */
        point: AccPoints;
        /** Defines the current text */
        text: string;
        /** Defines the current fill color */
        color: string;
        /** Defines the current label border */
        border: BorderModel;
        /** Defines the current text template */
        template: string;
        /** Defines the current font */
        font: FontModel;
}
/**
    * Accumulation Chart TooltipRender event arguments.
    */
export interface IAccTooltipRenderEventArgs extends IChartEventArgs {
        /** Defines the current tooltip content */
        content?: string | HTMLElement;
        /** Defines the current tooltip text style */
        textStyle?: FontModel;
        /** Defines the current tooltip series */
        series: AccumulationSeries;
        /** Defines the current tooltip point */
        point: AccPoints;
        /** Defines the current tooltip text */
        text: string;
}
/**
    * Accumulation Chart AnimationComplete event arguments.
    */
export interface IAccAnimationCompleteEventArgs extends IChartEventArgs {
        /** Defines the current animation series */
        series: AccumulationSeries;
        /** Defines the accumulation chart instance */
        accumulation: AccumulationChart;
        /** Defines the accumulation chart instance */
        chart: AccumulationChart;
}
/**
    * Accumulation Chart Before Resize event arguments.
    */
export interface IAccBeforeResizeEventArgs {
        /** Defines the name of the Event */
        name: string;
        /** It is  used to cancel the resized event */
        cancelResizedEvent: boolean;
}
/**
    * Accumulation Chart Resize event arguments.
    */
export interface IAccResizeEventArgs {
        /** Defines the name of the Event */
        name: string;
        /** Defines the previous size of the accumulation chart */
        previousSize: Size;
        /** Defines the current size of the accumulation chart */
        currentSize: Size;
        /** Defines the accumulation chart instance */
        accumulation: AccumulationChart;
        /** Defines the accumulation chart instance */
        chart: AccumulationChart;
}
/**
    * Accumulation Chart PointRender event arguments.
    */
export interface IAccPointRenderEventArgs extends IChartEventArgs {
        /** Defines the current series of the point */
        series: AccumulationSeries;
        /** Defines the current point */
        point: AccPoints;
        /** Defines the current point fill color */
        fill: string;
        /** Defines the current point border color */
        border: BorderModel;
        /** Defines the current point height */
        height?: number;
        /** Defines the current point width */
        width?: number;
}
/**
    * Accumulation Chart Load or Loaded event arguments.
    */
export interface IAccLoadedEventArgs extends IChartEventArgs {
        /** Defines the accumulation chart instance */
        accumulation: AccumulationChart;
        /** Defines the accumulation chart instance */
        chart: AccumulationChart;
        /** Theme for the accumulation Chart */
        theme?: AccumulationTheme;
}
export interface IAccLegendRenderEventArgs extends IChartEventArgs {
        /** Defines the current legend shape */
        shape: LegendShape;
        /** Defines the current legend fill color */
        fill: string;
        /** Defines the current legend text */
        text: string;
}
export interface IAccumulationChartTemplate {
        /** accumulation point x value */
        x?: Object;
        /** accumulation point y value */
        y?: object;
        /** accumulation point color */
        label?: string;
        /** accumulation point percentage value */
        percentage?: number;
}

/**
    * AccumulationChart series file
    */
/**
    * PieSeries module used to render `Pie` Series.
    */
export class PieSeries extends PieBase {
        /**
            * To get path option, degree, symbolLocation from the point.
            *
            * @private
            */
        renderPoint(point: AccPoints, series: AccumulationSeries, chart: AccumulationChart, option: PathOption, seriesGroup: Element, redraw?: boolean): void;
        findSeries(e: PointerEvent | TouchEvent): void;
        toggleInnerPoint(event: PointerEvent | TouchEvent, radius: number, innerRadius: number): void;
        removeBorder(borderElement: Element, duration: number): void;
        /**
            * To animate the pie series.
            *
            * @private
            */
        animateSeries(accumulation: AccumulationChart, option: AnimationModel, series: AccumulationSeries, slice: Element): void;
        /**
            * To get the module name of the Pie series.
            */
        protected getModuleName(): string;
        /**
            * To destroy the pie series.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * Defines the behavior of a funnel series
    */
/**
    * FunnelSeries module used to render `Funnel` Series.
    */
export class FunnelSeries extends TriangularBase {
        /**
            * Renders a funnel segment
            *
            * @private
            * @returns {void} Render point.
            */
        renderPoint(point: AccPoints, series: AccumulationSeries, chart: AccumulationChart, options: PathOption, seriesGroup: Element, redraw: boolean): void;
        /**
            * To get the module name of the funnel series.
            *
            * @returns {string} Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the funnel series.
            *
            * @returns {void} Destroy method.
            * @private
            */
        destroy(): void;
}

/**
    * Defines the behavior of a pyramid series
    */
/**
    * PyramidSeries module used to render `Pyramid` Series.
    */
export class PyramidSeries extends TriangularBase {
        /**
            * Initializes the size of the pyramid segments
            *
            * @private
            */
        protected initializeSizeRatio(points: AccPoints[], series: AccumulationSeries): void;
        /**
            * To get the module name of the Pyramid series.
            */
        protected getModuleName(): string;
        /**
            * To destroy the pyramid series
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * AccumulationLegend module used to render `Legend` for Accumulation chart.
    */
export class AccumulationLegend extends BaseLegend {
        titleRect: Rect;
        /**
            * Constructor for Accumulation Legend.
            *
            * @param {AccumulationChart} chart Get a chart as a parameter.
            */
        constructor(chart: AccumulationChart);
        /**
            * Get the legend options.
            *
            * @returns {void} Legend options.
            * @private
            */
        getLegendOptions(chart: AccumulationChart, series: AccumulationSeries[]): void;
        /**
            * To find legend bounds for accumulation chart.
            *
            * @private
            */
        getLegendBounds(availableSize: Size, legendBounds: Rect, legend: LegendSettingsModel): void;
        /**
            * To find html entities value for legend
            *
            * @returns {string} converts the entities to normal string.
            */
        convertHtmlEntities(legendText: string): string;
        /**
            * To find legend rendering locations from legend options.
            *
            * @private
            */
        getRenderPoint(legendOption: LegendOptions, start: ChartLocation, textPadding: number, prevLegend: LegendOptions, rect: Rect, count: number, firstLegend: number): void;
        /**
            * finding the smart legend place according to positions.
            *
            * @returns {void}
            * @private
            */
        getSmartLegendLocation(labelBound: Rect, legendBound: Rect, margin: MarginModel): void;
        /**
            * To show or hide the legend on clicking the legend.
            *
            * @returns {void}
            */
        click(event: Event): void;
        /**
            * Get module name
            *
            * @returns {string} Return module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the Legend.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * AccumulationDataLabel module used to render `dataLabel`.
    */
export class AccumulationDataLabel extends AccumulationBase {
        /** @private */
        titleRect: Rect;
        /** @private */
        areaRect: Rect;
        /** @private */
        clearTooltip: number;
        marginValue: number;
        constructor(accumulation: AccumulationChart);
        /**
            * Method to get datalabel text location.
            *
            * @private
            */
        getDataLabelPosition(point: AccPoints, dataLabel: AccumulationDataLabelSettingsModel, textSize: Size, points: AccPoints[]): void;
        /**
            * To find trimmed datalabel tooltip needed.
            *
            * @returns {void}
            * @private
            */
        move(e: Event, x: number, y: number, isTouch?: boolean): void;
        /**
            * To find area rect based on margin, available size.
            *
            * @private
            */
        findAreaRect(): void;
        /**
            * To render the data labels from series points.
            */
        renderDataLabel(point: AccPoints, dataLabel: AccumulationDataLabelSettingsModel, parent: Element, points: AccPoints[], series: number, templateElement?: HTMLElement, redraw?: boolean): void;
        /**
            * To calculate label size
            */
        calculateLabelSize(isTemplate: boolean, childElement: HTMLElement, point: AccPoints, points: AccPoints[], argsData: IAccTextRenderEventArgs, datalabelGroup: Element, id: string, dataLabel: AccumulationDataLabelSettingsModel, redraw?: boolean, clientRect?: ClientRect, isReactCallback?: boolean): void;
        /**
            * @private
            */
        drawDataLabels(series: AccumulationSeries, dataLabel: AccumulationDataLabelSettingsModel, parent: HTMLElement, templateElement?: HTMLElement, redraw?: boolean): void;
        /**
            * Animates the data label template.
            *
            * @returns {void}
            * @private
            */
        doTemplateAnimation(accumulation: AccumulationChart, element: Element): void;
        /**
            * To get the dataLabel module name
            *
            * @returns {string} module name
            */
        protected getModuleName(): string;
        /**
            * To destroy the data label.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `AccumulationTooltip` module is used to render tooltip for accumulation chart.
    */
export class AccumulationTooltip extends BaseTooltip {
        accumulation: AccumulationChart;
        constructor(accumulation: AccumulationChart);
        /**
            * Renders the tooltip.
            * @param  {PointerEvent} event - Mouse move event.
            * @return {void}
            */
        tooltip(event: PointerEvent | TouchEvent): void;
        /**
            * Get module name
            */
        protected getModuleName(): string;
        /**
            * To destroy the Tooltip.
            * @return {void}
            * @private
            */
        destroy(chart: AccumulationChart): void;
}

/**
    * `AccumulationSelection` module handles the selection for accumulation chart.
    */
export class AccumulationSelection extends BaseSelection {
        /** @private */
        rectPoints: Rect;
        selectedDataIndexes: Indexes[];
        constructor(accumulation: AccumulationChart);
        /**
            * Invoke selection for rendered chart.
            *
            * @param {AccumulationChart} accumulation Define the chart to invoke the selection.
            * @returns {void}
            */
        invokeSelection(accumulation: AccumulationChart): void;
        /**
            * To calculate selected elements on mouse click or touch
            *
            * @private
            */
        calculateSelectedElements(accumulation: AccumulationChart, event: Event): void;
        /**
            * To redraw the selection process on accumulation chart refresh.
            *
            * @private
            */
        redrawSelection(accumulation: AccumulationChart): void;
        /**
            * To perform the selection for legend elements.
            *
            * @private
            */
        legendSelection(accumulation: AccumulationChart, series: number, pointIndex: number): void;
        /**
            * Get module name.
            */
        getModuleName(): string;
        /**
            * To destroy the selection.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * Defines the Accumulation Chart series type.
    */
export type AccumulationType = 
/** Accumulation chart Pie series type */
'Pie' | 
/** Accumulation chart Funnel series type */
'Funnel' | 
/** Accumulation chart Pyramid series type */
'Pyramid';
/**
    * Defines the AccumulationLabelPosition. They are
    * * Inside - Define the data label position for the accumulation series Inside.
    * * Outside - Define the data label position for the accumulation series Outside.
    * *
    */
export type AccumulationLabelPosition = 
/** Define the data label position for the accumulation series Inside */
'Inside' | 
/** Define the data label position for the accumulation series Outside */
'Outside';
/**
    * Defines the ConnectorType. They are
    * * Line - Accumulation series Connector line type as Straight line.
    * * Curve - Accumulation series Connector line type as Curved line.
    * *
    */
export type ConnectorType = 
/** Accumulation series Connector line type as Straight line */
'Line' | 
/** Accumulation series Connector line type as Curved line */
'Curve';
/**
    * Defines the SelectionMode, They are.
    * * none - Disable the selection.
    * * point - To select a point.
    */
export type AccumulationSelectionMode = 
/** Disable the selection. */
'None' | 
/** To select a point. */
'Point';
/**
    * Defines Theme of the accumulation chart. They are
    * * Material - Render a accumulation chart with Material theme.
    * * Fabric - Render a accumulation chart with fabric theme.
    */
export type AccumulationTheme = 
/**  Render a accumulation chart with Material theme. */
'Material' | 
/**  Render a accumulation chart with Fabric theme. */
'Fabric' | 
/**  Render a accumulation chart with Bootstrap theme. */
'Bootstrap' | 
/**  Render a accumulation chart with Highcontrast Light theme. */
'HighContrastLight' | 
/**  Render a accumulation chart with MaterialDark theme. */
'MaterialDark' | 
/**  Render a accumulation chart with FabricDark theme. */
'FabricDark' | 
/**  Render a accumulation chart with HighContrastDark theme. */
'HighContrast' | 
/**  Render a accumulation chart with BootstrapDark theme. */
'BootstrapDark' | 
/**  Render a accumulation chart with BootstrapDark theme. */
'Bootstrap4' | 
/**  Render a accumulation chart with Tailwind theme. */
'Tailwind' | 
/**  Render a accumulation chart with TailwindDark theme. */
'TailwindDark' | 
/**  Render a accumulation chart with Bootstrap5 theme. */
'Bootstrap5' | 
/**  Render a accumulation chart with Bootstrap5Dark theme. */
'Bootstrap5Dark';
/**
    * Defines the empty point mode of the chart.
    * * Zero - Used to display empty points as zero.
    * * Drop - Used to ignore the empty point while rendering.
    * * Average - Used to display empty points as previous and next point average.
    */
export type AccEmptyPointMode = 
/** Used to display empty points as zero  */
'Zero' | 
/** Used to ignore the empty point while rendering  */
'Drop' | 
/** Used to display empty points as previous and next point average  */
'Average' | 
/** Used to ignore the empty point while rendering   */
'Gap';
/**
    * Defines the mode of the pyramid
    * * Linear - Height of the pyramid segments reflects the values
    * * Surface - Surface/Area of the  pyramid segments reflects the values
    */
export type PyramidModes = 
/** Height of the pyramid segments reflects the values */
'Linear' | 
/** Surface/Area of the  pyramid segments reflects the values */
'Surface';
/**
    * Defines the mode of the group mode
    * * Point - When choosing points, the selected points get grouped.
    * * Value - When choosing values, the points which less then values get grouped.
    */
export type GroupModes = 
/** When choosing points, the selected points get grouped */
'Point' | 
/** When choosing values, the points which less then values get grouped. */
'Value';

/**
    * AccumulationChart annotation properties
    */
/**
    * `AccumulationAnnotation` module handles the annotation for accumulation chart.
    */
export class AccumulationAnnotation extends AnnotationBase {
        /**
            * Constructor for accumulation chart annotation.
            *
            * @private
            */
        constructor(control: AccumulationChart);
        /**
            * Method to render the annotation for accumulation chart
            *
            * @param {Element} element Annotation element.
            */
        renderAnnotations(element: Element): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the annotation.
            *
            * @returns {void}
            *
            * @private
            */
        destroy(): void;
}

/**
    * Stock Chart
    * @public
    */
export class StockChart extends Component<HTMLElement> implements INotifyPropertyChanged {
        /**
            * `legendModule` is used to manipulate and add legend to the Stockchart.
            */
        stockLegendModule: StockLegend;
        /**
            * The width of the stockChart as a string accepts input as both like '100px' or '100%'.
            * If specified as '100%, stockChart renders to the full width of its parent element.
            *
            * @default null
            */
        width: string;
        /**
            * The height of the stockChart as a string accepts input both as '100px' or '100%'.
            * If specified as '100%, stockChart renders to the full height of its parent element.
            *
            * @default null
            */
        height: string;
        /**
            * Specifies the DataSource for the stockChart. It can be an array of JSON objects or an instance of DataManager.
            * ```html
            * <div id='financial'></div>
            * ```
            * ```typescript
            * let dataManager: DataManager = new DataManager({
            *         url: 'http://mvc.syncfusion.com/Services/Northwnd.svc/Tasks/'
            * });
            * let query: Query = new Query().take(50).where('Estimate', 'greaterThan', 0, false);
            * let financial: stockChart = new stockChart({
            * ...
            *  dataSource:dataManager,
            *   series: [{
            *        xName: 'Id',
            *        yName: 'Estimate',
            *        query: query
            *    }],
            * ...
            * });
            * financial.appendTo('#financial');
            * ```
            *
            * @default ''
            */
        dataSource: Object | DataManager;
        /**
            *  Options to customize left, right, top and bottom margins of the stockChart.
            */
        margin: StockMarginModel;
        /**
            * Options for customizing the color and width of the stockChart border.
            */
        border: StockChartBorderModel;
        /**
            * The background color of the stockChart that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        background: string;
        /**
            * Specifies the theme for the stockChart.
            *
            * @default 'Material'
            */
        theme: ChartTheme;
        /**
            * Options to configure the horizontal axis.
            */
        primaryXAxis: StockChartAxisModel;
        /**
            * Options for configuring the border and background of the stockChart area.
            */
        chartArea: StockChartAreaModel;
        /**
            * Options to configure the vertical axis.
            *
            * @complex {opposedPosition=true, labelPosition=AxisPosition.Outside}
            */
        primaryYAxis: StockChartAxisModel;
        /**
            * Options to split stockChart into multiple plotting areas horizontally.
            * Each object in the collection represents a plotting area in the stockChart.
            */
        rows: StockChartRowModel[];
        /**
            * Secondary axis collection for the stockChart.
            */
        axes: StockChartAxisModel[];
        /**
            * The configuration for series in the stockChart.
            */
        series: StockSeriesModel[];
        /**
            * The configuration for stock events in the stockChart.
            */
        stockEvents: StockEventsSettingsModel[];
        /**
            * It specifies whether the stockChart should be render in transposed manner or not.
            *
            * @default false
            */
        isTransposed: boolean;
        /**
            * Title of the chart
            *
            * @default ''
            */
        title: string;
        /**
            * Options for customizing the title of the Chart.
            */
        titleStyle: StockChartFontModel;
        /**
            * Defines the collection of technical indicators, that are used in financial markets
            */
        indicators: StockChartIndicatorModel[];
        /**
            * Options for customizing the tooltip of the chart.
            */
        tooltip: TooltipSettingsModel;
        /**
            * Options for customizing the crosshair of the chart.
            */
        crosshair: CrosshairSettingsModel;
        /**
            * Options for customizing the legend of the stockChart.
            */
        legendSettings: StockChartLegendSettingsModel;
        /**
            * Options to enable the zooming feature in the chart.
            */
        zoomSettings: ZoomSettingsModel;
        /**
            * It specifies whether the periodSelector to be rendered in financial chart
            *
            * @default true
            */
        enablePeriodSelector: boolean;
        /**
            * Custom Range
            *
            * @default true
            */
        enableCustomRange: boolean;
        /**
            * If set true, enables the animation in chart.
            *
            * @default false
            */
        isSelect: boolean;
        /**
            * It specifies whether the range navigator to be rendered in financial chart
            *
            * @default true
            */
        enableSelector: boolean;
        /**
            * To configure period selector options.
            */
        periods: PeriodsModel[];
        /**
            * The configuration for annotation in chart.
            */
        annotations: StockChartAnnotationSettingsModel[];
        /**
            * Triggers before render the selector
            *
            * @event selectorRender
            * @deprecated
            */
        selectorRender: EmitType<IRangeSelectorRenderEventArgs>;
        /**
            * Triggers on hovering the stock chart.
            *
            * @event stockChartMouseMove
            * @blazorProperty 'OnStockChartMouseMove'
            */
        stockChartMouseMove: EmitType<IMouseEventArgs>;
        /**
            * Triggers when cursor leaves the chart.
            *
            * @event stockChartMouseLeave
            * @blazorProperty 'OnStockChartMouseLeave'
            */
        stockChartMouseLeave: EmitType<IMouseEventArgs>;
        /**
            * Triggers on mouse down.
            *
            * @event stockChartMouseDown
            * @blazorProperty 'OnStockChartMouseDown'
            */
        stockChartMouseDown: EmitType<IMouseEventArgs>;
        /**
            * Triggers on mouse up.
            *
            * @event stockChartMouseUp
            * @blazorProperty 'OnStockChartMouseUp'
            */
        stockChartMouseUp: EmitType<IMouseEventArgs>;
        /**
            * Triggers on clicking the stock chart.
            *
            * @event stockChartMouseClick
            * @blazorProperty 'OnStockChartMouseClick'
            */
        stockChartMouseClick: EmitType<IMouseEventArgs>;
        /**
            * Triggers on point click.
            *
            * @event pointClick
            * @blazorProperty 'OnPointClick'
            */
        pointClick: EmitType<IPointEventArgs>;
        /**
            * Triggers on point move.
            *
            * @event pointMove
            * @blazorProperty 'PointMoved'
            */
        pointMove: EmitType<IPointEventArgs>;
        /**
            * Triggers after the zoom selection is completed.
            *
            * @event onZooming
            */
        onZooming: EmitType<IZoomingEventArgs>;
        /**
            * Triggers before the legend is rendered.
            *
            * @event legendRender
            * @deprecated
            */
        legendRender: EmitType<IStockLegendRenderEventArgs>;
        /**
            * Triggers after click on legend
            *
            * @event legendClick
            */
        legendClick: EmitType<IStockLegendClickEventArgs>;
        /**
            * Specifies whether series or data point has to be selected. They are,
            * * none: Disables the selection.
            * * series: selects a series.
            * * point: selects a point.
            * * cluster: selects a cluster of point
            * * dragXY: selects points by dragging with respect to both horizontal and vertical axes
            * * dragX: selects points by dragging with respect to horizontal axis.
            * * dragY: selects points by dragging with respect to vertical axis.
            *
            * @default None
            */
        selectionMode: SelectionMode;
        /**
            * If set true, enables the multi selection in chart. It requires `selectionMode` to be `Point` | `Series` | or `Cluster`.
            *
            * @default false
            */
        isMultiSelect: boolean;
        /**
            * Triggers before the range navigator rendering
            *
            * @event load
            */
        load: EmitType<IStockChartEventArgs>;
        /**
            * Triggers after the range navigator rendering
            *
            * @event loaded
            * @blazorProperty 'Loaded'
            */
        loaded: EmitType<IStockChartEventArgs>;
        /**
            * Triggers if the range is changed
            *
            * @event rangeChange
            * @blazorProperty 'RangeChange'
            */
        rangeChange: EmitType<IRangeChangeEventArgs>;
        /**
            * Triggers before each axis label is rendered.
            *
            * @event axisLabelRender
            * @deprecated
            */
        axisLabelRender: EmitType<IAxisLabelRenderEventArgs>;
        /**
            * Triggers before the tooltip for series is rendered.
            *
            * @event tooltipRender
            * @deprecated
            */
        tooltipRender: EmitType<ITooltipRenderEventArgs>;
        /**
            * Triggers before the series is rendered.
            *
            * @event seriesRender
            * @deprecated
            */
        seriesRender: EmitType<ISeriesRenderEventArgs>;
        /**
            * Triggers before the series is rendered.
            *
            * @event stockEventRender
            * @deprecated
            */
        stockEventRender: EmitType<IStockEventRenderArgs>;
        /**
            * Specifies the point indexes to be selected while loading a chart.
            * It requires `selectionMode` to be `Point` | `Series` | or `Cluster`.
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let chart: Chart = new Chart({
            * ...
            *   selectionMode: 'Point',
            *   selectedDataIndexes: [ { series: 0, point: 1},
            *                          { series: 2, point: 3} ],
            * ...
            * });
            * chart.appendTo('#Chart');
            * ```
            *
            * @default []
            */
        selectedDataIndexes: StockChartIndexesModel[];
        /**
            * It specifies the types of series in financial chart.
            */
        seriesType: ChartSeriesType[];
        /**
            * It specifies the types of indicators in financial chart.
            */
        indicatorType: TechnicalIndicators[];
        /**
            * It specifies the types of Export types in financial chart.
            */
        exportType: ExportType[];
        /**
            * It specifies the types of trendline types in financial chart.
            */
        trendlineType: TrendlineTypes[];
        /**
            * Gets the current visible series of the Chart.
            *
            * @hidden
            */
        visibleSeries: Series[];
        /** @private */
        startValue: number;
        /** @private */
        isSingleAxis: boolean;
        /** @private */
        endValue: number;
        /** @private */
        seriesXMax: number;
        /** @private */
        seriesXMin: number;
        /** @private  */
        currentEnd: number;
        /** Overall SVG */
        mainObject: Element;
        /** @private */
        selectorObject: Element;
        /** @private */
        chartObject: Element;
        /** @private */
        svgObject: Element;
        /** @private */
        isTouch: boolean;
        /** @private */
        renderer: SvgRenderer;
        /** @private */
        animateSeries: boolean;
        /** @private */
        availableSize: Size;
        /** @private */
        titleSize: Size;
        /** @private */
        chartSize: Size;
        /** @private */
        intl: Internationalization;
        /** @private */
        isDoubleTap: boolean;
        /** @private */
        isChartDrag: boolean;
        resizeTo: number;
        /** @private */
        disableTrackTooltip: boolean;
        /** @private */
        startMove: boolean;
        /** @private */
        yAxisElements: Element;
        /** @private */
        themeStyle: IThemeStyle;
        /** @private */
        scrollElement: Element;
        tempSeriesType: ChartSeriesType[];
        /** @private */
        chart: Chart;
        /** @private */
        rangeNavigator: RangeNavigator;
        /** @private */
        periodSelector: PeriodSelector;
        /** @private */
        cartesianChart: CartesianChart;
        /** @private */
        rangeSelector: RangeSelector;
        /** @private */
        toolbarSelector: ToolBarSelector;
        /** @private */
        stockEvent: StockEvents;
        /** private */
        zoomChange: boolean;
        /** @private */
        mouseDownX: number;
        /** @private */
        mouseDownY: number;
        /** @private */
        previousMouseMoveX: number;
        /** @private */
        previousMouseMoveY: number;
        /** @private */
        mouseDownXPoint: number;
        /** @private */
        mouseUpXPoint: number;
        /** @private */
        allowPan: boolean;
        /** @private  */
        onPanning: boolean;
        /** @private  */
        referenceXAxis: Axis;
        /** @private */
        mouseX: number;
        /** @private */
        mouseY: number;
        /** @private */
        indicatorElements: Element;
        /** @private */
        trendlinetriggered: boolean;
        /** @private */
        periodSelectorHeight: number;
        /** @private */
        toolbarHeight: number;
        /** @private */
        stockChartTheme: IThemeStyle;
        /** @private */
        initialRender: boolean;
        /** @private */
        rangeFound: boolean;
        /** @private */
        tempPeriods: PeriodsModel[];
        /** @private */
        legend: StockLegend;
        /** @private */
        visibleSeriesCount: number;
        /** @private */
        redraw: boolean;
        /** @private */
        initialClipRect: Rect;
        /** @private */
        tempAvailableSize: Size;
        /**
            * Constructor for creating the widget
            *
            * @hidden
            */
        constructor(options?: StockChartModel, element?: string | HTMLElement);
        /**
            * Called internally if any of the property value changed.
            *
            * @private
            */
        onPropertyChanged(newProp: StockChartModel, oldProp: StockChartModel): void;
        /**
            * To change the range for chart
            */
        rangeChanged(updatedStart: number, updatedEnd: number): void;
        /**
            * Pre render for financial Chart
            */
        protected preRender(): void;
        /**
            * To Initialize the control rendering.
            */
        protected render(): void;
        /**
            * DataManager Success
            */
        stockChartDataManagerSuccess(): void;
        /**
            * To provide the array of modules needed for control rendering
            *
            * @returns {ModuleDeclaration[]} required modules
            * @private
            */
        requiredModules(): ModuleDeclaration[];
        findCurrentData(totalData: Object, xName: string): Object;
        /**
            * Render period selector
            */
        renderPeriodSelector(): void;
        /**
            * Get component name
            */
        getModuleName(): string;
        /**
            * Get the properties to be maintained in the persisted state.
            *
            * @private
            */
        getPersistData(): string;
        /**
            * To Remove the SVG.
            *
            * @returns {void}
            * @private
            */
        removeSvg(): void;
        /**
            * Module Injection for components
            */
        chartModuleInjection(): void;
        /**
            * Handles the chart resize.
            *
            * @returns {boolean} false
            * @private
            */
        stockChartResize(): boolean;
        /**
            * Handles the mouse down on chart.
            *
            * @returns {boolean} false
            * @private
            */
        stockChartOnMouseDown(e: PointerEvent): boolean;
        /**
            * Handles the mouse up.
            *
            * @returns {boolean} false
            * @private
            */
        stockChartMouseEnd(e: PointerEvent): boolean;
        /**
            * Handles the mouse up.
            *
            * @returns {boolean} false
            * @private
            */
        stockChartOnMouseUp(e: PointerEvent | TouchEvent): boolean;
        /**
            * Handles the mouse move.
            *
            * @returns {boolean} false
            * @private
            */
        stockChartOnMouseMove(e: PointerEvent): boolean;
        /**
            * Handles the mouse move on chart.
            *
            * @returns {boolean} false
            * @private
            */
        chartOnMouseMove(e: PointerEvent | TouchEvent): boolean;
        /**
            * Handles the mouse click on chart.
            *
            * @returns {boolean} false
            * @private
            */
        stockChartOnMouseClick(e: PointerEvent | TouchEvent): boolean;
        /**
            * Handles the mouse leave.
            *
            * @returns {boolean} false
            * @private
            */
        stockChartOnMouseLeave(e: PointerEvent): boolean;
        /**
            * Handles the mouse leave on chart.
            *
            * @returns {boolean} false
            * @private
            */
        stockChartOnMouseLeaveEvent(e: PointerEvent | TouchEvent): boolean;
        /**
            * Destroy method
            */
        destroy(): void;
        /**
            * @private
            */
        calculateLegendBounds(): void;
        /**
            * To render the legend
            * @private
            */
        renderLegend(): void;
        /**
            * @private
            */
        calculateStockEvents(): void;
}

/**
    * Interface for a class StockChart
    */
export interface StockChartModel extends ComponentModel {
        /**
            * The width of the stockChart as a string accepts input as both like '100px' or '100%'.
            * If specified as '100%, stockChart renders to the full width of its parent element.
            *
            * @default null
            */
        width?: string;
        /**
            * The height of the stockChart as a string accepts input both as '100px' or '100%'.
            * If specified as '100%, stockChart renders to the full height of its parent element.
            *
            * @default null
            */
        height?: string;
        /**
            * Specifies the DataSource for the stockChart. It can be an array of JSON objects or an instance of DataManager.
            * ```html
            * <div id='financial'></div>
            * ```
            * ```typescript
            * let dataManager: DataManager = new DataManager({
            *         url: 'http://mvc.syncfusion.com/Services/Northwnd.svc/Tasks/'
            * });
            * let query: Query = new Query().take(50).where('Estimate', 'greaterThan', 0, false);
            * let financial: stockChart = new stockChart({
            * ...
            *  dataSource:dataManager,
            *   series: [{
            *        xName: 'Id',
            *        yName: 'Estimate',
            *        query: query
            *    }],
            * ...
            * });
            * financial.appendTo('#financial');
            * ```
            *
            * @default ''
            */
        dataSource?: Object | DataManager;
        /**
            *  Options to customize left, right, top and bottom margins of the stockChart.
            */
        margin?: StockMarginModel;
        /**
            * Options for customizing the color and width of the stockChart border.
            */
        border?: StockChartBorderModel;
        /**
            * The background color of the stockChart that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        background?: string;
        /**
            * Specifies the theme for the stockChart.
            *
            * @default 'Material'
            */
        theme?: ChartTheme;
        /**
            * Options to configure the horizontal axis.
            */
        primaryXAxis?: StockChartAxisModel;
        /**
            * Options for configuring the border and background of the stockChart area.
            */
        chartArea?: StockChartAreaModel;
        /**
            * Options to configure the vertical axis.
            *
            * @complex {opposedPosition=true, labelPosition=AxisPosition.Outside}
            */
        primaryYAxis?: StockChartAxisModel;
        /**
            * Options to split stockChart into multiple plotting areas horizontally.
            * Each object in the collection represents a plotting area in the stockChart.
            */
        rows?: StockChartRowModel[];
        /**
            * Secondary axis collection for the stockChart.
            */
        axes?: StockChartAxisModel[];
        /**
            * The configuration for series in the stockChart.
            */
        series?: StockSeriesModel[];
        /**
            * The configuration for stock events in the stockChart.
            */
        stockEvents?: StockEventsSettingsModel[];
        /**
            * It specifies whether the stockChart should be render in transposed manner or not.
            *
            * @default false
            */
        isTransposed?: boolean;
        /**
            * Title of the chart
            *
            * @default ''
            */
        title?: string;
        /**
            * Options for customizing the title of the Chart.
            */
        titleStyle?: StockChartFontModel;
        /**
            * Defines the collection of technical indicators, that are used in financial markets
            */
        indicators?: StockChartIndicatorModel[];
        /**
            * Options for customizing the tooltip of the chart.
            */
        tooltip?: TooltipSettingsModel;
        /**
            * Options for customizing the crosshair of the chart.
            */
        crosshair?: CrosshairSettingsModel;
        /**
            * Options for customizing the legend of the stockChart.
            */
        legendSettings?: StockChartLegendSettingsModel;
        /**
            * Options to enable the zooming feature in the chart.
            */
        zoomSettings?: ZoomSettingsModel;
        /**
            * It specifies whether the periodSelector to be rendered in financial chart
            *
            * @default true
            */
        enablePeriodSelector?: boolean;
        /**
            * Custom Range
            *
            * @default true
            */
        enableCustomRange?: boolean;
        /**
            * If set true, enables the animation in chart.
            *
            * @default false
            */
        isSelect?: boolean;
        /**
            * It specifies whether the range navigator to be rendered in financial chart
            *
            * @default true
            */
        enableSelector?: boolean;
        /**
            * To configure period selector options.
            */
        periods?: PeriodsModel[];
        /**
            * The configuration for annotation in chart.
            */
        annotations?: StockChartAnnotationSettingsModel[];
        /**
            * Triggers before render the selector
            *
            * @event selectorRender
            * @deprecated
            */
        selectorRender?: EmitType<IRangeSelectorRenderEventArgs>;
        /**
            * Triggers on hovering the stock chart.
            *
            * @event stockChartMouseMove
            * @blazorProperty 'OnStockChartMouseMove'
            */
        stockChartMouseMove?: EmitType<IMouseEventArgs>;
        /**
            * Triggers when cursor leaves the chart.
            *
            * @event stockChartMouseLeave
            * @blazorProperty 'OnStockChartMouseLeave'
            */
        stockChartMouseLeave?: EmitType<IMouseEventArgs>;
        /**
            * Triggers on mouse down.
            *
            * @event stockChartMouseDown
            * @blazorProperty 'OnStockChartMouseDown'
            */
        stockChartMouseDown?: EmitType<IMouseEventArgs>;
        /**
            * Triggers on mouse up.
            *
            * @event stockChartMouseUp
            * @blazorProperty 'OnStockChartMouseUp'
            */
        stockChartMouseUp?: EmitType<IMouseEventArgs>;
        /**
            * Triggers on clicking the stock chart.
            *
            * @event stockChartMouseClick
            * @blazorProperty 'OnStockChartMouseClick'
            */
        stockChartMouseClick?: EmitType<IMouseEventArgs>;
        /**
            * Triggers on point click.
            *
            * @event pointClick
            * @blazorProperty 'OnPointClick'
            */
        pointClick?: EmitType<IPointEventArgs>;
        /**
            * Triggers on point move.
            *
            * @event pointMove
            * @blazorProperty 'PointMoved'
            */
        pointMove?: EmitType<IPointEventArgs>;
        /**
            * Triggers after the zoom selection is completed.
            *
            * @event onZooming
            */
        onZooming?: EmitType<IZoomingEventArgs>;
        /**
            * Triggers before the legend is rendered.
            *
            * @event legendRender
            * @deprecated
            */
        legendRender?: EmitType<IStockLegendRenderEventArgs>;
        /**
            * Triggers after click on legend
            *
            * @event legendClick
            */
        legendClick?: EmitType<IStockLegendClickEventArgs>;
        /**
            * Specifies whether series or data point has to be selected. They are,
            * * none: Disables the selection.
            * * series: selects a series.
            * * point: selects a point.
            * * cluster: selects a cluster of point
            * * dragXY: selects points by dragging with respect to both horizontal and vertical axes
            * * dragX: selects points by dragging with respect to horizontal axis.
            * * dragY: selects points by dragging with respect to vertical axis.
            *
            * @default None
            */
        selectionMode?: SelectionMode;
        /**
            * If set true, enables the multi selection in chart. It requires `selectionMode` to be `Point` | `Series` | or `Cluster`.
            *
            * @default false
            */
        isMultiSelect?: boolean;
        /**
            * Triggers before the range navigator rendering
            *
            * @event load
            */
        load?: EmitType<IStockChartEventArgs>;
        /**
            * Triggers after the range navigator rendering
            *
            * @event loaded
            * @blazorProperty 'Loaded'
            */
        loaded?: EmitType<IStockChartEventArgs>;
        /**
            * Triggers if the range is changed
            *
            * @event rangeChange
            * @blazorProperty 'RangeChange'
            */
        rangeChange?: EmitType<IRangeChangeEventArgs>;
        /**
            * Triggers before each axis label is rendered.
            *
            * @event axisLabelRender
            * @deprecated
            */
        axisLabelRender?: EmitType<IAxisLabelRenderEventArgs>;
        /**
            * Triggers before the tooltip for series is rendered.
            *
            * @event tooltipRender
            * @deprecated
            */
        tooltipRender?: EmitType<ITooltipRenderEventArgs>;
        /**
            * Triggers before the series is rendered.
            *
            * @event seriesRender
            * @deprecated
            */
        seriesRender?: EmitType<ISeriesRenderEventArgs>;
        /**
            * Triggers before the series is rendered.
            *
            * @event stockEventRender
            * @deprecated
            */
        stockEventRender?: EmitType<IStockEventRenderArgs>;
        /**
            * Specifies the point indexes to be selected while loading a chart.
            * It requires `selectionMode` to be `Point` | `Series` | or `Cluster`.
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let chart: Chart = new Chart({
            * ...
            *   selectionMode: 'Point',
            *   selectedDataIndexes: [ { series: 0, point: 1},
            *                          { series: 2, point: 3} ],
            * ...
            * });
            * chart.appendTo('#Chart');
            * ```
            *
            * @default []
            */
        selectedDataIndexes?: StockChartIndexesModel[];
        /**
            * It specifies the types of series in financial chart.
            */
        seriesType?: ChartSeriesType[];
        /**
            * It specifies the types of indicators in financial chart.
            */
        indicatorType?: TechnicalIndicators[];
        /**
            * It specifies the types of Export types in financial chart.
            */
        exportType?: ExportType[];
        /**
            * It specifies the types of trendline types in financial chart.
            */
        trendlineType?: TrendlineTypes[];
}

export class StockChartFont extends ChildProperty<StockChartFont> {
        /**
            * Color for the text.
            *
            * @default ''
            */
        color: string;
        /**
            * Font size for the text.
            *
            * @default '16px'
            */
        size: string;
        /**
            * FontFamily for the text.
            */
        fontFamily: string;
        /**
            * FontStyle for the text.
            *
            * @default 'Normal'
            */
        fontStyle: string;
        /**
            * FontWeight for the text.
            *
            * @default 'Normal'
            */
        fontWeight: string;
        /**
            * Opacity for the text.
            *
            * @default 1
            */
        opacity: number;
        /**
            * Specifies the chart title text overflow
            *
            * @default 'Trim'
            */
        textOverflow: TextOverflow;
        /**
            * text alignment
            *
            * @default 'Center'
            */
        textAlignment: Alignment;
}
/**
    * Border
    */
export class StockChartBorder extends ChildProperty<StockChartBorder> {
        /**
            * The color of the border that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default ''
            */
        color: string;
        /**
            * The width of the border in pixels.
            *
            * @default 1
            */
        width: number;
}
/**
    * Configures the chart area.
    */
export class StockChartArea extends ChildProperty<StockChartArea> {
        /**
            * Options to customize the border of the chart area.
            */
        border: StockChartBorderModel;
        /**
            * The background of the chart area that accepts value in hex and rgba as a valid CSS color string..
            *
            * @default 'transparent'
            */
        background: string;
        /**
            * The opacity for background.
            *
            * @default 1
            */
        opacity: number;
}
/**
    * Configures the chart margins.
    */
export class StockMargin extends ChildProperty<StockMargin> {
        /**
            * Left margin in pixels.
            *
            * @default 10
            */
        left: number;
        /**
            * Right margin in pixels.
            *
            * @default 10
            */
        right: number;
        /**
            * Top margin in pixels.
            *
            * @default 10
            */
        top: number;
        /**
            * Bottom margin in pixels.
            *
            * @default 10
            */
        bottom: number;
}
/**
    * StockChart strip line settings
    */
export class StockChartStripLineSettings extends ChildProperty<StockChartStripLineSettings> {
        /**
            *  If set true, strip line get render from axis origin.
            *
            *  @default false
            */
        startFromAxis: boolean;
        /**
            * If set true, strip line for axis renders.
            *
            * @default true
            */
        visible: boolean;
        /**
            * Start value of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        start: Object | number | Date;
        /**
            * Color of the strip line.
            *
            * @default '#808080'
            */
        color: string;
        /**
            * End value of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        end: Object | number | Date;
        /**
            * Size of the strip line, when it starts from the origin.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        size: number;
        /**
            * Size type of the strip line
            *
            * @default Auto
            */
        sizeType: SizeType;
        /**
            * Dash Array of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        dashArray: string;
        /**
            * isRepeat value of the strip line.
            *
            * @default false
            * @aspDefaultValueIgnore
            */
        isRepeat: boolean;
        /**
            * repeatEvery value of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        repeatEvery: Object | number | Date;
        /**
            * isSegmented value of the strip line
            *
            * @default false
            * @aspDefaultValueIgnore
            */
        isSegmented: boolean;
        /**
            * repeatUntil value of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        repeatUntil: Object | number | Date;
        /**
            * segmentStart value of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        segmentStart: Object | number | Date;
        /**
            * segmentAxisName of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        segmentAxisName: string;
        /**
            * segmentEnd value of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        segmentEnd: Object | number | Date;
        /**
            * Strip line Opacity
            *
            * @default 1
            */
        opacity: number;
        /**
            * Strip line text.
            *
            * @default ''
            */
        text: string;
        /**
            * Border of the strip line.
            */
        border: StockChartBorderModel;
        /**
            * The angle to which the strip line text gets rotated.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        rotation: number;
        /**
            * Specifies the order of the strip line. They are,
            * * Behind: Places the strip line behind the series elements.
            * * Over: Places the strip line over the series elements.
            *
            * @default 'Behind'
            */
        zIndex: ZIndex;
        /**
            * Defines the position of the strip line text horizontally. They are,
            * * Start: Places the strip line text at the start.
            * * Middle: Places the strip line text in the middle.
            * * End: Places the strip line text at the end.
            *
            * @default 'Middle'
            */
        horizontalAlignment: Anchor;
        /**
            * Defines the position of the strip line text vertically. They are,
            * * Start: Places the strip line text at the start.
            * * Middle: Places the strip line text in the middle.
            * * End: Places the strip line text at the end.
            *
            * @default 'Middle'
            */
        verticalAlignment: Anchor;
        /**
            * Options to customize the strip line text.
            */
        textStyle: StockChartFontModel;
}
export class StockEmptyPointSettings extends ChildProperty<StockEmptyPointSettings> {
        /**
            * To customize the fill color of empty points.
            *
            * @default null
            */
        fill: string;
        /**
            * To customize the mode of empty points.
            *
            * @default Gap
            */
        mode: EmptyPointMode;
        /**
            * Options to customize the border of empty points.
            *
            * @default "{color: 'transparent', width: 0}"
            */
        border: StockChartBorderModel;
}
export class StockChartConnector extends ChildProperty<StockChartConnector> {
        /**
            * specifies the type of the connector line. They are
            * * Smooth
            * * Line
            *
            * @default 'Line'
            */
        type: ConnectorType;
        /**
            * Length of the connector line in pixels.
            *
            * @default null
            */
        length: string;
        /**
            * Color of the connector line.
            *
            * @default null
            */
        color: string;
        /**
            * dashArray of the connector line.
            *
            * @default ''
            */
        dashArray: string;
        /**
            * Width of the connector line in pixels.
            *
            * @default 1
            */
        width: number;
}
/**
    * Configures the Annotation for chart.
    */
export class StockSeries extends ChildProperty<StockSeries> {
        /**
            * The DataSource field that contains the x value.
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        xName: string;
        /**
            * The DataSource field that contains the y value.
            *
            * @default ''
            */
        yName: string;
        /**
            * The DataSource field that contains the open value of y
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        open: string;
        /**
            * The DataSource field that contains the close value of y
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        close: string;
        /**
            * The DataSource field that contains the high value of y
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        high: string;
        /**
            * The DataSource field that contains the low value of y
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        low: string;
        /**
            * Defines the data source field that contains the volume value in candle charts
            * It is applicable for financial series and technical indicators
            *
            * @default ''
            */
        volume: string;
        /**
            * The DataSource field that contains the color value of point
            * It is applicable for series
            *
            * @default ''
            */
        pointColorMapping: string;
        /**
            * The shape of the legend. Each series has its own legend shape. They are
            * * Circle - Renders a circle.
            * * Rectangle - Renders a rectangle.
            * * Triangle - Renders a triangle.
            * * Diamond - Renders a diamond.
            * * Cross - Renders a cross.
            * * HorizontalLine - Renders a horizontalLine.
            * * VerticalLine - Renders a verticalLine.
            * * Pentagon - Renders a pentagon.
            * * InvertedTriangle - Renders a invertedTriangle.
            * * SeriesType -Render a legend shape based on series type.
            * * Image -Render a image.     *
            * @default 'SeriesType'
            */
        legendShape: LegendShape;
        /**
            * The URL for the Image that is to be displayed as a Legend icon.  It requires  `legendShape` value to be an `Image`.
            * @default ''
            */
        legendImageUrl: string;
        /**
            * Options to customizing animation for the series.
            */
        animation: AnimationModel;
        /**
            * The name of the horizontal axis associated with the series. It requires `axes` of the chart.
            * It is applicable for series and technical indicators
            *
            * @default null
            */
        xAxisName: string;
        /**
            * The name of the vertical axis associated with the series. It requires `axes` of the chart.
            * It is applicable for series and technical indicators
            *
            * @default null
            */
        yAxisName: string;
        /**
            * The fill color for the series that accepts value in hex and rgba as a valid CSS color string.
            * It also represents the color of the signal lines in technical indicators.
            * For technical indicators, the default value is 'blue' and for series, it has null.
            *
            * @default null
            */
        fill: string;
        /**
            * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.
            *
            * @default '0'
            */
        dashArray: string;
        /**
            * The stroke width for the series that is applicable only for `Line` type series.
            * It also represents the stroke width of the signal lines in technical indicators.
            *
            * @default 1
            */
        width: number;
        /**
            * The name of the series visible in legend.
            *
            * @default ''
            */
        name: string;
        /**
            * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager.
            *
            * @default ''
            */
        dataSource: Object | DataManager;
        /**
            * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.
            *
            * @default null
            */
        query: Query;
        /**
            * This property is used in financial charts to visualize the price movements in stock.
            * It defines the color of the candle/point, when the opening price is higher than the closing price.
            *
            * @default '#e74c3d'
            */
        bullFillColor: string;
        /**
            * This property is used in stock charts to visualize the price movements in stock.
            * It defines the color of the candle/point, when the opening price is less than the closing price.
            *
            * @default '#2ecd71'
            */
        bearFillColor: string;
        /**
            * This property is applicable for candle series.
            * It enables/disables to visually compare the current values with the previous values in stock.
            *
            * @default false
            */
        enableSolidCandles: boolean;
        /**
            * Specifies the visibility of series.
            *
            * @default true
            */
        visible: boolean;
        /**
            * Options to customizing the border of the series. This is applicable only for `Column` and `Bar` type series.
            */
        border: StockChartBorderModel;
        /**
            * The opacity of the series.
            *
            * @default 1
            */
        opacity: number;
        /**
            * The type of the series are
            * * Line
            * * Column
            * * Area
            * * Spline
            * * Hilo
            * * HiloOpenClose
            * * Candle
            *
            * @default 'Candle'
            */
        type: ChartSeriesType;
        /**
            * Options for displaying and customizing markers for individual points in a series.
            */
        marker: MarkerSettingsModel;
        /**
            * Defines the collection of trendlines that are used to predict the trend
            */
        trendlines: TrendlineModel[];
        /**
            * If set true, the Tooltip for series will be visible.
            *
            * @default true
            */
        enableTooltip: boolean;
        /**
            * The provided value will be considered as a Tooltip name
            *
            * @default ''
            */
        tooltipMappingName: string;
        /**
            * Custom style for the selected series or points.
            *
            * @default null
            */
        selectionStyle: string;
        /**
            * It defines tension of cardinal spline types
            *
            * @default 0.5
            */
        cardinalSplineTension: number;
        /**
            * To render the column series points with particular rounded corner.
            */
        cornerRadius: CornerRadiusModel;
        /**
            * options to customize the empty points in series
            */
        emptyPointSettings: EmptyPointSettingsModel;
        /**
            * To render the column series points with particular column width. If the series type is histogram the
            * default value is 1 otherwise 0.7.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        columnWidth: number;
        /**
            * To render the column series points with particular column spacing. It takes value from 0 - 1.
            *
            * @default 0
            */
        columnSpacing: number;
        /** @private */
        localData: Object;
        /** @private */
        chart: StockChart;
}
export interface IStockChartEventArgs {
        /** name of the event */
        name: string;
        /** stock chart */
        stockChart: StockChart;
        /** theme */
        theme: ChartTheme;
}
/**
    * Interface for changed events
    */
export interface IRangeChangeEventArgs {
        /** name of the event */
        name: string;
        /** Defines the start value */
        start: number | Date;
        /** Defines the end value */
        end: number | Date;
        /** Defines the data source */
        data: Object[];
        /** Defines the selected data */
        selectedData: Object[];
        /** Defined the zoomPosition of the Stock chart */
        zoomPosition: number;
        /** Defined the zoomFactor of the stock chart */
        zoomFactor: number;
}
/** Stock event render event */
export interface IStockEventRenderArgs {
        /** stockChart */
        stockChart: StockChart;
        /** Event text  */
        text: string;
        /** Event shape */
        type: FlagType;
        /** Defines the name of the event */
        name: string;
        /** Defines the event cancel status */
        cancel: boolean;
        /** Defines the stock series */
        series: StockSeriesModel;
}
export interface IStockLegendRenderEventArgs extends IChartEventArgs {
        /** Defines the current legend text */
        text: string;
        /** Defines the current legend fill color */
        fill: string;
        /** Defines the current legend shape */
        shape: LegendShape;
        /** Defines the current legend marker shape */
        markerShape?: ChartShape;
}
export interface IStockLegendClickEventArgs extends IChartEventArgs {
        /** Defines the chart when legendClick */
        chart: StockChart;
        /** Defines the current legend shape */
        legendShape: LegendShape;
        /** Defines the current series */
        series: Series;
        /** Defines the current legend text */
        legendText: string;
}
export class StockChartIndicator extends ChildProperty<StockChartIndicator> {
        /**
            * Defines the type of the technical indicator
            *
            * @default 'Sma'
            */
        type: TechnicalIndicators;
        /**
            * Defines the period, the price changes over which will be considered to predict the trend
            *
            * @default 14
            */
        period: number;
        /**
            * Defines the period, the price changes over which will define the %D value in stochastic indicators
            *
            * @default 3
            */
        dPeriod: number;
        /**
            * Defines the look back period, the price changes over which will define the %K value in stochastic indicators
            *
            * @default 14
            */
        kPeriod: number;
        /**
            * Defines the over-bought(threshold) values. It is applicable for RSI and stochastic indicators
            *
            * @default 80
            */
        overBought: number;
        /**
            * Defines the over-sold(threshold) values. It is applicable for RSI and stochastic indicators
            *
            * @default 20
            */
        overSold: number;
        /**
            * Defines the field to compare the current value with previous values
            *
            * @default 'Close'
            */
        field: FinancialDataFields;
        /**
            * Sets the standard deviation values that helps to define the upper and lower bollinger bands
            *
            * @default 2
            */
        standardDeviation: number;
        /**
            * Sets the slow period to define the Macd line
            *
            * @default 12
            */
        slowPeriod: number;
        /**
            * Enables/Disables the over-bought and over-sold regions
            *
            * @default true
            */
        showZones: boolean;
        /**
            * Sets the fast period to define the Macd line
            *
            * @default 26
            */
        fastPeriod: number;
        /**
            * Defines the appearance of the the MacdLine of Macd indicator
            *
            * @default { color: '#ff9933', width: 2 }
            */
        macdLine: StockChartConnectorModel;
        /**
            * Defines the type of the Macd indicator.
            *
            * @default 'Both'
            */
        macdType: MacdType;
        /**
            * Defines the color of the negative bars in Macd indicators
            *
            * @default '#e74c3d'
            */
        macdNegativeColor: string;
        /**
            * Defines the color of the positive bars in Macd indicators
            *
            * @default '#2ecd71'
            */
        macdPositiveColor: string;
        /**
            * Options for customizing the BollingerBand in the indicator.
            *
            * @default 'rgba(211,211,211,0.25)'
            */
        bandColor: string;
        /**
            * Defines the appearance of the upper line in technical indicators
            */
        upperLine: StockChartConnectorModel;
        /**
            * Defines the name of the series, the data of which has to be depicted as indicator
            *
            * @default ''
            */
        seriesName: string;
        /**
            * Defines the appearance of period line in technical indicators
            */
        periodLine: StockChartConnectorModel;
        /**
            * Defines the appearance of lower line in technical indicators
            */
        lowerLine: ConnectorModel;
        /**
            * The DataSource field that contains the high value of y
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        high: string;
        /**
            * The DataSource field that contains the open value of y
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        open: string;
        /**
            * The DataSource field that contains the low value of y
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        low: string;
        /**
            * The DataSource field that contains the x value.
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        xName: string;
        /**
            * The DataSource field that contains the close value of y
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        close: string;
        /**
            * The DataSource field that contains the color value of point
            * It is applicable for series
            *
            * @default ''
            */
        pointColorMapping: string;
        /**
            * Defines the data source field that contains the volume value in candle charts
            * It is applicable for financial series and technical indicators
            *
            * @default ''
            */
        volume: string;
        /**
            * The name of the horizontal axis associated with the series. It requires `axes` of the chart.
            * It is applicable for series and technical indicators
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let chart: Chart = new Chart({
            * ...
            *     columns: [{ width: '50%' },
            *               { width: '50%' }],
            *     axes: [{
            *                name: 'xAxis 1',
            *                columnIndex: 1,
            *            }],
            *     series: [{
            *                dataSource: data,
            *                xName: 'x', yName: 'y',
            *                xAxisName: 'xAxis 1',
            *     }],
            * });
            * chart.appendTo('#Chart');
            * ```
            *
            * @default null
            */
        xAxisName: string;
        /**
            * The name of the vertical axis associated with the series. It requires `axes` of the chart.
            * It is applicable for series and technical indicators
            * ```html
            * <div id='Chart'></div>
            * ```
            *
            * @default null
            */
        yAxisName: string;
        /**
            * Options to customizing animation for the series.
            */
        animation: AnimationModel;
        /**
            * The fill color for the series that accepts value in hex and rgba as a valid CSS color string.
            * It also represents the color of the signal lines in technical indicators.
            * For technical indicators, the default value is 'blue' and for series, it has null.
            *
            * @default null
            */
        fill: string;
        /**
            * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.
            *
            * @default '0'
            */
        dashArray: string;
        /**
            * The stroke width for the series that is applicable only for `Line` type series.
            * It also represents the stroke width of the signal lines in technical indicators.
            *
            * @default 1
            */
        width: number;
        /**
            * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.
            *
            * @default null
            */
        query: Query;
        /**
            * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager.
            * ```html
            * <div id='Chart'></div>
            * ```
            *
            * @default ''
            */
        dataSource: Object | DataManager;
}
export class StockChartAxis extends ChildProperty<StockChartAxis> {
        /**
            * Options to customize the crosshair ToolTip.
            */
        crosshairTooltip: CrosshairTooltipModel;
        /**
            * Options to customize the axis label.
            */
        labelStyle: StockChartFontModel;
        /**
            * Specifies the title of an axis.
            *
            * @default ''
            */
        title: string;
        /**
            * Options for customizing the axis title.
            */
        titleStyle: StockChartFontModel;
        /**
            * Used to format the axis label that accepts any global string format like 'C', 'n1', 'P' etc.
            * It also accepts placeholder like '{value}°C' in which value represent the axis label, e.g, 20°C.
            *
            * @default ''
            */
        labelFormat: string;
        /**
            * It specifies the type of format to be used in dateTime format process.
            *
            * @default 'DateTime'
            */
        skeletonType: SkeletonType;
        /**
            * Specifies the skeleton format in which the dateTime format will process.
            *
            * @default ''
            */
        skeleton: string;
        /**
            * Left and right padding for the plot area in pixels.
            *
            * @default 0
            */
        plotOffset: number;
        /**
            * The base value for logarithmic axis. It requires `valueType` to be `Logarithmic`.
            *
            * @default 10
            */
        logBase: number;
        /**
            * Specifies the index of the row where the axis is associated, when the chart area is divided into multiple plot areas by using `rows`.
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let chart: Chart = new Chart({
            * ...
            *     rows: [{ height: '50%' },
            *            { height: '50%' }],
            *     axes: [{
            *                name: 'yAxis 1',
            *                rowIndex: 1,
            *      }],
            * ...
            * });
            * chart.appendTo('#Chart');
            * ```
            *
            * @default 0
            */
        rowIndex: number;
        /**
            * Specifies the number of `columns` or `rows` an axis has to span horizontally or vertically.
            *
            * @default 1
            */
        span: number;
        /**
            * The maximum number of label count per 100 pixels with respect to the axis length.
            *
            * @default 3
            */
        maximumLabels: number;
        /**
            * With this property, you can request axis to calculate intervals approximately equal to your specified interval.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        desiredIntervals: number;
        /**
            * The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Value ranges from 0 to 1.
            *
            * @default 1
            */
        zoomFactor: number;
        /**
            * Position of the zoomed axis. Value ranges from 0 to 1.
            *
            * @default 0
            */
        zoomPosition: number;
        /**
            * If set to true, the axis will render at the opposite side of its default position.
            *
            * @default false
            */
        opposedPosition: boolean;
        /**
            * If set to true, axis interval will be calculated automatically with respect to the zoomed range.
            *
            * @default true
            */
        enableAutoIntervalOnZooming: boolean;
        /**
            * Specifies the type of data the axis is handling.
            * * Double:  Renders a numeric axis.
            * * DateTime: Renders a dateTime axis.
            * * Category: Renders a category axis.
            * * Logarithmic: Renders a log axis.
            *
            * @default 'Double'
            * @blazorType Syncfusion.EJ2.Blazor.Charts.ValueType
            * @isEnumeration true
            */
        valueType: ValueType;
        /**
            * Specifies the padding for the axis range in terms of interval.They are,
            * * none: Padding cannot be applied to the axis.
            * * normal: Padding is applied to the axis based on the range calculation.
            * * additional: Interval of the axis is added as padding to the minimum and maximum values of the range.
            * * round: Axis range is rounded to the nearest possible value divided by the interval.
            *
            * @default 'Auto'
            */
        rangePadding: ChartRangePadding;
        /**
            * Specifies the position of labels at the edge of the axis.They are,
            * * None: No action will be performed.
            * * Hide: Edge label will be hidden.
            * * Shift: Shifts the edge labels.
            *
            * @default 'None'
            */
        edgeLabelPlacement: EdgeLabelPlacement;
        /**
            * Specifies the placement of a label for category axis. They are,
            * * betweenTicks: Renders the label between the ticks.
            * * onTicks: Renders the label on the ticks.
            *
            * @default 'BetweenTicks'
            */
        labelPlacement: LabelPlacement;
        /**
            * Specifies the types like `Years`, `Months`, `Days`, `Hours`, `Minutes`, `Seconds` in date time axis.They are,
            * * Auto: Defines the interval of the axis based on data.
            * * Years: Defines the interval of the axis in years.
            * * Months: Defines the interval of the axis in months.
            * * Days: Defines the interval of the axis in days.
            * * Hours: Defines the interval of the axis in hours.
            * * Minutes: Defines the interval of the axis in minutes.
            *
            * @default 'Auto'
            */
        intervalType: IntervalType;
        /**
            * Specifies the placement of a ticks to the axis line. They are,
            * * inside: Renders the ticks inside to the axis line.
            * * outside: Renders the ticks outside to the axis line.
            *
            * @default 'Outside'
            */
        tickPosition: AxisPosition;
        /**
            * Unique identifier of an axis.
            * To associate an axis with the series, set this name to the xAxisName/yAxisName properties of the series.
            *
            * @default ''
            */
        name: string;
        /**
            * Specifies the placement of a labels to the axis line. They are,
            * * inside: Renders the labels inside to the axis line.
            * * outside: Renders the labels outside to the axis line.
            *
            * @default 'Outside'
            */
        labelPosition: AxisPosition;
        /**
            * If set to true, axis label will be visible.
            *
            * @default true
            */
        visible: boolean;
        /**
            * The angle to which the axis label gets rotated.
            *
            * @default 0
            */
        labelRotation: number;
        /**
            * Specifies the number of minor ticks per interval.
            *
            * @default 0
            */
        minorTicksPerInterval: number;
        /**
            * Specifies the value at which the axis line has to be intersect with the vertical axis or vice versa.
            *
            * @default null
            */
        crossesAt: Object;
        /**
            * Specifies axis name with which the axis line has to be crossed
            *
            * @default null
            */
        crossesInAxis: string;
        /**
            * Specifies whether axis elements like axis labels, axis title, etc has to be crossed with axis line
            *
            * @default true
            */
        placeNextToAxisLine: boolean;
        /**
            * Specifies the minimum range of an axis.
            *
            * @default null
            */
        minimum: Object;
        /**
            * Specifies the interval for an axis.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        interval: number;
        /**
            * Specifies the maximum range of an axis.
            *
            * @default null
            */
        maximum: Object;
        /**
            * Specifies the maximum width of an axis label.
            *
            * @default 34.
            */
        maximumLabelWidth: number;
        /**
            * Options for customizing major tick lines.
            */
        majorTickLines: MajorTickLinesModel;
        /**
            * Specifies the Trim property for an axis.
            *
            * @default false
            */
        enableTrim: boolean;
        /**
            * Options for customizing minor tick lines.
            */
        minorTickLines: MinorTickLinesModel;
        /**
            * Options for customizing minor grid lines.
            */
        minorGridLines: MinorGridLinesModel;
        /**
            * Options for customizing major grid lines.
            */
        majorGridLines: MajorGridLinesModel;
        /**
            * Options for customizing axis lines.
            */
        lineStyle: AxisLineModel;
        /**
            * It specifies whether the axis to be rendered in inversed manner or not.
            *
            * @default false
            */
        isInversed: boolean;
        /**
            * Specifies the actions like `Hide`, `Rotate45`, and `Rotate90` when the axis labels intersect with each other.They are,
            * * None: Shows all the labels.
            * * Hide: Hides the label when it intersects.
            * * Rotate45: Rotates the label to 45 degree when it intersects.
            * * Rotate90: Rotates the label to 90 degree when it intersects.
            *
            * @default Hide
            */
        labelIntersectAction: LabelIntersectAction;
        /**
            * The polar radar radius position.
            *
            * @default 100
            */
        coefficient: number;
        /**
            * The start angle for the series.
            *
            * @default 0
            */
        startAngle: number;
        /**
            * TabIndex value for the axis.
            *
            * @default 2
            */
        tabIndex: number;
        /**
            * Specifies the stripLine collection for the axis
            */
        stripLines: StockChartStripLineSettingsModel[];
        /**
            * Description for axis and its element.
            *
            * @default null
            */
        description: string;
}
/**
    * StockChart row
    */
export class StockChartRow extends ChildProperty<StockChartRow> {
        /**
            * The height of the row as a string accept input both as '100px' and '100%'.
            * If specified as '100%, row renders to the full height of its chart.
            *
            * @default '100%'
            */
        height: string;
        /**
            * Options to customize the border of the rows.
            */
        border: StockChartBorderModel;
}
export class StockChartTrendline extends ChildProperty<StockChartTrendline> {
        /**
            * Defines the period, the price changes over which will be considered to predict moving average trend line
            *
            * @default 2
            */
        period: number;
        /**
            * Defines the name of trendline
            *
            * @default ''
            */
        name: string;
        /**
            * Defines the type of the trendline
            *
            * @default 'Linear'
            */
        type: TrendlineTypes;
        /**
            * Defines the polynomial order of the polynomial trendline
            *
            * @default 2
            */
        polynomialOrder: number;
        /**
            * Defines the period, by which the trend has to forward forecast
            *
            * @default 0
            */
        forwardForecast: number;
        /**
            * Defines the period, by which the trend has to backward forecast
            *
            * @default 0
            */
        backwardForecast: number;
        /**
            * Options to customize the animation for trendlines
            */
        animation: AnimationModel;
        /**
            * Enables/disables tooltip for trendlines
            *
            * @default true
            */
        enableTooltip: boolean;
        /**
            * Options to customize the marker for trendlines
            */
        marker: MarkerSettingsModel;
        /**
            * Defines the intercept of the trendline
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        intercept: number;
        /**
            * Defines the fill color of trendline
            *
            * @default ''
            */
        fill: string;
        /**
            * Sets the legend shape of the trendline
            *
            * @default 'SeriesType'
            */
        legendShape: LegendShape;
        /**
            * Defines the width of the trendline
            *
            * @default 1
            */
        width: number;
}
export class StockChartAnnotationSettings extends ChildProperty<StockChartAnnotationSettings> {
        /**
            * if set coordinateUnit as `Pixel` Y specifies the axis value
            * else is specifies pixel or percentage of coordinate
            *
            * @default '0'
            */
        y: string | number;
        /**
            * if set coordinateUnit as `Pixel` X specifies the axis value
            * else is specifies pixel or percentage of coordinate
            *
            * @default '0'
            */
        x: string | Date | number;
        /**
            * Content of the annotation, which accepts the id of the custom element.
            *
            * @default null
            */
        content: string;
        /**
            * Specifies the regions of the annotation. They are
            * * Chart - Annotation renders based on chart coordinates.
            * * Series - Annotation renders based on series coordinates.
            *
            * @default 'Chart'
            */
        region: Regions;
        /**
            * Specifies the alignment of the annotation. They are
            * * Near - Align the annotation element as left side.
            * * Far - Align the annotation element as right side.
            * * Center - Align the annotation element as mid point.
            *
            * @default 'Center'
            */
        horizontalAlignment: Alignment;
        /**
            * Specifies the coordinate units of the annotation. They are
            * * Pixel - Annotation renders based on x and y pixel value.
            * * Point - Annotation renders based on x and y axis value.
            *
            * @default 'Pixel'
            */
        coordinateUnits: Units;
        /**
            * Specifies the position of the annotation. They are
            * * Top - Align the annotation element as top side.
            * * Bottom - Align the annotation element as bottom side.
            * * Middle - Align the annotation element as mid point.
            *
            * @default 'Middle'
            */
        verticalAlignment: Position;
        /**
            * The name of vertical axis associated with the annotation.
            * It requires `axes` of chart.
            *
            * @default null
            */
        yAxisName: string;
        /**
            * Information about annotation for assistive technology.
            *
            * @default null
            */
        description: string;
        /**
            * The name of horizontal axis associated with the annotation.
            * It requires `axes` of chart.
            *
            * @default null
            */
        xAxisName: string;
}
export class StockChartIndexes extends ChildProperty<StockChartIndexes> {
        /**
            * Specifies index of point
            *
            * @default 0
            * @aspType int
            */
        point: number;
        /**
            * Specifies index of series
            *
            * @default 0
            * @aspType int
            */
        series: number;
}
/**
    * Configures the Stock events for stock chart.
    */
export class StockEventsSettings extends ChildProperty<StockEventsSettings> {
        /**
            * Specifies type of stock events
            * * Circle
            * * Square
            * * Flag
            * * Text
            * * Sign
            * * Triangle
            * * InvertedTriangle
            * * ArrowUp
            * * ArrowDown
            * * ArrowLeft
            * * ArrowRight
            *
            * @default 'Circle'
            */
        type: FlagType;
        /**
            * Specifies the text for the stock chart text.
            */
        text: string;
        /**
            * Specifies the description for the chart which renders in tooltip for stock event.
            */
        description: string;
        /**
            * Date value of stock event in which stock event shows.
            */
        date: Date;
        /**
            * Options to customize the border of the stock events.
            */
        border: StockChartBorderModel;
        /**
            * The background of the stock event that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default 'transparent'
            */
        background: string;
        /**
            * Enables the stock events to be render on series. If it disabled, stock event rendered on primaryXAxis.
            *
            * @default true
            */
        showOnSeries: boolean;
        /**
            * Corresponding values in which stock event placed.
            * * Close
            * * Open
            * * High
            * * Close
            *
            * @default 'close'
            */
        placeAt: string;
        /**
            * Options to customize the styles for stock events text.
            */
        textStyle: StockChartFontModel;
        /**
            * To render stock events in particular series.
            * By default stock events will render for all series.
            *
            * @default []
            */
        seriesIndexes: number[];
}

/**
    * Interface for a class StockChartFont
    */
export interface StockChartFontModel {
        /**
            * Color for the text.
            *
            * @default ''
            */
        color?: string;
        /**
            * Font size for the text.
            *
            * @default '16px'
            */
        size?: string;
        /**
            * FontFamily for the text.
            */
        fontFamily?: string;
        /**
            * FontStyle for the text.
            *
            * @default 'Normal'
            */
        fontStyle?: string;
        /**
            * FontWeight for the text.
            *
            * @default 'Normal'
            */
        fontWeight?: string;
        /**
            * Opacity for the text.
            *
            * @default 1
            */
        opacity?: number;
        /**
            * Specifies the chart title text overflow
            *
            * @default 'Trim'
            */
        textOverflow?: TextOverflow;
        /**
            * text alignment
            *
            * @default 'Center'
            */
        textAlignment?: Alignment;
}
/**
    * Interface for a class StockChartBorder
    */
export interface StockChartBorderModel {
        /**
            * The color of the border that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default ''
            */
        color?: string;
        /**
            * The width of the border in pixels.
            *
            * @default 1
            */
        width?: number;
}
/**
    * Interface for a class StockChartArea
    */
export interface StockChartAreaModel {
        /**
            * Options to customize the border of the chart area.
            */
        border?: StockChartBorderModel;
        /**
            * The background of the chart area that accepts value in hex and rgba as a valid CSS color string..
            *
            * @default 'transparent'
            */
        background?: string;
        /**
            * The opacity for background.
            *
            * @default 1
            */
        opacity?: number;
}
/**
    * Interface for a class StockMargin
    */
export interface StockMarginModel {
        /**
            * Left margin in pixels.
            *
            * @default 10
            */
        left?: number;
        /**
            * Right margin in pixels.
            *
            * @default 10
            */
        right?: number;
        /**
            * Top margin in pixels.
            *
            * @default 10
            */
        top?: number;
        /**
            * Bottom margin in pixels.
            *
            * @default 10
            */
        bottom?: number;
}
/**
    * Interface for a class StockChartStripLineSettings
    */
export interface StockChartStripLineSettingsModel {
        /**
            *  If set true, strip line get render from axis origin.
            *
            *  @default false
            */
        startFromAxis?: boolean;
        /**
            * If set true, strip line for axis renders.
            *
            * @default true
            */
        visible?: boolean;
        /**
            * Start value of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        start?: Object | number | Date;
        /**
            * Color of the strip line.
            *
            * @default '#808080'
            */
        color?: string;
        /**
            * End value of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        end?: Object | number | Date;
        /**
            * Size of the strip line, when it starts from the origin.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        size?: number;
        /**
            * Size type of the strip line
            *
            * @default Auto
            */
        sizeType?: SizeType;
        /**
            * Dash Array of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        dashArray?: string;
        /**
            * isRepeat value of the strip line.
            *
            * @default false
            * @aspDefaultValueIgnore
            */
        isRepeat?: boolean;
        /**
            * repeatEvery value of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        repeatEvery?: Object | number | Date;
        /**
            * isSegmented value of the strip line
            *
            * @default false
            * @aspDefaultValueIgnore
            */
        isSegmented?: boolean;
        /**
            * repeatUntil value of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        repeatUntil?: Object | number | Date;
        /**
            * segmentStart value of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        segmentStart?: Object | number | Date;
        /**
            * segmentAxisName of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        segmentAxisName?: string;
        /**
            * segmentEnd value of the strip line.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        segmentEnd?: Object | number | Date;
        /**
            * Strip line Opacity
            *
            * @default 1
            */
        opacity?: number;
        /**
            * Strip line text.
            *
            * @default ''
            */
        text?: string;
        /**
            * Border of the strip line.
            */
        border?: StockChartBorderModel;
        /**
            * The angle to which the strip line text gets rotated.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        rotation?: number;
        /**
            * Specifies the order of the strip line. They are,
            * * Behind: Places the strip line behind the series elements.
            * * Over: Places the strip line over the series elements.
            *
            * @default 'Behind'
            */
        zIndex?: ZIndex;
        /**
            * Defines the position of the strip line text horizontally. They are,
            * * Start: Places the strip line text at the start.
            * * Middle: Places the strip line text in the middle.
            * * End: Places the strip line text at the end.
            *
            * @default 'Middle'
            */
        horizontalAlignment?: Anchor;
        /**
            * Defines the position of the strip line text vertically. They are,
            * * Start: Places the strip line text at the start.
            * * Middle: Places the strip line text in the middle.
            * * End: Places the strip line text at the end.
            *
            * @default 'Middle'
            */
        verticalAlignment?: Anchor;
        /**
            * Options to customize the strip line text.
            */
        textStyle?: StockChartFontModel;
        /**
            * The option to delay animation of the series.
            *
            * @default 0
            */
        delay?: number;
        /**
            * If set to true, series gets animated on initial loading.
            *
            * @default false
            */
        enable?: boolean;
        /**
            * The duration of animation in milliseconds.
            *
            * @default 1000
            */
        duration?: number;
}
/**
    * Interface for a class StockEmptyPointSettings
    */
export interface StockEmptyPointSettingsModel {
        /**
            * To customize the fill color of empty points.
            *
            * @default null
            */
        fill?: string;
        /**
            * To customize the mode of empty points.
            *
            * @default Gap
            */
        mode?: EmptyPointMode;
        /**
            * Options to customize the border of empty points.
            *
            * @default "{color: 'transparent', width: 0}"
            */
        border?: StockChartBorderModel;
}
/**
    * Interface for a class StockChartConnector
    */
export interface StockChartConnectorModel {
        /**
            * specifies the type of the connector line. They are
            * * Smooth
            * * Line
            *
            * @default 'Line'
            */
        type?: ConnectorType;
        /**
            * Length of the connector line in pixels.
            *
            * @default null
            */
        length?: string;
        /**
            * Color of the connector line.
            *
            * @default null
            */
        color?: string;
        /**
            * dashArray of the connector line.
            *
            * @default ''
            */
        dashArray?: string;
        /**
            * Width of the connector line in pixels.
            *
            * @default 1
            */
        width?: number;
}
/**
    * Interface for a class StockSeries
    */
export interface StockSeriesModel {
        /**
            * The DataSource field that contains the x value.
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        xName?: string;
        /**
            * The DataSource field that contains the y value.
            *
            * @default ''
            */
        yName?: string;
        /**
            * The DataSource field that contains the open value of y
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        open?: string;
        /**
            * The DataSource field that contains the close value of y
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        close?: string;
        /**
            * The DataSource field that contains the high value of y
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        high?: string;
        /**
            * The DataSource field that contains the low value of y
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        low?: string;
        /**
            * Defines the data source field that contains the volume value in candle charts
            * It is applicable for financial series and technical indicators
            *
            * @default ''
            */
        volume?: string;
        /**
            * The DataSource field that contains the color value of point
            * It is applicable for series
            *
            * @default ''
            */
        pointColorMapping?: string;
        /**
            * The shape of the legend. Each series has its own legend shape. They are
            * * Circle - Renders a circle.
            * * Rectangle - Renders a rectangle.
            * * Triangle - Renders a triangle.
            * * Diamond - Renders a diamond.
            * * Cross - Renders a cross.
            * * HorizontalLine - Renders a horizontalLine.
            * * VerticalLine - Renders a verticalLine.
            * * Pentagon - Renders a pentagon.
            * * InvertedTriangle - Renders a invertedTriangle.
            * * SeriesType -Render a legend shape based on series type.
            * * Image -Render a image.     *
            * @default 'SeriesType'
            */
        legendShape?: LegendShape;
        /**
            * The URL for the Image that is to be displayed as a Legend icon.  It requires  `legendShape` value to be an `Image`.
            * @default ''
            */
        legendImageUrl?: string;
        /**
            * Options to customizing animation for the series.
            */
        animation?: AnimationModel;
        /**
            * The name of the horizontal axis associated with the series. It requires `axes` of the chart.
            * It is applicable for series and technical indicators
            *
            * @default null
            */
        xAxisName?: string;
        /**
            * The name of the vertical axis associated with the series. It requires `axes` of the chart.
            * It is applicable for series and technical indicators
            *
            * @default null
            */
        yAxisName?: string;
        /**
            * The fill color for the series that accepts value in hex and rgba as a valid CSS color string.
            * It also represents the color of the signal lines in technical indicators.
            * For technical indicators, the default value is 'blue' and for series, it has null.
            *
            * @default null
            */
        fill?: string;
        /**
            * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.
            *
            * @default '0'
            */
        dashArray?: string;
        /**
            * The stroke width for the series that is applicable only for `Line` type series.
            * It also represents the stroke width of the signal lines in technical indicators.
            *
            * @default 1
            */
        width?: number;
        /**
            * The name of the series visible in legend.
            *
            * @default ''
            */
        name?: string;
        /**
            * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager.
            *
            * @default ''
            */
        dataSource?: Object | DataManager;
        /**
            * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.
            *
            * @default null
            */
        query?: Query;
        /**
            * This property is used in financial charts to visualize the price movements in stock.
            * It defines the color of the candle/point, when the opening price is higher than the closing price.
            *
            * @default '#e74c3d'
            */
        bullFillColor?: string;
        /**
            * This property is used in stock charts to visualize the price movements in stock.
            * It defines the color of the candle/point, when the opening price is less than the closing price.
            *
            * @default '#2ecd71'
            */
        bearFillColor?: string;
        /**
            * This property is applicable for candle series.
            * It enables/disables to visually compare the current values with the previous values in stock.
            *
            * @default false
            */
        enableSolidCandles?: boolean;
        /**
            * Specifies the visibility of series.
            *
            * @default true
            */
        visible?: boolean;
        /**
            * Options to customizing the border of the series. This is applicable only for `Column` and `Bar` type series.
            */
        border?: StockChartBorderModel;
        /**
            * The opacity of the series.
            *
            * @default 1
            */
        opacity?: number;
        /**
            * The type of the series are
            * * Line
            * * Column
            * * Area
            * * Spline
            * * Hilo
            * * HiloOpenClose
            * * Candle
            *
            * @default 'Candle'
            */
        type?: ChartSeriesType;
        /**
            * Options for displaying and customizing markers for individual points in a series.
            */
        marker?: MarkerSettingsModel;
        /**
            * Defines the collection of trendlines that are used to predict the trend
            */
        trendlines?: TrendlineModel[];
        /**
            * If set true, the Tooltip for series will be visible.
            *
            * @default true
            */
        enableTooltip?: boolean;
        /**
            * The provided value will be considered as a Tooltip name
            *
            * @default ''
            */
        tooltipMappingName?: string;
        /**
            * Custom style for the selected series or points.
            *
            * @default null
            */
        selectionStyle?: string;
        /**
            * It defines tension of cardinal spline types
            *
            * @default 0.5
            */
        cardinalSplineTension?: number;
        /**
            * To render the column series points with particular rounded corner.
            */
        cornerRadius?: CornerRadiusModel;
        /**
            * options to customize the empty points in series
            */
        emptyPointSettings?: EmptyPointSettingsModel;
        /**
            * To render the column series points with particular column width. If the series type is histogram the
            * default value is 1 otherwise 0.7.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        columnWidth?: number;
        /**
            * To render the column series points with particular column spacing. It takes value from 0 - 1.
            *
            * @default 0
            */
        columnSpacing?: number;
}
/**
    * Interface for a class StockChartIndicator
    */
export interface StockChartIndicatorModel {
        /**
            * Defines the type of the technical indicator
            *
            * @default 'Sma'
            */
        type?: TechnicalIndicators;
        /**
            * Defines the period, the price changes over which will be considered to predict the trend
            *
            * @default 14
            */
        period?: number;
        /**
            * Defines the period, the price changes over which will define the %D value in stochastic indicators
            *
            * @default 3
            */
        dPeriod?: number;
        /**
            * Defines the look back period, the price changes over which will define the %K value in stochastic indicators
            *
            * @default 14
            */
        kPeriod?: number;
        /**
            * Defines the over-bought(threshold) values. It is applicable for RSI and stochastic indicators
            *
            * @default 80
            */
        overBought?: number;
        /**
            * Defines the over-sold(threshold) values. It is applicable for RSI and stochastic indicators
            *
            * @default 20
            */
        overSold?: number;
        /**
            * Defines the field to compare the current value with previous values
            *
            * @default 'Close'
            */
        field?: FinancialDataFields;
        /**
            * Sets the standard deviation values that helps to define the upper and lower bollinger bands
            *
            * @default 2
            */
        standardDeviation?: number;
        /**
            * Sets the slow period to define the Macd line
            *
            * @default 12
            */
        slowPeriod?: number;
        /**
            * Enables/Disables the over-bought and over-sold regions
            *
            * @default true
            */
        showZones?: boolean;
        /**
            * Sets the fast period to define the Macd line
            *
            * @default 26
            */
        fastPeriod?: number;
        /**
            * Defines the appearance of the the MacdLine of Macd indicator
            *
            * @default { color: '#ff9933', width: 2 }
            */
        macdLine?: StockChartConnectorModel;
        /**
            * Defines the type of the Macd indicator.
            *
            * @default 'Both'
            */
        macdType?: MacdType;
        /**
            * Defines the color of the negative bars in Macd indicators
            *
            * @default '#e74c3d'
            */
        macdNegativeColor?: string;
        /**
            * Defines the color of the positive bars in Macd indicators
            *
            * @default '#2ecd71'
            */
        macdPositiveColor?: string;
        /**
            * Options for customizing the BollingerBand in the indicator.
            *
            * @default 'rgba(211,211,211,0.25)'
            */
        bandColor?: string;
        /**
            * Defines the appearance of the upper line in technical indicators
            */
        upperLine?: StockChartConnectorModel;
        /**
            * Defines the name of the series, the data of which has to be depicted as indicator
            *
            * @default ''
            */
        seriesName?: string;
        /**
            * Defines the appearance of period line in technical indicators
            */
        periodLine?: StockChartConnectorModel;
        /**
            * Defines the appearance of lower line in technical indicators
            */
        lowerLine?: ConnectorModel;
        /**
            * The DataSource field that contains the high value of y
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        high?: string;
        /**
            * The DataSource field that contains the open value of y
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        open?: string;
        /**
            * The DataSource field that contains the low value of y
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        low?: string;
        /**
            * The DataSource field that contains the x value.
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        xName?: string;
        /**
            * The DataSource field that contains the close value of y
            * It is applicable for series and technical indicators
            *
            * @default ''
            */
        close?: string;
        /**
            * The DataSource field that contains the color value of point
            * It is applicable for series
            *
            * @default ''
            */
        pointColorMapping?: string;
        /**
            * Defines the data source field that contains the volume value in candle charts
            * It is applicable for financial series and technical indicators
            *
            * @default ''
            */
        volume?: string;
        /**
            * The name of the horizontal axis associated with the series. It requires `axes` of the chart.
            * It is applicable for series and technical indicators
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let chart: Chart = new Chart({
            * ...
            *     columns: [{ width: '50%' },
            *               { width: '50%' }],
            *     axes: [{
            *                name: 'xAxis 1',
            *                columnIndex: 1,
            *            }],
            *     series: [{
            *                dataSource: data,
            *                xName: 'x', yName: 'y',
            *                xAxisName: 'xAxis 1',
            *     }],
            * });
            * chart.appendTo('#Chart');
            * ```
            *
            * @default null
            */
        xAxisName?: string;
        /**
            * The name of the vertical axis associated with the series. It requires `axes` of the chart.
            * It is applicable for series and technical indicators
            * ```html
            * <div id='Chart'></div>
            * ```
            *
            * @default null
            */
        yAxisName?: string;
        /**
            * Options to customizing animation for the series.
            */
        animation?: AnimationModel;
        /**
            * The fill color for the series that accepts value in hex and rgba as a valid CSS color string.
            * It also represents the color of the signal lines in technical indicators.
            * For technical indicators, the default value is 'blue' and for series, it has null.
            *
            * @default null
            */
        fill?: string;
        /**
            * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.
            *
            * @default '0'
            */
        dashArray?: string;
        /**
            * The stroke width for the series that is applicable only for `Line` type series.
            * It also represents the stroke width of the signal lines in technical indicators.
            *
            * @default 1
            */
        width?: number;
        /**
            * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.
            *
            * @default null
            */
        query?: Query;
        /**
            * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager.
            * ```html
            * <div id='Chart'></div>
            * ```
            *
            * @default ''
            */
        dataSource?: Object | DataManager;
}
/**
    * Interface for a class StockChartAxis
    */
export interface StockChartAxisModel {
        /**
            * Options to customize the crosshair ToolTip.
            */
        crosshairTooltip?: CrosshairTooltipModel;
        /**
            * Options to customize the axis label.
            */
        labelStyle?: StockChartFontModel;
        /**
            * Specifies the title of an axis.
            *
            * @default ''
            */
        title?: string;
        /**
            * Options for customizing the axis title.
            */
        titleStyle?: StockChartFontModel;
        /**
            * Used to format the axis label that accepts any global string format like 'C', 'n1', 'P' etc.
            * It also accepts placeholder like '{value}°C' in which value represent the axis label, e.g, 20°C.
            *
            * @default ''
            */
        labelFormat?: string;
        /**
            * It specifies the type of format to be used in dateTime format process.
            *
            * @default 'DateTime'
            */
        skeletonType?: SkeletonType;
        /**
            * Specifies the skeleton format in which the dateTime format will process.
            *
            * @default ''
            */
        skeleton?: string;
        /**
            * Left and right padding for the plot area in pixels.
            *
            * @default 0
            */
        plotOffset?: number;
        /**
            * The base value for logarithmic axis. It requires `valueType` to be `Logarithmic`.
            *
            * @default 10
            */
        logBase?: number;
        /**
            * Specifies the index of the row where the axis is associated, when the chart area is divided into multiple plot areas by using `rows`.
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let chart: Chart = new Chart({
            * ...
            *     rows: [{ height: '50%' },
            *            { height: '50%' }],
            *     axes: [{
            *                name: 'yAxis 1',
            *                rowIndex: 1,
            *      }],
            * ...
            * });
            * chart.appendTo('#Chart');
            * ```
            *
            * @default 0
            */
        rowIndex?: number;
        /**
            * Specifies the number of `columns` or `rows` an axis has to span horizontally or vertically.
            *
            * @default 1
            */
        span?: number;
        /**
            * The maximum number of label count per 100 pixels with respect to the axis length.
            *
            * @default 3
            */
        maximumLabels?: number;
        /**
            * With this property, you can request axis to calculate intervals approximately equal to your specified interval.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        desiredIntervals?: number;
        /**
            * The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Value ranges from 0 to 1.
            *
            * @default 1
            */
        zoomFactor?: number;
        /**
            * Position of the zoomed axis. Value ranges from 0 to 1.
            *
            * @default 0
            */
        zoomPosition?: number;
        /**
            * If set to true, the axis will render at the opposite side of its default position.
            *
            * @default false
            */
        opposedPosition?: boolean;
        /**
            * If set to true, axis interval will be calculated automatically with respect to the zoomed range.
            *
            * @default true
            */
        enableAutoIntervalOnZooming?: boolean;
        /**
            * Specifies the type of data the axis is handling.
            * * Double:  Renders a numeric axis.
            * * DateTime: Renders a dateTime axis.
            * * Category: Renders a category axis.
            * * Logarithmic: Renders a log axis.
            *
            * @default 'Double'
            * @blazorType Syncfusion.EJ2.Blazor.Charts.ValueType
            * @isEnumeration true
            */
        valueType?: ValueType;
        /**
            * Specifies the padding for the axis range in terms of interval.They are,
            * * none: Padding cannot be applied to the axis.
            * * normal: Padding is applied to the axis based on the range calculation.
            * * additional: Interval of the axis is added as padding to the minimum and maximum values of the range.
            * * round: Axis range is rounded to the nearest possible value divided by the interval.
            *
            * @default 'Auto'
            */
        rangePadding?: ChartRangePadding;
        /**
            * Specifies the position of labels at the edge of the axis.They are,
            * * None: No action will be performed.
            * * Hide: Edge label will be hidden.
            * * Shift: Shifts the edge labels.
            *
            * @default 'None'
            */
        edgeLabelPlacement?: EdgeLabelPlacement;
        /**
            * Specifies the placement of a label for category axis. They are,
            * * betweenTicks: Renders the label between the ticks.
            * * onTicks: Renders the label on the ticks.
            *
            * @default 'BetweenTicks'
            */
        labelPlacement?: LabelPlacement;
        /**
            * Specifies the types like `Years`, `Months`, `Days`, `Hours`, `Minutes`, `Seconds` in date time axis.They are,
            * * Auto: Defines the interval of the axis based on data.
            * * Years: Defines the interval of the axis in years.
            * * Months: Defines the interval of the axis in months.
            * * Days: Defines the interval of the axis in days.
            * * Hours: Defines the interval of the axis in hours.
            * * Minutes: Defines the interval of the axis in minutes.
            *
            * @default 'Auto'
            */
        intervalType?: IntervalType;
        /**
            * Specifies the placement of a ticks to the axis line. They are,
            * * inside: Renders the ticks inside to the axis line.
            * * outside: Renders the ticks outside to the axis line.
            *
            * @default 'Outside'
            */
        tickPosition?: AxisPosition;
        /**
            * Unique identifier of an axis.
            * To associate an axis with the series, set this name to the xAxisName/yAxisName properties of the series.
            *
            * @default ''
            */
        name?: string;
        /**
            * Specifies the placement of a labels to the axis line. They are,
            * * inside: Renders the labels inside to the axis line.
            * * outside: Renders the labels outside to the axis line.
            *
            * @default 'Outside'
            */
        labelPosition?: AxisPosition;
        /**
            * If set to true, axis label will be visible.
            *
            * @default true
            */
        visible?: boolean;
        /**
            * The angle to which the axis label gets rotated.
            *
            * @default 0
            */
        labelRotation?: number;
        /**
            * Specifies the number of minor ticks per interval.
            *
            * @default 0
            */
        minorTicksPerInterval?: number;
        /**
            * Specifies the value at which the axis line has to be intersect with the vertical axis or vice versa.
            *
            * @default null
            */
        crossesAt?: Object;
        /**
            * Specifies axis name with which the axis line has to be crossed
            *
            * @default null
            */
        crossesInAxis?: string;
        /**
            * Specifies whether axis elements like axis labels, axis title, etc has to be crossed with axis line
            *
            * @default true
            */
        placeNextToAxisLine?: boolean;
        /**
            * Specifies the minimum range of an axis.
            *
            * @default null
            */
        minimum?: Object;
        /**
            * Specifies the interval for an axis.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        interval?: number;
        /**
            * Specifies the maximum range of an axis.
            *
            * @default null
            */
        maximum?: Object;
        /**
            * Specifies the maximum width of an axis label.
            *
            * @default 34.
            */
        maximumLabelWidth?: number;
        /**
            * Options for customizing major tick lines.
            */
        majorTickLines?: MajorTickLinesModel;
        /**
            * Specifies the Trim property for an axis.
            *
            * @default false
            */
        enableTrim?: boolean;
        /**
            * Options for customizing minor tick lines.
            */
        minorTickLines?: MinorTickLinesModel;
        /**
            * Options for customizing minor grid lines.
            */
        minorGridLines?: MinorGridLinesModel;
        /**
            * Options for customizing major grid lines.
            */
        majorGridLines?: MajorGridLinesModel;
        /**
            * Options for customizing axis lines.
            */
        lineStyle?: AxisLineModel;
        /**
            * It specifies whether the axis to be rendered in inversed manner or not.
            *
            * @default false
            */
        isInversed?: boolean;
        /**
            * Specifies the actions like `Hide`, `Rotate45`, and `Rotate90` when the axis labels intersect with each other.They are,
            * * None: Shows all the labels.
            * * Hide: Hides the label when it intersects.
            * * Rotate45: Rotates the label to 45 degree when it intersects.
            * * Rotate90: Rotates the label to 90 degree when it intersects.
            *
            * @default Hide
            */
        labelIntersectAction?: LabelIntersectAction;
        /**
            * The polar radar radius position.
            *
            * @default 100
            */
        coefficient?: number;
        /**
            * The start angle for the series.
            *
            * @default 0
            */
        startAngle?: number;
        /**
            * TabIndex value for the axis.
            *
            * @default 2
            */
        tabIndex?: number;
        /**
            * Specifies the stripLine collection for the axis
            */
        stripLines?: StockChartStripLineSettingsModel[];
        /**
            * Description for axis and its element.
            *
            * @default null
            */
        description?: string;
}
/**
    * Interface for a class StockChartRow
    */
export interface StockChartRowModel {
        /**
            * The height of the row as a string accept input both as '100px' and '100%'.
            * If specified as '100%, row renders to the full height of its chart.
            *
            * @default '100%'
            */
        height?: string;
        /**
            * Options to customize the border of the rows.
            */
        border?: StockChartBorderModel;
}
/**
    * Interface for a class StockChartTrendline
    */
export interface StockChartTrendlineModel {
        /**
            * Defines the period, the price changes over which will be considered to predict moving average trend line
            *
            * @default 2
            */
        period?: number;
        /**
            * Defines the name of trendline
            *
            * @default ''
            */
        name?: string;
        /**
            * Defines the type of the trendline
            *
            * @default 'Linear'
            */
        type?: TrendlineTypes;
        /**
            * Defines the polynomial order of the polynomial trendline
            *
            * @default 2
            */
        polynomialOrder?: number;
        /**
            * Defines the period, by which the trend has to forward forecast
            *
            * @default 0
            */
        forwardForecast?: number;
        /**
            * Defines the period, by which the trend has to backward forecast
            *
            * @default 0
            */
        backwardForecast?: number;
        /**
            * Options to customize the animation for trendlines
            */
        animation?: AnimationModel;
        /**
            * Enables/disables tooltip for trendlines
            *
            * @default true
            */
        enableTooltip?: boolean;
        /**
            * Options to customize the marker for trendlines
            */
        marker?: MarkerSettingsModel;
        /**
            * Defines the intercept of the trendline
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        intercept?: number;
        /**
            * Defines the fill color of trendline
            *
            * @default ''
            */
        fill?: string;
        /**
            * Sets the legend shape of the trendline
            *
            * @default 'SeriesType'
            */
        legendShape?: LegendShape;
        /**
            * Defines the width of the trendline
            *
            * @default 1
            */
        width?: number;
}
/**
    * Interface for a class StockChartAnnotationSettings
    */
export interface StockChartAnnotationSettingsModel {
        /**
            * if set coordinateUnit as `Pixel` Y specifies the axis value
            * else is specifies pixel or percentage of coordinate
            *
            * @default '0'
            */
        y?: string | number;
        /**
            * if set coordinateUnit as `Pixel` X specifies the axis value
            * else is specifies pixel or percentage of coordinate
            *
            * @default '0'
            */
        x?: string | Date | number;
        /**
            * Content of the annotation, which accepts the id of the custom element.
            *
            * @default null
            */
        content?: string;
        /**
            * Specifies the regions of the annotation. They are
            * * Chart - Annotation renders based on chart coordinates.
            * * Series - Annotation renders based on series coordinates.
            *
            * @default 'Chart'
            */
        region?: Regions;
        /**
            * Specifies the alignment of the annotation. They are
            * * Near - Align the annotation element as left side.
            * * Far - Align the annotation element as right side.
            * * Center - Align the annotation element as mid point.
            *
            * @default 'Center'
            */
        horizontalAlignment?: Alignment;
        /**
            * Specifies the coordinate units of the annotation. They are
            * * Pixel - Annotation renders based on x and y pixel value.
            * * Point - Annotation renders based on x and y axis value.
            *
            * @default 'Pixel'
            */
        coordinateUnits?: Units;
        /**
            * Specifies the position of the annotation. They are
            * * Top - Align the annotation element as top side.
            * * Bottom - Align the annotation element as bottom side.
            * * Middle - Align the annotation element as mid point.
            *
            * @default 'Middle'
            */
        verticalAlignment?: Position;
        /**
            * The name of vertical axis associated with the annotation.
            * It requires `axes` of chart.
            *
            * @default null
            */
        yAxisName?: string;
        /**
            * Information about annotation for assistive technology.
            *
            * @default null
            */
        description?: string;
        /**
            * The name of horizontal axis associated with the annotation.
            * It requires `axes` of chart.
            *
            * @default null
            */
        xAxisName?: string;
}
/**
    * Interface for a class StockChartIndexes
    */
export interface StockChartIndexesModel {
        /**
            * Specifies index of point
            *
            * @default 0
            * @aspType int
            */
        point?: number;
        /**
            * Specifies index of series
            *
            * @default 0
            * @aspType int
            */
        series?: number;
}
/**
    * Interface for a class StockEventsSettings
    */
export interface StockEventsSettingsModel {
        /**
            * Specifies type of stock events
            * * Circle
            * * Square
            * * Flag
            * * Text
            * * Sign
            * * Triangle
            * * InvertedTriangle
            * * ArrowUp
            * * ArrowDown
            * * ArrowLeft
            * * ArrowRight
            *
            * @default 'Circle'
            */
        type?: FlagType;
        /**
            * Specifies the text for the stock chart text.
            */
        text?: string;
        /**
            * Specifies the description for the chart which renders in tooltip for stock event.
            */
        description?: string;
        /**
            * Date value of stock event in which stock event shows.
            */
        date?: Date;
        /**
            * Options to customize the border of the stock events.
            */
        border?: StockChartBorderModel;
        /**
            * The background of the stock event that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default 'transparent'
            */
        background?: string;
        /**
            * Enables the stock events to be render on series. If it disabled, stock event rendered on primaryXAxis.
            *
            * @default true
            */
        showOnSeries?: boolean;
        /**
            * Corresponding values in which stock event placed.
            * * Close
            * * Open
            * * High
            * * Close
            *
            * @default 'close'
            */
        placeAt?: string;
        /**
            * Options to customize the styles for stock events text.
            */
        textStyle?: StockChartFontModel;
        /**
            * To render stock events in particular series.
            * By default stock events will render for all series.
            *
            * @default []
            */
        seriesIndexes?: number[];
}

/**
    * Configures the legends in charts.
    */
export class StockChartLegendSettings extends ChildProperty<StockChartLegendSettings> {
        /**
            * If set to true, legend will be visible.
            *
            * @default false
            */
        visible: boolean;
        /**
            * The height of the legend in pixels.
            *
            * @default null
            */
        height: string;
        /**
            * The width of the legend in pixels.
            *
            * @default null
            */
        width: string;
        /**
            * Specifies the location of the legend, relative to the Stock chart.
            * If x is 20, legend moves by 20 pixels to the right of the Stock chart. It requires the `position` to be `Custom`.
            * ```html
            * <div id='StockChart'></div>
            * ```
            * ```typescript
            * let stockChart: StockChart = new StockChart({
            * ...
            *   legendSettings: {
            *     visible: true,
            *     position: 'Custom',
            *     location: { x: 100, y: 150 },
            *   },
            * ...
            * });
            * stockChart.appendTo('#StockChart');
            * ```
            */
        location: LocationModel;
        /**
            * Position of the legend in the Stock chart are,
            * * Auto: Places the legend based on area type.
            * * Top: Displays the legend at the top of the stock chart.
            * * Left: Displays the legend at the left of the stock chart.
            * * Bottom: Displays the legend at the bottom of the stock chart.
            * * Right: Displays the legend at the right of the stock chart.
            * * Custom: Displays the legend  based on the given x and y values.
            *
            * @default 'Auto'
            */
        position: LegendPosition;
        /**
         * Mode of legend items
         * * Series: Legend items generated based on series count.
         * * Point: Legend items generated based on unique data points.
         * * Range: Legend items generated based on range color mapping property.
         * * Gradient: Single linear bar generated based on range color mapping property.
         * This property is applicable for chart component only.
         */
        mode: LegendMode;
        /**
            * Option to customize the padding between legend items.
            *
            * @default 8
            */
        padding: number;
        /**
            * Legend in stock chart can be aligned as follows:
            * * Near: Aligns the legend to the left of the stock chart.
            * * Center: Aligns the legend to the center of the stock chart.
            * * Far: Aligns the legend to the right of the stock chart.
            *
            * @default 'Center'
            */
        alignment: Alignment;
        /**
            * Options to customize the legend text.
            */
        textStyle: StockChartFontModel;
        /**
            * Shape height of the legend in pixels.
            *
            * @default 10
            */
        shapeHeight: number;
        /**
            * Shape width of the legend in pixels.
            *
            * @default 10
            */
        shapeWidth: number;
        /**
            * Options to customize the border of the legend.
            */
        border: StockChartBorderModel;
        /**
            *  Options to customize left, right, top and bottom margins of the stock chart.
            */
        margin: StockMarginModel;
        /**
            *  Options to customize left, right, top and bottom padding for legend container of the stock chart.
            */
        containerPadding: ContainerPaddingModel;
        /**
            * Padding between the legend shape and text in stock chart.
            *
            * @default 5
            */
        shapePadding: number;
        /**
            * The background color of the legend that accepts value in hex and rgba as a valid CSS color string in stock chart.
            *
            * @default 'transparent'
            */
        background: string;
        /**
            * Opacity of the legend in stock chart.
            *
            * @default 1
            */
        opacity: number;
        /**
            * If set to true, series' visibility collapses based on the legend visibility in stock chart.
            *
            * @default true
            */
        toggleVisibility: boolean;
        /**
            * Description for legends in stock chart.
            *
            * @default null
            */
        description: string;
        /**
            * TabIndex value for the legend in stock chart.
            *
            * @default 3
            */
        tabIndex: number;
        /**
            * Title for legends in stock chart.
            *
            * @default null
            */
        title: string;
        /**
            * Options to customize the legend title in stock chart.
            */
        titleStyle: StockChartFontModel;
        /**
            * legend title position in stock chart
            *
            * @default 'Top'
            */
        titlePosition: LegendTitlePosition;
        /**
            * maximum width for the legend title in stock chart.
            *
            * @default 100
            */
        maximumTitleWidth: number;
        /**
            * If set to true, legend will be visible using pages in stock chart.
            *
            * @default true
            */
        enablePages: boolean;
        /**
            * If set to true, legend will be Reversed in stock chart.
            *
            * @default false
            */
        isInversed: boolean;
}
/**
    * `Legend` module is used to render legend for the stockchart.
    */
export class StockLegend extends BaseLegend {
        constructor(chart: StockChart);
        getLegendOptions(visibleSeriesCollection: Series[], chart: StockChart): void;
        /** @private */
        getLegendBounds(availableSize: Size, legendBound: Rect, legend: StockChartLegendSettingsModel): void;
        /** @private */
        getRenderPoint(legendOptions: LegendOptions, start: ChartLocation, textPadding: number, prevLegend: LegendOptions, rect: Rect, count: number, firstLegend: number): void;
        /** @private */
        legendClick(index: number, event: Event | PointerEvent): void;
        /**
            * To show the tooltip for the trimmed text in legend.
            *
            * @returns {void}
            */
        click(event: Event | PointerEvent): void;
        /**
            * Get module name
            */
        protected getModuleName(): string;
        /**
            * To destroy the Legend.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/** @private */
export const loaded: string;
/** @private */
export const legendClick: string;
/** @private */
export const load: string;
/** @private */
export const animationComplete: string;
/** @private */
export const legendRender: string;
/** @private */
export const textRender: string;
/** @private */
export const pointRender: string;
/** @private */
export const sharedTooltipRender: string;
/** @private */
export const seriesRender: string;
/** @private */
export const axisLabelRender: string;
/** @private */
export const axisLabelClick: string;
/** @private */
export const axisRangeCalculated: string;
/** @private */
export const axisMultiLabelRender: string;
/** @private */
export const tooltipRender: string;
/** @private */
export const chartMouseMove: string;
/** @private */
export const chartMouseClick: string;
/** @private */
export const pointClick: string;
/** @private */
export const pointDoubleClick: string;
/** @private */
export const pointMove: string;
/** @private */
export const chartMouseLeave: string;
/** @private */
export const chartMouseDown: string;
/** @private */
export const chartMouseUp: string;
/** @private */
export const zoomComplete: string;
/** @private */
export const dragComplete: string;
/** @private */
export const selectionComplete: string;
/** @private */
export const resized: string;
/** @private */
export const beforeResize: string;
/** @private */
export const beforePrint: string;
/** @private */
export const annotationRender: string;
/** @private */
export const scrollStart: string;
/** @private */
export const scrollEnd: string;
/** @private */
export const scrollChanged: string;
/** @private */
export const stockEventRender: string;
/** @private */
export const multiLevelLabelClick: string;
/** @private */
export const dragStart: string;
/** @private */
export const drag: string;
/** @private */
export const dragEnd: string;
/*** @private*/
export const regSub: RegExp;
/*** @private*/
export const regSup: RegExp;
/** @private */
export const beforeExport: string;
/** @private */
export const afterExport: string;
/** @private */
export const bulletChartMouseClick: string;
/** @private */
export const onZooming: string;

/**
  * Specifies Chart Themes
  */
export namespace Theme {
    /** @private */
    const axisLabelFont: IFontMapping;
    /** @private */
    const axisTitleFont: IFontMapping;
    /** @private */
    const chartTitleFont: IFontMapping;
    /** @private */
    const chartSubTitleFont: IFontMapping;
    /** @private */
    const crosshairLabelFont: IFontMapping;
    /** @private */
    const tooltipLabelFont: IFontMapping;
    /** @private */
    const legendLabelFont: IFontMapping;
    /** @private */
    const legendTitleFont: IFontMapping;
    /** @private */
    const stripLineLabelFont: IFontMapping;
    /** @private */
    const stockEventFont: IFontMapping;
}
/** @private */
export function getSeriesColor(theme: ChartTheme | AccumulationTheme): string[];
/** @private */
export function getThemeColor(theme: ChartTheme | AccumulationTheme): IThemeStyle;
/** @private */
export function getScrollbarThemeColor(theme: ChartTheme): IScrollbarThemeStyle;

/**
    * Period selector class
    */
export class PeriodSelector {
        periodSelectorSize: Rect;
        periodSelectorDiv: Element;
        control: IPeriodSelectorControl;
        toolbar: Toolbar;
        datePicker: DateRangePicker;
        triggerChange: boolean;
        calendarId: string;
        selectedIndex: number;
        datePickerTriggered: boolean;
        rootControl: StockChart | RangeNavigator;
        constructor(control: RangeNavigator | StockChart);
        /**
            * To set the control values
            *
            * @param control
            * @returns {void}
            */
        setControlValues(control: RangeNavigator | StockChart): void;
        /**
            * To initialize the period selector properties
            *
            * @param options
            * @param x
            * @param options
            * @param x
            */
        appendSelector(options: ISelectorRenderArgs, x?: number): void;
        /**
            * renderSelector div
            *
            * @param control
            * @param options
            * @param x
            * @param options
            * @param x
            */
        renderSelectorElement(control?: RangeNavigator, options?: ISelectorRenderArgs, x?: number): void;
        /**
            * renderSelector elements
            *
            * @returns {void}
            */
        renderSelector(): void;
        /**
            *
            * @param type updatedRange for selector
            * @param end
            * @param interval
            */
        changedRange(type: RangeIntervalType, end: number, interval: number): Date;
        /**
            * Get module name
            *
            * @returns {string}
            */
        protected getModuleName(): string;
        /**
            * To destroy the period selector.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * Interface for a class Location
    */
export interface LocationModel {
        /**
            * X coordinate of the legend in pixels.
            *
            * @default 0
            */
        x?: number;
        /**
            * Y coordinate of the legend in pixels.
            *
            * @default 0
            */
        y?: number;
}
/**
    * Interface for a class LegendSettings
    */
export interface LegendSettingsModel {
        /**
            * If set to true, legend will be visible.
            *
            * @default true
            */
        visible?: boolean;
        /**
            * The height of the legend in pixels.
            *
            * @default null
            */
        height?: string;
        /**
            * The width of the legend in pixels.
            *
            * @default null
            */
        width?: string;
        /**
            * Specifies the location of the legend, relative to the chart.
            * If x is 20, legend moves by 20 pixels to the right of the chart. It requires the `position` to be `Custom`.
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let chart: Chart = new Chart({
            * ...
            *   legendSettings: {
            *     visible: true,
            *     position: 'Custom',
            *     location: { x: 100, y: 150 },
            *   },
            * ...
            * });
            * chart.appendTo('#Chart');
            * ```
            */
        location?: LocationModel;
        /**
            * Position of the legend in the chart are,
            * * Auto: Places the legend based on area type.
            * * Top: Displays the legend at the top of the chart.
            * * Left: Displays the legend at the left of the chart.
            * * Bottom: Displays the legend at the bottom of the chart.
            * * Right: Displays the legend at the right of the chart.
            * * Custom: Displays the legend  based on the given x and y values.
            *
            * @default 'Auto'
            */
        position?: LegendPosition;
        /**
         * Mode of legend items
         * * Series: Legend items generated based on series count.
         * * Point: Legend items generated based on unique data points.
         * * Range: Legend items generated based on range color mapping property.
         * * Gradient: Single linear bar generated based on range color mapping property.
         * This property is applicable for chart component only.
         */
        mode?: LegendMode;
        /**
            * Option to customize the padding between legend items.
            *
            * @default 8
            */
        padding?: number;
        /**
            * Legend in chart can be aligned as follows:
            * * Near: Aligns the legend to the left of the chart.
            * * Center: Aligns the legend to the center of the chart.
            * * Far: Aligns the legend to the right of the chart.
            *
            * @default 'Center'
            */
        alignment?: Alignment;
        /**
            * Options to customize the legend text.
            */
        textStyle?: FontModel;
        /**
            * Shape height of the legend in pixels.
            *
            * @default 10
            */
        shapeHeight?: number;
        /**
            * Shape width of the legend in pixels.
            *
            * @default 10
            */
        shapeWidth?: number;
        /**
            * Options to customize the border of the legend.
            */
        border?: BorderModel;
        /**
            *  Options to customize left, right, top and bottom margins of the chart.
            */
        margin?: MarginModel;
        /**
            *  Options to customize left, right, top and bottom padding for legend container of the chart.
            */
        containerPadding?: ContainerPaddingModel;
        /**
            * Padding between the legend shape and text.
            *
            * @default 5
            */
        shapePadding?: number;
        /**
            * The background color of the legend that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default 'transparent'
            */
        background?: string;
        /**
            * Opacity of the legend.
            *
            * @default 1
            */
        opacity?: number;
        /**
            * If set to true, series' visibility collapses based on the legend visibility.
            *
            * @default true
            */
        toggleVisibility?: boolean;
        /**
            * Description for legends.
            *
            * @default null
            */
        description?: string;
        /**
            * TabIndex value for the legend.
            *
            * @default 3
            */
        tabIndex?: number;
        /**
            * Title for legends.
            *
            * @default null
            */
        title?: string;
        /**
            * Options to customize the legend title.
            */
        titleStyle?: FontModel;
        /**
            * legend title position
            *
            * @default 'Top'
            */
        titlePosition?: LegendTitlePosition;
        /**
            * maximum width for the legend title.
            *
            * @default 100
            */
        maximumTitleWidth?: number;
        /**
            * If set to true, legend will be visible using pages.
            *
            * @default true
            */
        enablePages?: boolean;
        /**
            * If set to true, legend will be Reversed.
            *
            * @default false
            */
        isInversed?: boolean;
}
/**
    * Interface for a class BaseLegend
    * @private
    */
export interface BaseLegendModel {
}
/**
    * Interface for a class LegendOptions
    * @private
    */
export interface LegendOptionsModel {
}

/**
    * Range Navigator
    */
export class RangeNavigator extends Component<HTMLElement> {
        /**
            * `lineSeriesModule` is used to add line series to the chart.
            */
        lineSeriesModule: LineSeries;
        /**
            * `areaSeriesModule` is used to add area series in the chart.
            */
        areaSeriesModule: AreaSeries;
        /**
            * `stepLineSeriesModule` is used to add stepLine series in the chart.
            */
        stepLineSeriesModule: StepLineSeries;
        /**
            * `datetimeModule` is used to manipulate and add dateTime axis to the chart.
            */
        dateTimeModule: DateTime;
        /**
            * `doubleModule` is used to manipulate and add double axis to the chart.
            */
        doubleModule: Double;
        /**
            * `logarithmicModule` is used to manipulate and add log axis to the chart.
            */
        logarithmicModule: Logarithmic;
        /**
            * `tooltipModule` is used to manipulate and add tooltip to the series.
            */
        rangeTooltipModule: RangeTooltip;
        /**
            * `periodSelectorModule` is used to add period selector un range navigator
            */
        periodSelectorModule: PeriodSelector;
        /**
            * The width of the range navigator as a string accepts input as both like '100px' or '100%'.
            * If specified as '100%, range navigator renders to the full width of its parent element.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        width: string;
        /**
            * The height of the chart as a string accepts input both as '100px' or '100%'.
            * If specified as '100%, range navigator renders to the full height of its parent element.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        height: string;
        /**
            * It defines the data source for a range navigator.
            *
            * @default null
            */
        dataSource: Object | DataManager;
        /**
            * It defines the xName for the range navigator.
            *
            * @default null
            */
        xName: string;
        /**
            * It defines the yName for the range navigator.
            *
            * @default null
            */
        yName: string;
        /**
            * It defines the query for the data source.
            *
            * @default null
            */
        query: Query;
        /**
            * It defines the configuration of series in the range navigator
            */
        series: RangeNavigatorSeriesModel[];
        /**
            * Options for customizing the tooltip of the chart.
            */
        tooltip: RangeTooltipSettingsModel;
        /**
            * Minimum value for the axis
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        minimum: number | Date;
        /**
            * Maximum value for the axis
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        maximum: number | Date;
        /**
            * interval value for the axis
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        interval: number;
        /**
            * IntervalType for the dateTime axis
            *
            * @default 'Auto'
            */
        intervalType: RangeIntervalType;
        /**
            * Specifies, when the axis labels intersect with each other.They are,
            * * None: Shows all the labels.
            * * Hide: Hides the label when it intersects.
            *
            * @default Hide
            */
        labelIntersectAction: RangeLabelIntersectAction;
        /**
            * base value for log axis
            *
            * @default 10
            */
        logBase: number;
        /**
            * ValueType for the axis
            *
            * @default 'Double'
            */
        valueType: RangeValueType;
        /**
            * Label positions for the axis
            *
            * @default 'Outside'
            */
        labelPosition: AxisPosition;
        /**
            * Duration of the animation
            *
            * @default 500
            */
        animationDuration: number;
        /**
            * Enable grouping for the labels
            *
            * @default false
            */
        enableGrouping: boolean;
        /**
            * Enable deferred update for the range navigator
            *
            * @default false
            */
        enableDeferredUpdate: boolean;
        /**
            * To render the period selector with out range navigator.
            *
            * @default false
            */
        disableRangeSelector: boolean;
        /**
            * Enable snapping for range navigator sliders
            *
            * @default false
            */
        allowSnapping: boolean;
        /**
            * Allow the data to be selected for that particular interval while clicking the particular label
            */
        allowIntervalData: boolean;
        /**
            * Specifies whether a grouping separator should be used for a number.
            *
            * @default false
            */
        useGroupingSeparator: boolean;
        /**
            * GroupBy property for the axis
            *
            * @default `Auto`
            */
        groupBy: RangeIntervalType;
        /**
            * Tick Position for the axis
            *
            * @default 'Outside'
            */
        tickPosition: AxisPosition;
        /**
            * Label style for the labels
            */
        labelStyle: FontModel;
        /**
            * MajorGridLines
            */
        majorGridLines: MajorGridLinesModel;
        /**
            * MajorTickLines
            */
        majorTickLines: MajorTickLinesModel;
        /**
            * Navigator style settings
            */
        navigatorStyleSettings: StyleSettingsModel;
        /**
            * Period selector settings
            */
        periodSelectorSettings: PeriodSelectorSettingsModel;
        /**
            * Options for customizing the color and width of the chart border.
            */
        navigatorBorder: BorderModel;
        /**
            * Specifies the theme for the range navigator.
            *
            * @default 'Material'
            */
        theme: ChartTheme;
        /**
            * Selected range for range navigator.
            *
            * @default []
            */
        value: number[] | Date[];
        /**
            * The background color of the chart that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        background: string;
        /**
            * Used to format the axis label that accepts any global string format like 'C', 'n1', 'P' etc.
            * It also accepts placeholder like '{value}°C' in which value represent the axis label, e.g, 20°C.
            *
            * @default ''
            */
        labelFormat: string;
        /**
            * Specifies the skeleton format in which the dateTime format will process.
            *
            * @default ''
            */
        skeleton: string;
        /**
            * It specifies the type of format to be used in dateTime format process.
            *
            * @default 'DateTime'
            */
        skeletonType: SkeletonType;
        /**
            * It specifies the label alignment for secondary axis labels
            *
            * @default 'Middle'
            */
        secondaryLabelAlignment: LabelAlignment;
        /**
            * Margin for the range navigator
            *
            * @default
            */
        margin: MarginModel;
        /** @private */
        themeStyle: IRangeStyle;
        /**
            * Triggers before the range navigator rendering
            *
            * @event load
            */
        load: EmitType<IRangeLoadedEventArgs>;
        /**
            * Triggers after the range navigator rendering
            *
            * @event loaded
            * @blazorProperty 'Loaded'
            */
        loaded: EmitType<IRangeLoadedEventArgs>;
        /**
            * Triggers after the range navigator resized
            *
            * @event resized
            * @blazorProperty 'Resized'
            */
        resized: EmitType<IResizeRangeNavigatorEventArgs>;
        /**
            * Triggers before the label rendering
            *
            * @event labelRender
            * @deprecated
            */
        labelRender: EmitType<ILabelRenderEventsArgs>;
        /**
            * Triggers after change the slider.
            *
            * @event changed
            * @blazorProperty 'Changed'
            */
        changed: EmitType<IChangedEventArgs>;
        /**
            * Triggers before the tooltip for series is rendered.
            *
            * @event tooltipRender
            * @deprecated
            */
        tooltipRender: EmitType<IRangeTooltipRenderEventArgs>;
        /**
            * Triggers before the range navigator selector rendering
            *
            * @event selectorRender
            * @deprecated
            */
        selectorRender: EmitType<IRangeSelectorRenderEventArgs>;
        /**
            * Triggers before the prints gets started.
            *
            * @event beforePrint
            * @blazorProperty 'OnPrint'
            */
        beforePrint: EmitType<IPrintEventArgs>;
        /** @private */
        renderer: SvgRenderer;
        /** @private */
        svgObject: HTMLElement;
        /** @private */
        intl: Internationalization;
        /** @private */
        bounds: Rect;
        /** @private */
        availableSize: Size;
        /** @private */
        startValue: number;
        /** @private */
        endValue: number;
        /** @private */
        mouseX: number;
        /** @private */
        mouseDownX: number;
        /** @private */
        rangeSlider: RangeSlider;
        /** @private */
        chartSeries: RangeSeries;
        /** @private */
        rangeAxis: RangeNavigatorAxis;
        /** @private */
        dataModule: Data;
        /** @private */
        labels: ILabelRenderEventsArgs[];
        /** @private */
        animateSeries: boolean;
        /** @private */
        format: Function;
        /** @private */
        stockChart: StockChart;
        /**
            * Constructor for creating the widget
            *
            * @hidden
            */
        constructor(options?: RangeNavigatorModel, element?: string | HTMLElement);
        /**
            * Starting point of the control initialization
            */
        preRender(): void;
        /**
            * To render the range navigator
            */
        render(): void;
        /**
            * Creating Chart for range navigator
            */
        renderChart(): void;
        /**
            * Creating secondary range navigator
            */
        createSecondaryElement(): void;
        /**
            * To Remove the SVG.
            *
            * @returns {void}
            * @private
            */
        removeSvg(): void;
        /**
            * Handles the widget resize.
            *
            * @private
            */
        rangeResize(): boolean;
        /**
            * Handles the mouse move.
            *
            * @private
            */
        mouseMove(e: PointerEvent): boolean;
        /**
            * Handles the mouse leave.
            *
            * @private
            */
        mouseLeave(e: PointerEvent): boolean;
        /**
            * Handles the mouse click on range navigator.
            *
            * @private
            */
        rangeOnMouseClick(e: PointerEvent | TouchEvent): boolean;
        /**
            * Handles the print method for range navigator control.
            */
        print(id?: string[] | string | Element): void;
        /**
            * Handles the export method for range navigator control.
            */
        export(type: ExportType, fileName: string, orientation?: PdfPageOrientation, controls?: (Chart | AccumulationChart | RangeNavigator)[], width?: number, height?: number, isVertical?: boolean): void;
        /**
            * Handles the mouse down on range navigator.
            *
            * @private
            */
        rangeOnMouseDown(e: PointerEvent): boolean;
        /**
            * Handles the mouse up.
            *
            * @private
            */
        mouseEnd(e: PointerEvent): boolean;
        /**
            * Get the properties to be maintained in the persisted state.
            *
            * @private
            */
        getPersistData(): string;
        /**
            * OnProperty change method calling here
            *
            * @param {RangeNavigatorModel} newProp new RangeNavigatorModel
            * @param {RangeNavigatorModel} oldProp old RangeNavigatorModel
            */
        onPropertyChanged(newProp: RangeNavigatorModel, oldProp: RangeNavigatorModel): void;
        /**
            * To provide the array of modules needed for control rendering
            *
            * @returns {ModuleDeclaration[]} requiredModules
            * @private
            */
        requiredModules(): ModuleDeclaration[];
        /**
            * To get the module name of the widget
            */
        getModuleName(): string;
        /**
            * To destroy the widget
            *
            * @function destroy
            * @returns {void}.
            * @member of rangeNavigator
            */
        destroy(): void;
}

/**
    * Interface for a class RangeNavigator
    */
export interface RangeNavigatorModel extends ComponentModel {
        /**
            * The width of the range navigator as a string accepts input as both like '100px' or '100%'.
            * If specified as '100%, range navigator renders to the full width of its parent element.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        width?: string;
        /**
            * The height of the chart as a string accepts input both as '100px' or '100%'.
            * If specified as '100%, range navigator renders to the full height of its parent element.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        height?: string;
        /**
            * It defines the data source for a range navigator.
            *
            * @default null
            */
        dataSource?: Object | DataManager;
        /**
            * It defines the xName for the range navigator.
            *
            * @default null
            */
        xName?: string;
        /**
            * It defines the yName for the range navigator.
            *
            * @default null
            */
        yName?: string;
        /**
            * It defines the query for the data source.
            *
            * @default null
            */
        query?: Query;
        /**
            * It defines the configuration of series in the range navigator
            */
        series?: RangeNavigatorSeriesModel[];
        /**
            * Options for customizing the tooltip of the chart.
            */
        tooltip?: RangeTooltipSettingsModel;
        /**
            * Minimum value for the axis
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        minimum?: number | Date;
        /**
            * Maximum value for the axis
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        maximum?: number | Date;
        /**
            * interval value for the axis
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        interval?: number;
        /**
            * IntervalType for the dateTime axis
            *
            * @default 'Auto'
            */
        intervalType?: RangeIntervalType;
        /**
            * Specifies, when the axis labels intersect with each other.They are,
            * * None: Shows all the labels.
            * * Hide: Hides the label when it intersects.
            *
            * @default Hide
            */
        labelIntersectAction?: RangeLabelIntersectAction;
        /**
            * base value for log axis
            *
            * @default 10
            */
        logBase?: number;
        /**
            * ValueType for the axis
            *
            * @default 'Double'
            */
        valueType?: RangeValueType;
        /**
            * Label positions for the axis
            *
            * @default 'Outside'
            */
        labelPosition?: AxisPosition;
        /**
            * Duration of the animation
            *
            * @default 500
            */
        animationDuration?: number;
        /**
            * Enable grouping for the labels
            *
            * @default false
            */
        enableGrouping?: boolean;
        /**
            * Enable deferred update for the range navigator
            *
            * @default false
            */
        enableDeferredUpdate?: boolean;
        /**
            * To render the period selector with out range navigator.
            *
            * @default false
            */
        disableRangeSelector?: boolean;
        /**
            * Enable snapping for range navigator sliders
            *
            * @default false
            */
        allowSnapping?: boolean;
        /**
            * Allow the data to be selected for that particular interval while clicking the particular label
            */
        allowIntervalData?: boolean;
        /**
            * Specifies whether a grouping separator should be used for a number.
            *
            * @default false
            */
        useGroupingSeparator?: boolean;
        /**
            * GroupBy property for the axis
            *
            * @default `Auto`
            */
        groupBy?: RangeIntervalType;
        /**
            * Tick Position for the axis
            *
            * @default 'Outside'
            */
        tickPosition?: AxisPosition;
        /**
            * Label style for the labels
            */
        labelStyle?: FontModel;
        /**
            * MajorGridLines
            */
        majorGridLines?: MajorGridLinesModel;
        /**
            * MajorTickLines
            */
        majorTickLines?: MajorTickLinesModel;
        /**
            * Navigator style settings
            */
        navigatorStyleSettings?: StyleSettingsModel;
        /**
            * Period selector settings
            */
        periodSelectorSettings?: PeriodSelectorSettingsModel;
        /**
            * Options for customizing the color and width of the chart border.
            */
        navigatorBorder?: BorderModel;
        /**
            * Specifies the theme for the range navigator.
            *
            * @default 'Material'
            */
        theme?: ChartTheme;
        /**
            * Selected range for range navigator.
            *
            * @default []
            */
        value?: number[] | Date[];
        /**
            * The background color of the chart that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        background?: string;
        /**
            * Used to format the axis label that accepts any global string format like 'C', 'n1', 'P' etc.
            * It also accepts placeholder like '{value}°C' in which value represent the axis label, e.g, 20°C.
            *
            * @default ''
            */
        labelFormat?: string;
        /**
            * Specifies the skeleton format in which the dateTime format will process.
            *
            * @default ''
            */
        skeleton?: string;
        /**
            * It specifies the type of format to be used in dateTime format process.
            *
            * @default 'DateTime'
            */
        skeletonType?: SkeletonType;
        /**
            * It specifies the label alignment for secondary axis labels
            *
            * @default 'Middle'
            */
        secondaryLabelAlignment?: LabelAlignment;
        /**
            * Margin for the range navigator
            *
            * @default
            */
        margin?: MarginModel;
        /**
            * Triggers before the range navigator rendering
            *
            * @event load
            */
        load?: EmitType<IRangeLoadedEventArgs>;
        /**
            * Triggers after the range navigator rendering
            *
            * @event loaded
            * @blazorProperty 'Loaded'
            */
        loaded?: EmitType<IRangeLoadedEventArgs>;
        /**
            * Triggers after the range navigator resized
            *
            * @event resized
            * @blazorProperty 'Resized'
            */
        resized?: EmitType<IResizeRangeNavigatorEventArgs>;
        /**
            * Triggers before the label rendering
            *
            * @event labelRender
            * @deprecated
            */
        labelRender?: EmitType<ILabelRenderEventsArgs>;
        /**
            * Triggers after change the slider.
            *
            * @event changed
            * @blazorProperty 'Changed'
            */
        changed?: EmitType<IChangedEventArgs>;
        /**
            * Triggers before the tooltip for series is rendered.
            *
            * @event tooltipRender
            * @deprecated
            */
        tooltipRender?: EmitType<IRangeTooltipRenderEventArgs>;
        /**
            * Triggers before the range navigator selector rendering
            *
            * @event selectorRender
            * @deprecated
            */
        selectorRender?: EmitType<IRangeSelectorRenderEventArgs>;
        /**
            * Triggers before the prints gets started.
            *
            * @event beforePrint
            * @blazorProperty 'OnPrint'
            */
        beforePrint?: EmitType<IPrintEventArgs>;
}

/**
    * It defines type of series in the range navigator.
    * * line
    * * column
    * * area
    *
    * @private
    */
export type RangeNavigatorType = 
/** Line type */
'Line' | 
/** Area type */
'Area' | 
/** StepLine type */
'StepLine';
/**
    * It defines type of thump in the range navigator.
    * * circle
    * * rectangle
    *
    * @private
    */
export type ThumbType = 
/** Circle type */
'Circle' | 
/** Rectangle type */
'Rectangle';
/**
    * It defines display mode for the range navigator tooltip.
    * * always
    * * OnDemand
    *
    * @private
    */
export type TooltipDisplayMode = 
/** Tooltip will be shown always */
'Always' | 
/** Tooltip will be shown only in mouse move */
'OnDemand';
/**
    * It defines the value Type for the axis used
    * * double
    * * category
    * * dateTime
    * * logarithmic
    *
    * @private
    */
export type RangeValueType = 
/** Double axis */
'Double' | 
/** Datetime axis */
'DateTime' | 
/** Logarithmic axis */
'Logarithmic';
/**
    * Label alignment of the axis
    * *Near
    * *Middle
    * *Far
    *
    * @private
    */
export type LabelAlignment = 
/** Near alignment */
'Near' | 
/** Middle alignment */
'Middle' | 
/** Far Alignment */
'Far';
/**
    * Defines the intersect action. They are
    * * none - Shows all the labels.
    * * hide - Hide the label when it intersect.
    * *
    */
export type RangeLabelIntersectAction = 
/** Shows all the labels. */
'None' | 
/** Hide the label when it intersect. */
'Hide';

/** @private */
export function rangeValueToCoefficient(value: number, range: VisibleRangeModel, inversed: boolean): number;
/** @private */
export function getXLocation(x: number, range: VisibleRangeModel, size: number, inversed: boolean): number;
/** @private */
export function getRangeValueXByPoint(value: number, size: number, range: VisibleRangeModel, inversed: boolean): number;
/** @private */
export function getExactData(points: DataPoint[], start: number, end: number): DataPoint[];
/** @private */
export function getNearestValue(values: number[], point: number): number;
/**
    * Data point
    *
    * @public
    */
export class DataPoint {
        /** point x */
        x: Object;
        /** point y */
        y: Object;
        /** point x value */
        xValue?: number;
        /** point y value */
        yValue?: number;
        /** point visibility */
        visible?: boolean;
        constructor(x: Object, y: Object, xValue?: number, yValue?: number, visible?: boolean);
}

/**
  *
  */
export namespace RangeNavigatorTheme {
    /** @private */
    const axisLabelFont: IFontMapping;
    /** @private */
    const tooltipLabelFont: IFontMapping;
}
/** @private */
export function getRangeThemeColor(theme: ChartTheme, range: RangeNavigator): IRangeStyle;

/**
    * class for axis
    */
export class RangeNavigatorAxis extends DateTime {
        constructor(range: RangeNavigator);
        actualIntervalType: RangeIntervalType;
        rangeNavigator: RangeNavigator;
        firstLevelLabels: VisibleLabels[];
        secondLevelLabels: VisibleLabels[];
        lowerValues: number[];
        gridLines: Element;
        /**
            * To render grid lines of axis
            */
        renderGridLines(): void;
        /**
            * To render of axis labels
            */
        renderAxisLabels(): void;
}

/**
    * To render Chart series
    */
export class RangeSeries extends NiceInterval {
        xMin: number;
        xMax: number;
        yMin: number;
        yMax: number;
        xAxis: Axis;
        constructor(range: RangeNavigator);
        /**
            * To render light weight and data manager process
            *
            * @param {RangeNavigator} control RangeNavigator instance
            */
        renderChart(control: RangeNavigator): void;
        /**
            * Process x axis for range navigator.
            *
            * @private
            */
        processXAxis(control: RangeNavigator): void;
        /**
            * Process yAxis for range navigator
            *
            * @param {RangeNavigator} control RangeNavigator instance
            * @private
            */
        processYAxis(control: RangeNavigator): void;
        /**
            * Process Light weight control
            *
            * @param {RangeNavigator} control RangeNavigator instance
            * @private
            */
        renderSeries(control: RangeNavigator): void;
        /**
            * Append series elements in element
            */
        appendSeriesElements(control: RangeNavigator): void;
        /**
            * Calculate grouping bounds for x axis.
            *
            * @private
            */
        calculateGroupingBounds(control: RangeNavigator): void;
}

/**
    * Class for slider
    */
export class RangeSlider {
        /** @private */
        control: RangeNavigator;
        /** @private */
        isDrag: boolean;
        currentSlider: string;
        startX: number;
        endX: number;
        currentStart: number;
        currentEnd: number;
        points: DataPoint[];
        leftRect: Rect;
        rightRect: Rect;
        midRect: Rect;
        sliderY: number;
        /** @private */
        isIOS: Boolean;
        constructor(range: RangeNavigator);
        /**
            * Render Slider elements for range navigator
            *
            * @param {RangeNavigator} range RangeNavigator instance
            */
        render(range: RangeNavigator): void;
        /**
            * Thumb creation performed
            *
            * @param {SvgRenderer} render SvgRenderer
            * @param {Rect} bounds bounds
            * @param {Element} parent parent element
            * @param {string} id id
            * @param {Element} sliderGroup sliderGroup
            */
        createThump(render: SvgRenderer, bounds: Rect, parent: Element, id: string, sliderGroup?: Element): void;
        /**
            * Set slider value for range navigator
            */
        setSlider(start: number, end: number, trigger: boolean, showTooltip: boolean): void;
        /**
            * Trigger changed event
            *
            * @param {VisibleRangeModel} range axis visible range
            */
        triggerEvent(range: VisibleRangeModel): void;
        /**
            * Allow Snapping perfomed here
            *
            * @param {RangeNavigator} control RangeNavigator instance
            * @param {number} start start
            * @param {number} end end
            * @param {boolean} trigger trigger
            * @param {boolean} tooltip tooltip
            * @private
            */
        setAllowSnapping(control: RangeNavigator, start: number, end: number, trigger: boolean, tooltip: boolean): void;
        /**
            * Animation Calculation for slider navigation
            */
        performAnimation(start: number, end: number, control: RangeNavigator, animationDuration?: number): void;
        /**
            * Destroy Method Calling here
            */
        destroy(): void;
}

/**
    * Series class for the range navigator
    */
export class RangeNavigatorSeries extends ChildProperty<RangeNavigatorSeries> {
        /**
            * It defines the data source for a series.
            *
            * @default null
            */
        dataSource: Object | DataManager;
        /**
            * It defines the xName for the series
            *
            * @default null
            */
        xName: string;
        /**
            * It defines the yName for the series
            *
            * @default  null
            */
        yName: string;
        /**
            * It defines the query for the data source
            *
            * @default null
            */
        query: Query;
        /**
            * It defines the series type of the range navigator
            *
            * @default 'Line'
            */
        type: RangeNavigatorType;
        /**
            * Options to customizing animation for the series.
            */
        animation: AnimationModel;
        /**
            * Options for customizing the color and width of the series border.
            */
        border: BorderModel;
        /**
            * The fill color for the series that accepts value in hex and rgba as a valid CSS color string.
            * It also represents the color of the signal lines in technical indicators.
            * For technical indicators, the default value is 'blue' and for series, it has null.
            *
            * @default null
            */
        fill: string;
        /**
            * The stroke width for the series that is applicable only for `Line` type series.
            * It also represents the stroke width of the signal lines in technical indicators.
            *
            * @default 1
            */
        width: number;
        /**
            * The opacity for the background.
            *
            * @default 1
            */
        opacity: number;
        /**
            * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.
            *
            * @default '0'
            */
        dashArray: string;
        /** @private */
        seriesElement: Element;
        /** @private */
        clipRectElement: Element;
        /** @private */
        clipRect: Rect;
        /** @private */
        xAxis: Axis;
        /** @private */
        yAxis: Axis;
        /** @private */
        points: DataPoint[];
        /** @private */
        interior: string;
        /** @private */
        index: number;
        /** @private */
        chart: RangeNavigator;
}
/**
    * Thumb settings
    */
export class ThumbSettings extends ChildProperty<ThumbSettings> {
        /**
            * width of thumb
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        width: number;
        /**
            * height of thumb
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        height: number;
        /**
            * border for the thumb
            */
        border: BorderModel;
        /**
            * fill color for the thumb
            *
            * @default null
            */
        fill: string;
        /**
            * type of thumb
            *
            * @default `Circle`
            */
        type: ThumbType;
}
/**
    * Style settings
    */
export class StyleSettings extends ChildProperty<StyleSettings> {
        /**
            * thumb settings
            */
        thumb: ThumbSettingsModel;
        /**
            * Selected region color
            *
            * @default null
            */
        selectedRegionColor: string;
        /**
            * Un Selected region color
            *
            * @default null
            */
        unselectedRegionColor: string;
}
export class RangeTooltipSettings extends ChildProperty<RangeTooltipSettings> {
        /**
            * Enables / Disables the visibility of the tooltip.
            *
            * @default false.
            */
        enable: boolean;
        /**
            * The fill color of the tooltip that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default 0.85
            */
        opacity: number;
        /**
            * The fill color of the tooltip that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        fill: string;
        /**
            * Format the ToolTip content.
            *
            * @default null.
            */
        format: string;
        /**
            * Options to customize the ToolTip text.
            */
        textStyle: FontModel;
        /**
            * Custom template to format the ToolTip content. Use ${value} as the placeholder text to display the corresponding data point.
            *
            * @default null.
            */
        template: string;
        /**
            * Options to customize tooltip borders.
            */
        border: BorderModel;
        /**
            * It defines display mode for tooltip
            *
            * @default 'OnDemand'
            */
        displayMode: TooltipDisplayMode;
}

/**
    * Interface for a class RangeNavigatorSeries
    */
export interface RangeNavigatorSeriesModel {
        /**
            * It defines the data source for a series.
            *
            * @default null
            */
        dataSource?: Object | DataManager;
        /**
            * It defines the xName for the series
            *
            * @default null
            */
        xName?: string;
        /**
            * It defines the yName for the series
            *
            * @default  null
            */
        yName?: string;
        /**
            * It defines the query for the data source
            *
            * @default null
            */
        query?: Query;
        /**
            * It defines the series type of the range navigator
            *
            * @default 'Line'
            */
        type?: RangeNavigatorType;
        /**
            * Options to customizing animation for the series.
            */
        animation?: AnimationModel;
        /**
            * Options for customizing the color and width of the series border.
            */
        border?: BorderModel;
        /**
            * The fill color for the series that accepts value in hex and rgba as a valid CSS color string.
            * It also represents the color of the signal lines in technical indicators.
            * For technical indicators, the default value is 'blue' and for series, it has null.
            *
            * @default null
            */
        fill?: string;
        /**
            * The stroke width for the series that is applicable only for `Line` type series.
            * It also represents the stroke width of the signal lines in technical indicators.
            *
            * @default 1
            */
        width?: number;
        /**
            * The opacity for the background.
            *
            * @default 1
            */
        opacity?: number;
        /**
            * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.
            *
            * @default '0'
            */
        dashArray?: string;
}
/**
    * Interface for a class ThumbSettings
    */
export interface ThumbSettingsModel {
        /**
            * width of thumb
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        width?: number;
        /**
            * height of thumb
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        height?: number;
        /**
            * border for the thumb
            */
        border?: BorderModel;
        /**
            * fill color for the thumb
            *
            * @default null
            */
        fill?: string;
        /**
            * type of thumb
            *
            * @default `Circle`
            */
        type?: ThumbType;
}
/**
    * Interface for a class StyleSettings
    */
export interface StyleSettingsModel {
        /**
            * thumb settings
            */
        thumb?: ThumbSettingsModel;
        /**
            * Selected region color
            *
            * @default null
            */
        selectedRegionColor?: string;
        /**
            * Un Selected region color
            *
            * @default null
            */
        unselectedRegionColor?: string;
}
/**
    * Interface for a class RangeTooltipSettings
    */
export interface RangeTooltipSettingsModel {
        /**
            * Enables / Disables the visibility of the tooltip.
            *
            * @default false.
            */
        enable?: boolean;
        /**
            * The fill color of the tooltip that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default 0.85
            */
        opacity?: number;
        /**
            * The fill color of the tooltip that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        fill?: string;
        /**
            * Format the ToolTip content.
            *
            * @default null.
            */
        format?: string;
        /**
            * Options to customize the ToolTip text.
            */
        textStyle?: FontModel;
        /**
            * Custom template to format the ToolTip content. Use ${value} as the placeholder text to display the corresponding data point.
            *
            * @default null.
            */
        template?: string;
        /**
            * Options to customize tooltip borders.
            */
        border?: BorderModel;
        /**
            * It defines display mode for tooltip
            *
            * @default 'OnDemand'
            */
        displayMode?: TooltipDisplayMode;
}

/**
    * Interface for range navigator
    */
/**
    * interface for load event
    */
export interface ILoadEventArgs {
        /** name of the event */
        name: string;
        /** rangeNavigator */
        rangeNavigator: RangeNavigator;
}
/**
    * interface for loaded event
    */
export interface IRangeLoadedEventArgs {
        /** name of the event */
        name: string;
        /** rangeNavigator */
        rangeNavigator: RangeNavigator;
        /** theme */
        theme?: ChartTheme;
}
export interface IRangeTooltipRenderEventArgs extends IRangeEventArgs {
        /** Defines tooltip text collections */
        text?: string[];
        /** Defines tooltip text style */
        textStyle?: FontModel;
}
/**
    * Interface for label render event
    */
export interface ILabelRenderEventsArgs {
        /** name of the event */
        name: string;
        /** labelStyle */
        labelStyle: FontModel;
        /** region */
        region: Rect;
        /** text  */
        text: string;
        /** cancel for the event */
        cancel: boolean;
        /** value */
        value: number;
}
/**
    * Interface for Theme Style
    */
export interface IRangeStyle {
        gridLineColor: string;
        axisLineColor: string;
        labelFontColor: string;
        unselectedRectColor: string;
        thumpLineColor: string;
        thumbBackground: string;
        thumbHoverColor: string;
        gripColor: string;
        selectedRegionColor: string;
        background: string;
        tooltipBackground: string;
        tooltipFontColor: string;
        thumbWidth: number;
        thumbHeight: number;
}
/**
    * Interface for range events
    */
export interface IRangeEventArgs {
        /** Defines the name of the event */
        name: string;
        /** Defined the whether event has to trigger */
        cancel: boolean;
}
/**
    * Interface for changed events
    */
export interface IChangedEventArgs extends IRangeEventArgs {
        /** Defines the start value */
        start: number | Date;
        /** Defines the end value */
        end: number | Date;
        /** Defines the selected data */
        selectedData: DataPoint[];
        /** Defined the zoomPosition of the range navigator */
        zoomPosition: number;
        /** Defined the zoomFactor of the range navigator */
        zoomFactor: number;
}
export interface IResizeRangeNavigatorEventArgs {
        /** Defines the name of the Event */
        name: string;
        /** Defines the previous size of the accumulation chart */
        previousSize: Size;
        /** Defines the current size of the accumulation chart */
        currentSize: Size;
        /** Defines the range navigator instance */
        rangeNavigator: RangeNavigator;
}

/**
    * `Tooltip` module is used to render the tooltip for chart series.
    */
export class RangeTooltip {
        leftTooltip: SVGTooltip;
        rightTooltip: SVGTooltip;
        toolTipInterval: number;
        /**
            * Constructor for tooltip module.
            *
            * @private
            */
        constructor(range: RangeNavigator);
        /**
            * Left tooltip method called here
            *
            * @param {RangeSlider} rangeSlider RangeSlider
            */
        renderLeftTooltip(rangeSlider: RangeSlider): void;
        /**
            * Right tooltip method called here
            *
            * @param {RangeSlider} rangeSlider RangeSlider
            */
        renderRightTooltip(rangeSlider: RangeSlider): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the tooltip.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * bullet chart
    */
export class BulletChart extends Component<HTMLElement> implements INotifyPropertyChanged {
        /**
            * `bulletTooltipModule` is used to manipulate and add tooltip to the feature bar.
            */
        bulletTooltipModule: BulletTooltip;
        /**
            * `bulletChartLegendModule` is used to manipulate and add legend in accumulation chart.
            */
        bulletChartLegendModule: BulletChartLegend;
        /**
            * The width of the bullet chart as a string accepts input as both like '100px' or '100%'.
            * If specified as '100%, bullet chart renders to the full width of its parent element.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        width: string;
        /**
            * The height of the bullet chart as a string accepts input both as '100px' or '100%'.
            * If specified as '100%, bullet chart renders to the full height of its parent element.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        height: string;
        /**
            * The locale of the bullet chart as a string.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        locale: string;
        /**
            * Options for customizing major tick lines.
            */
        majorTickLines: MajorTickLinesSettingsModel;
        /**
            * Options for customizing minor tick lines.
            */
        minorTickLines: MinorTickLinesSettingsModel;
        /**
            * Specifies the minimum range of an scale.
            *
            * @default null
            */
        minimum: number;
        /**
            * Specifies the maximum range of an scale.
            *
            * @default null
            */
        maximum: number;
        /**
            * Specifies the interval for an scale.
            *
            * @default null
            */
        interval: number;
        /**
            * specifies the interval of minor ticks
            *
            * @default 4
            */
        minorTicksPerInterval: number;
        /**
            * Options for customizing labels
            */
        labelStyle: BulletLabelStyleModel;
        /**
            * Options for customizing values labels
            */
        categoryLabelStyle: BulletLabelStyleModel;
        /**
            * Specifies the format of the bullet chart axis labels.
            *
            * @default ''
            */
        labelFormat: string;
        /**
            * Specifies the title of the bullet chart.
            *
            * @default ''
            */
        title: string;
        /**
            * Options for customizing the title styles of the bullet chart
            */
        titleStyle: BulletLabelStyleModel;
        /**
            * Specifies the sub title of the bullet chart.
            *
            * @default ''
            */
        subtitle: string;
        /**
            * Options for customizing the sub title styles of the bullet chart
            */
        subtitleStyle: BulletLabelStyleModel;
        /**
            * Orientation of the scale
            *
            * @default 'Horizontal'
            */
        orientation: OrientationType;
        /**
            * Options for customizing the color and width of the chart border.
            */
        border: BorderModel;
        /**
            * Options for customizing the tooltip of the BulletChart.
            */
        tooltip: BulletTooltipSettingsModel;
        /**
            * provides Qualitative ranges of the bullet chart.
            */
        ranges: RangeModel[];
        /**
            * specifies the axis label position of the bullet chart
            *
            * @default 'Outside'
            */
        labelPosition: LabelsPlacement;
        /**
            * specifies the tick position of the bullet chart
            *
            * @default 'Outside'
            */
        tickPosition: TickPosition;
        /**
            * Sets the title position of bullet chart.
            *
            * @default 'Top'.
            */
        titlePosition: TextPosition;
        /**
            * If set to true, the axis will render at the opposite side of its default position.
            *
            * @default false
            */
        opposedPosition: boolean;
        /**
            * Specifies the theme for the bullet chart.
            *
            * @default 'Material'
            */
        theme: ChartTheme;
        /**
            * Options for customizing animation of the feature bar.
            */
        animation: AnimationModel;
        /**
            * Options for customizing data label of the feature bar.
            */
        dataLabel: BulletDataLabelModel;
        /**
            * Options for customizing the legend of the bullet chart.
            */
        legendSettings: BulletChartLegendSettingsModel;
        /**
            * default value for enableGroupSeparator
            *
            * @default false
            */
        enableGroupSeparator: boolean;
        /**
            *  Options to customize left, right, top and bottom margins of the bullet chart.
            */
        margin: MarginModel;
        /**
            * Options for customizing comparative bar color bullet chart
            *
            * @default 5
            */
        targetWidth: number;
        /**
            * Default stroke of comparative measure.
            *
            * @default '#191919'
            */
        targetColor: string;
        /**
            * Options for customizing feature bar height of the bullet chart
            *
            * @default 6
            */
        valueHeight: number;
        /**
            * Default stroke color of feature measure.
            *
            * @default null
            */
        valueFill: string;
        /**
            * Options for customizing the color and width of the feature bar border.
            */
        valueBorder: BorderModel;
        /**
            * default value of multiple data bullet chart.
            *
            * @isdatamanager false
            * @default null
            */
        dataSource: Object;
        /**
            * It defines the query for the data source.
            *
            * @default null
            */
        query: Query;
        /**
            * It defines the category for the data source.
            *
            * @default null
            */
        categoryField: string;
        /**
            * Default type on feature measure.
            *
            * @default 'Rect'
            */
        type: FeatureType;
        /**
            * The DataSource field that contains the value value.
            *
            * @default ''
            */
        valueField: string;
        /**
            * The DataSource field that contains the target value.
            *
            * @default ''
            */
        targetField: string;
        /**
            * The DataSource field that contains the target value.
            *
            * @default ['Rect', 'Cross', 'Circle']
            */
        targetTypes: TargetType[];
        /**
            * TabIndex value for the bullet chart.
            *
            * @default 1
            */
        tabIndex: number;
        /**
            * Triggers before the bulletchart tooltip is rendered.
            *
            * @event tooltipRender
            */
        tooltipRender: EmitType<IBulletchartTooltipEventArgs>;
        /**
            * Triggers before bullet chart load.
            *
            * @event load
            */
        load: EmitType<IBulletLoadedEventArgs>;
        /**
            * Triggers after the bullet chart rendering
            *
            * @event loaded
            */
        loaded: EmitType<IBulletLoadedEventArgs>;
        /**
            * Triggers on clicking the chart.
            *
            * @event bulletChartMouseClick
            */
        bulletChartMouseClick: EmitType<IBulletMouseEventArgs>;
        /**
            * Triggers before the legend is rendered.
            *
            * @event legendRender
            * @deprecated
            */
        legendRender: EmitType<IBulletLegendRenderEventArgs>;
        /**
            * Triggers before the prints gets started.
            *
            * @event beforePrint
            */
        beforePrint: EmitType<IPrintEventArgs>;
        /** @private */
        renderer: SvgRenderer;
        /** @private */
        svgObject: HTMLElement;
        /** @private */
        intl: Internationalization;
        /** @private */
        bulletAxis: BulletChartAxis;
        /** @private */
        scale: ScaleGroup;
        /** @private */
        availableSize: Size;
        /** @private */
        delayRedraw: boolean;
        /** @private */
        dataModule: Data;
        /** @private */
        animateSeries: boolean;
        /** @private */
        containerWidth: number;
        /** @private */
        resizeBound: any;
        /** @private */
        containerHeight: number;
        /** @private */
        redraw: boolean;
        /** @private */
        initialClipRect: Rect;
        /** @private */
        bulletChartRect: Rect;
        /** @private */
        isTouch: boolean;
        /** @private */
        mouseX: number;
        /** @private */
        mouseY: number;
        /** @private */
        leftSize: number;
        /** @private */
        rightSize: number;
        /** @private */
        topSize: number;
        /** @private */
        bottomSize: number;
        /** @private */
        maxLabelSize: Size;
        maxTitleSize: Size;
        /** @private */
        themeStyle: IBulletStyle;
        /** @private */
        rangeCollection: number[];
        /** @private */
        intervalDivs: number[];
        /** @private */
        format: Function;
        /**
            * Gets the current visible ranges of the bullet Chart.
            *
            * @hidden
            */
        visibleRanges: Range[];
        /**
            * Constructor for creating the bullet chart
            *
            * @hidden
            */
        constructor(options?: BulletChartModel, element?: string | HTMLElement);
        /**
            * Initialize the event handler.
            */
        protected preRender(): void;
        /**
            * To Initialize the bullet chart rendering.
            */
        protected render(): void;
        protected getActualDesiredIntervalsCount(availableSize: Size): number;
        /**
            * Numeric Nice Interval for the axis.
            *
            * @private
            * @returns {number} calculateNumericNiceInterval.
            */
        protected calculateNumericNiceInterval(delta: number): number;
        /**
            * Method to create SVG element.
            */
        createSvg(chart: BulletChart): void;
        /**
            * Calculate the rect values based on title position.
            *
            * @returns {void}
            * @private
            */
        getBulletBounds(maxTitlteWidth: number, titleHeight: number, subTitleHeight: number, margin: MarginModel): Rect;
        /**
            * Calculate maximum label width for category values.
            *
            * @private
            * @returns {Size} To get a label width
            */
        getMaxLabelWidth(): Size;
        removeSvg(): void;
        protected getPersistData(): string;
        /**
            * Handles the mouse leave on the bullet chart.
            *
            * @private
            */
        bulletMouseLeave(e: PointerEvent): void;
        /**
            * Handles the mouse click on bullet chart.
            *
            * @returns {boolean} Mouse click of bullet chart.
            * @private
            */
        bulletChartOnMouseClick(e: PointerEvent | TouchEvent): boolean;
        /**
            * Handles the print method for bullet chart control.
            */
        print(id?: string[] | string | Element): void;
        /**
            * Handles the export method for bullet chart control.
            *
            * @param {ExportType} type Type of the export.
            * @param {string} fileName File name for exporting.
            * @param {PdfPageOrientation} orientation Orientation of the export.
            * @param {Chart | AccumulationChart | RangeNavigator | BulletChart} controls To mention the exporting chart.
            * @param {number} width Width of the export.
            * @param {number} height Height of the export.
            */
        export(type: ExportType, fileName: string, orientation?: PdfPageOrientation, controls?: (Chart | AccumulationChart | RangeNavigator | BulletChart)[], width?: number, height?: number, isVertical?: boolean): void;
        /**
            * Called internally if any of the property value changed.
            *
            * @private
            */
        onPropertyChanged(newProp: BulletChartModel, oldProp: BulletChartModel): void;
        /**
            * To provide the array of modules needed for bullet chart rendering
            *
            * @private
            * @returns {ModuleDeclaration[]} requiredModules
            */
        requiredModules(): ModuleDeclaration[];
        getModuleName(): string;
        /**
            * To destroy the widget
            *
            * @returns {void} Destroy method
            * @member of BulletChart
            */
        destroy(): void;
}

/**
    * Interface for a class BulletChart
    */
export interface BulletChartModel extends ComponentModel {
        /**
            * The width of the bullet chart as a string accepts input as both like '100px' or '100%'.
            * If specified as '100%, bullet chart renders to the full width of its parent element.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        width?: string;
        /**
            * The height of the bullet chart as a string accepts input both as '100px' or '100%'.
            * If specified as '100%, bullet chart renders to the full height of its parent element.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        height?: string;
        /**
            * The locale of the bullet chart as a string.
            *
            * @default null
            * @aspDefaultValueIgnore
            */
        locale?: string;
        /**
            * Options for customizing major tick lines.
            */
        majorTickLines?: MajorTickLinesSettingsModel;
        /**
            * Options for customizing minor tick lines.
            */
        minorTickLines?: MinorTickLinesSettingsModel;
        /**
            * Specifies the minimum range of an scale.
            *
            * @default null
            */
        minimum?: number;
        /**
            * Specifies the maximum range of an scale.
            *
            * @default null
            */
        maximum?: number;
        /**
            * Specifies the interval for an scale.
            *
            * @default null
            */
        interval?: number;
        /**
            * specifies the interval of minor ticks
            *
            * @default 4
            */
        minorTicksPerInterval?: number;
        /**
            * Options for customizing labels
            */
        labelStyle?: BulletLabelStyleModel;
        /**
            * Options for customizing values labels
            */
        categoryLabelStyle?: BulletLabelStyleModel;
        /**
            * Specifies the format of the bullet chart axis labels.
            *
            * @default ''
            */
        labelFormat?: string;
        /**
            * Specifies the title of the bullet chart.
            *
            * @default ''
            */
        title?: string;
        /**
            * Options for customizing the title styles of the bullet chart
            */
        titleStyle?: BulletLabelStyleModel;
        /**
            * Specifies the sub title of the bullet chart.
            *
            * @default ''
            */
        subtitle?: string;
        /**
            * Options for customizing the sub title styles of the bullet chart
            */
        subtitleStyle?: BulletLabelStyleModel;
        /**
            * Orientation of the scale
            *
            * @default 'Horizontal'
            */
        orientation?: OrientationType;
        /**
            * Options for customizing the color and width of the chart border.
            */
        border?: BorderModel;
        /**
            * Options for customizing the tooltip of the BulletChart.
            */
        tooltip?: BulletTooltipSettingsModel;
        /**
            * provides Qualitative ranges of the bullet chart.
            */
        ranges?: RangeModel[];
        /**
            * specifies the axis label position of the bullet chart
            *
            * @default 'Outside'
            */
        labelPosition?: LabelsPlacement;
        /**
            * specifies the tick position of the bullet chart
            *
            * @default 'Outside'
            */
        tickPosition?: TickPosition;
        /**
            * Sets the title position of bullet chart.
            *
            * @default 'Top'.
            */
        titlePosition?: TextPosition;
        /**
            * If set to true, the axis will render at the opposite side of its default position.
            *
            * @default false
            */
        opposedPosition?: boolean;
        /**
            * Specifies the theme for the bullet chart.
            *
            * @default 'Material'
            */
        theme?: ChartTheme;
        /**
            * Options for customizing animation of the feature bar.
            */
        animation?: AnimationModel;
        /**
            * Options for customizing data label of the feature bar.
            */
        dataLabel?: BulletDataLabelModel;
        /**
            * Options for customizing the legend of the bullet chart.
            */
        legendSettings?: BulletChartLegendSettingsModel;
        /**
            * default value for enableGroupSeparator
            *
            * @default false
            */
        enableGroupSeparator?: boolean;
        /**
            *  Options to customize left, right, top and bottom margins of the bullet chart.
            */
        margin?: MarginModel;
        /**
            * Options for customizing comparative bar color bullet chart
            *
            * @default 5
            */
        targetWidth?: number;
        /**
            * Default stroke of comparative measure.
            *
            * @default '#191919'
            */
        targetColor?: string;
        /**
            * Options for customizing feature bar height of the bullet chart
            *
            * @default 6
            */
        valueHeight?: number;
        /**
            * Default stroke color of feature measure.
            *
            * @default null
            */
        valueFill?: string;
        /**
            * Options for customizing the color and width of the feature bar border.
            */
        valueBorder?: BorderModel;
        /**
            * default value of multiple data bullet chart.
            *
            * @isdatamanager false
            * @default null
            */
        dataSource?: Object;
        /**
            * It defines the query for the data source.
            *
            * @default null
            */
        query?: Query;
        /**
            * It defines the category for the data source.
            *
            * @default null
            */
        categoryField?: string;
        /**
            * Default type on feature measure.
            *
            * @default 'Rect'
            */
        type?: FeatureType;
        /**
            * The DataSource field that contains the value value.
            *
            * @default ''
            */
        valueField?: string;
        /**
            * The DataSource field that contains the target value.
            *
            * @default ''
            */
        targetField?: string;
        /**
            * The DataSource field that contains the target value.
            *
            * @default ['Rect', 'Cross', 'Circle']
            */
        targetTypes?: TargetType[];
        /**
            * TabIndex value for the bullet chart.
            *
            * @default 1
            */
        tabIndex?: number;
        /**
            * Triggers before the bulletchart tooltip is rendered.
            *
            * @event tooltipRender
            */
        tooltipRender?: EmitType<IBulletchartTooltipEventArgs>;
        /**
            * Triggers before bullet chart load.
            *
            * @event load
            */
        load?: EmitType<IBulletLoadedEventArgs>;
        /**
            * Triggers after the bullet chart rendering
            *
            * @event loaded
            */
        loaded?: EmitType<IBulletLoadedEventArgs>;
        /**
            * Triggers on clicking the chart.
            *
            * @event bulletChartMouseClick
            */
        bulletChartMouseClick?: EmitType<IBulletMouseEventArgs>;
        /**
            * Triggers before the legend is rendered.
            *
            * @event legendRender
            * @deprecated
            */
        legendRender?: EmitType<IBulletLegendRenderEventArgs>;
        /**
            * Triggers before the prints gets started.
            *
            * @event beforePrint
            */
        beforePrint?: EmitType<IPrintEventArgs>;
}

/**
    * Configuration of the bullet chart ranges
    */
export class Range extends ChildProperty<Range> {
        /**
            * Default value for qualitative range end value
            *
            * @default null
            */
        end: number;
        /**
            * Range opacity
            *
            * @default 1
            */
        opacity: number;
        /**
            * Default value for qualitative range Color
            *
            * @default null
            */
        color: string;
        /**
            * Default value for qualitative range Color
            *
            * @default null
            */
        index: number;
        /**
            * Default value for qualitative range name
            *
            * @default null
            */
        name: string;
        /**
            * The shape of the legend. Each ranges has its own legend shape. They are,
            * * Circle
            * * Rectangle
            * * Triangle
            * * Diamond
            * * Cross
            * * HorizontalLine
            * * VerticalLine
            * * Pentagon
            * * InvertedTriangle
            * * SeriesType
            * * Image
            * @default 'Rectangle'
            */
        shape: LegendShape;
        /**
            * The URL for the Image that is to be displayed as a Legend icon.  It requires  `legendShape` value to be an `Image`.
            * @default ''
            */
        legendImageUrl: string;
}
/**
    * Configures the major tick lines.
    */
export class MajorTickLinesSettings extends ChildProperty<MajorTickLinesSettings> {
        /**
            * The height of the tick lines in pixels.
            *
            * @default 12
            */
        height: number;
        /**
            * The width of the ticks in pixels.
            *
            * @default 2
            */
        width: number;
        /**
            * The stroke of the major tick line that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        color: string;
        /**
            * It uses to apply range color to ticks and labels.
            *
            * @default false
            */
        useRangeColor: boolean;
}
/**
    * Configures the minor tick lines.
    */
export class MinorTickLinesSettings extends ChildProperty<MinorTickLinesSettings> {
        /**
            * The height of the tick lines in pixels.
            *
            * @default 8
            */
        height: number;
        /**
            * The width of the ticks in pixels.
            *
            * @default 2
            */
        width: number;
        /**
            * The stroke of the major tick line that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        color: string;
        /**
            * It uses to apply range color to ticks and labels.
            *
            * @default false
            */
        useRangeColor: boolean;
}
/**
    * Configures the fonts in bullet chart.
    */
export class BulletLabelStyle extends ChildProperty<BulletLabelStyle> {
        /**
            * FontStyle for the text.
            *
            * @default 'Normal'
            */
        fontStyle: string;
        /**
            * Font size for the text.
            *
            * @default '16px'
            */
        size: string;
        /**
            * Color for the text.
            *
            * @default ''
            */
        color: string;
        /**
            * FontWeight for the text.
            *
            * @default 'Normal'
            */
        fontWeight: string;
        /**
            * FontFamily for the text.
            */
        fontFamily: string;
        /**
            * Text alignment
            *
            * @default 'Center'
            */
        textAlignment: Alignment;
        /**
            * Specifies the chart title text overflow
            *
            * @default 'Trim'
            */
        textOverflow: TextOverflow;
        /**
            * Opacity for the text.
            *
            * @default 1
            */
        opacity: number;
        /**
            * Default value of enable trim.
            *
            * @default true
            */
        enableTrim: boolean;
        /**
            * Maximum label width of the bullet chart
            *
            * @default null
            */
        maximumTitleWidth: number;
        /**
            * Range color
            *
            * @default false
            */
        useRangeColor: boolean;
}
/**
    * Configures the ToolTips in the bullet chart.
    */
export class BulletTooltipSettings extends ChildProperty<BulletTooltipSettings> {
        /**
            * Enables / Disables the visibility of the tooltip.
            *
            * @default false.
            */
        enable: boolean;
        /**
            * The fill color of the tooltip that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        fill: string;
        /**
            * Options to customize the ToolTip text.
            */
        textStyle: BulletLabelStyleModel;
        /**
            * Options to customize tooltip borders.
            */
        border: BorderModel;
        /**
            * The default value of tooltip template.
            *
            * @default null
            */
        template: string;
}
/**
    * Configures the DataLabel in the bullet chart.
    */
export class BulletDataLabel extends ChildProperty<BulletDataLabel> {
        /**
            * Enables / Disables the visibility of the data label.
            *
            * @default false.
            */
        enable: boolean;
        /**
            * Options to customize the data label text.
            */
        labelStyle: BulletLabelStyleModel;
}
/**
    * Configures the legends in charts.
    */
export class BulletChartLegendSettings extends ChildProperty<BulletChartLegendSettings> {
        /**
            * If set to true, legend will be visible.
            *
            * @default false
            */
        visible: boolean;
        /**
            * Specifies the location of the legend, relative to the bullet chart.
            * If x is 20, legend moves by 20 pixels to the right of the bullet chart. It requires the `position` to be `Custom`.
            * ```html
            * <div id='BulletChart'></div>
            * ```
            * ```typescript
            * let chart: BulletChart = new BulletChart({
            * ...
            *   legendSettings: {
            *     visible: true,
            *   },
            * ...
            * });
            * chart.appendTo('#BulletChart');
            * ```
            */
        location: LocationModel;
        /**
            * Option to customize the padding between legend items.
            *
            * @default 8
            */
        padding: number;
        /**
            * Legend in chart can be aligned as follows:
            * * Near: Aligns the legend to the left of the bullet chart.
            * * Center: Aligns the legend to the center of the bullet chart.
            * * Far: Aligns the legend to the right of the bullet chart.
            *
            * @default 'Center'
            */
        alignment: Alignment;
        /**
            * Shape height of the bullet chart legend in pixels.
            *
            * @default 10
            */
        shapeHeight: number;
        /**
            * Shape width of the bullet chart legend in pixels.
            *
            * @default 10
            */
        shapeWidth: number;
        /**
            * Options to customize the bullet chart legend text.
            */
        textStyle: BulletLabelStyleModel;
        /**
            * Position of the legend in the bullet chart are,
            * * Auto: Places the legend based on area type.
            * * Top: Displays the legend at the top of the bullet chart.
            * * Left: Displays the legend at the left of the bullet chart.
            * * Bottom: Displays the legend at the bottom of the bullet chart.
            * * Right: Displays the legend at the right of the bullet chart.
            * * Custom: Displays the legend  based on the given x and y values.
            *
            * @default 'Auto'
            */
        position: LegendPosition;
        /**
            *  Options to customize left, right, top and bottom margins of the bullet chart.
            */
        margin: MarginModel;
        /**
            * Options to customize the border of the bullet chart legend.
            */
        border: BorderModel;
        /**
            * Padding between the bullet chart legend shape and text.
            *
            * @default 5
            */
        shapePadding: number;
        /**
            * The background color of the bullet chart legend that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default 'transparent'
            */
        background: string;
        /**
            * Opacity of the bullet chart legend.
            *
            * @default 1
            */
        opacity: number;
        /**
            * TabIndex value for the bullet chart legend.
            *
            * @default 3
            */
        tabIndex: number;
}

/**
    * Interface for a class Range
    */
export interface RangeModel {
        /**
            * Default value for qualitative range end value
            *
            * @default null
            */
        end?: number;
        /**
            * Range opacity
            *
            * @default 1
            */
        opacity?: number;
        /**
            * Default value for qualitative range Color
            *
            * @default null
            */
        color?: string;
        /**
            * Default value for qualitative range Color
            *
            * @default null
            */
        index?: number;
        /**
            * Default value for qualitative range name
            *
            * @default null
            */
        name?: string;
        /**
            * The shape of the legend. Each ranges has its own legend shape. They are,
            * * Circle
            * * Rectangle
            * * Triangle
            * * Diamond
            * * Cross
            * * HorizontalLine
            * * VerticalLine
            * * Pentagon
            * * InvertedTriangle
            * * SeriesType
            * * Image
            * @default 'Rectangle'
            */
        shape?: LegendShape;
        /**
            * The URL for the Image that is to be displayed as a Legend icon.  It requires  `legendShape` value to be an `Image`.
            * @default ''
            */
        legendImageUrl?: string;
}
/**
    * Interface for a class MajorTickLinesSettings
    */
export interface MajorTickLinesSettingsModel {
        /**
            * The height of the tick lines in pixels.
            *
            * @default 12
            */
        height?: number;
        /**
            * The width of the ticks in pixels.
            *
            * @default 2
            */
        width?: number;
        /**
            * The stroke of the major tick line that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        color?: string;
        /**
            * It uses to apply range color to ticks and labels.
            *
            * @default false
            */
        useRangeColor?: boolean;
}
/**
    * Interface for a class MinorTickLinesSettings
    */
export interface MinorTickLinesSettingsModel {
        /**
            * The height of the tick lines in pixels.
            *
            * @default 8
            */
        height?: number;
        /**
            * The width of the ticks in pixels.
            *
            * @default 2
            */
        width?: number;
        /**
            * The stroke of the major tick line that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        color?: string;
        /**
            * It uses to apply range color to ticks and labels.
            *
            * @default false
            */
        useRangeColor?: boolean;
}
/**
    * Interface for a class BulletLabelStyle
    */
export interface BulletLabelStyleModel {
        /**
            * FontStyle for the text.
            *
            * @default 'Normal'
            */
        fontStyle?: string;
        /**
            * Font size for the text.
            *
            * @default '16px'
            */
        size?: string;
        /**
            * Color for the text.
            *
            * @default ''
            */
        color?: string;
        /**
            * FontWeight for the text.
            *
            * @default 'Normal'
            */
        fontWeight?: string;
        /**
            * FontFamily for the text.
            */
        fontFamily?: string;
        /**
            * Text alignment
            *
            * @default 'Center'
            */
        textAlignment?: Alignment;
        /**
            * Specifies the chart title text overflow
            *
            * @default 'Trim'
            */
        textOverflow?: TextOverflow;
        /**
            * Opacity for the text.
            *
            * @default 1
            */
        opacity?: number;
        /**
            * Default value of enable trim.
            *
            * @default true
            */
        enableTrim?: boolean;
        /**
            * Maximum label width of the bullet chart
            *
            * @default null
            */
        maximumTitleWidth?: number;
        /**
            * Range color
            *
            * @default false
            */
        useRangeColor?: boolean;
}
/**
    * Interface for a class BulletTooltipSettings
    */
export interface BulletTooltipSettingsModel {
        /**
            * Enables / Disables the visibility of the tooltip.
            *
            * @default false.
            */
        enable?: boolean;
        /**
            * The fill color of the tooltip that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default null
            */
        fill?: string;
        /**
            * Options to customize the ToolTip text.
            */
        textStyle?: BulletLabelStyleModel;
        /**
            * Options to customize tooltip borders.
            */
        border?: BorderModel;
        /**
            * The default value of tooltip template.
            *
            * @default null
            */
        template?: string;
}
/**
    * Interface for a class BulletDataLabel
    */
export interface BulletDataLabelModel {
        /**
            * Enables / Disables the visibility of the data label.
            *
            * @default false.
            */
        enable?: boolean;
        /**
            * Options to customize the data label text.
            */
        labelStyle?: BulletLabelStyleModel;
}
/**
    * Interface for a class BulletChartLegendSettings
    */
export interface BulletChartLegendSettingsModel {
        /**
            * If set to true, legend will be visible.
            *
            * @default false
            */
        visible?: boolean;
        /**
            * Specifies the location of the legend, relative to the bullet chart.
            * If x is 20, legend moves by 20 pixels to the right of the bullet chart. It requires the `position` to be `Custom`.
            * ```html
            * <div id='BulletChart'></div>
            * ```
            * ```typescript
            * let chart: BulletChart = new BulletChart({
            * ...
            *   legendSettings: {
            *     visible: true,
            *   },
            * ...
            * });
            * chart.appendTo('#BulletChart');
            * ```
            */
        location?: LocationModel;
        /**
            * Option to customize the padding between legend items.
            *
            * @default 8
            */
        padding?: number;
        /**
            * Legend in chart can be aligned as follows:
            * * Near: Aligns the legend to the left of the bullet chart.
            * * Center: Aligns the legend to the center of the bullet chart.
            * * Far: Aligns the legend to the right of the bullet chart.
            *
            * @default 'Center'
            */
        alignment?: Alignment;
        /**
            * Shape height of the bullet chart legend in pixels.
            *
            * @default 10
            */
        shapeHeight?: number;
        /**
            * Shape width of the bullet chart legend in pixels.
            *
            * @default 10
            */
        shapeWidth?: number;
        /**
            * Options to customize the bullet chart legend text.
            */
        textStyle?: BulletLabelStyleModel;
        /**
            * Position of the legend in the bullet chart are,
            * * Auto: Places the legend based on area type.
            * * Top: Displays the legend at the top of the bullet chart.
            * * Left: Displays the legend at the left of the bullet chart.
            * * Bottom: Displays the legend at the bottom of the bullet chart.
            * * Right: Displays the legend at the right of the bullet chart.
            * * Custom: Displays the legend  based on the given x and y values.
            *
            * @default 'Auto'
            */
        position?: LegendPosition;
        /**
            *  Options to customize left, right, top and bottom margins of the bullet chart.
            */
        margin?: MarginModel;
        /**
            * Options to customize the border of the bullet chart legend.
            */
        border?: BorderModel;
        /**
            * Padding between the bullet chart legend shape and text.
            *
            * @default 5
            */
        shapePadding?: number;
        /**
            * The background color of the bullet chart legend that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default 'transparent'
            */
        background?: string;
        /**
            * Opacity of the bullet chart legend.
            *
            * @default 1
            */
        opacity?: number;
        /**
            * TabIndex value for the bullet chart legend.
            *
            * @default 3
            */
        tabIndex?: number;
}

/**
    * It defines orientation of the bullet chart.
    * * horizontal
    * * vertical
    *
    * @private
    */
export type OrientationType = 
/** Horizontal type */
'Horizontal' | 
/** Vertical type */
'Vertical';
/**
    * It defines flow direction of the bullet chart.
    * * Forward
    * * Backward
    *
    * @private
    */
export type FlowType = 
/** Forward type */
'Forward' | 
/** Backward type */
'Backward';
/**
    * It defines tick position of the bullet chart.
    * * Far
    * * Near
    * * Center
    *
    * @private
    */
export type TickPlacement = 
/** Far type */
'Far' | 
/** Near type */
'Near' | 
/** Near type */
'Center';
/**
    * It defines flow direction of the bullet chart.
    * * Forward
    * * Backward
    *
    * @private
    */
export type FeatureType = 
/** Rectangle type */
'Rect' | 
/** Dot type */
'Dot';
/**
    * It defines tick placement of bullet chart.
    * * Outside
    * * Inside
    *
    * @private
    */
export type TickPosition = 
/** Far type */
'Outside' | 
/** Near type */
'Inside';
/**
    * It defines label placement of bullet chart.
    * * Outside
    * * Inside
    *
    * @private
    */
export type LabelsPlacement = 
/** Far type */
'Outside' | 
/** Near type */
'Inside';
/**
    * It defines label position of bullet chart.
    * * Below
    * * Above
    *
    * @private
    */
export type LabelsPosition = 
/** Below type */
'Below' | 
/** Above type */
'Above';
/**
    * It defines Text anchor of bullet chart.
    * * Start
    * * Middle
    * * End
    *
    * @private
    */
export type TextAnchor = 
/** Start type */
'Start' | 
/** Middle type */
'Middle' | 
/** End type */
'End';
/**
    * It defines Text anchor of bullet chart.
    * * Left
    * * Right
    * * Top
    * * Bottom
    *
    * @private
    */
export type TextPosition = 
/** Left position */
'Left' | 
/** Right position */
'Right' | 
/** Top position */
'Top' | 
/** Bottom position */
'Bottom';
/**
    * It defines Text anchor of bullet chart.
    * * Rect
    * * Circle
    * * Cross
    *
    * @private
    */
export type TargetType = 
/** Rect bulletchart target type */
'Rect' | 
/** Circle bulletchart target type */
'Circle' | 
/** Cross bulletchart target type */
'Cross';

/**
    *
    */
export namespace BulletChartTheme {
        /** @private */
        const axisLabelFont: IFontMapping;
        /** @private */
        const tooltipLabelFont: IFontMapping;
        /** @private */
        const legendLabelFont: IFontMapping;
        /** @private */
        const dataLabelFont: IFontMapping;
        /** @private */
        const titleFont: IFontMapping;
        /** @private */
        const subTitleFont: IFontMapping;
}
/** @private
    * @param {ChartTheme} theme Passed theme parameter.
    * @returns {IBulletStyle} It returns bullet style.
    */
export function getBulletThemeColor(theme: ChartTheme): IBulletStyle;

/**
    * `BulletTooltip` module is used to render the tooltip for bullet chart.
    */
export class BulletTooltip {
        toolTipInterval: number;
        /** @private */
        bulletAxis: BulletChartAxis;
        /**
            * Constructor for tooltip module.
            *
            * @private
            */
        constructor(bullet: BulletChart);
        /**
            * To create tooltip div element
            */
        _elementTooltip(e: PointerEvent, targetClass: string, targetId: string, mouseX: number): void;
        /**
            * To display the bullet chart tooltip
            */
        _displayTooltip(e: PointerEvent, targetClass: string, targetId: string, mouseX: number, mouseY: number): void;
        /**
            * To update template values in the tooltip
            */
        updateTemplateFn(): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the tooltip.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * `Legend` module is used to render legend for the chart.
    */
export class BulletChartLegend extends BaseLegend {
        constructor(chart: BulletChart);
        /**
            * Get the legend options.
            *
            * @returns {void}
            * @private
            */
        getLegendOptions(visibleRangeCollection: Range[]): void;
        /** @private */
        getLegendBounds(availableSize: Size, bulletLegendBounds: Rect, legend: LegendSettingsModel): void;
        /** @private */
        getRenderPoint(bulletLegendOption: LegendOptions, start: ChartLocation, textPadding: number, prevLegend: LegendOptions, rect: Rect, count: number, firstLegend: number): void;
        /**
            * To show the tooltip for the trimmed text in legend.
            *
            * @returns {void}
            */
        click(event: Event | PointerEvent): void;
        /**
            * Get module name
            */
        protected getModuleName(): string;
        /**
            * To destroy the Legend.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

/**
    * Interface for Bullet chart Theme Style
    */
export interface IBulletStyle {
        majorTickLineColor: string;
        minorTickLineColor: string;
        background: string;
        labelFontColor: string;
        categoryFontColor: string;
        labelFontFamily: string;
        tooltipFill: string;
        legendLabel: string;
        tooltipBoldLabel: string;
        featuredMeasureColor: string;
        comparativeMeasureColor: string;
        titleFontColor: string;
        titleFontFamily: string;
        dataLabelFontColor: string;
        subTitleFontColor: string;
        subTitleFontFamily: string;
        firstRangeColor: string;
        secondRangeColor: string;
        thirdRangeColor: string;
        rangeStrokes: Object[];
}
export interface IBulletChartEventArgs {
        /** Defines the name of the event */
        name: string;
        /** Defines the event cancel status */
        cancel: boolean;
}
/**
    * Interface for Bullet chart Resize events
    */
export interface IBulletResizeEventArgs {
        /** Defines the name of the Event */
        name: string;
        /** Defines the previous size of the bullet chart */
        previousSize: Size;
        /** Defines the current size of the bullet chart */
        currentSize: Size;
        /** Defines the bullet chart instance */
        chart: BulletChart;
}
/**
    * Interface for Bullet chart scale calculations
    */
export interface IBulletScaleBounds {
        /** Defines class values */
        object: ScaleGroup;
        /** Defines the index value of the range */
        rangeIndex: number;
        /** Defines the qualitative ranges */
        rangeOptions: RangeModel;
        /** Defines the end values of the ranges */
        rangeEndValue: number;
}
/**
    * Interface for feature and comparative bar bounds
    */
export interface IBulletBounds {
        /** Defines point x values */
        pointX: number;
        /** Defines the width of the feature bar */
        width: number;
        /** Defines point x values of the bar */
        lPointX: number;
}
/**
    * Interface for feature and comparative bar bounds
    */
export interface IVerticalBulletBounds {
        /** Defines point x values */
        pointY: number;
        /** Defines the width of the feature bar */
        height: number;
        /** Defines point x values of the bar */
        lPointY: number;
}
/**
    * Interface for feature bar bounds
    */
export interface IFeatureBarBounds {
        /** Defines point x values */
        x: number;
        /** Defines point y values */
        y: number;
        /** Defines the height of the feature bar */
        height: number;
        /** Defines the width of the feature bar */
        width: number;
}
/**
    * Interface for tooltip content
    */
export interface IBulletTooltipContent {
        /** Defines the actual value of the feature bar */
        value: string | number;
        /** Defines the target value of the comparative bar */
        target?: string[] | number[] | string;
        /** Defines the category values */
        category?: string | number;
}
/**
    * interface for loaded event
    */
export interface IBulletLoadedEventArgs {
        /** name of the event */
        name: string;
        /** bulletChart */
        bulletChart: BulletChart;
        /** theme */
        theme?: ChartTheme;
}
/**
    * Tooltip Event arguments
    */
export interface IBulletchartTooltipEventArgs {
        /** Defines the actual value of the feature bar - Read Only */
        value: string | number;
        /** Defines the target value of the comparative bar - Read Only */
        target: string[] | number[] | string;
        /** Defines the name of the Event - Read Only */
        name: string;
        /** Defines the tooltip template */
        template?: string;
        /** Defines the tooltip text */
        text?: string;
}
/**
    * Bullet chart tooltip template
    */
export interface IBulletTemplate {
        /** Defines the actual value of the feature bar */
        value: string;
        /** Defines the target value of the comparative bar */
        target: string;
        /** Defines the category values */
        category: string;
}
export interface IBarProperties {
        /** Defines class values */
        end: number;
        /** Defines the index value of the range */
        opacity: number;
        /** Defines the qualitative ranges */
        color: string;
        /** Defines the end values of the ranges */
        name: string;
        /** Defines the end values of the ranges */
        index: number;
        /** Defines the end values of the ranges */
        shape: LegendShape;
}
export interface IBulletMouseEventArgs extends IBulletChartEventArgs {
        /** Defines current mouse event target id */
        target: string;
        /** Defines current mouse x location */
        x: number;
        /** Defines current mouse y location */
        y: number;
}
export interface IBulletLegendRenderEventArgs extends IBulletChartEventArgs {
        /** Defines the current legend text */
        text: string;
        /** Defines the current legend fill color */
        fill: string;
        /** Defines the current legend shape */
        shape: LegendShape;
}

/**
    * Represents the Smithchart control.
    * ```html
    * <div id="smithchart"/>
    * <script>
    *   var chartObj = new Smithchart({ isResponsive : true });
    *   chartObj.appendTo("#smithchart");
    * </script>
    * ```
    */
export class Smithchart extends Component<HTMLElement> implements INotifyPropertyChanged {
        /**
            * legend bounds
            */
        legendBounds: SmithchartRect;
        /**
            * area bounds
            */
        bounds: SmithchartRect;
        /**
            * `smithchartLegendModule` is used to add legend to the smithchart.
            */
        smithchartLegendModule: SmithchartLegend;
        /**
            * `tooltipRenderModule` is used to add tooltip to the smithchart.
            */
        tooltipRenderModule: TooltipRender;
        /**
            * render type of smithchart.
            *
            * @default Impedance
            */
        renderType: RenderType;
        /**
            * width for smithchart.
            *
            * @default ''
            */
        width: string;
        /**
            * height for smithchart.
            *
            * @default ''
            */
        height: string;
        /**
            * theme for smithchart.
            *
            * @default Material
            */
        theme: SmithchartTheme;
        /** @private */
        seriesrender: SeriesRender;
        /** @private */
        themeStyle: ISmithchartThemeStyle;
        /** @private */
        availableSize: SmithchartSize;
        /**
            *  options for customizing margin
            */
        margin: SmithchartMarginModel;
        /**
            *  options for customizing margin
            */
        font: SmithchartFontModel;
        /**
            *  options for customizing border
            */
        border: SmithchartBorderModel;
        /**
            *  options for customizing title
            */
        title: TitleModel;
        /**
            *  options for customizing series
            */
        series: SmithchartSeriesModel[];
        /**
            *  options for customizing legend
            */
        legendSettings: SmithchartLegendSettingsModel;
        /**
            * Options to configure the horizontal axis.
            */
        horizontalAxis: SmithchartAxisModel;
        /**
            * Options to configure the vertical axis.
            */
        radialAxis: SmithchartAxisModel;
        /**
            * svg renderer object.
            *
            * @private
            */
        renderer: SvgRenderer;
        /** @private */
        svgObject: Element;
        /** @private */
        animateSeries: boolean;
        /** @private */
        seriesColors: string[];
        chartArea: SmithchartRect;
        /**
            * The background color of the smithchart.
            */
        background: string;
        /**
            *  Spacing between elements
            *
            * @default 10
            */
        elementSpacing: number;
        /**
            *  Spacing between elements
            *
            * @default 1
            */
        radius: number;
        /**
            * Triggers before the prints gets started.
            *
            * @event beforePrint
            */
        beforePrint: EmitType<ISmithchartPrintEventArgs>;
        /**
            * Triggers after the animation completed.
            *
            * @event animationComplete
            */
        animationComplete: EmitType<ISmithchartAnimationCompleteEventArgs>;
        /**
            * Triggers before smithchart rendered.
            *
            * @event load
            */
        load: EmitType<ISmithchartLoadEventArgs>;
        /**
            * Triggers after smithchart rendered.
            *
            * @event loaded
            */
        loaded: EmitType<ISmithchartLoadedEventArgs>;
        /**
            * Triggers before the legend is rendered.
            *
            * @event legendRender
            */
        legendRender: EmitType<ISmithchartLegendRenderEventArgs>;
        /**
            * Triggers before the title is rendered.
            *
            * @event titleRender
            */
        titleRender: EmitType<ITitleRenderEventArgs>;
        /**
            * Triggers before the sub-title is rendered.
            *
            * @event subtitleRender
            */
        subtitleRender: EmitType<ISubTitleRenderEventArgs>;
        /**
            * Triggers before the datalabel text is rendered.
            *
            * @event textRender
            */
        textRender: EmitType<ISmithchartTextRenderEventArgs>;
        /**
            * Triggers before the axis label is rendered
            *
            * @event axisLabelRender
            */
        axisLabelRender: EmitType<ISmithchartAxisLabelRenderEventArgs>;
        /**
            * Triggers before the series is rendered.
            *
            * @event seriesRender
            */
        seriesRender: EmitType<ISmithchartSeriesRenderEventArgs>;
        /**
            * Triggers before the tooltip rendering
            *
            * @event tooltipRender
            */
        tooltipRender: EmitType<ISmithChartTooltipEventArgs>;
        /**
            * Get component name
            */
        getModuleName(): string;
        /**
            * Get the properties to be maintained in the persisted state.
            *
            * @private
            */
        getPersistData(): string;
        /**
            * Called internally if any of the property value changed.
            *
            * @private
            */
        onPropertyChanged(newProp: SmithchartModel, oldProp: SmithchartModel): void;
        /**
            * Constructor for creating the Smithchart widget
            */
        constructor(options?: SmithchartModel, element?: string | HTMLElement);
        /**
            * Initialize the event handler.
            */
        protected preRender(): void;
        protected render(): void;
        /**
            * To destroy the widget
            *
            * @returns {void}.
            */
        destroy(): void;
        mouseMove(e: PointerEvent): void;
        mouseEnd(e: PointerEvent): void;
        /**
            * To handle the click event for the smithchart.
            */
        smithchartOnClick(e: PointerEvent): void;
        print(id?: string[] | string | Element): void;
        /**
            * Handles the export method for chart control.
            */
        export(type: SmithchartExportType, fileName: string, orientation?: PdfPageOrientation): void;
        /**
            * To handle the window resize event on smithchart.
            */
        smithchartOnResize(): boolean;
        /**
            * To provide the array of modules needed for smithchart rendering
            *
            * @private
            */
        requiredModules(): ModuleDeclaration[];
        /**
            * To Remove the SVG.
            *
            * @private
            */
        removeSvg(): void;
}

/**
    * Interface for a class Smithchart
    */
export interface SmithchartModel extends ComponentModel {
        /**
            * render type of smithchart.
            *
            * @default Impedance
            */
        renderType?: RenderType;
        /**
            * width for smithchart.
            *
            * @default ''
            */
        width?: string;
        /**
            * height for smithchart.
            *
            * @default ''
            */
        height?: string;
        /**
            * theme for smithchart.
            *
            * @default Material
            */
        theme?: SmithchartTheme;
        /**
            *  options for customizing margin
            */
        margin?: SmithchartMarginModel;
        /**
            *  options for customizing margin
            */
        font?: SmithchartFontModel;
        /**
            *  options for customizing border
            */
        border?: SmithchartBorderModel;
        /**
            *  options for customizing title
            */
        title?: TitleModel;
        /**
            *  options for customizing series
            */
        series?: SmithchartSeriesModel[];
        /**
            *  options for customizing legend
            */
        legendSettings?: SmithchartLegendSettingsModel;
        /**
            * Options to configure the horizontal axis.
            */
        horizontalAxis?: SmithchartAxisModel;
        /**
            * Options to configure the vertical axis.
            */
        radialAxis?: SmithchartAxisModel;
        /**
            * The background color of the smithchart.
            */
        background?: string;
        /**
            *  Spacing between elements
            *
            * @default 10
            */
        elementSpacing?: number;
        /**
            *  Spacing between elements
            *
            * @default 1
            */
        radius?: number;
        /**
            * Triggers before the prints gets started.
            *
            * @event beforePrint
            */
        beforePrint?: EmitType<ISmithchartPrintEventArgs>;
        /**
            * Triggers after the animation completed.
            *
            * @event animationComplete
            */
        animationComplete?: EmitType<ISmithchartAnimationCompleteEventArgs>;
        /**
            * Triggers before smithchart rendered.
            *
            * @event load
            */
        load?: EmitType<ISmithchartLoadEventArgs>;
        /**
            * Triggers after smithchart rendered.
            *
            * @event loaded
            */
        loaded?: EmitType<ISmithchartLoadedEventArgs>;
        /**
            * Triggers before the legend is rendered.
            *
            * @event legendRender
            */
        legendRender?: EmitType<ISmithchartLegendRenderEventArgs>;
        /**
            * Triggers before the title is rendered.
            *
            * @event titleRender
            */
        titleRender?: EmitType<ITitleRenderEventArgs>;
        /**
            * Triggers before the sub-title is rendered.
            *
            * @event subtitleRender
            */
        subtitleRender?: EmitType<ISubTitleRenderEventArgs>;
        /**
            * Triggers before the datalabel text is rendered.
            *
            * @event textRender
            */
        textRender?: EmitType<ISmithchartTextRenderEventArgs>;
        /**
            * Triggers before the axis label is rendered
            *
            * @event axisLabelRender
            */
        axisLabelRender?: EmitType<ISmithchartAxisLabelRenderEventArgs>;
        /**
            * Triggers before the series is rendered.
            *
            * @event seriesRender
            */
        seriesRender?: EmitType<ISmithchartSeriesRenderEventArgs>;
        /**
            * Triggers before the tooltip rendering
            *
            * @event tooltipRender
            */
        tooltipRender?: EmitType<ISmithChartTooltipEventArgs>;
}

/**
    * Configures the major Grid lines in the `axis`.
    */
export class SmithchartMajorGridLines extends ChildProperty<SmithchartMajorGridLines> {
        /**
            * width of the major grid lines
            *
            * @default 1
            */
        width: number;
        /**
            * The dash array of the major grid lines.
            *
            * @default ''
            */
        dashArray: string;
        /**
            * visibility of  major grid lines.
            *
            * @default true
            */
        visible: boolean;
        /**
            * option for customizing the majorGridLine color
            *
            * @default null
            */
        color: string;
        /**
            * opacity of  major grid lines.
            *
            * @default 1
            */
        opacity: number;
}
/**
    * Configures the major grid lines in the `axis`.
    */
export class SmithchartMinorGridLines extends ChildProperty<SmithchartMinorGridLines> {
        /**
            * width of the minor grid lines
            *
            * @default 1
            */
        width: number;
        /**
            * The dash array of the minor grid lines.
            *
            * @default ''
            */
        dashArray: string;
        /**
            * visibility of  minor grid lines.
            *
            * @default false
            */
        visible: boolean;
        /**
            * option for customizing the minorGridLine color
            *
            * @default null
            */
        color: string;
        /**
            * count of  minor grid lines.
            *
            * @default 8
            */
        count: number;
}
/**
    * Configures the axis lines in the `axis`.
    */
export class SmithchartAxisLine extends ChildProperty<SmithchartAxisLine> {
        /**
            * visibility of  axis line.
            *
            * @default true
            */
        visible: boolean;
        /**
            * width of the axis lines
            *
            * @default 1
            */
        width: number;
        /**
            * option for customizing the axisLine color
            *
            * @default null
            */
        color: string;
        /**
            * The dash array of the axis line.
            *
            * @default ''
            */
        dashArray: string;
}
export class SmithchartAxis extends ChildProperty<SmithchartAxis> {
        /**
            * visibility of  axis.
            *
            * @default true
            */
        visible: boolean;
        /**
            * position of  axis line.
            *
            * @default Outside
            */
        labelPosition: AxisLabelPosition;
        /**
            * axis labels will be hide when overlap with each other.
            *
            * @default Hide
            */
        labelIntersectAction: SmithchartLabelIntersectAction;
        /**
            * Options for customizing major grid lines.
            */
        majorGridLines: SmithchartMajorGridLinesModel;
        /**
            * Options for customizing minor grid lines.
            */
        minorGridLines: SmithchartMinorGridLinesModel;
        /**
            * Options for customizing axis lines.
            */
        axisLine: SmithchartAxisLineModel;
        /**
            * Options for customizing font.
            */
        labelStyle: SmithchartFontModel;
}

/**
    * Interface for a class SmithchartMajorGridLines
    */
export interface SmithchartMajorGridLinesModel {
        /**
            * width of the major grid lines
            *
            * @default 1
            */
        width?: number;
        /**
            * The dash array of the major grid lines.
            *
            * @default ''
            */
        dashArray?: string;
        /**
            * visibility of  major grid lines.
            *
            * @default true
            */
        visible?: boolean;
        /**
            * option for customizing the majorGridLine color
            *
            * @default null
            */
        color?: string;
        /**
            * opacity of  major grid lines.
            *
            * @default 1
            */
        opacity?: number;
}
/**
    * Interface for a class SmithchartMinorGridLines
    */
export interface SmithchartMinorGridLinesModel {
        /**
            * width of the minor grid lines
            *
            * @default 1
            */
        width?: number;
        /**
            * The dash array of the minor grid lines.
            *
            * @default ''
            */
        dashArray?: string;
        /**
            * visibility of  minor grid lines.
            *
            * @default false
            */
        visible?: boolean;
        /**
            * option for customizing the minorGridLine color
            *
            * @default null
            */
        color?: string;
        /**
            * count of  minor grid lines.
            *
            * @default 8
            */
        count?: number;
}
/**
    * Interface for a class SmithchartAxisLine
    */
export interface SmithchartAxisLineModel {
        /**
            * visibility of  axis line.
            *
            * @default true
            */
        visible?: boolean;
        /**
            * width of the axis lines
            *
            * @default 1
            */
        width?: number;
        /**
            * option for customizing the axisLine color
            *
            * @default null
            */
        color?: string;
        /**
            * The dash array of the axis line.
            *
            * @default ''
            */
        dashArray?: string;
}
/**
    * Interface for a class SmithchartAxis
    */
export interface SmithchartAxisModel {
        /**
            * visibility of  axis.
            *
            * @default true
            */
        visible?: boolean;
        /**
            * position of  axis line.
            *
            * @default Outside
            */
        labelPosition?: AxisLabelPosition;
        /**
            * axis labels will be hide when overlap with each other.
            *
            * @default Hide
            */
        labelIntersectAction?: SmithchartLabelIntersectAction;
        /**
            * Options for customizing major grid lines.
            */
        majorGridLines?: SmithchartMajorGridLinesModel;
        /**
            * Options for customizing minor grid lines.
            */
        minorGridLines?: SmithchartMinorGridLinesModel;
        /**
            * Options for customizing axis lines.
            */
        axisLine?: SmithchartAxisLineModel;
        /**
            * Options for customizing font.
            */
        labelStyle?: SmithchartFontModel;
}

/**
    * Specifies Smithchart Events
    *
    * @private
    */
export interface ISmithchartEventArgs {
        /** Defines the name of the event */
        name: string;
        /** Defines the event cancel status */
        cancel: boolean;
}
export interface ISmithchartPrintEventArgs extends ISmithchartEventArgs {
        htmlContent: Element;
}
/**
    * Specifies the Load Event arguments.
    */
export interface ISmithchartLoadEventArgs extends ISmithchartEventArgs {
        /** Defines the current Smithchart instance */
        smithchart: Smithchart;
}
/**
    * Specifies the Loaded Event arguments.
    */
export interface ISmithchartLoadedEventArgs extends ISmithchartEventArgs {
        /** Defines the current Smithchart instance */
        smithchart: Smithchart;
}
export interface ISmithchartAnimationCompleteEventArgs extends ISmithchartEventArgs {
        /**
            * smithchart instance event argument
            */
        smithchart?: Smithchart;
}
/**
    * Specifies the Title Render Event arguments.
    */
export interface ITitleRenderEventArgs extends ISmithchartEventArgs {
        /** Defines the current title text */
        text: string;
        /** Defines the current title text x location */
        x: number;
        /** Defines the current title text y location */
        y: number;
}
/**
    * Specifies the SubTitle Render Event arguments.
    */
export interface ISubTitleRenderEventArgs extends ISmithchartEventArgs {
        /** Defines the current subtitle text */
        text: string;
        /** Defines the current subtitle text x location */
        x: number;
        /** Defines the current subtitle text y location */
        y: number;
}
/**
    * Specifies the Text Render Event arguments.
    */
export interface ISmithchartTextRenderEventArgs extends ISmithchartEventArgs {
        /** Defines the current datalabel text */
        text: string;
        /** Defines the current datalabel text x location */
        x: number;
        /** Defines the current datalabel text y location */
        y: number;
        /** Defines the current datalabel seriesIndex */
        seriesIndex: number;
        /** Defines the current datalabel pointIndex */
        pointIndex: number;
}
/**
    * Specifies the Axis Label Render Event arguments.
    */
export interface ISmithchartAxisLabelRenderEventArgs extends ISmithchartEventArgs {
        /** Defines the current axis label text */
        text: string;
        /** Defines the current axis label x location */
        x: number;
        /** Defines the current axis label y location */
        y: number;
}
/**
    * Specifies the Series Render Event arguments.
    */
export interface ISmithchartSeriesRenderEventArgs extends ISmithchartEventArgs {
        /** Defines name of the event */
        text: string;
        /** Defines the current series fill */
        fill: string;
}
/**
    * Specifies the Legend Render Event arguments.
    */
export interface ISmithchartLegendRenderEventArgs extends ISmithchartEventArgs {
        /** Defines the current legend text */
        text: string;
        /** Defines the current legend fill color */
        fill: string;
        /** Defines the current legend shape */
        shape: string;
}
export interface ISmithChartTooltipEventArgs extends ISmithchartEventArgs {
        /** Defines the tooltip text */
        text: string[];
        /** Defines the headerText of tooltip */
        headerText: string;
        /** Defines point of the tooltip */
        point: ISmithChartPoint;
        /** template */
        template: string;
}
/** @private */
export interface ISmithchartFontMapping {
        size?: string;
        color?: string;
        fontWeight?: string;
        fontStyle?: string;
        fontFamily?: string;
}
export interface ISmithChartPoint {
        reactance: number;
        resistance: number;
        tooltip?: string;
}
export interface ISmithchartThemeStyle {
        axisLabel: string;
        axisLine: string;
        majorGridLine: string;
        minorGridLine: string;
        chartTitle: string;
        legendLabel: string;
        background: string;
        areaBorder: string;
        tooltipFill: string;
        dataLabel: string;
        tooltipBoldLabel: string;
        tooltipLightLabel: string;
        tooltipHeaderLine: string;
        fontFamily?: string;
        fontSize?: string;
        labelFontFamily?: string;
        tooltipFillOpacity?: number;
        tooltipTextOpacity?: number;
}

export class LegendTitle extends ChildProperty<LegendTitle> {
        /**
            * visibility for legend title.
            *
            * @default true
            */
        visible: boolean;
        /**
            * text for legend title.
            *
            * @default ''
            */
        text: string;
        /**
            * description for legend title.
            *
            * @default ''
            */
        description: string;
        /**
            * alignment for legend title.
            *
            * @default Center
            */
        textAlignment: SmithchartAlignment;
        /**
            *  options for customizing font
            */
        textStyle: SmithchartFont;
}
export class LegendLocation extends ChildProperty<LegendLocation> {
        /**
            * x location for legend.
            *
            * @default 0
            */
        x: number;
        /**
            * y location for legend.
            *
            * @default 0
            */
        y: number;
}
export class LegendItemStyleBorder extends ChildProperty<LegendItemStyleBorder> {
        /**
            * border width for legend item.
            *
            * @default 1
            */
        width: number;
        /**
            * border color for legend item.
            *
            * @default null
            */
        color: string;
}
export class LegendItemStyle extends ChildProperty<LegendItemStyle> {
        /**
            * specify the width for legend item.
            *
            * @default 10
            */
        width: number;
        /**
            * specify the height for legend item.
            *
            * @default 10
            */
        height: number;
        /**
            * options for customizing legend item style border
            */
        border: LegendItemStyleBorderModel;
}
export class LegendBorder extends ChildProperty<LegendBorder> {
        /**
            * border width for legend.
            *
            * @default 1
            */
        width: number;
        /**
            * border color for legend.
            *
            * @default null
            */
        color: string;
}
export class SmithchartLegendSettings extends ChildProperty<SmithchartLegendSettings> {
        /**
            * visibility for legend.
            *
            * @default false
            */
        visible: boolean;
        /**
            * position for legend.
            *
            * @default 'bottom'
            */
        position: string;
        /**
            * alignment for legend.
            *
            * @default Center
            */
        alignment: SmithchartAlignment;
        /**
            * width for legend.
            *
            * @default null
            */
        width: number;
        /**
            * height for legend.
            *
            * @default null
            */
        height: number;
        /**
            * shape for legend.
            *
            * @default 'circle'
            */
        shape: string;
        /**
            * rowCount for legend.
            *
            * @default null
            */
        rowCount: number;
        /**
            * columnCount for legend.
            *
            * @default null
            */
        columnCount: number;
        /**
            * spacing between legend item.
            *
            * @default 8
            */
        itemPadding: number;
        /**
            * Padding between the legend shape and text.
            *
            * @default 5
            */
        shapePadding: number;
        /**
            * description for legend
            *
            * @default ''
            */
        description: string;
        /**
            * If set to true, series' visibility collapses based on the legend visibility.
            *
            * @default true
            */
        toggleVisibility: boolean;
        /**
            *  options for customizing legend title
            */
        title: LegendTitleModel;
        /**
            *  options for customizing legend location
            */
        location: LegendLocationModel;
        /**
            *  options for customizing legend item style
            */
        itemStyle: LegendItemStyleModel;
        /**
            *  options for customizing legend border
            */
        border: LegendBorderModel;
        /**
            *  options for customizing font
            */
        textStyle: SmithchartFont;
}

/**
    * Interface for a class LegendTitle
    */
export interface LegendTitleModel {
        /**
            * visibility for legend title.
            *
            * @default true
            */
        visible?: boolean;
        /**
            * text for legend title.
            *
            * @default ''
            */
        text?: string;
        /**
            * description for legend title.
            *
            * @default ''
            */
        description?: string;
        /**
            * alignment for legend title.
            *
            * @default Center
            */
        textAlignment?: SmithchartAlignment;
        /**
            *  options for customizing font
            */
        textStyle?: SmithchartFont;
}
/**
    * Interface for a class LegendLocation
    */
export interface LegendLocationModel {
        /**
            * x location for legend.
            *
            * @default 0
            */
        x?: number;
        /**
            * y location for legend.
            *
            * @default 0
            */
        y?: number;
}
/**
    * Interface for a class LegendItemStyleBorder
    */
export interface LegendItemStyleBorderModel {
        /**
            * border width for legend item.
            *
            * @default 1
            */
        width?: number;
        /**
            * border color for legend item.
            *
            * @default null
            */
        color?: string;
}
/**
    * Interface for a class LegendItemStyle
    */
export interface LegendItemStyleModel {
        /**
            * specify the width for legend item.
            *
            * @default 10
            */
        width?: number;
        /**
            * specify the height for legend item.
            *
            * @default 10
            */
        height?: number;
        /**
            * options for customizing legend item style border
            */
        border?: LegendItemStyleBorderModel;
}
/**
    * Interface for a class LegendBorder
    */
export interface LegendBorderModel {
        /**
            * border width for legend.
            *
            * @default 1
            */
        width?: number;
        /**
            * border color for legend.
            *
            * @default null
            */
        color?: string;
}
/**
    * Interface for a class SmithchartLegendSettings
    */
export interface SmithchartLegendSettingsModel {
        /**
            * visibility for legend.
            *
            * @default false
            */
        visible?: boolean;
        /**
            * position for legend.
            *
            * @default 'bottom'
            */
        position?: string;
        /**
            * alignment for legend.
            *
            * @default Center
            */
        alignment?: SmithchartAlignment;
        /**
            * width for legend.
            *
            * @default null
            */
        width?: number;
        /**
            * height for legend.
            *
            * @default null
            */
        height?: number;
        /**
            * shape for legend.
            *
            * @default 'circle'
            */
        shape?: string;
        /**
            * rowCount for legend.
            *
            * @default null
            */
        rowCount?: number;
        /**
            * columnCount for legend.
            *
            * @default null
            */
        columnCount?: number;
        /**
            * spacing between legend item.
            *
            * @default 8
            */
        itemPadding?: number;
        /**
            * Padding between the legend shape and text.
            *
            * @default 5
            */
        shapePadding?: number;
        /**
            * description for legend
            *
            * @default ''
            */
        description?: string;
        /**
            * If set to true, series' visibility collapses based on the legend visibility.
            *
            * @default true
            */
        toggleVisibility?: boolean;
        /**
            *  options for customizing legend title
            */
        title?: LegendTitleModel;
        /**
            *  options for customizing legend location
            */
        location?: LegendLocationModel;
        /**
            *  options for customizing legend item style
            */
        itemStyle?: LegendItemStyleModel;
        /**
            *  options for customizing legend border
            */
        border?: LegendBorderModel;
        /**
            *  options for customizing font
            */
        textStyle?: SmithchartFont;
}

export class SeriesTooltipBorder extends ChildProperty<SeriesTooltipBorder> {
        /**
            * border width  for tooltip.
            *
            * @default 1
            */
        width: number;
        /**
            * border color for tooltip
            *
            * @default null
            */
        color: string;
}
export class SeriesTooltip extends ChildProperty<SeriesTooltip> {
        /**
            * visibility of tooltip.
            *
            * @default false
            */
        visible: boolean;
        /**
            * color for tooltip
            *
            * @default null
            */
        fill: string;
        /**
            * opacity for tooltip.
            *
            * @default 0.95
            */
        opacity: number;
        /**
            * template for tooltip
            *
            * @default ''
            */
        template: string;
        /**
            *  options for customizing tooltip border
            */
        border: SeriesTooltipBorderModel;
}
export class SeriesMarkerBorder extends ChildProperty<SeriesMarkerBorder> {
        /**
            * border width for marker border.
            *
            * @default 3
            */
        width: number;
        /**
            * border color for marker border.
            *
            * @default 'white'
            */
        color: string;
}
export class SeriesMarkerDataLabelBorder extends ChildProperty<SeriesMarkerDataLabelBorder> {
        /**
            * border width for data label border.
            *
            * @default 0.1
            */
        width: number;
        /**
            * border color for data label color.
            *
            * @default 'white'
            */
        color: string;
}
export class SeriesMarkerDataLabelConnectorLine extends ChildProperty<SeriesMarkerDataLabelConnectorLine> {
        /**
            * border width for data label connector line.
            *
            * @default 1
            */
        width: number;
        /**
            * border color for data label connector line.
            *
            * @default null
            */
        color: string;
}
export class SeriesMarkerDataLabel extends ChildProperty<SeriesMarkerDataLabel> {
        /**
            * visibility for data label.
            *
            * @default false
            */
        visible: boolean;
        /**
            * showing template for data label template
            *
            * @default ''
            */
        template: string;
        /**
            * color for data label.
            *
            * @default null
            */
        fill: string;
        /**
            * opacity for data label.
            *
            * @default 1
            */
        opacity: number;
        /**
            * options for customizing data label border
            *
            */
        border: SeriesMarkerDataLabelBorderModel;
        /**
            * options for customizing data label connector line
            */
        connectorLine: SeriesMarkerDataLabelConnectorLineModel;
        /**
            * options for customizing font
            */
        textStyle: SmithchartFontModel;
}
export class SeriesMarker extends ChildProperty<SeriesMarker> {
        /**
            * visibility for marker.
            *
            * @default false
            */
        visible: boolean;
        /**
            * shape for marker.
            *
            * @default 'circle'
            */
        shape: string;
        /**
            * width for marker.
            *
            * @default 6
            */
        width: number;
        /**
            * height for marker.
            *
            * @default 6
            */
        height: number;
        /**
            * Url for the image that is to be displayed as marker
            *
            * @default ''
            */
        imageUrl: string;
        /**
            * color for marker.
            *
            * @default ''
            */
        fill: string;
        /**
            * opacity for marker.
            *
            * @default 1
            */
        opacity: number;
        /**
            *  options for customizing marker border
            */
        border: SeriesMarkerBorderModel;
        /**
            * options for customizing marker data label
            */
        dataLabel: SeriesMarkerDataLabelModel;
}
export class SmithchartSeries extends ChildProperty<SmithchartSeries> {
        /**
            * visibility for series.
            *
            * @default 'visible'
            */
        visibility: string;
        /**
            * points for series.
            *
            * @default []
            */
        points: ISmithChartPoint[];
        /**
            * resistance name for dataSource
            *
            * @default ''
            */
        resistance: string;
        /**
            * reactance name for dataSource
            *
            * @default ''
            */
        reactance: string;
        /**
            * tooltip mapping name for the series
            *
            * @default ''
            */
        tooltipMappingName: string;
        /**
            * Specifies the dataSource
            *
            * @default null
            * @isdatamanager false
            */
        dataSource: Object;
        /**
            * The name of the series visible in legend.
            *
            * @default ''
            */
        name: string;
        /**
            * color for series.
            *
            * @default null
            */
        fill: string;
        /**
            * enable or disable the animation of series.
            *
            * @default false
            */
        enableAnimation: boolean;
        /**
            * perform animation of series based on animation duration.
            *
            * @default '2000ms'
            */
        animationDuration: string;
        /**
            * avoid the overlap of dataLabels.
            *
            * @default false
            */
        enableSmartLabels: boolean;
        /**
            * width for series.
            *
            * @default 1
            */
        width: number;
        /**
            * opacity for series.
            *
            * @default 1
            */
        opacity: number;
        /**
            * options for customizing marker
            */
        marker: SeriesMarkerModel;
        /**
            * options for customizing tooltip
            */
        tooltip: SeriesTooltipModel;
}

/**
    * Interface for a class SeriesTooltipBorder
    */
export interface SeriesTooltipBorderModel {
        /**
            * border width  for tooltip.
            *
            * @default 1
            */
        width?: number;
        /**
            * border color for tooltip
            *
            * @default null
            */
        color?: string;
}
/**
    * Interface for a class SeriesTooltip
    */
export interface SeriesTooltipModel {
        /**
            * visibility of tooltip.
            *
            * @default false
            */
        visible?: boolean;
        /**
            * color for tooltip
            *
            * @default null
            */
        fill?: string;
        /**
            * opacity for tooltip.
            *
            * @default 0.95
            */
        opacity?: number;
        /**
            * template for tooltip
            *
            * @default ''
            */
        template?: string;
        /**
            *  options for customizing tooltip border
            */
        border?: SeriesTooltipBorderModel;
}
/**
    * Interface for a class SeriesMarkerBorder
    */
export interface SeriesMarkerBorderModel {
        /**
            * border width for marker border.
            *
            * @default 3
            */
        width?: number;
        /**
            * border color for marker border.
            *
            * @default 'white'
            */
        color?: string;
}
/**
    * Interface for a class SeriesMarkerDataLabelBorder
    */
export interface SeriesMarkerDataLabelBorderModel {
        /**
            * border width for data label border.
            *
            * @default 0.1
            */
        width?: number;
        /**
            * border color for data label color.
            *
            * @default 'white'
            */
        color?: string;
}
/**
    * Interface for a class SeriesMarkerDataLabelConnectorLine
    */
export interface SeriesMarkerDataLabelConnectorLineModel {
        /**
            * border width for data label connector line.
            *
            * @default 1
            */
        width?: number;
        /**
            * border color for data label connector line.
            *
            * @default null
            */
        color?: string;
}
/**
    * Interface for a class SeriesMarkerDataLabel
    */
export interface SeriesMarkerDataLabelModel {
        /**
            * visibility for data label.
            *
            * @default false
            */
        visible?: boolean;
        /**
            * showing template for data label template
            *
            * @default ''
            */
        template?: string;
        /**
            * color for data label.
            *
            * @default null
            */
        fill?: string;
        /**
            * opacity for data label.
            *
            * @default 1
            */
        opacity?: number;
        /**
            * options for customizing data label border
            *
            */
        border?: SeriesMarkerDataLabelBorderModel;
        /**
            * options for customizing data label connector line
            */
        connectorLine?: SeriesMarkerDataLabelConnectorLineModel;
        /**
            * options for customizing font
            */
        textStyle?: SmithchartFontModel;
}
/**
    * Interface for a class SeriesMarker
    */
export interface SeriesMarkerModel {
        /**
            * visibility for marker.
            *
            * @default false
            */
        visible?: boolean;
        /**
            * shape for marker.
            *
            * @default 'circle'
            */
        shape?: string;
        /**
            * width for marker.
            *
            * @default 6
            */
        width?: number;
        /**
            * height for marker.
            *
            * @default 6
            */
        height?: number;
        /**
            * Url for the image that is to be displayed as marker
            *
            * @default ''
            */
        imageUrl?: string;
        /**
            * color for marker.
            *
            * @default ''
            */
        fill?: string;
        /**
            * opacity for marker.
            *
            * @default 1
            */
        opacity?: number;
        /**
            *  options for customizing marker border
            */
        border?: SeriesMarkerBorderModel;
        /**
            * options for customizing marker data label
            */
        dataLabel?: SeriesMarkerDataLabelModel;
}
/**
    * Interface for a class SmithchartSeries
    */
export interface SmithchartSeriesModel {
        /**
            * visibility for series.
            *
            * @default 'visible'
            */
        visibility?: string;
        /**
            * points for series.
            *
            * @default []
            */
        points?: ISmithChartPoint[];
        /**
            * resistance name for dataSource
            *
            * @default ''
            */
        resistance?: string;
        /**
            * reactance name for dataSource
            *
            * @default ''
            */
        reactance?: string;
        /**
            * tooltip mapping name for the series
            *
            * @default ''
            */
        tooltipMappingName?: string;
        /**
            * Specifies the dataSource
            *
            * @default null
            * @isdatamanager false
            */
        dataSource?: Object;
        /**
            * The name of the series visible in legend.
            *
            * @default ''
            */
        name?: string;
        /**
            * color for series.
            *
            * @default null
            */
        fill?: string;
        /**
            * enable or disable the animation of series.
            *
            * @default false
            */
        enableAnimation?: boolean;
        /**
            * perform animation of series based on animation duration.
            *
            * @default '2000ms'
            */
        animationDuration?: string;
        /**
            * avoid the overlap of dataLabels.
            *
            * @default false
            */
        enableSmartLabels?: boolean;
        /**
            * width for series.
            *
            * @default 1
            */
        width?: number;
        /**
            * opacity for series.
            *
            * @default 1
            */
        opacity?: number;
        /**
            * options for customizing marker
            */
        marker?: SeriesMarkerModel;
        /**
            * options for customizing tooltip
            */
        tooltip?: SeriesTooltipModel;
}

/**
    * To render tooltip
    */
export class TooltipRender {
        /** To define the tooltip element */
        tooltipElement: Tooltip;
        smithchartMouseMove(smithchart: Smithchart, e: PointerEvent): Tooltip;
        /**
            * Get module name.
            *
            * @returns {string} It returns module name
            */
        protected getModuleName(): string;
        /**
            * To destroy the legend.
            *
            * @returns {void}
            * @private
            */
        destroy(): void;
}

export class Subtitle extends ChildProperty<Subtitle> {
        /**
            * visibility for sub title.
            *
            * @default true
            */
        visible: boolean;
        /**
            * text for sub title.
            *
            * @default ''
            */
        text: string;
        /**
            * description for sub title.
            *
            * @default ''
            */
        description: string;
        /**
            * text alignment for sub title.
            *
            * @default Far
            */
        textAlignment: SmithchartAlignment;
        /**
            * trim the sub title.
            *
            * @default true
            */
        enableTrim: boolean;
        /**
            * maximum width of the sub title.
            *
            * @aspDefaultValueIgnore
            * @default null
            */
        maximumWidth: number;
        /**
            * options for customizing sub title font
            */
        textStyle: SmithchartFontModel;
}
export class Title extends ChildProperty<Title> {
        /**
            * visibility for title.
            *
            * @default true
            */
        visible: boolean;
        /**
            * text for title.
            *
            * @default ''
            */
        text: string;
        /**
            * description for title.
            *
            * @default ''
            */
        description: string;
        /**
            * text alignment for title.
            *
            * @default Center
            */
        textAlignment: SmithchartAlignment;
        /**
            * trim the title.
            *
            * @default true
            */
        enableTrim: boolean;
        /**
            * maximum width of the sub title
            *
            * @aspDefaultValueIgnore
            * @default null
            */
        maximumWidth: number;
        /**
            * options for customizing sub title
            */
        subtitle: SubtitleModel;
        /**
            * options for customizing title font
            */
        font: SmithchartFontModel;
        /**
            * options for customizing title text
            */
        textStyle: SmithchartFontModel;
}

/**
    * Interface for a class Subtitle
    */
export interface SubtitleModel {
        /**
            * visibility for sub title.
            *
            * @default true
            */
        visible?: boolean;
        /**
            * text for sub title.
            *
            * @default ''
            */
        text?: string;
        /**
            * description for sub title.
            *
            * @default ''
            */
        description?: string;
        /**
            * text alignment for sub title.
            *
            * @default Far
            */
        textAlignment?: SmithchartAlignment;
        /**
            * trim the sub title.
            *
            * @default true
            */
        enableTrim?: boolean;
        /**
            * maximum width of the sub title.
            *
            * @aspDefaultValueIgnore
            * @default null
            */
        maximumWidth?: number;
        /**
            * options for customizing sub title font
            */
        textStyle?: SmithchartFontModel;
}
/**
    * Interface for a class Title
    */
export interface TitleModel {
        /**
            * visibility for title.
            *
            * @default true
            */
        visible?: boolean;
        /**
            * text for title.
            *
            * @default ''
            */
        text?: string;
        /**
            * description for title.
            *
            * @default ''
            */
        description?: string;
        /**
            * text alignment for title.
            *
            * @default Center
            */
        textAlignment?: SmithchartAlignment;
        /**
            * trim the title.
            *
            * @default true
            */
        enableTrim?: boolean;
        /**
            * maximum width of the sub title
            *
            * @aspDefaultValueIgnore
            * @default null
            */
        maximumWidth?: number;
        /**
            * options for customizing sub title
            */
        subtitle?: SubtitleModel;
        /**
            * options for customizing title font
            */
        font?: SmithchartFontModel;
        /**
            * options for customizing title text
            */
        textStyle?: SmithchartFontModel;
}

export class SmithchartFont extends ChildProperty<SmithchartFont> {
        /**
            * font family for text.
            */
        fontFamily: string;
        /**
            * font style for text.
            *
            * @default 'Normal'
            */
        fontStyle: string;
        /**
            * font weight for text.
            *
            * @default 'Regular'
            */
        fontWeight: string;
        /**
            * Color for the text.
            *
            * @default ''
            */
        color: string;
        /**
            * font size for text.
            *
            * @default '12px'
            */
        size: string;
        /**
            * font opacity for text.
            *
            * @default 1
            */
        opacity: number;
}
export class SmithchartMargin extends ChildProperty<SmithchartMargin> {
        /**
            * top margin of chartArea.
            *
            * @default 10
            */
        top: number;
        /**
            * bottom margin of chartArea.
            *
            * @default 10
            */
        bottom: number;
        /**
            * right margin of chartArea.
            *
            * @default 10
            */
        right: number;
        /**
            * left margin of chartArea.
            *
            * @default 10
            */
        left: number;
}
export class SmithchartBorder extends ChildProperty<SmithchartBorder> {
        /**
            * width for smithchart border.
            *
            * @default 0
            */
        width: number;
        /**
            * opacity for smithchart border.
            *
            * @default 1
            */
        opacity: number;
        /**
            * color for smithchart border .
            *
            * @default 'transparent'
            */
        color: string;
}
/**
    * Internal use of type rect
    */
export class SmithchartRect {
        /** x value for rect */
        x: number;
        y: number;
        width: number;
        height: number;
        constructor(x: number, y: number, width: number, height: number);
}
export class LabelCollection {
        centerX: number;
        centerY: number;
        radius: number;
        value: number;
}
export class LegendSeries {
        text: string;
        seriesIndex: number;
        shape: string;
        fill: string;
        bounds: SmithchartSize;
}
export class LabelRegion {
        bounds: SmithchartRect;
        labelText: string;
}
export class HorizontalLabelCollection extends LabelCollection {
        region: LabelRegion;
}
export class RadialLabelCollections extends HorizontalLabelCollection {
        angle: number;
}
export class LineSegment {
        x1: number;
        x2: number;
        y1: number;
        y2: number;
}
export class PointRegion {
        point: Point;
        x: number;
        y: number;
}
/**
    * Smithchart internal class for point
    */
export class Point {
        x: number;
        y: number;
}
export class ClosestPoint {
        location: Point;
        index: number;
}
export class MarkerOptions {
        id: string;
        fill: string;
        opacity: number;
        borderColor: string;
        borderWidth: number;
        constructor(id?: string, fill?: string, borderColor?: string, borderWidth?: number, opacity?: number);
}
export class SmithchartLabelPosition {
        textX: number;
        textY: number;
        x: number;
        y: number;
}
export class Direction {
        counterclockwise: number;
        clockwise: number;
}
export class DataLabelTextOptions {
        id: string;
        x: number;
        y: number;
        text: string;
        fill: string;
        font: SmithchartFontModel;
        xPosition: number;
        yPosition: number;
        width: number;
        height: number;
        location: Point;
        labelOptions: SmithchartLabelPosition;
        visible: boolean;
        connectorFlag: boolean;
}
export class LabelOption {
        textOptions: DataLabelTextOptions[];
}
/** @private */
export class SmithchartSize {
        height: number;
        width: number;
        constructor(width: number, height: number);
}
export class GridArcPoints {
        startPoint: Point;
        endPoint: Point;
        rotationAngle: number;
        sweepDirection: number;
        isLargeArc: boolean;
        size: SmithchartSize;
}

/**
    * Interface for a class SmithchartFont
    */
export interface SmithchartFontModel {
        /**
            * font family for text.
            */
        fontFamily?: string;
        /**
            * font style for text.
            *
            * @default 'Normal'
            */
        fontStyle?: string;
        /**
            * font weight for text.
            *
            * @default 'Regular'
            */
        fontWeight?: string;
        /**
            * Color for the text.
            *
            * @default ''
            */
        color?: string;
        /**
            * font size for text.
            *
            * @default '12px'
            */
        size?: string;
        /**
            * font opacity for text.
            *
            * @default 1
            */
        opacity?: number;
}
/**
    * Interface for a class SmithchartMargin
    */
export interface SmithchartMarginModel {
        /**
            * top margin of chartArea.
            *
            * @default 10
            */
        top?: number;
        /**
            * bottom margin of chartArea.
            *
            * @default 10
            */
        bottom?: number;
        /**
            * right margin of chartArea.
            *
            * @default 10
            */
        right?: number;
        /**
            * left margin of chartArea.
            *
            * @default 10
            */
        left?: number;
}
/**
    * Interface for a class SmithchartBorder
    */
export interface SmithchartBorderModel {
        /**
            * width for smithchart border.
            *
            * @default 0
            */
        width?: number;
        /**
            * opacity for smithchart border.
            *
            * @default 1
            */
        opacity?: number;
        /**
            * color for smithchart border .
            *
            * @default 'transparent'
            */
        color?: string;
}
/**
    * Interface for a class SmithchartRect
    */
export interface SmithchartRectModel {
}
/**
    * Interface for a class LabelCollection
    */
export interface LabelCollectionModel {
}
/**
    * Interface for a class LegendSeries
    */
export interface LegendSeriesModel {
}
/**
    * Interface for a class LabelRegion
    */
export interface LabelRegionModel {
}
/**
    * Interface for a class HorizontalLabelCollection
    */
export interface HorizontalLabelCollectionModel extends LabelCollectionModel {
}
/**
    * Interface for a class RadialLabelCollections
    */
export interface RadialLabelCollectionsModel extends HorizontalLabelCollectionModel {
}
/**
    * Interface for a class LineSegment
    */
export interface LineSegmentModel {
}
/**
    * Interface for a class PointRegion
    */
export interface PointRegionModel {
}
/**
    * Interface for a class Point
    */
export interface PointModel {
}
/**
    * Interface for a class ClosestPoint
    */
export interface ClosestPointModel {
}
/**
    * Interface for a class MarkerOptions
    */
export interface MarkerOptionsModel {
}
/**
    * Interface for a class SmithchartLabelPosition
    */
export interface SmithchartLabelPositionModel {
}
/**
    * Interface for a class Direction
    */
export interface DirectionModel {
}
/**
    * Interface for a class DataLabelTextOptions
    */
export interface DataLabelTextOptionsModel {
}
/**
    * Interface for a class LabelOption
    */
export interface LabelOptionModel {
}
/**
    * Interface for a class SmithchartSize
    * @private
    */
export interface SmithchartSizeModel {
}
/**
    * Interface for a class GridArcPoints
    * @private
    */
export interface GridArcPointsModel {
}

/**
    * Defines Theme of the smithchart. They are
    * * Material - Render a smithchart with Material theme.
    * * Fabric - Render a smithchart with Fabric theme
    */
export type SmithchartTheme = 
/**  Render a smithchart with Material theme. */
'Material' | 
/**  Render a smithchart with Fabric theme. */
'Fabric' | 
/**  Render a smithchart with Bootstrap theme. */
'Bootstrap' | 
/**  Render a smithchart with Highcontrast Light theme. */
'HighContrastLight' | 
/**  Render a smithchart with Material Dark theme. */
'MaterialDark' | 
/**  Render a smithchart with Fabric Dark theme. */
'FabricDark' | 
/**  Render a smithchart with Highcontrast Dark theme. */
'HighContrast' | 
/**  Render a smithchart with Bootstrap Dark theme. */
'BootstrapDark' | 
/** Render a smithchart with Bootstrap4 theme. */
'Bootstrap4' | 
/**  Render a smithchart with Tailwind theme. */
'Tailwind' | 
/**  Render a smithchart with TailwindDark theme. */
'TailwindDark' | 
/**  Render a smithchart with Bootstrap5 theme. */
'Bootstrap5' | 
/**  Render a smithchart with Bootstrap5Dark theme. */
'Bootstrap5Dark';
/**
    * Defines render type of smithchart. They are
    * * Impedance - Render a smithchart with Impedance type.
    * * Admittance - Render a smithchart with Admittance type.
    */
export type RenderType = 
/**  Render a smithchart with Impedance type. */
'Impedance' | 
/**  Render a smithchart with Admittance type. */
'Admittance';
export type AxisLabelPosition = 
/**  Render a axis label with label position as outside. */
'Outside' | 
/**  Render a axis label with label position as outside. */
'Inside';
export type SmithchartLabelIntersectAction = 
/**  Hide the overlapped axis label. */
'Hide' | 
/**  Render the overlapped axis label */
'None';
/**
    * Defines the Alignment. They are
    * * near - Align the element to the left.
    * * center - Align the element to the center.
    * * far - Align the element to the right.
    * *
    */
export type SmithchartAlignment = 
/** Define the left alignment. */
'Near' | 
/** Define the center alignment. */
'Center' | 
/** Define the right alignment. */
'Far';
export type SmithchartExportType = 
/** Used to export a image as png format */
'PNG' | 
/** Used to export a image as jpeg format */
'JPEG' | 
/** Used to export a file as svg format */
'SVG' | 
/** Used to export a file as pdf format */
'PDF';
/**
    * Specifies TreeMap beforePrint event name.
    *
    * @private
    */
export const smithchartBeforePrint: string;

export class SmithchartLegend {
        legendActualBounds: SmithchartRect;
        legendSeries: LegendSeries[];
        legendGroup: Element;
        /**
            * legend rendering
            */
        legendItemGroup: Element;
        renderLegend(smithchart: Smithchart): SmithchartRect;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the legend.
            * @return {void}
            * @private
            */
        destroy(smithchart: Smithchart): void;
}

export class ChartViewClass extends UIView {
    chart: Chart;
    IsMount: boolean;
    InstanceId: string;
    constructor();
    id(value: string): this;
    Refresh(): void;
    CreateChart(): void;
    AddSerie(...series: SerieClass[]): this;
    height(): this;
    height(value: int): this;
    height(value: string): this;
    backgroundColor(value: StyleAttribute): this;
    backgroundColor(value: string): this;
    background(value: ColorClass): this;
    background(value: StyleAttribute): this;
    background(zstack: ZStackClass): this;
    background(color: string): this;
    background(condition: boolean, trueValue: string, falseValue: string): this;
    xAxis(value: AxisModel): this;
    yAxis(value: AxisModel): this;
    chartArea(value: ChartAreaModel): this;
}
type FunctionChartView = (...series: SerieClass[]) => ChartViewClass;
export function ChartView(): FunctionChartView;
class MyControl extends Control {
    series: SeriesModel[];
    _test: string;
    protected GetRenderer(): any;
    test(value: string): this;
    AddSerie(...series: SerieClass[]): this;
}
export function MyControlBody(...series: SerieClass[]): MyControl;
export {};

export function _Sparkline(): SparklineViewClass;
export class SparklineViewClass extends UIView {
    chart: SparklineChart;
    IsMount: boolean;
    InstanceId: string;
    constructor();
    id(value: string): this;
    Refresh(): void;
    CreateChart(): void;
    slWidth(value: string): this;
    slHeight(value: string): this;
    slBorder(value: SparklineBorderModel): this;
    slType(value: SparklineType): this;
    slRangePadding(value: SparklineRangePadding): this;
    slDataSource(value: Object[] | DataManager): this;
    slValueType(value: SparklineValueType): this;
    slXName(value: string): this;
    slYName(value: string): this;
    slFill(value: string): this;
    slHighPointColor(value: string): this;
    slLowPointColor(value: string): this;
    slStartPointColor(value: string): this;
    slEndPointColor(value: string): this;
    slNegativePointColor(value: string): this;
    slTiePointColor(value: string): this;
    slPalette(value: string[]): this;
    slLineWidth(value: number): this;
    slOpacity(value: number): this;
    slFormat(value: string): this;
    slUseGroupingSeparator(value: boolean): this;
    slTooltipSettings(value: SparklineTooltipSettingsModel): this;
    slContainerArea(value: ContainerAreaModel): this;
    slRangeBandSettings(value: RangeBandSettingsModel[]): this;
    slAxisSettings(value: AxisSettingsModel): this;
    slMarkerSettings(value: SparklineMarkerSettingsModel): this;
    slDataLabelSettings(value: SparklineDataLabelSettingsModel): this;
    slPadding(value: PaddingModel): this;
    model(value: SparklineModel): this;
}
export function Sparkline(): SparklineViewClass;

export class BarChart extends Control<BarChart> {
    get Props(): Chart;
    get ChardRef(): Chart;
    get Label(): string;
    set Label(value: string);
    get Data(): any;
    set Data(value: any);
    get PrimaryXAxis(): AxisModel;
    set PrimaryXAxis(value: AxisModel);
    get PrimaryYAxis(): AxisModel;
    set PrimaryYAxis(value: AxisModel);
    get Series(): SeriesModel[];
    set Series(value: SeriesModel[]);
    get Title(): string;
    set Title(value: string);
    componentDidMount(): void;
    componentDidUpdate(prevProps: any, prevState: any): void;
    componentWillUnmount(): void;
    CreateElements(): any;
}

export class TvChart extends Control<TvChart> {
    IsHide: boolean;
    TooltipRender: Event<any>;
    PointRender: Event<any>;
    get Props(): Chart;
    get ChardRef(): Chart;
    get Label(): string;
    set Label(value: string);
    get Data(): any;
    set Data(value: any);
    get PrimaryXAxis(): AxisModel;
    set PrimaryXAxis(value: AxisModel);
    get PrimaryYAxis(): AxisModel;
    set PrimaryYAxis(value: AxisModel);
    get Series(): SeriesModel[];
    set Series(value: SeriesModel[]);
    get Title(): string;
    set Title(value: string);
    get TooltipFormat(): string;
    set TooltipFormat(value: string);
    protected SetupControlDefaults(): void;
    componentDidMount(): void;
    componentDidUpdate(prevProps: any, prevState: any): void;
    componentWillUnmount(): void;
    CreateElements(): any;
    Refresh(): void;
}

export class CartesianAxisLayoutPanel {
        /** @private */
        leftSize: number;
        /** @private */
        rightSize: number;
        /** @private */
        topSize: number;
        /** @private */
        bottomSize: number;
        /** @private */
        seriesClipRect: Rect;
        /** @private */
        constructor(chartModule?: Chart);
        /**
            * Measure the axis size.
            *
            * @returns {void}
            * @private
            */
        measureAxis(rect: Rect): void;
        /**
            * Measure the column and row in chart.
            *
            * @returns {void}
            * @private
            */
        measureDefinition(definition: Row | Column, chart: Chart, size: Size): void;
        /**
            * Measure the axis.
            *
            * @returns {void}
            * @private
            */
        measure(): void;
        /**
            * To render the axis element.
            *
            * @returns {void}
            * @private
            */
        renderAxes(): Element;
        /**
            * To render the yAxis label
            *
            * @param {Axis} axis axis
            * @param {number} index index
            * @param {Element} parent parent
            * @param {Rect} rect rect
            * @returns {void}
            * @private
            */
        drawYAxisLabels(axis: Axis, index: number, parent: Element, rect: Rect): void;
        /**
            * To render the xAxis Labels
            *
            * @param {Axis} axis axis
            * @param {number} index index
            * @param {Element} parent parent
            * @param {Rect} rect rect
            * @returns {void}
            * @private
            */
        drawXAxisLabels(axis: Axis, index: number, parent: Element, rect: Rect): void;
}

/**
    * Marker module used to render the marker for line type series.
    */
export class Marker extends MarkerExplode {
        /**
            * Constructor for the marker module.
            *
            * @private
            */
        constructor(chart: Chart);
        /**
            * Render the marker for series.
            *
            * @returns {void}
            * @private
            */
        render(series: Series): void;
        createElement(series: Series, redraw: boolean): void;
        /**
            * Animates the marker.
            *
            * @returns {void}
            * @private
            */
        doMarkerAnimation(series: Series): void;
}

/**
    * Specifies the Polar Axis Layout.
    */
export class PolarRadarPanel extends LineBase {
        centerX: number;
        centerY: number;
        startAngle: number;
        /** @private */
        visibleAxisLabelRect: Rect[];
        /** @private */
        seriesClipRect: Rect;
        /**
            * Measure the polar radar axis size.
            *
            * @returns {void}
            * @private
            */
        measureAxis(rect: Rect): void;
        /**
            * Measure the column and row in chart.
            *
            * @returns {void}
            * @private
            */
        measureDefinition(definition: Row | Column, chart: Chart, size: Size): void;
        /**
            * Measure the axis.
            *
            * @returns {void}
            * @private
            */
        measure(): void;
        /**
            * To render the axis element.
            *
            * @returns {void}
            * @private
            */
        renderAxes(): Element;
        drawYAxisLabels(axis: Axis, index: number): void;
        /**
            * To render the axis label.
            *
            * @param {Axis} axis axis
            * @param {number} index index
            * @returns {void}
            * @private
            */
        drawXAxisLabels(axis: Axis, index: number): void;
}

/**
  * Numeric Range.
  *
  * @private
  */
export class DoubleRange {
    /** @private */
    get start(): number;
    /** @private */
    get end(): number;
    /** @private */
    get delta(): number;
    /** @private */
    get median(): number;
    constructor(start: number, end: number);
}

/**
  * Range Navigator component export methods
  */

/**
    * Base for line type series.
    */
export class LineBase {
        chart: Chart;
        /** @private */
        constructor(chartModule?: Chart);
        /**
            * To improve the chart performance.
            *
            * @returns {void}
            * @private
            */
        enableComplexProperty(series: Series): Points[];
        /**
            * To generate the line path direction
            *
            * @param {Points} firstPoint firstPoint
            * @param {Points} secondPoint secondPoint
            * @param {Series} series series
            * @param {boolean} isInverted isInverted
            * @param {Function} getPointLocation getPointLocation
            * @param {string} startPoint startPoint
            */
        getLineDirection(firstPoint: Points, secondPoint: Points, series: Series, isInverted: Boolean, getPointLocation: Function, startPoint: string): string;
        /**
            * To append the line path.
            *
            * @returns {void}
            * @private
            */
        appendLinePath(options: PathOption, series: Series, clipRect: string): void;
        /**
            * To render the marker for the series.
            *
            * @returns {void}
            * @private
            */
        renderMarker(series: Series): void;
        /**
            * To do the progressive animation.
            *
            * @returns {void}
            * @private
            */
        doProgressiveAnimation(series: Series, option: AnimationModel): void;
        /**
            * To store the symbol location and region
            *
            * @param {Points} point point
            * @param {Series} series series
            * @param {boolean} isInverted isInverted
            * @param {Function} getLocation getLocation
            */
        storePointLocation(point: Points, series: Series, isInverted: boolean, getLocation: Function): void;
        /**
            * To find point with in the visible range
            *
            * @param {Points} point point
            * @param {Axis} yAxis yAxis
            * @private
            */
        withinYRange(point: Points, yAxis: Axis): boolean;
        /**
            * To get first and last visible points
            *
            * @private
            */
        getFirstLastVisiblePoint(points: Points[]): {
                first: Points;
                last: Points;
        };
        /**
            * To do the linear animation.
            *
            * @returns {void}
            * @private
            */
        doLinearAnimation(series: Series, animation: AnimationModel): void;
}

/**
    * Column Series Base
    */
export class ColumnBase {
        /**
            * To get the position of the column series.
            *
            * @returns {DoubleRange} doubleRange
            * @private
            */
        protected getSideBySideInfo(series: Series): DoubleRange;
        /**
            * To get the rect values.
            *
            * @returns {Rect} rect region values
            * @private
            */
        protected getRectangle(x1: number, y1: number, x2: number, y2: number, series: Series): Rect;
        /**
            * Updates the symbollocation for points
            *
            * @returns {void}
            * @private
            */
        protected updateSymbolLocation(point: Points, rect: Rect, series: Series): void;
        /**
            * Update the region for the point.
            *
            * @returns {void}
            * @private
            */
        protected updateXRegion(point: Points, rect: Rect, series: Series): void;
        /**
            * Update the region for the point in bar series.
            *
            * @returns {void}
            * @private
            */
        protected updateYRegion(point: Points, rect: Rect, series: Series): void;
        /**
            * To render the marker for the series.
            *
            * @returns {void}
            * @private
            */
        renderMarker(series: Series): void;
        /**
            * To trigger the point rendering event.
            *
            * @returns {void}
            * @private
            */
        protected triggerEvent(series: Series, point: Points, fill: string, border: BorderModel): IPointRenderEventArgs;
        /**
            * To draw the rectangle for points.
            *
            * @returns {void}
            * @private
            */
        protected drawRectangle(series: Series, point: Points, rect: Rect, argsData: IPointRenderEventArgs): void;
        /**
            * To animate the series.
            *
            * @returns {void}
            * @private
            */
        animate(series: Series): void;
}
export interface RectPosition {
        position: number;
        rectCount: number;
}

/**
    * render Line series
    */
export class SplineBase extends LineBase {
        /** @private */
        constructor(chartModule?: Chart);
        /**
            * To find the control points for spline.
            *
            * @returns {void}
            * @private
            */
        findSplinePoint(series: Series): void;
        protected getPreviousIndex(points: Points[], i: number, series: Series): number;
        getNextIndex(points: Points[], i: number, series: Series): number;
        filterEmptyPoints(series: Series, seriesPoints?: Points[]): Points[];
        /**
            * To find points in the range
            *
            * @private
            */
        isPointInRange(points: Points[]): boolean;
        /**
            * To find the natural spline.
            *
            * @returns {void}
            * @private
            */
        findSplineCoefficients(points: Points[], series: Series, isLow?: boolean): number[];
        /**
            * To find the control points for spline.
            *
            * @returns {void}
            * @private
            */
        getControlPoints(point1: Points, point2: Points, ySpline1: number, ySpline2: number, series: Series): ControlPoints;
        /**
            * calculate datetime interval in hours
            */
        protected dateTimeInterval(series: Series): number;
        /**
            * Animates the series.
            *
            * @param  {Series} series - Defines the series to animate.
            * @returns {void}
            */
        doAnimation(series: Series): void;
}

/**
    * Technical Analysis module helps to predict the market trend
    */
export class TechnicalAnalysis extends LineBase {
        /**
            * Defines the collection of series, that are used to represent the given technical indicator
            *
            * @private
            */
        initSeriesCollection(indicator: TechnicalIndicator, chart: Chart): void;
        /**
            * Initializes the properties of the given series
            *
            * @private
            */
        protected setSeriesProperties(series: Series, indicator: TechnicalIndicator, name: string, fill: string, width: number, chart: Chart): void;
        /**
            * Creates the elements of a technical indicator
            *
            * @private
            */
        createIndicatorElements(chart: Chart, indicator: TechnicalIndicator, index: number): void;
        protected getDataPoint(x: Object, y: Object, sourcePoint: Points, series: Series, index: number, indicator?: TechnicalIndicator): Points;
        protected getRangePoint(x: Object, high: Object, low: Object, sourcePoint: Points, series: Series, index: number): Points;
        protected setSeriesRange(points: Points[], indicator: TechnicalIndicator, series?: Series): void;
}

/**
  * Pie Component items exported
  */

/**
    * Tooltip Module used to render the tooltip for series.
    */
export class BaseTooltip extends ChartData {
        element: HTMLElement;
        elementSize: Size;
        textStyle: FontModel;
        isRemove: boolean;
        toolTipInterval: number;
        textElements: Element[];
        inverted: boolean;
        formattedText: string[];
        header: string;
        /** @private */
        valueX: number;
        /** @private */
        valueY: number;
        control: AccumulationChart | Chart;
        text: string[];
        svgTooltip: SVGTooltip;
        headerText: string;
        /**
            * Constructor for tooltip module.
            *
            * @private
            */
        constructor(chart: Chart | AccumulationChart);
        getElement(id: string): HTMLElement;
        /**
            * Renders the tooltip.
            *
            * @returns {void}
            * @private
            */
        getTooltipElement(isTooltip: boolean): HTMLDivElement;
        createElement(): HTMLDivElement;
        pushData(data: PointData | AccPointData, isFirst: boolean, tooltipDiv: HTMLDivElement, isChart: boolean): boolean;
        removeHighlight(): void;
        highlightPoint(series: Series | AccumulationSeries, pointIndex: number, highlight: boolean): void;
        highlightPoints(): void;
        createTooltip(chart: Chart | AccumulationChart, isFirst: boolean, location: ChartLocation, clipLocation: ChartLocation, point: Points | AccPoints, shapes: ChartShape[], offset: number, bounds: Rect, extraPoints?: PointData[], templatePoint?: Points | AccPoints, customTemplate?: string): void;
        updatePreviousPoint(extraPoints: PointData[]): void;
        fadeOut(data: PointData[]): void;
        removeHighlightedMarker(data: PointData[]): void;
        removeText(): void;
        stopAnimation(): void;
        /**
            * Removes the tooltip on mouse leave.
            *
            * @returns {void}
            * @private
            */
        removeTooltip(duration: number): void;
}

/**
    * Zooming Toolkit created here
    *
    * @private
    */
export class Toolkit {
        /** @private */
        zoomCompleteEvtCollection: IZoomCompleteEventArgs[];
        /** @private */
        constructor(chart: Chart);
        /**
            * To create the pan button.
            *
            * @returns {void}
            * @private
            */
        createPanButton(childElement: Element, parentElement: Element): void;
        /**
            * To create the zoom button.
            *
            * @returns {void}
            * @private
            */
        createZoomButton(childElement: Element, parentElement: Element): void;
        /**
            * To create the ZoomIn button.
            *
            * @returns {void}
            * @private
            */
        createZoomInButton(childElement: Element, parentElement: Element, chart: Chart): void;
        /**
            * To create the ZoomOut button.
            *
            * @returns {void}
            * @private
            */
        createZoomOutButton(childElement: Element, parentElement: Element, chart: Chart): void;
        /**
            * To create the Reset button.
            *
            * @returns {void}
            * @private
            */
        createResetButton(childElement: Element, parentElement: Element, chart: Chart, isDevice: Boolean): void;
        /**
            * To bind events.
            *
            * @returns {void}
            * @private
            */
        wireEvents(element: Element, process: Function): void;
        /** @private */
        removeTooltip(): void;
        /** @private */
        reset(): boolean;
        /** @private */
        pan(): boolean;
}

/**
    * Selection Module handles the selection for chart.
    *
    * @private
    */
export class BaseSelection {
        /** @private */
        styleId: string;
        protected unselected: string;
        protected control: Chart | AccumulationChart;
        constructor(control: Chart | AccumulationChart);
        /**
            * To create selection styles for series
            *
            * @returns {void}
            */
        protected seriesStyles(): void;
        /**
            * To create the pattern for series/points
            *
            * @param chart
            * @param color
            * @param index
            * @param patternName
            * @param opacity
            * @param chart
            * @param color
            * @param index
            * @param patternName
            * @param opacity
            * @param chart
            * @param color
            * @param index
            * @param patternName
            * @param opacity
            * @param chart
            * @param color
            * @param index
            * @param patternName
            * @param opacity
            * @param chart
            * @param color
            * @param index
            * @param patternName
            * @param opacity
            */
        pattern(chart: Chart | AccumulationChart, color: string, index: number, patternName: SelectionPattern, opacity: number): string;
        /**
            * To concat indexes
            *
            * @param userIndexes
            * @param localIndexes
            * @param userIndexes
            * @param localIndexes
            */
        protected concatIndexes(userIndexes: IndexesModel[], localIndexes: Indexes[]): Indexes[];
        /**
            * Selected points series visibility checking on legend click
            *
            * @param selectedIndexes
            */
        protected checkVisibility(selectedIndexes: Indexes[]): boolean;
        /**
            * To add svg element style class
            *
            * @param element
            * @param className
            * @param element
            * @param className
            * @private
            */
        addSvgClass(element: Element, className: string): void;
        /**
            * To remove svg element style class
            *
            * @param element
            * @param className
            * @param element
            * @param className
            * @private
            */
        removeSvgClass(element: Element, className: string): void;
        /**
            * To get children from parent element
            *
            * @param parent
            */
        protected getChildren(parent: Element): Element[];
}

/**
    * data module is used to generate query and dataSource
    */
export class Data {
        /**
            * Constructor for data module
            *
            * @param dataSource
            * @param query
            * @param dataSource
            * @param query
            * @private
            */
        constructor(dataSource?: Object | DataManager, query?: Query);
        /**
            * The function used to initialize dataManager and query
            *
            * @param dataSource
            * @param query
            * @param dataSource
            * @param query
            * @returns {void}
            * @private
            */
        initDataManager(dataSource: Object | DataManager, query: Query): void;
        /**
            * The function used to generate updated Query from chart model
            *
            * @returns {void}
            * @private
            */
        generateQuery(): Query;
        /**
            * The function used to get dataSource by executing given Query
            *
            * @param  {Query} query - A Query that specifies to generate dataSource
            * @returns {void}
            * @private
            */
        getData(dataQuery: Query): Promise<Object>;
}

/**
  * Chart component exported items
  */

/**
    * Configures the location for the legend.
    */
export class Location extends ChildProperty<Location> {
        /**
            * X coordinate of the legend in pixels.
            *
            * @default 0
            */
        x: number;
        /**
            * Y coordinate of the legend in pixels.
            *
            * @default 0
            */
        y: number;
}
/**
    * Configures the legends in charts.
    */
export class LegendSettings extends ChildProperty<LegendSettings> {
        /**
            * If set to true, legend will be visible.
            *
            * @default true
            */
        visible: boolean;
        /**
            * The height of the legend in pixels.
            *
            * @default null
            */
        height: string;
        /**
            * The width of the legend in pixels.
            *
            * @default null
            */
        width: string;
        /**
            * Specifies the location of the legend, relative to the chart.
            * If x is 20, legend moves by 20 pixels to the right of the chart. It requires the `position` to be `Custom`.
            * ```html
            * <div id='Chart'></div>
            * ```
            * ```typescript
            * let chart: Chart = new Chart({
            * ...
            *   legendSettings: {
            *     visible: true,
            *     position: 'Custom',
            *     location: { x: 100, y: 150 },
            *   },
            * ...
            * });
            * chart.appendTo('#Chart');
            * ```
            */
        location: LocationModel;
        /**
            * Position of the legend in the chart are,
            * * Auto: Places the legend based on area type.
            * * Top: Displays the legend at the top of the chart.
            * * Left: Displays the legend at the left of the chart.
            * * Bottom: Displays the legend at the bottom of the chart.
            * * Right: Displays the legend at the right of the chart.
            * * Custom: Displays the legend  based on the given x and y values.
            *
            * @default 'Auto'
            */
        position: LegendPosition;
        /**
         * Mode of legend items
         * * Series: Legend items generated based on series count.
         * * Point: Legend items generated based on unique data points.
         * * Range: Legend items generated based on range color mapping property.
         * * Gradient: Single linear bar generated based on range color mapping property.
         * This property is applicable for chart component only.
         */
        mode: LegendMode;
        /**
            * Option to customize the padding between legend items.
            *
            * @default 8
            */
        padding: number;
        /**
            * Legend in chart can be aligned as follows:
            * * Near: Aligns the legend to the left of the chart.
            * * Center: Aligns the legend to the center of the chart.
            * * Far: Aligns the legend to the right of the chart.
            *
            * @default 'Center'
            */
        alignment: Alignment;
        /**
            * Options to customize the legend text.
            */
        textStyle: FontModel;
        /**
            * Shape height of the legend in pixels.
            *
            * @default 10
            */
        shapeHeight: number;
        /**
            * Shape width of the legend in pixels.
            *
            * @default 10
            */
        shapeWidth: number;
        /**
            * Options to customize the border of the legend.
            */
        border: BorderModel;
        /**
            *  Options to customize left, right, top and bottom margins of the chart.
            */
        margin: MarginModel;
        /**
            *  Options to customize left, right, top and bottom padding for legend container of the chart.
            */
        containerPadding: ContainerPaddingModel;
        /**
            * Padding between the legend shape and text.
            *
            * @default 5
            */
        shapePadding: number;
        /**
            * The background color of the legend that accepts value in hex and rgba as a valid CSS color string.
            *
            * @default 'transparent'
            */
        background: string;
        /**
            * Opacity of the legend.
            *
            * @default 1
            */
        opacity: number;
        /**
            * If set to true, series' visibility collapses based on the legend visibility.
            *
            * @default true
            */
        toggleVisibility: boolean;
        /**
            * Description for legends.
            *
            * @default null
            */
        description: string;
        /**
            * TabIndex value for the legend.
            *
            * @default 3
            */
        tabIndex: number;
        /**
            * Title for legends.
            *
            * @default null
            */
        title: string;
        /**
            * Options to customize the legend title.
            */
        titleStyle: FontModel;
        /**
            * legend title position
            *
            * @default 'Top'
            */
        titlePosition: LegendTitlePosition;
        /**
            * maximum width for the legend title.
            *
            * @default 100
            */
        maximumTitleWidth: number;
        /**
            * If set to true, legend will be visible using pages.
            *
            * @default true
            */
        enablePages: boolean;
        /**
            * If set to true, legend will be Reversed.
            *
            * @default false
            */
        isInversed: boolean;
}
/**
    * Legend base class for Chart and Accumulation chart.
    *
    * @private
    */
export class BaseLegend {
        protected chart: Chart | AccumulationChart | BulletChart | StockChart;
        protected legend: LegendSettingsModel;
        protected maxItemHeight: number;
        protected isPaging: boolean;
        totalPages: number;
        protected isVertical: boolean;
        protected fivePixel: number;
        protected pageButtonSize: number;
        protected pageXCollections: number[];
        protected maxColumns: number;
        maxWidth: number;
        protected legendID: string;
        protected currentPage: number;
        protected backwardArrowOpacity: number;
        protected forwardArrowOpacity: number;
        protected arrowWidth: number;
        protected arrowHeight: number;
        protected library: Legend | AccumulationLegend | BulletChartLegend | StockLegend;
        /**  @private */
        position: LegendPosition;
        /**
            * Gets the legend bounds in chart.
            *
            * @private
            */
        legendBounds: Rect;
        /** @private */
        legendCollections: LegendOptions[];
        protected legendTitleSize: Size;
        protected isTitle: boolean;
        /** @private */
        clearTooltip: number;
        protected pagingClipRect: RectOption;
        protected currentPageNumber: number;
        protected legendRegions: ILegendRegions[];
        protected pagingRegions: Rect[];
        protected totalNoOfPages: number;
        /** @private */
        calTotalPage: boolean;
        /**
            * Constructor for the dateTime module.
            *
            * @private
            */
        constructor(chart?: Chart | AccumulationChart | BulletChart | StockChart);
        /**
            * Calculate the bounds for the legends.
            *
            * @returns {void}
            * @private
            */
        calculateLegendBounds(rect: Rect, availableSize: Size, maxLabelSize: Size): void;
        /**
            * To set bounds for chart and accumulation chart
            *
            * @param computedWidth
            * @param computedHeight
            * @param legend
            * @param legendBounds
            * @param computedWidth
            * @param computedHeight
            * @param legend
            * @param legendBounds
            * @param computedWidth
            * @param computedHeight
            * @param legend
            * @param legendBounds
            * @param computedWidth
            * @param computedHeight
            * @param legend
            * @param legendBounds
            * @returns {void}
            */
        protected setBounds(computedWidth: number, computedHeight: number, legend: LegendSettingsModel, legendBounds: Rect): void;
        /**
            * Renders the legend.
            *
            * @param chart
            * @param legend
            * @param legendBounds
            * @param redraw
            * @param chart
            * @param legend
            * @param legendBounds
            * @param redraw
            * @param chart
            * @param legend
            * @param legendBounds
            * @param redraw
            * @param chart
            * @param legend
            * @param legendBounds
            * @param redraw
            * @returns {void}
            * @private
            */
        renderLegend(chart: Chart | AccumulationChart | BulletChart | StockChart, legend: LegendSettingsModel, legendBounds: Rect, redraw?: boolean): void;
        /**
            * To get the legend title text width and height.
            *
            * @param legend
            * @param legendBounds
            */
        protected calculateLegendTitle(legend: LegendSettingsModel, legendBounds: Rect): void;
        /**
            * To render legend symbols for chart and accumulation chart
            *
            * @param legendOption
            * @param group
            * @param i
            * @param legendOption
            * @param group
            * @param i
            * @param legendOption
            * @param group
            * @param i
            */
        protected renderSymbol(legendOption: LegendOptions, group: Element, i: number): void;
        /**
            * To render legend text for chart and accumulation chart
            *
            * @param chart
            * @param legendOption
            * @param group
            * @param textOptions
            * @param i
            * @param chart
            * @param legendOption
            * @param group
            * @param textOptions
            * @param i
            * @param chart
            * @param legendOption
            * @param group
            * @param textOptions
            * @param i
            * @param chart
            * @param legendOption
            * @param group
            * @param textOptions
            * @param i
            * @param chart
            * @param legendOption
            * @param group
            * @param textOptions
            * @param i
            */
        protected renderText(chart: Chart | AccumulationChart | BulletChart | StockChart, legendOption: LegendOptions, group: Element, textOptions: TextOption, i: number): void;
        /**
            * To translate legend pages for chart and accumulation chart
            *
            * @param pagingText
            * @param page
            * @param pageNumber
            * @param legend
            * @param pagingText
            * @param page
            * @param pageNumber
            * @param legend
            * @param pagingText
            * @param page
            * @param pageNumber
            * @param legend
            * @param pagingText
            * @param page
            * @param pageNumber
            * @param legend
            */
        protected translatePage(pagingText: Element, page: number, pageNumber: number, legend?: LegendSettingsModel): number;
        /**
            * To change legend pages for chart and accumulation chart
            *
            * @param event
            * @param pageUp
            * @param event
            * @param pageUp
            */
        protected changePage(event: Event, pageUp: boolean): void;
        /**
            * To find legend elements id based on chart or accumulation chart
            *
            * @param option
            * @param prefix
            * @param count
            * @param option
            * @param prefix
            * @param count
            * @param option
            * @param prefix
            * @param count
            * @private
            */
        generateId(option: LegendOptions, prefix: string, count: number): string;
        /**
            * To show or hide trimmed text tooltip for legend.
            *
            * @param event
            * @returns {void}
            * @private
            */
        move(event: Event): void;
}
/**
    * Class for legend options
    *
    * @private
    */
export class LegendOptions {
        render: boolean;
        text: string;
        fill: string;
        shape: LegendShape;
        visible: boolean;
        type: ChartSeriesType | AccumulationType;
        textSize: Size;
        location: ChartLocation;
        url?: string;
        pointIndex?: number;
        seriesIndex?: number;
        markerShape?: ChartShape;
        markerVisibility?: boolean;
        constructor(text: string, fill: string, shape: LegendShape, visible: boolean, type: ChartSeriesType | AccumulationType, url?: string, markerShape?: ChartShape, markerVisibility?: boolean, pointIndex?: number, seriesIndex?: number);
}

/**
    * Annotation Module handles the Annotation for chart and accumulation series.
    */
export class AnnotationBase {
        /**
            * Constructor for chart and accumulation annotation
            *
            * @param control
            */
        constructor(control: Chart | AccumulationChart);
        /**
            * Method to render the annotation for chart and accumulation series.
            *
            * @private
            * @param annotation
            * @param index
            */
        render(annotation: AccumulationAnnotationSettings | ChartAnnotationSettings, index: number): HTMLElement;
        /**
            * Method to calculate the location for annotation - coordinate unit as pixel.
            *
            * @private
            * @param location
            */
        setAnnotationPixelValue(location: ChartLocation): boolean;
        /**
            * Method to calculate the location for annotation - coordinate unit as point.
            *
            * @private
            * @param location
            */
        setAnnotationPointValue(location: ChartLocation): boolean;
        /**
            * To process the annotation for accumulation chart
            *
            * @param annotation
            * @param index
            * @param parentElement
            */
        processAnnotation(annotation: ChartAnnotationSettings | AccumulationAnnotationSettings, index: number, parentElement: HTMLElement): void;
        /**
            * Method to calculate the location for annotation - coordinate unit as point in accumulation chart.
            *
            * @private
            * @param location
            */
        setAccumulationPointValue(location: ChartLocation): boolean;
        /**
            * Method to set the element style for accumulation / chart annotation.
            *
            * @private
            * @param location
            * @param element
            * @param parentElement
            */
        setElementStyle(location: ChartLocation, element: HTMLElement, parentElement: HTMLElement): void;
        /**
            * Method to calculate the alignment value for annotation.
            *
            * @private
            * @param alignment
            * @param size
            * @param value
            */
        setAlignmentValue(alignment: Alignment | Position, size: number, value: number): number;
}

/**
  * Financial chart exports
  */

/**
    * Accumulation Base used to do some base calculation for accumulation chart.
    */
export class AccumulationBase {
        /** @private */
        constructor(accumulation: AccumulationChart);
        /**
            * Gets the center of the pie
            *
            * @private
            */
        get center(): ChartLocation;
        /**
            * Sets the center of the pie
            *
            * @private
            */
        set center(value: ChartLocation);
        /**
            * Gets the radius of the pie
            *
            * @private
            */
        get radius(): number;
        /**
            * Sets the radius of the pie
            *
            * @private
            */
        set radius(value: number);
        /**
            * Gets the label radius of the pie
            *
            * @private
            */
        get labelRadius(): number;
        /**
            * Sets the label radius of the pie
            *
            * @private
            */
        set labelRadius(value: number);
        /** @private */
        protected accumulation: AccumulationChart;
        /**
            * Checks whether the series is circular or not
            *
            * @private
            */
        protected isCircular(): boolean;
        /**
            * To check various radius pie
            *
            * @private
            */
        protected isVariousRadius(): boolean;
        /**
            * To process the explode on accumulation chart loading
            *
            * @private
            */
        processExplode(event: Event): void;
        /**
            * To invoke the explode on accumulation chart loading
            *
            * @private
            */
        invokeExplode(): void;
        /**
            * To deExplode all points in the series
            *
            * @private
            */
        deExplodeAll(index: number, animationDuration: number): void;
        /**
            * To explode point by index
            *
            * @private
            */
        explodePoints(index: number, chart: AccumulationChart, explode?: boolean): void;
}

/**
    * PieBase class used to do pie base calculations.
    */
export class PieBase extends AccumulationBase {
        protected startAngle: number;
        protected totalAngle: number;
        innerRadius: number;
        pieBaseCenter: ChartLocation;
        pieBaseRadius: number;
        pieBaseLabelRadius: number;
        isRadiusMapped: boolean;
        seriesRadius: number;
        size: number;
        /**
            * To initialize the property values.
            *
            * @private
            */
        initProperties(chart: AccumulationChart, series: AccumulationSeries): void;
        getLabelRadius(series: AccumulationSeriesModel, point: AccPoints): number;
        /**
            * To find the center of the accumulation.
            *
            * @private
            */
        findCenter(accumulation: AccumulationChart, series: AccumulationSeries): void;
        /**
            * To calculate data-label bound
            *
            * @private
            */
        defaultLabelBound(series: AccumulationSeries, visible: boolean, position: AccumulationLabelPosition): void;
        /**
            * To calculate series bound
            *
            * @private
            */
        getSeriesBound(series: AccumulationSeries): Rect;
        /**
            * To get path arc direction
            */
        protected getPathArc(center: ChartLocation, start: number, end: number, radius: number, innerRadius: number): string;
        /**
            * To get pie direction
            */
        protected getPiePath(center: ChartLocation, start: ChartLocation, end: ChartLocation, radius: number, clockWise: number): string;
        /**
            * To get doughnut direction
            */
        protected getDoughnutPath(center: ChartLocation, start: ChartLocation, end: ChartLocation, radius: number, innerStart: ChartLocation, innerEnd: ChartLocation, innerRadius: number, clockWise: number): string;
        /**
            * Method to start animation for pie series.
            */
        protected doAnimation(slice: Element, series: AccumulationSeries): void;
}

/**
    * Defines the common behavior of funnel and pyramid series
    */
/**
    * TriangularBase is used to calculate base functions for funnel/pyramid series.
    */
export class TriangularBase extends AccumulationBase {
        /**
            * Initializes the properties of funnel/pyramid series
            *
            * @private
            */
        initProperties(chart: AccumulationChart, series: AccumulationSeries): void;
        /**
            * Initializes the size of the pyramid/funnel segments
            *
            * @private
            */
        protected initializeSizeRatio(points: AccPoints[], series: AccumulationSeries, reverse?: boolean): void;
        /**
            * Marks the label location from the set of points that forms a pyramid/funnel segment
            *
            * @private
            */
        protected setLabelLocation(series: AccumulationSeries, point: AccPoints, points: ChartLocation[]): void;
        /**
            * Finds the path to connect the list of points
            *
            * @private
            */
        protected findPath(locations: ChartLocation[]): string;
        /**
            * To calculate data-label bounds
            *
            * @private
            */
        defaultLabelBound(series: AccumulationSeries, visible: boolean, position: AccumulationLabelPosition, chart: AccumulationChart): void;
}

/** @private */
export class CartesianChart {
        /**
            * `legendModule` is used to manipulate and add legend to the chart.
            */
        stockLegendModule: StockLegend;
        /** @private */
        legend: BaseLegend;
        cartesianChartSize: Size;
        constructor(chart: StockChart);
        initializeChart(chartArgsData?: object[]): void;
        calculateChartSize(): Size;
        /**
            * Cartesian chart refreshes based on start and end value
            *
            * @param {StockChart} stockChart stock chart instance
            * @param {Object[]} data stock chart data
            * @returns {void}
            */
        cartesianChartRefresh(stockChart: StockChart, data?: Object[]): void;
}

/** @private */
export class RangeSelector {
        constructor(stockChart: StockChart);
        initializeRangeNavigator(): void;
        /**
            * Performs slider change
            *
            * @param {number} start slider start value
            * @param {number} end slider end value
            * @returns {void}
            */
        sliderChange(start: number, end: number): void;
}

/** @private */
export class ToolBarSelector {
        constructor(chart: StockChart);
        initializePeriodSelector(): void;
        initializeSeriesSelector(): void;
        resetButton(): void;
        initializeTrendlineSelector(): void;
        initializeIndicatorSelector(): void;
        createIndicatorAxes(type: TechnicalIndicators, args: MenuEventArgs): void;
        tickMark(args: MenuEventArgs): string;
        printButton(): void;
        exportButton(): void;
        calculateAutoPeriods(): PeriodsModel[];
}

/**
    * Used for stock event calculations.
    */
/**
    * @private
    */
export class StockEvents extends BaseTooltip {
        constructor(stockChart: StockChart);
        /** @private */
        stockEventTooltip: Tooltip;
        /** @private */
        symbolLocations: ChartLocation[][];
        /**
            * To render stock events in chart
            *
            * @returns {Element} Stock event element
            * @private
            */
        renderStockEvents(): Element;
        renderStockEventTooltip(targetId: string): void;
        /**
            * Remove the stock event tooltip
            *
            * @param {number} duration tooltip timeout duration
            * @returns {void}
            */
        removeStockEventTooltip(duration: number): void;
}

/**
    * Interface for a class StockChartLegendSettings
    */
export interface StockChartLegendSettingsModel {
        /**
            * If set to true, legend will be visible.
            *
            * @default false
            */
        visible?: boolean;
        /**
            * The height of the legend in pixels.
            *
            * @default null
            */
        height?: string;
        /**
            * The width of the legend in pixels.
            *
            * @default null
            */
        width?: string;
        /**
            * Specifies the location of the legend, relative to the Stock chart.
            * If x is 20, legend moves by 20 pixels to the right of the Stock chart. It requires the `position` to be `Custom`.
            * ```html
            * <div id='StockChart'></div>
            * ```
            * ```typescript
            * let stockChart: StockChart = new StockChart({
            * ...
            *   legendSettings: {
            *     visible: true,
            *     position: 'Custom',
            *     location: { x: 100, y: 150 },
            *   },
            * ...
            * });
            * stockChart.appendTo('#StockChart');
            * ```
            */
        location?: LocationModel;
        /**
            * Position of the legend in the Stock chart are,
            * * Auto: Places the legend based on area type.
            * * Top: Displays the legend at the top of the stock chart.
            * * Left: Displays the legend at the left of the stock chart.
            * * Bottom: Displays the legend at the bottom of the stock chart.
            * * Right: Displays the legend at the right of the stock chart.
            * * Custom: Displays the legend  based on the given x and y values.
            *
            * @default 'Auto'
            */
        position?: LegendPosition;
        /**
         * Mode of legend items
         * * Series: Legend items generated based on series count.
         * * Point: Legend items generated based on unique data points.
         * * Range: Legend items generated based on range color mapping property.
         * * Gradient: Single linear bar generated based on range color mapping property.
         * This property is applicable for chart component only.
         */
        mode?: LegendMode;
        /**
            * Option to customize the padding between legend items.
            *
            * @default 8
            */
        padding?: number;
        /**
            * Legend in stock chart can be aligned as follows:
            * * Near: Aligns the legend to the left of the stock chart.
            * * Center: Aligns the legend to the center of the stock chart.
            * * Far: Aligns the legend to the right of the stock chart.
            *
            * @default 'Center'
            */
        alignment?: Alignment;
        /**
            * Options to customize the legend text.
            */
        textStyle?: StockChartFontModel;
        /**
            * Shape height of the legend in pixels.
            *
            * @default 10
            */
        shapeHeight?: number;
        /**
            * Shape width of the legend in pixels.
            *
            * @default 10
            */
        shapeWidth?: number;
        /**
            * Options to customize the border of the legend.
            */
        border?: StockChartBorderModel;
        /**
            *  Options to customize left, right, top and bottom margins of the stock chart.
            */
        margin?: StockMarginModel;
        /**
            *  Options to customize left, right, top and bottom padding for legend container of the stock chart.
            */
        containerPadding?: ContainerPaddingModel;
        /**
            * Padding between the legend shape and text in stock chart.
            *
            * @default 5
            */
        shapePadding?: number;
        /**
            * The background color of the legend that accepts value in hex and rgba as a valid CSS color string in stock chart.
            *
            * @default 'transparent'
            */
        background?: string;
        /**
            * Opacity of the legend in stock chart.
            *
            * @default 1
            */
        opacity?: number;
        /**
            * If set to true, series' visibility collapses based on the legend visibility in stock chart.
            *
            * @default true
            */
        toggleVisibility?: boolean;
        /**
            * Description for legends in stock chart.
            *
            * @default null
            */
        description?: string;
        /**
            * TabIndex value for the legend in stock chart.
            *
            * @default 3
            */
        tabIndex?: number;
        /**
            * Title for legends in stock chart.
            *
            * @default null
            */
        title?: string;
        /**
            * Options to customize the legend title in stock chart.
            */
        titleStyle?: StockChartFontModel;
        /**
            * legend title position in stock chart
            *
            * @default 'Top'
            */
        titlePosition?: LegendTitlePosition;
        /**
            * maximum width for the legend title in stock chart.
            *
            * @default 100
            */
        maximumTitleWidth?: number;
        /**
            * If set to true, legend will be visible using pages in stock chart.
            *
            * @default true
            */
        enablePages?: boolean;
        /**
            * If set to true, legend will be Reversed in stock chart.
            *
            * @default false
            */
        isInversed?: boolean;
}
/**
    * Interface for a class StockLegend
    */
export interface StockLegendModel {
}

/**
  * Chart and accumulation common files
  */

/**
    * Class for Bullet chart axis
    */
export class BulletChartAxis {
        bulletChart: BulletChart;
        /** @private */
        format: Function;
        constructor(bullet: BulletChart);
        renderMajorTickLines(intervalValue: number, scale: Element): void;
        renderMinorTickLines(intervalValue: number, scale: Element): void;
        renderAxisLabels(intervalValue: number, scale: Element): void;
        /**
            * To render grid lines of bullet chart axis
            */
        renderXMajorTickLines(intervalValue: number, scale: Element): void;
        /**
            * To render grid lines of bullet chart axis
            */
        renderYMajorTickLines(intervalValue: number, scale: Element): void;
        /**
            * To render minor tick lines of bullet chart
            */
        renderXMinorTickLines(intervalValue: number, scaleGroup: Element): void;
        /**
            * To render minor tick lines of bullet chart
            */
        renderYMinorTickLines(intervalValue: number, scaleGroup: Element): void;
        /**
            * To render axis labels of bullet chart
            */
        renderXAxisLabels(intervalValue: number, scaleGroup: Element): void;
        /**
            * To render axis labels of bullet chart
            */
        renderYAxisLabels(intervalValue: number, scaleGroup: Element): void;
        /**
            * Format of the axis label.
            *
            * @private
            */
        getFormat(axis: BulletChart): string;
        /**
            * Formatted the axis label.
            *
            * @private
            */
        formatValue(axis: BulletChartAxis, isCustom: boolean, format: string, tempInterval: number): string;
}

/**
    * class for Bullet chart Scale Group
    */
export class ScaleGroup {
        featureBarBounds: IFeatureBarBounds[];
        bulletChart: BulletChart;
        constructor(bulletChart: BulletChart);
        /**
            * To render range scale of the bulletChart graph
            *
            * @param {Element} scaleGroup
            */
        drawScaleGroup(scaleGroup: Element): number[];
        protected sortRangeCollection(a: number, b: number): number;
        /**
            * To render the feature bar of the bulletChart chart
            *
            * @param {number} dataCount Count of the bar.
            */
        renderFeatureBar(dataCount: number): void;
        /**
            * To render comparative symbol of the bulletChart chart
            *
            * @param {number} dataCount Data count value.
            */
        renderComparativeSymbol(dataCount: number): void;
        /**
            * Animates the feature bar.
            *
            * @returns {void}
            */
        doValueBarAnimation(): void;
        /**
            * Animates the comparative bar.
            *
            * @param {number} index Defines the feature bar to animate.
            * @returns {void}
            */
        doTargetBarAnimation(index: number): void;
}

export class SeriesRender {
    xValues: number[];
    yValues: number[];
    pointsRegion: PointRegion[][];
    lineSegments: LineSegment[];
    location: Point[][];
    clipRectElement: Element;
    draw(smithchart: Smithchart, axisRender: AxisRender, bounds: SmithchartRect): void;
    getLocation(seriesindex: number, pointIndex: number): Point;
}

export class SerieClass {
    SeriesModel: SeriesModel;
    ValueChanged: Event<any>;
    constructor();
    name(value: string): this;
    xName(value: string): this;
    yName(value: string): this;
    type(value: ChartSeriesType): this;
    border(value: BorderModel): this;
    fill(value: string): this;
    marker(value: MarkerSettingsModel): this;
    columnWidth(value: float): this;
    animation(value: AnimationModel): this;
    model(value: SeriesModel): this;
    data(value: object): this;
}

/**
  * Exporting all modules from Sparkline Component
  */

export class BarSerieClass extends SerieClass {
    constructor();
}
export function BarSerie(): BarSerieClass;

export class AreaSerieClass extends SerieClass {
    constructor();
}
export function AreaSerie(): AreaSerieClass;

/**
    * Marker Module used to render the marker for line type series.
    */
export class MarkerExplode extends ChartData {
        /** @private */
        elementId: string;
        /**
            * Constructor for the marker module.
            *
            * @private
            */
        constructor(chart: Chart);
        /**
            * @hidden
            */
        addEventListener(): void;
        /**
            * @hidden
            */
        removeEventListener(): void;
        /**
            * @hidden
            */
        removeHighlightedMarker(): void;
}

/**
    * To get the data on mouse move.
    *
    * @private
    */
export class ChartData {
        /** @private */
        chart: Chart;
        lierIndex: number;
        /** @private */
        currentPoints: PointData[] | AccPointData[];
        /** @private */
        previousPoints: PointData[] | AccPointData[];
        insideRegion: boolean;
        /**
            * Constructor for the data.
            *
            * @private
            */
        constructor(chart: Chart);
        /**
            * Method to get the Data.
            *
            * @private
            */
        getData(): PointData;
        isSelected(chart: Chart): boolean;
        /**
            * @private
            */
        getClosest(series: Series, value: number, xvalues?: number[]): number;
        getClosestX(chart: Chart, series: Series, xvalues?: number[]): PointData;
        /**
            * Merge all visible series X values for shared tooltip (EJ2-47072)
            *
            * @param visibleSeries
            * @private
            */
        mergeXvalues(visibleSeries: Series[]): number[];
}

export class AxisRender {
    areaRadius: number;
    circleLeftX: number;
    circleTopY: number;
    circleCenterX: number;
    circleCenterY: number;
    radialLabels: number[];
    radialLabelCollections: LabelCollection[];
    horizontalLabelCollections: HorizontalLabelCollection[];
    majorHGridArcPoints: GridArcPoints[];
    minorHGridArcPoints: GridArcPoints[];
    majorRGridArcPoints: GridArcPoints[];
    minorGridArcPoints: GridArcPoints[];
    labelCollections: RadialLabelCollections[];
    direction: Direction;
    renderArea(smithchart: Smithchart, bounds: SmithchartRect): void;
    intersectingCirclePoints(x1: number, y1: number, r1: number, x2: number, y2: number, r2: number, renderType: RenderType): Point;
}

/**
    * Represents the Sparkline control.
    * ```html
    * <div id="sparkline"/>
    * <script>
    *   var sparkline = new Sparkline();
    *   sparkline.appendTo("#sparkline");
    * </script>
    * ```
    */
export class Sparkline extends Component<HTMLElement> implements INotifyPropertyChanged {
        sparklineTooltipModule: SparklineTooltip;
        /**
            * To configure Sparkline width.
            */
        width: string;
        /**
            * To configure Sparkline height.
            */
        height: string;
        /**
            * To configure Sparkline points border color and width.
            */
        border: SparklineBorderModel;
        /**
            * To configure Sparkline series type.
            * @default 'Line'
            */
        type: SparklineType;
        /**
            * To configure Sparkline series type.
            * @default 'None'
            */
        rangePadding: SparklineRangePadding;
        /**
            * To configure sparkline data source.
            * @isGenericType true
            * @default null
            */
        dataSource: Object[] | DataManager;
        /**
            * Specifies the query for filter the data.
            * @default null
            */
        query: Query;
        /**
            * To configure sparkline series value type.
            * @default 'Numeric'
            */
        valueType: SparklineValueType;
        /**
            * To configure sparkline series xName.
            * @default null
            */
        xName: string;
        /**
            * To configure sparkline series yName.
            * @default null
            */
        yName: string;
        /**
            * To configure sparkline series fill.
            * @default '#00bdae'
            */
        fill: string;
        /**
            * To configure sparkline series highest y value point color.
            * @default ''
            */
        highPointColor: string;
        /**
            * To configure sparkline series lowest y value point color.
            * @default ''
            */
        lowPointColor: string;
        /**
            * To configure sparkline series first x value point color.
            * @default ''
            */
        startPointColor: string;
        /**
            * To configure sparkline series last x value point color.
            * @default ''
            */
        endPointColor: string;
        /**
            * To configure sparkline series negative y value point color.
            * @default ''
            */
        negativePointColor: string;
        /**
            * To configure sparkline winloss series tie y value point color.
            * @default ''
            */
        tiePointColor: string;
        /**
            * To configure sparkline series color palette. It applicable to column and pie type series.
            * @default []
            */
        palette: string[];
        /**
            * To configure sparkline line series width.
            * @default '1'
            */
        lineWidth: number;
        /**
            * To configure sparkline line series opacity.
            * @default '1'
            */
        opacity: number;
        /**
            * To apply internationalization for sparkline.
            * @default null
            */
        format: string;
        /**
            * To enable the separator
            * @default false
            */
        useGroupingSeparator: boolean;
        /**
            * To configure Sparkline tooltip settings.
            */
        tooltipSettings: SparklineTooltipSettingsModel;
        /**
            * To configure Sparkline container area customization.
            */
        containerArea: ContainerAreaModel;
        /**
            * To configure Sparkline axis line customization.
            */
        rangeBandSettings: RangeBandSettingsModel[];
        /**
            * To configure Sparkline container area customization.
            */
        axisSettings: AxisSettingsModel;
        /**
            * To configure Sparkline marker configuration.
            */
        markerSettings: SparklineMarkerSettingsModel;
        /**
            * To configure Sparkline dataLabel configuration.
            */
        dataLabelSettings: SparklineDataLabelSettingsModel;
        /**
            * To configure Sparkline container area customization.
            */
        padding: PaddingModel;
        /**
            * To configure sparkline theme.
            * @default 'Material'
            */
        theme: SparklineTheme;
        /**
            * Triggers after sparkline rendered.
            * @event
            */
        loaded: EmitType<ISparklineLoadedEventArgs>;
        /**
            * Triggers before sparkline render.
            * @event
            */
        load: EmitType<ISparklineLoadEventArgs>;
        /**
            * Triggers before sparkline tooltip render.
            * @event
            */
        tooltipInitialize: EmitType<ITooltipRenderingEventArgs>;
        /**
            * Triggers before sparkline series render.
            * @event
            */
        seriesRendering: EmitType<ISeriesRenderingEventArgs>;
        /**
            * Triggers before sparkline axis render.
            * @event
            */
        axisRendering: EmitType<IAxisRenderingEventArgs>;
        /**
            * Triggers before sparkline points render.
            * @event
            */
        pointRendering: EmitType<ISparklinePointEventArgs>;
        /**
            * Triggers while mouse move on the sparkline point region.
            * @event
            */
        pointRegionMouseMove: EmitType<IPointRegionEventArgs>;
        /**
            * Triggers while mouse click on the sparkline point region.
            * @event
            */
        pointRegionMouseClick: EmitType<IPointRegionEventArgs>;
        /**
            * Triggers while mouse move on the sparkline container.
            * @event
            */
        sparklineMouseMove: EmitType<ISparklineMouseEventArgs>;
        /**
            * Triggers while mouse click on the sparkline container.
            * @event
            */
        sparklineMouseClick: EmitType<ISparklineMouseEventArgs>;
        /**
            * Triggers before the sparkline datalabel render.
            * @event
            */
        dataLabelRendering: EmitType<IDataLabelRenderingEventArgs>;
        /**
            * Triggers before the sparkline marker render.
            * @event
            */
        markerRendering: EmitType<IMarkerRenderingEventArgs>;
        /**
            * Triggers on resizing the sparkline.
            * @event
            */
        resize: EmitType<ISparklineResizeEventArgs>;
        /**
            * SVG renderer object.
            * @private
            */
        renderer: SvgRenderer;
        /**
            * Sparkline renderer object.
            * @private
            */
        sparklineRenderer: SparklineRenderer;
        /**
            * Sparkline SVG element's object
            * @private
            */
        svgObject: Element;
        /** @private */
        isDevice: Boolean;
        /** @private */
        intervalDivs: number[];
        /** @private */
        isTouch: Boolean;
        /** @private */
        mouseX: number;
        /** @private */
        mouseY: number;
        /**
            * resize event timer
            * @private
            */
        resizeTo: number;
        /**
            * Sparkline available height, width
            * @private
            */
        availableSize: Size;
        /**
            * Sparkline theme support
            *  @private
            */
        sparkTheme: IThemes;
        /**
            * localization object
            * @private
            */
        localeObject: L10n;
        /**
            * To process sparkline data internally.
            * @private
            */
        sparklineData: Object[] | DataManager;
        /**
            * Internal use of internationalization instance.
            * @private
            */
        intl: Internationalization;
        /**
            * Constructor for creating the Sparkline widget
            */
        constructor(options?: SparklineModel, element?: string | HTMLElement);
        /**
            * Initializing pre-required values for sparkline.
            */
        protected preRender(): void;
        /**
            * Sparkline Elements rendering starting.
            */
        protected render(): void;
        /**
            * @private
            */
        processSparklineData(): void;
        /**
            * To render sparkline elements
            */
        renderSparkline(): void;
        /**
            * To provide the array of modules needed for sparkline rendering
            * @return {ModuleDeclaration[]}
            * @private
            */
        requiredModules(): ModuleDeclaration[];
        /**
            * Sparkline resize event.
            * @private
            */
        sparklineResize(e: Event): boolean;
        /**
            * Handles the mouse move on sparkline.
            * @return {boolean}
            * @private
            */
        sparklineMove(e: PointerEvent): boolean;
        /**
            * Handles the mouse click on sparkline.
            * @return {boolean}
            * @private
            */
        sparklineClick(e: PointerEvent): boolean;
        /**
            * Handles the mouse end.
            * @return {boolean}
            * @private
            */
        sparklineMouseEnd(e: PointerEvent): boolean;
        /**
            * Handles the mouse leave on sparkline.
            * @return {boolean}
            * @private
            */
        sparklineMouseLeave(e: PointerEvent): boolean;
        /**
            * To change rendering while property value modified.
            * @private
            */
        onPropertyChanged(newProp: SparklineModel, oldProp: SparklineModel): void;
        /**
            * Get component name
            */
        getModuleName(): string;
        /**
            * Destroy the component
            */
        destroy(): void;
        /**
            * Get the properties to be maintained in the persisted state.
            * @private
            */
        getPersistData(): string;
}

/**
    * Interface for a class Sparkline
    */
export interface SparklineModel extends ComponentModel {
        /**
            * To configure Sparkline width.
            */
        width?: string;
        /**
            * To configure Sparkline height.
            */
        height?: string;
        /**
            * To configure Sparkline points border color and width.
            */
        border?: SparklineBorderModel;
        /**
            * To configure Sparkline series type.
            * @default 'Line'
            */
        type?: SparklineType;
        /**
            * To configure Sparkline series type.
            * @default 'None'
            */
        rangePadding?: SparklineRangePadding;
        /**
            * To configure sparkline data source.
            * @isGenericType true
            * @default null
            */
        dataSource?: Object[] | DataManager;
        /**
            * Specifies the query for filter the data.
            * @default null
            */
        query?: Query;
        /**
            * To configure sparkline series value type.
            * @default 'Numeric'
            */
        valueType?: SparklineValueType;
        /**
            * To configure sparkline series xName.
            * @default null
            */
        xName?: string;
        /**
            * To configure sparkline series yName.
            * @default null
            */
        yName?: string;
        /**
            * To configure sparkline series fill.
            * @default '#00bdae'
            */
        fill?: string;
        /**
            * To configure sparkline series highest y value point color.
            * @default ''
            */
        highPointColor?: string;
        /**
            * To configure sparkline series lowest y value point color.
            * @default ''
            */
        lowPointColor?: string;
        /**
            * To configure sparkline series first x value point color.
            * @default ''
            */
        startPointColor?: string;
        /**
            * To configure sparkline series last x value point color.
            * @default ''
            */
        endPointColor?: string;
        /**
            * To configure sparkline series negative y value point color.
            * @default ''
            */
        negativePointColor?: string;
        /**
            * To configure sparkline winloss series tie y value point color.
            * @default ''
            */
        tiePointColor?: string;
        /**
            * To configure sparkline series color palette. It applicable to column and pie type series.
            * @default []
            */
        palette?: string[];
        /**
            * To configure sparkline line series width.
            * @default '1'
            */
        lineWidth?: number;
        /**
            * To configure sparkline line series opacity.
            * @default '1'
            */
        opacity?: number;
        /**
            * To apply internationalization for sparkline.
            * @default null
            */
        format?: string;
        /**
            * To enable the separator
            * @default false
            */
        useGroupingSeparator?: boolean;
        /**
            * To configure Sparkline tooltip settings.
            */
        tooltipSettings?: SparklineTooltipSettingsModel;
        /**
            * To configure Sparkline container area customization.
            */
        containerArea?: ContainerAreaModel;
        /**
            * To configure Sparkline axis line customization.
            */
        rangeBandSettings?: RangeBandSettingsModel[];
        /**
            * To configure Sparkline container area customization.
            */
        axisSettings?: AxisSettingsModel;
        /**
            * To configure Sparkline marker configuration.
            */
        markerSettings?: SparklineMarkerSettingsModel;
        /**
            * To configure Sparkline dataLabel configuration.
            */
        dataLabelSettings?: SparklineDataLabelSettingsModel;
        /**
            * To configure Sparkline container area customization.
            */
        padding?: PaddingModel;
        /**
            * To configure sparkline theme.
            * @default 'Material'
            */
        theme?: SparklineTheme;
        /**
            * Triggers after sparkline rendered.
            * @event
            */
        loaded?: EmitType<ISparklineLoadedEventArgs>;
        /**
            * Triggers before sparkline render.
            * @event
            */
        load?: EmitType<ISparklineLoadEventArgs>;
        /**
            * Triggers before sparkline tooltip render.
            * @event
            */
        tooltipInitialize?: EmitType<ITooltipRenderingEventArgs>;
        /**
            * Triggers before sparkline series render.
            * @event
            */
        seriesRendering?: EmitType<ISeriesRenderingEventArgs>;
        /**
            * Triggers before sparkline axis render.
            * @event
            */
        axisRendering?: EmitType<IAxisRenderingEventArgs>;
        /**
            * Triggers before sparkline points render.
            * @event
            */
        pointRendering?: EmitType<ISparklinePointEventArgs>;
        /**
            * Triggers while mouse move on the sparkline point region.
            * @event
            */
        pointRegionMouseMove?: EmitType<IPointRegionEventArgs>;
        /**
            * Triggers while mouse click on the sparkline point region.
            * @event
            */
        pointRegionMouseClick?: EmitType<IPointRegionEventArgs>;
        /**
            * Triggers while mouse move on the sparkline container.
            * @event
            */
        sparklineMouseMove?: EmitType<ISparklineMouseEventArgs>;
        /**
            * Triggers while mouse click on the sparkline container.
            * @event
            */
        sparklineMouseClick?: EmitType<ISparklineMouseEventArgs>;
        /**
            * Triggers before the sparkline datalabel render.
            * @event
            */
        dataLabelRendering?: EmitType<IDataLabelRenderingEventArgs>;
        /**
            * Triggers before the sparkline marker render.
            * @event
            */
        markerRendering?: EmitType<IMarkerRenderingEventArgs>;
        /**
            * Triggers on resizing the sparkline.
            * @event
            */
        resize?: EmitType<ISparklineResizeEventArgs>;
}

/**
    * Sparkline Tooltip Module
    */
export class SparklineTooltip {
        constructor(sparkline: Sparkline);
        /**
            * To remove tooltip and tracker elements.
            *
            * @private
            */
        removeTooltipElements(): void;
        /**
            * Get module name.
            */
        protected getModuleName(): string;
        /**
            * To destroy the tooltip.
            */
        destroy(sparkline: Sparkline): void;
}

/**
    * Sparkline base API Class declarations.
    */
/**
    * Configures the borders in the Sparkline.
    */
export class SparklineBorder extends ChildProperty<SparklineBorder> {
        /**
            * The color of the border that accepts value in hex and rgba as a valid CSS color string.
            */
        color: string;
        /**
            * The width of the border in pixels.
            */
        width: number;
}
/**
    * Configures the fonts in sparklines.
    */
export class SparklineFont extends ChildProperty<SparklineFont> {
        /**
            * Font size for the text.
            */
        size: string;
        /**
            * Color for the text.
            */
        color: string;
        /**
            * FontFamily for the text.
            */
        fontFamily: string;
        /**
            * FontWeight for the text.
            */
        fontWeight: string;
        /**
            * FontStyle for the text.
            */
        fontStyle: string;
        /**
            * Opacity for the text.
            *
            * @default 1
            */
        opacity: number;
}
/**
    * To configure the tracker line settings.
    */
export class TrackLineSettings extends ChildProperty<TrackLineSettings> {
        /**
            * Toggle the tracker line visibility.
            *
            * @default false
            */
        visible: boolean;
        /**
            * To config the tracker line color.
            */
        color: string;
        /**
            * To config the tracker line width.
            *
            * @default 1
            */
        width: number;
}
/**
    * To configure the tooltip settings for sparkline.
    */
export class SparklineTooltipSettings extends ChildProperty<SparklineTooltipSettings> {
        /**
            * Toggle the tooltip visibility.
            *
            * @default false
            */
        visible: boolean;
        /**
            * To customize the tooltip fill color.
            */
        fill: string;
        /**
            * To customize the tooltip template.
            */
        template: string;
        /**
            * To customize the tooltip format.
            */
        format: string;
        /**
            * To configure tooltip border color and width.
            */
        border: SparklineBorderModel;
        /**
            * To configure tooltip text styles.
            */
        textStyle: SparklineFontModel;
        /**
            * To configure the tracker line options.
            */
        trackLineSettings: TrackLineSettingsModel;
}
/**
    * To configure the sparkline container area customization
    */
export class ContainerArea extends ChildProperty<ContainerArea> {
        /**
            * To configure Sparkline background color.
            *
            * @default 'transparent'
            */
        background: string;
        /**
            * To configure Sparkline border color and width.
            */
        border: SparklineBorderModel;
}
/**
    * To configure axis line settings
    */
export class LineSettings extends ChildProperty<LineSettings> {
        /**
            * To toggle the axis line visibility.
            *
            * @default `false`
            */
        visible: boolean;
        /**
            * To configure the sparkline axis line color.
            */
        color: string;
        /**
            * To configure the sparkline axis line dashArray.
            *
            * @default ''
            */
        dashArray: string;
        /**
            * To configure the sparkline axis line width.
            *
            * @default 1.
            */
        width: number;
        /**
            * To configure the sparkline axis line opacity.
            *
            * @default 1.
            */
        opacity: number;
}
/**
    * To configure the sparkline rangeband
    */
export class RangeBandSettings extends ChildProperty<RangeBandSettings> {
        /**
            * To configure sparkline start range
            *
            * @aspDefaultValueIgnore
            */
        startRange: number;
        /**
            * To configure sparkline end range
            *
            * @aspDefaultValueIgnore
            */
        endRange: number;
        /**
            * To configure sparkline rangeband color
            */
        color: string;
        /**
            * To configure sparkline rangeband opacity
            *
            * @default 1
            */
        opacity: number;
}
/**
    * To configure the sparkline axis
    */
export class AxisSettings extends ChildProperty<AxisSettings> {
        /**
            * To configure Sparkline x axis min value.
            *
            * @aspDefaultValueIgnore
            */
        minX: number;
        /**
            * To configure Sparkline x axis max value.
            *
            * @aspDefaultValueIgnore
            */
        maxX: number;
        /**
            * To configure Sparkline y axis min value.
            *
            * @aspDefaultValueIgnore
            */
        minY: number;
        /**
            * To configure Sparkline y axis max value.
            *
            * @aspDefaultValueIgnore
            */
        maxY: number;
        /**
            * To configure Sparkline horizontal axis line position.
            *
            * @default 0
            */
        value: number;
        /**
            * To configure Sparkline axis line settings.
            */
        lineSettings: LineSettingsModel;
}
/**
    * To configure the sparkline padding.
    */
export class Padding extends ChildProperty<Padding> {
        /**
            * To configure Sparkline left padding.
            *
            * @default 5
            */
        left: number;
        /**
            * To configure Sparkline right padding.
            *
            * @default 5
            */
        right: number;
        /**
            * To configure Sparkline bottom padding.
            *
            * @default 5
            */
        bottom: number;
        /**
            * To configure Sparkline top padding.
            *
            * @default 5
            */
        top: number;
}
/**
    * To configure the sparkline marker options.
    */
export class SparklineMarkerSettings extends ChildProperty<SparklineMarkerSettings> {
        /**
            * To toggle the marker visibility.
            *
            * @default `[]`.
            */
        visible: VisibleType[];
        /**
            * To configure the marker opacity.
            *
            * @default 1
            */
        opacity: number;
        /**
            * To configure the marker size.
            *
            * @default 5
            */
        size: number;
        /**
            * To configure the marker fill color.
            *
            * @default '#00bdae'
            */
        fill: string;
        /**
            * To configure Sparkline marker border color and width.
            */
        border: SparklineBorderModel;
}
/**
    * To configure the datalabel offset
    */
export class LabelOffset extends ChildProperty<LabelOffset> {
        /**
            * To move the datalabel horizontally.
            */
        x: number;
        /**
            * To move the datalabel vertically.
            */
        y: number;
}
/**
    * To configure the sparkline dataLabel options.
    */
export class SparklineDataLabelSettings extends ChildProperty<SparklineDataLabelSettings> {
        /**
            * To toggle the dataLabel visibility.
            *
            * @default `[]`.
            */
        visible: VisibleType[];
        /**
            * To configure the dataLabel opacity.
            *
            * @default 1
            */
        opacity: number;
        /**
            * To configure the dataLabel fill color.
            *
            * @default 'transparent'
            */
        fill: string;
        /**
            * To configure the dataLabel format the value.
            *
            * @default ''
            */
        format: string;
        /**
            * To configure Sparkline dataLabel border color and width.
            */
        border: SparklineBorderModel;
        /**
            * To configure Sparkline dataLabel text styles.
            */
        textStyle: SparklineFontModel;
        /**
            * To configure Sparkline dataLabel offset.
            */
        offset: LabelOffsetModel;
        /**
            * To change the edge dataLabel placement.
            *
            * @default 'None'.
            */
        edgeLabelMode: EdgeLabelMode;
}

/**
    * Interface for a class SparklineBorder
    */
export interface SparklineBorderModel {
        /**
            * The color of the border that accepts value in hex and rgba as a valid CSS color string.
            */
        color?: string;
        /**
            * The width of the border in pixels.
            */
        width?: number;
}
/**
    * Interface for a class SparklineFont
    */
export interface SparklineFontModel {
        /**
            * Font size for the text.
            */
        size?: string;
        /**
            * Color for the text.
            */
        color?: string;
        /**
            * FontFamily for the text.
            */
        fontFamily?: string;
        /**
            * FontWeight for the text.
            */
        fontWeight?: string;
        /**
            * FontStyle for the text.
            */
        fontStyle?: string;
        /**
            * Opacity for the text.
            *
            * @default 1
            */
        opacity?: number;
}
/**
    * Interface for a class TrackLineSettings
    */
export interface TrackLineSettingsModel {
        /**
            * Toggle the tracker line visibility.
            *
            * @default false
            */
        visible?: boolean;
        /**
            * To config the tracker line color.
            */
        color?: string;
        /**
            * To config the tracker line width.
            *
            * @default 1
            */
        width?: number;
}
/**
    * Interface for a class SparklineTooltipSettings
    */
export interface SparklineTooltipSettingsModel {
        /**
            * Toggle the tooltip visibility.
            *
            * @default false
            */
        visible?: boolean;
        /**
            * To customize the tooltip fill color.
            */
        fill?: string;
        /**
            * To customize the tooltip template.
            */
        template?: string;
        /**
            * To customize the tooltip format.
            */
        format?: string;
        /**
            * To configure tooltip border color and width.
            */
        border?: SparklineBorderModel;
        /**
            * To configure tooltip text styles.
            */
        textStyle?: SparklineFontModel;
        /**
            * To configure the tracker line options.
            */
        trackLineSettings?: TrackLineSettingsModel;
}
/**
    * Interface for a class ContainerArea
    */
export interface ContainerAreaModel {
        /**
            * To configure Sparkline background color.
            *
            * @default 'transparent'
            */
        background?: string;
        /**
            * To configure Sparkline border color and width.
            */
        border?: SparklineBorderModel;
}
/**
    * Interface for a class LineSettings
    */
export interface LineSettingsModel {
        /**
            * To toggle the axis line visibility.
            *
            * @default `false`
            */
        visible?: boolean;
        /**
            * To configure the sparkline axis line color.
            */
        color?: string;
        /**
            * To configure the sparkline axis line dashArray.
            *
            * @default ''
            */
        dashArray?: string;
        /**
            * To configure the sparkline axis line width.
            *
            * @default 1.
            */
        width?: number;
        /**
            * To configure the sparkline axis line opacity.
            *
            * @default 1.
            */
        opacity?: number;
}
/**
    * Interface for a class RangeBandSettings
    */
export interface RangeBandSettingsModel {
        /**
            * To configure sparkline start range
            *
            * @aspDefaultValueIgnore
            */
        startRange?: number;
        /**
            * To configure sparkline end range
            *
            * @aspDefaultValueIgnore
            */
        endRange?: number;
        /**
            * To configure sparkline rangeband color
            */
        color?: string;
        /**
            * To configure sparkline rangeband opacity
            *
            * @default 1
            */
        opacity?: number;
}
/**
    * Interface for a class AxisSettings
    */
export interface AxisSettingsModel {
        /**
            * To configure Sparkline x axis min value.
            *
            * @aspDefaultValueIgnore
            */
        minX?: number;
        /**
            * To configure Sparkline x axis max value.
            *
            * @aspDefaultValueIgnore
            */
        maxX?: number;
        /**
            * To configure Sparkline y axis min value.
            *
            * @aspDefaultValueIgnore
            */
        minY?: number;
        /**
            * To configure Sparkline y axis max value.
            *
            * @aspDefaultValueIgnore
            */
        maxY?: number;
        /**
            * To configure Sparkline horizontal axis line position.
            *
            * @default 0
            */
        value?: number;
        /**
            * To configure Sparkline axis line settings.
            */
        lineSettings?: LineSettingsModel;
}
/**
    * Interface for a class Padding
    */
export interface PaddingModel {
        /**
            * To configure Sparkline left padding.
            *
            * @default 5
            */
        left?: number;
        /**
            * To configure Sparkline right padding.
            *
            * @default 5
            */
        right?: number;
        /**
            * To configure Sparkline bottom padding.
            *
            * @default 5
            */
        bottom?: number;
        /**
            * To configure Sparkline top padding.
            *
            * @default 5
            */
        top?: number;
}
/**
    * Interface for a class SparklineMarkerSettings
    */
export interface SparklineMarkerSettingsModel {
        /**
            * To toggle the marker visibility.
            *
            * @default `[]`.
            */
        visible?: VisibleType[];
        /**
            * To configure the marker opacity.
            *
            * @default 1
            */
        opacity?: number;
        /**
            * To configure the marker size.
            *
            * @default 5
            */
        size?: number;
        /**
            * To configure the marker fill color.
            *
            * @default '#00bdae'
            */
        fill?: string;
        /**
            * To configure Sparkline marker border color and width.
            */
        border?: SparklineBorderModel;
}
/**
    * Interface for a class LabelOffset
    */
export interface LabelOffsetModel {
        /**
            * To move the datalabel horizontally.
            */
        x?: number;
        /**
            * To move the datalabel vertically.
            */
        y?: number;
}
/**
    * Interface for a class SparklineDataLabelSettings
    */
export interface SparklineDataLabelSettingsModel {
        /**
            * To toggle the dataLabel visibility.
            *
            * @default `[]`.
            */
        visible?: VisibleType[];
        /**
            * To configure the dataLabel opacity.
            *
            * @default 1
            */
        opacity?: number;
        /**
            * To configure the dataLabel fill color.
            *
            * @default 'transparent'
            */
        fill?: string;
        /**
            * To configure the dataLabel format the value.
            *
            * @default ''
            */
        format?: string;
        /**
            * To configure Sparkline dataLabel border color and width.
            */
        border?: SparklineBorderModel;
        /**
            * To configure Sparkline dataLabel text styles.
            */
        textStyle?: SparklineFontModel;
        /**
            * To configure Sparkline dataLabel offset.
            */
        offset?: LabelOffsetModel;
        /**
            * To change the edge dataLabel placement.
            *
            * @default 'None'.
            */
        edgeLabelMode?: EdgeLabelMode;
}

/**
    * Specifies the sparkline types.
    * `Line`, `Column`, `WinLoss`, `Pie` and `Area`.
    */
export type SparklineType = 
/** Define the Sparkline Line type series. */
'Line' | 
/** Define the Sparkline Column type series. */
'Column' | 
/** Define the Sparkline WinLoss type series. */
'WinLoss' | 
/** Define the Sparkline Pie type series. */
'Pie' | 
/** Define the Sparkline Area type series. */
'Area';
/**
    * Defines the range padding of series
    * `None`, `Normal`, `Additional`, `Additional`
    */
export type SparklineRangePadding = 
/** Define the Sparkline Line type series. */
'None' | 
/** Define the Sparkline Column type series. */
'Normal' | 
/** Define the Sparkline WinLoss type series. */
'Additional';
/**
    * Specifies the sparkline data value types.
    * `Numeric`, `Category` and `DateTime`.
    */
export type SparklineValueType = 
/** Define the Sparkline Numeric value type series. */
'Numeric' | 
/** Define the Sparkline Category value type series. */
'Category' | 
/** Define the Sparkline DateTime value type series. */
'DateTime';
/**
    * Specifies the sparkline marker | datalabel visible types.
    * `All`,  `High`,  `Low`,  `Start`,  `End`,  `Negative` and `None`.
    */
export type VisibleType = 
/** Define the Sparkline marker | datalabel  Visbile All type */
'All' | 
/** Define the Sparkline marker | datalabel Visbile High type */
'High' | 
/** Define the Sparkline marker | datalabel Visbile Low type */
'Low' | 
/** Define the Sparkline marker | datalabel Visbile Start type */
'Start' | 
/** Define the Sparkline marker | datalabel Visbile End type */
'End' | 
/** Define the Sparkline marker | datalabel Visbile Negative type */
'Negative' | 
/** Define the Sparkline marker | datalabel Visbile None type */
'None';
/**
    * Defines Theme of the sparkline. They are
    * * Material - Render a sparkline with Material theme.
    * * Fabric - Render a sparkline with Fabric theme
    * * Bootstrap - Render a sparkline with Bootstrap theme
    * * HighContrast - Render a sparkline with HighContrast theme
    * * Dark - Render a sparkline with Dark theme
    */
export type SparklineTheme = 
/**  Render a sparkline with Material theme. */
'Material' | 
/**  Render a sparkline with Fabric theme. */
'Fabric' | 
/**  Render a sparkline with Bootstrap theme. */
'Bootstrap' | 
/**  Render a sparkline with HighContrast Light theme. */
'HighContrastLight' | 
/**  Render a sparkline with Material Dark theme. */
'MaterialDark' | 
/**  Render a sparkline with Fabric Dark theme. */
'FabricDark' | 
/**  Render a sparkline with Highcontrast Dark theme. */
'HighContrast' | 
/**  Render a sparkline with Bootstrap Dark theme. */
'BootstrapDark' | 
/** Render a sparkline with Bootstrap4 theme. */
'Bootstrap4' | 
/**  Render a sparkline with Tailwind theme. */
'Tailwind' | 
/**  Render a sparkline with TailwindDark theme. */
'TailwindDark' | 
/**  Render a sparkline with Bootstrap5 theme. */
'Bootstrap5' | 
/**  Render a sparkline with Bootstrap5Dark theme. */
'Bootstrap5Dark';
/**
    * Defines edge data label placement for datalabel, if exceeds the sparkline area horizontally.
    * * None - Edge data label shown as clipped text.
    * * Shift - Edge data label moved inside the sparkline area.
    * * Hide - Edge data label will hide, if exceeds the sparkline area.
    */
export type EdgeLabelMode = 
/** Edge data label shown as clipped text */
'None' | 
/** Edge data label moved inside the sparkline area */
'Shift' | 
/** Edge data label will hide, if exceeds the sparkline area */
'Hide';

/**
    * Sparkline interface file.
    */
/**
    * Specifies sparkline Events
    *
    * @private
    */
export interface ISparklineEventArgs {
        /** Defines the name of the event */
        name: string;
        /** Defines the event cancel status */
        cancel: boolean;
}
/**
    * Specifies the interface for themes.
    */
export interface IThemes {
        /** Defines the color of the axis line */
        axisLineColor: string;
        /** Defines the color of the range band */
        rangeBandColor: string;
        /** Defines the font color of the data labels */
        dataLabelColor: string;
        /** Defines the background color of the tooltip */
        tooltipFill: string;
        /** Defines the font color of the tooltip */
        tooltipFontColor: string;
        /** Defines the background color of the sparkline */
        background: string;
        /** Defines the color of the tracker line */
        trackerLineColor: string;
        /** Defines the font style of the text */
        fontFamily?: string;
        /** Defines the tooltip fill color opacity */
        tooltipFillOpacity?: number;
        /** Defines the tooltip text opacity */
        tooltipTextOpacity?: number;
        /** Defines the label font style */
        labelFontFamily?: string;
}
/**
    * Specifies the Loaded Event arguments.
    */
export interface ISparklineLoadedEventArgs extends ISparklineEventArgs {
        /** Defines the current sparkline instance */
        sparkline: Sparkline;
}
/**
    * Specifies the Load Event arguments.
    */
export interface ISparklineLoadEventArgs extends ISparklineEventArgs {
        /** Defines the current sparkline instance */
        sparkline: Sparkline;
}
/**
    * Specifies the axis rendering Event arguments.
    */
export interface IAxisRenderingEventArgs extends ISparklineEventArgs {
        /** Defines the current sparkline instance */
        sparkline: Sparkline;
        /** Defines the sparkline axis min x */
        minX: number;
        /** Defines the sparkline axis max x */
        maxX: number;
        /** Defines the sparkline axis min y */
        minY: number;
        /** Defines the sparkline axis max y */
        maxY: number;
        /** Defines the sparkline axis value */
        value: number;
        /** Defines the sparkline axis line color */
        lineColor: string;
        /** Defines the sparkline axis line width */
        lineWidth: number;
}
/**
    * Specifies the sparkline series rendering Event arguments.
    */
export interface ISeriesRenderingEventArgs extends ISparklineEventArgs {
        /** Defines the current sparkline instance */
        sparkline: Sparkline;
        /** Defines the sparkline series fill color */
        fill: string;
        /** Defines the sparkline series line width for applicable line and area. */
        lineWidth: number;
        /** Defines the current sparkline series border */
        border: SparklineBorderModel;
}
/**
    * Specifies the sparkline point related Event arguments.
    */
export interface ISparklinePointEventArgs extends ISparklineEventArgs {
        /** Defines the current sparkline instance */
        sparkline?: Sparkline;
        /** Defines the current sparkline point index */
        pointIndex: number;
        /** Defines the current sparkline point fill color */
        fill: string;
        /** Defines the current sparkline point border */
        border: SparklineBorderModel;
}
/**
    * Specifies the sparkline mouse related Event arguments.
    */
export interface ISparklineMouseEventArgs extends ISparklineEventArgs {
        /** Defines the current sparkline instance */
        sparkline?: Sparkline;
        /** Defines the current sparkline mouse event */
        event: PointerEvent | MouseEvent;
}
/**
    * Specifies the sparkline mouse point region Event arguments.
    */
export interface IPointRegionEventArgs extends ISparklineEventArgs {
        /** Defines the current sparkline instance */
        sparkline?: Sparkline;
        /** Defines the sparkline point index region event  */
        pointIndex: number;
        /** Defines the current sparkline mouse event */
        event: PointerEvent | MouseEvent;
}
/**
    * Specifies the sparkline datalabel rendering Event arguments.
    */
export interface IDataLabelRenderingEventArgs extends ISparklineEventArgs {
        /** Defines the current sparkline instance */
        sparkline?: Sparkline;
        /** Defines the current sparkline label text */
        text?: string;
        /** Defines the current sparkline label text location x */
        x?: number;
        /** Defines the current sparkline label text location y */
        y?: number;
        /** Defines the current sparkline label text color */
        color: string;
        /** Defines the current sparkline label rect fill color */
        fill: string;
        /** Defines the current sparkline label rect border */
        border?: SparklineBorderModel;
        /** Defines the current sparkline label point index */
        pointIndex: number;
}
/**
    * Specifies the sparkline marker rendering Event arguments.
    */
export interface IMarkerRenderingEventArgs extends ISparklineEventArgs {
        /** Defines the current sparkline instance */
        sparkline?: Sparkline;
        /** Defines the current sparkline marker location x */
        x: number;
        /** Defines the current sparkline marker location y */
        y: number;
        /** Defines the sparkline marker radius */
        size: number;
        /** Defines the current sparkline marker fill color */
        fill: string;
        /** Defines the current sparkline marker border */
        border?: SparklineBorderModel;
        /** Defines the current sparkline label point index */
        pointIndex: number;
}
/**
    * Sparkline Resize event arguments.
    */
export interface ISparklineResizeEventArgs {
        /** Defines the name of the Event */
        name: string;
        /** Defines the previous size of the sparkline */
        previousSize: Size;
        /** Defines the current size of the sparkline */
        currentSize: Size;
        /** Defines the sparkline instance */
        sparkline: Sparkline;
}
/**
    * Sparkline tooltip event args.
    */
export interface ITooltipRenderingEventArgs extends ISparklineEventArgs {
        /** Defines tooltip text */
        text?: string[];
        /** Defines tooltip text style */
        textStyle?: SparklineFontModel;
}

/**
    * sparkline internal use of `Size` type
    */
export class Size {
        /**
            * height of the size
            */
        height: number;
        width: number;
        constructor(width: number, height: number);
}
/**
    * To find the default colors based on theme.
    *
    * @private
    */
export function getThemeColor(theme: SparklineTheme): IThemes;
/**
    * To find number from string
    *
    * @private
    */
export function stringToNumber(value: string, containerSize: number): number;
/**
    * Method to calculate the width and height of the sparkline
    */
export function calculateSize(sparkline: Sparkline): void;
/**
    * Method to create svg for sparkline.
    */
export function createSvg(sparkline: Sparkline): void;
/**
    * Internal use of type rect
    *
    * @private
    */
export class Rect {
        x: number;
        y: number;
        height: number;
        width: number;
        constructor(x: number, y: number, width: number, height: number);
}
/**
    * Internal use of path options
    *
    * @private
    */
export class PathOption {
        opacity: number;
        id: string;
        stroke: string;
        fill: string;
        ['stroke-dasharray']: string;
        ['stroke-width']: number;
        d: string;
        constructor(id: string, fill: string, width: number, color: string, opacity?: number, dashArray?: string, d?: string);
}
/**
    * Sparkline internal rendering options
    *
    * @private
    */
export interface SparkValues {
        x?: number;
        y?: number;
        height?: number;
        width?: number;
        percent?: number;
        degree?: number;
        location?: {
                x: number;
                y: number;
        };
        markerPosition?: number;
        xVal?: number;
        yVal?: number;
}
/**
    * Internal use of rectangle options
    *
    * @private
    */
export class RectOption extends PathOption {
        rect: Rect;
        topLeft: number;
        topRight: number;
        bottomLeft: number;
        bottomRight: number;
        constructor(id: string, fill: string, border: SparklineBorderModel, opacity: number, rect: Rect, tl?: number, tr?: number, bl?: number, br?: number);
}
/**
    * Internal use of circle options
    *
    * @private
    */
export class CircleOption extends PathOption {
        cy: number;
        cx: number;
        r: number;
        ['stroke-dasharray']: string;
        constructor(id: string, fill: string, border: SparklineBorderModel, opacity: number, cx: number, cy: number, r: number, dashArray: string);
}
/**
    * Internal use of append shape element
    *
    * @private
    */
export function appendShape(shape: Element, element: Element): Element;
/**
    * Internal rendering of Circle
    *
    * @private
    */
export function drawCircle(sparkline: Sparkline, options: CircleOption, element?: Element): Element;
/**
    * To get rounded rect path direction
    */
export function calculateRoundedRectPath(r: Rect, topLeft: number, topRight: number, bottomLeft: number, bottomRight: number): string;
/**
    * Internal rendering of Rectangle
    *
    * @private
    */
export function drawRectangle(sparkline: Sparkline, options: RectOption, element?: Element): Element;
/**
    * Internal rendering of Path
    *
    * @private
    */
export function drawPath(sparkline: Sparkline, options: PathOption, element?: Element): Element;
/**
    * Function to measure the height and width of the text.
    *
    * @private
    */
export function measureText(text: string, font: SparklineFontModel): Size;
/**
    * Internal use of text options
    *
    * @private
    */
export class TextOption {
        id: string;
        anchor: string;
        text: string;
        transform: string;
        x: number;
        y: number;
        baseLine: string;
        constructor(id?: string, x?: number, y?: number, anchor?: string, text?: string, baseLine?: string, transform?: string);
}
/**
    * Internal rendering of text
    *
    * @private
    */
export function renderTextElement(options: TextOption, font: SparklineFontModel, color: string, parent: HTMLElement | Element): Element;
/**
    * To remove element by id
    */
export function removeElement(id: string): void;
/**
    * To find the element by id
    */
export function getIdElement(id: string): Element;
/**
    * To find point within the bounds.
    */
export function withInBounds(x: number, y: number, bounds: Rect): boolean;

/**
    * Sparkline rendering calculation file
    */
export class SparklineRenderer {
        /**
            * To get visible points options internally.
            *
            * @private
            */
        visiblePoints: SparkValues[];
        /**
            * To process highpoint index color for tooltip customization
            *
            * @private
            */
        highPointIndex: number;
        /**
            * To process low point index color for tooltip customization
            *
            * @private
            */
        lowPointIndex: number;
        /**
            * To process start point index color for tooltip customization
            *
            * @private
            */
        startPointIndex: number;
        /**
            * To process end point index color for tooltip customization
            *
            * @private
            */
        endPointIndex: number;
        /**
            * To process negative point index color for tooltip customization
            *
            * @private
            */
        negativePointIndexes: number[];
        /**
            * Sparkline data calculations
            */
        constructor(sparkline: Sparkline);
        /**
            * To process the sparkline data
            */
        processData(): void;
        processDataManager(): void;
        /**
            * To render sparkline series.
            *
            * @private
            */
        renderSeries(): void;
}

/**
  * Exporting all modules from Sparkline Component
  */

