(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("@tuval/core"));
	else if(typeof define === 'function' && define.amd)
		define(["@tuval/core"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("@tuval/core")) : factory(root["@tuval/core"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, function(__WEBPACK_EXTERNAL_MODULE__tuval_core__) {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/CGAffineTransform.ts":
/*!**********************************!*\
  !*** ./src/CGAffineTransform.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CGAffineTransform": () => (/* binding */ CGAffineTransform)
/* harmony export */ });
/* harmony import */ var _CGPoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CGPoint */ "./src/CGPoint.ts");
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};

var CGAffineTransform = /** @class */ (function () {
    function CGAffineTransform() {
        var m = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            m[_i] = arguments[_i];
        }
        this.m = (m && m.slice()) || [1, 0, 0, 1, 0, 0];
    }
    CGAffineTransform.prototype.copy = function () {
        return new (CGAffineTransform.bind.apply(CGAffineTransform, __spreadArray([void 0], this.m, false)))();
    };
    CGAffineTransform.MakeIdentity = function () {
        return new CGAffineTransform(1, 0, 0, 1, 0, 0);
    };
    CGAffineTransform.MakeRotation = function (angle) {
        return new CGAffineTransform(Math.cos(angle), Math.sin(angle), -Math.sin(angle), Math.cos(angle), 0, 0);
    };
    CGAffineTransform.MakeScale = function (sx, sy) {
        return new CGAffineTransform(sx, 0, 0, sy, 0, 0);
    };
    CGAffineTransform.MakeTranslation = function (tx, ty) {
        return new CGAffineTransform(1, 0, 0, 1, tx, ty);
    };
    CGAffineTransform.Multiply = function (a, b) {
        return a.multiply(b);
    };
    /* public static Multiply(a: CGAffineTransform, b: CGAffineTransform): CGAffineTransform {
        return new CGAffineTransform(a.xx * b.xx + a.yx * b.xy,
            a.xx * b.yx + a.yx * b.yy,
            a.xy * b.xx + a.yy * b.xy,
            a.xy * b.yx + a.yy * b.yy,
            a.x0 * b.xx + a.y0 * b.xy + b.x0,
            a.x0 * b.yx + a.y0 * b.yy + b.y0);
    } */
    CGAffineTransform.prototype.point = function (point) {
        var m = this.m;
        return new _CGPoint__WEBPACK_IMPORTED_MODULE_0__.CGPoint({
            x: m[0] * point.X + m[2] * point.Y + m[4],
            y: m[1] * point.X + m[3] * point.Y + m[5]
        });
    };
    CGAffineTransform.prototype.multiply = function (matrix) {
        var m11 = this.m[0] * matrix.m[0] + this.m[2] * matrix.m[1];
        var m12 = this.m[1] * matrix.m[0] + this.m[3] * matrix.m[1];
        var m21 = this.m[0] * matrix.m[2] + this.m[2] * matrix.m[3];
        var m22 = this.m[1] * matrix.m[2] + this.m[3] * matrix.m[3];
        var dx = this.m[0] * matrix.m[4] + this.m[2] * matrix.m[5] + this.m[4];
        var dy = this.m[1] * matrix.m[4] + this.m[3] * matrix.m[5] + this.m[5];
        this.m[0] = m11;
        this.m[1] = m12;
        this.m[2] = m21;
        this.m[3] = m22;
        this.m[4] = dx;
        this.m[5] = dy;
        return this.clone();
    };
    CGAffineTransform.prototype.invert = function () {
        var d = 1 / (this.m[0] * this.m[3] - this.m[1] * this.m[2]);
        var m0 = this.m[3] * d;
        var m1 = -this.m[1] * d;
        var m2 = -this.m[2] * d;
        var m3 = this.m[0] * d;
        var m4 = d * (this.m[2] * this.m[5] - this.m[3] * this.m[4]);
        var m5 = d * (this.m[1] * this.m[4] - this.m[0] * this.m[5]);
        this.m[0] = m0;
        this.m[1] = m1;
        this.m[2] = m2;
        this.m[3] = m3;
        this.m[4] = m4;
        this.m[5] = m5;
        return this;
    };
    CGAffineTransform.prototype.scale = function (sx, sy) {
        this.m[0] *= sx;
        this.m[1] *= sx;
        this.m[2] *= sy;
        this.m[3] *= sy;
    };
    CGAffineTransform.prototype.translate = function (x, y) {
        this.m[4] += this.m[0] * x + this.m[2] * y;
        this.m[5] += this.m[1] * x + this.m[3] * y;
    };
    CGAffineTransform.prototype.rotate = function (rad) {
        var c = Math.cos(rad);
        var s = Math.sin(rad);
        var m11 = this.m[0] * c + this.m[2] * s;
        var m12 = this.m[1] * c + this.m[3] * s;
        var m21 = this.m[0] * -s + this.m[2] * c;
        var m22 = this.m[1] * -s + this.m[3] * c;
        this.m[0] = m11;
        this.m[1] = m12;
        this.m[2] = m21;
        this.m[3] = m22;
    };
    CGAffineTransform.prototype.getTranslation = function () {
        return {
            x: this.m[4],
            y: this.m[5]
        };
    };
    CGAffineTransform.prototype.getMatrix = function () {
        return this.m;
    };
    CGAffineTransform.prototype.skew = function (sx, sy) {
        var m11 = this.m[0] + this.m[2] * sy;
        var m12 = this.m[1] + this.m[3] * sy;
        var m21 = this.m[2] + this.m[0] * sx;
        var m22 = this.m[3] + this.m[1] * sx;
        this.m[0] = m11;
        this.m[1] = m12;
        this.m[2] = m21;
        this.m[3] = m22;
        return this;
    };
    CGAffineTransform.prototype.setAbsolutePosition = function (x, y) {
        var m0 = this.m[0], m1 = this.m[1], m2 = this.m[2], m3 = this.m[3], m4 = this.m[4], m5 = this.m[5], yt = (m0 * (y - m5) - m1 * (x - m4)) / (m0 * m3 - m1 * m2), xt = (x - m4 - m2 * yt) / m0;
        return this.translate(xt, yt);
    };
    Object.defineProperty(CGAffineTransform.prototype, "IsIdentity", {
        get: function () {
            return this.m[0] === 1 && this.m[1] === 0 && this.m[2] === 0 && this.m[3] === 1 && this.m[4] === 0 && this.m[5] === 0;
        },
        enumerable: false,
        configurable: true
    });
    CGAffineTransform.prototype.clone = function () {
        return new (CGAffineTransform.bind.apply(CGAffineTransform, __spreadArray([void 0], this.m, false)))();
    };
    CGAffineTransform.prototype.toString = function () {
        var s = "xx:{0:##0.0#} yx:{1:##0.0#} xy:{2:##0.0#} yy:{3:##0.0#} x0:{4:##0.0#} y0:{5:##0.0#}"; //, xx, yx, xy, yy, x0, y0);
        return s;
    };
    /*   public static bool operator == (CGAffineTransform lhs, CGAffineTransform rhs)
      {
              return (lhs.xx == rhs.xx && lhs.xy == rhs.xy &&
                      lhs.yx == rhs.yx && lhs.yy == rhs.yy &&
                      lhs.x0 == rhs.x0 && lhs.y0 == rhs.y0 );
      } */
    CGAffineTransform.prototype.equals = function (o) {
        return this.m[0] === o.m[0] && this.m[1] === o.m[1] && this.m[2] === o.m[2] && this.m[3] === o.m[3] && this.m[4] === o.m[4] && this.m[5] === o.m[5];
    };
    CGAffineTransform.prototype.getHashCode = function () {
        return this.m[0] * this.m[1] * this.m[2] * this.m[3] * this.m[4] * this.m[5];
    };
    return CGAffineTransform;
}());



/***/ }),

/***/ "./src/CGBlendMode.ts":
/*!****************************!*\
  !*** ./src/CGBlendMode.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CGBlendMode": () => (/* binding */ CGBlendMode)
/* harmony export */ });
var CGBlendMode;
(function (CGBlendMode) {
    CGBlendMode[CGBlendMode["Normal"] = 0] = "Normal";
    CGBlendMode[CGBlendMode["Multiply"] = 1] = "Multiply";
    CGBlendMode[CGBlendMode["Screen"] = 2] = "Screen";
    CGBlendMode[CGBlendMode["Overlay"] = 3] = "Overlay";
    CGBlendMode[CGBlendMode["Darken"] = 4] = "Darken";
    CGBlendMode[CGBlendMode["Lighten"] = 5] = "Lighten";
    CGBlendMode[CGBlendMode["ColorDodge"] = 6] = "ColorDodge";
    CGBlendMode[CGBlendMode["ColorBurn"] = 7] = "ColorBurn";
    CGBlendMode[CGBlendMode["SoftLight"] = 8] = "SoftLight";
    CGBlendMode[CGBlendMode["HardLight"] = 9] = "HardLight";
    CGBlendMode[CGBlendMode["Difference"] = 10] = "Difference";
    CGBlendMode[CGBlendMode["Exclusion"] = 11] = "Exclusion";
    CGBlendMode[CGBlendMode["Hue"] = 12] = "Hue";
    CGBlendMode[CGBlendMode["Saturation"] = 13] = "Saturation";
    CGBlendMode[CGBlendMode["Color"] = 14] = "Color";
    CGBlendMode[CGBlendMode["Luminosity"] = 15] = "Luminosity";
    CGBlendMode[CGBlendMode["Clear"] = 16] = "Clear";
    CGBlendMode[CGBlendMode["Copy"] = 17] = "Copy";
    CGBlendMode[CGBlendMode["SourceIn"] = 18] = "SourceIn";
    CGBlendMode[CGBlendMode["SourceOut"] = 19] = "SourceOut";
    CGBlendMode[CGBlendMode["SourceAtop"] = 20] = "SourceAtop";
    CGBlendMode[CGBlendMode["DestinationOver"] = 21] = "DestinationOver";
    CGBlendMode[CGBlendMode["DestinationIn"] = 22] = "DestinationIn";
    CGBlendMode[CGBlendMode["DestinationOut"] = 23] = "DestinationOut";
    CGBlendMode[CGBlendMode["DestinationAtop"] = 24] = "DestinationAtop";
    CGBlendMode[CGBlendMode["XOR"] = 25] = "XOR";
    CGBlendMode[CGBlendMode["PlusDarker"] = 26] = "PlusDarker";
    CGBlendMode[CGBlendMode["PlusLighter"] = 27] = "PlusLighter";
})(CGBlendMode || (CGBlendMode = {}));


/***/ }),

/***/ "./src/CGColor/CGColor.ts":
/*!********************************!*\
  !*** ./src/CGColor/CGColor.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CGColor": () => (/* binding */ CGColor)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ColorConversion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ColorConversion */ "./src/CGColor/ColorConversion.ts");
/* harmony import */ var _namedColors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./namedColors */ "./src/CGColor/namedColors.ts");
/* harmony import */ var _KnownColor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./KnownColor */ "./src/CGColor/KnownColor.ts");
/* harmony import */ var _KnownColors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./KnownColors */ "./src/CGColor/KnownColors.ts");
/* harmony import */ var _colors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./colors */ "./src/CGColor/colors.ts");
/* harmony import */ var _SketchColor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SketchColor */ "./src/CGColor/SketchColor.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../types */ "./src/types.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};











var WHITESPACE = /\s*/; // Match zero or more whitespace characters.
var INTEGER = /(\d{1,3})/; // Match integers: 79, 255, etc.
var DECIMAL = /((?:\d+(?:\.\d+)?)|(?:\.\d+))/; // Match 129.6, 79, .9, etc.
var PERCENT = new RegExp(DECIMAL.source + '%'); // Match 12.9%, 79%, .9%, etc.
var colorPatterns = {
    // Match colors in format #XXX, e.g. #416.
    HEX3: /^#([a-f0-9])([a-f0-9])([a-f0-9])$/i,
    // Match colors in format #XXXX, e.g. #5123.
    HEX4: /^#([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])$/i,
    // Match colors in format #XXXXXX, e.g. #b4d455.
    HEX6: /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i,
    // Match colors in format #XXXXXXXX, e.g. #b4d45535.
    HEX8: /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i,
    // Match colors in format rgb(R, G, B), e.g. rgb(255, 0, 128).
    RGB: new RegExp([
        '^rgb\\(',
        INTEGER.source,
        ',',
        INTEGER.source,
        ',',
        INTEGER.source,
        '\\)$'
    ].join(WHITESPACE.source), 'i'),
    // Match colors in format rgb(R%, G%, B%), e.g. rgb(100%, 0%, 28.9%).
    RGB_PERCENT: new RegExp([
        '^rgb\\(',
        PERCENT.source,
        ',',
        PERCENT.source,
        ',',
        PERCENT.source,
        '\\)$'
    ].join(WHITESPACE.source), 'i'),
    // Match colors in format rgb(R, G, B, A), e.g. rgb(255, 0, 128, 0.25).
    RGBA: new RegExp([
        '^rgba\\(',
        INTEGER.source,
        ',',
        INTEGER.source,
        ',',
        INTEGER.source,
        ',',
        DECIMAL.source,
        '\\)$'
    ].join(WHITESPACE.source), 'i'),
    // Match colors in format rgb(R%, G%, B%, A), e.g. rgb(100%, 0%, 28.9%, 0.5).
    RGBA_PERCENT: new RegExp([
        '^rgba\\(',
        PERCENT.source,
        ',',
        PERCENT.source,
        ',',
        PERCENT.source,
        ',',
        DECIMAL.source,
        '\\)$'
    ].join(WHITESPACE.source), 'i'),
    // Match colors in format hsla(H, S%, L%), e.g. hsl(100, 40%, 28.9%).
    HSL: new RegExp([
        '^hsl\\(',
        INTEGER.source,
        ',',
        PERCENT.source,
        ',',
        PERCENT.source,
        '\\)$'
    ].join(WHITESPACE.source), 'i'),
    // Match colors in format hsla(H, S%, L%, A), e.g. hsla(100, 40%, 28.9%, 0.5).
    HSLA: new RegExp([
        '^hsla\\(',
        INTEGER.source,
        ',',
        PERCENT.source,
        ',',
        PERCENT.source,
        ',',
        DECIMAL.source,
        '\\)$'
    ].join(WHITESPACE.source), 'i'),
    // Match colors in format hsb(H, S%, B%), e.g. hsb(100, 40%, 28.9%).
    HSB: new RegExp([
        '^hsb\\(',
        INTEGER.source,
        ',',
        PERCENT.source,
        ',',
        PERCENT.source,
        '\\)$'
    ].join(WHITESPACE.source), 'i'),
    // Match colors in format hsba(H, S%, B%, A), e.g. hsba(100, 40%, 28.9%, 0.5).
    HSBA: new RegExp([
        '^hsba\\(',
        INTEGER.source,
        ',',
        PERCENT.source,
        ',',
        PERCENT.source,
        ',',
        DECIMAL.source,
        '\\)$'
    ].join(WHITESPACE.source), 'i')
};
var constants = {
    RGB: 'rgb',
    /**
     * @property {String} HSB
     * @final
     */
    HSB: 'hsb',
    /**
     * @property {String} HSL
     * @final
     */
    HSL: 'hsl'
};
var CGColor = /** @class */ (function () {
    function CGColor() {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        // private value: number[] = [];
        this.levels = [];
        this._array = [];
        this.maxes = {
            rgb: [255, 255, 255, 255],
            hsb: [360, 100, 100, 1],
            hsl: [360, 100, 100, 1]
        };
        this.myR = 0;
        this.myG = 0;
        this.myB = 0;
        this.myA = 0;
        this.mode = constants.RGB;
        this.hsba = undefined;
        this.hsla = undefined;
        this.Equals = function (color) {
            return _this.A === color.A && _this.R === color.R && _this.G === color.G && _this.B === color.B;
        };
        this.notEquals = function (color) {
            return _this.A !== color.A || _this.R !== color.R || _this.G !== color.G || _this.B !== color.B;
        };
        /* if (args.length === 1) {
            this.value = args[0];
        } else if (args.length === 4) {
            this.value[1] = args[0];
            this.value[2] = args[1];
            this.value[3] = args[2];
            this.value[0] = args[3];
        } else if (args.length === 3) {
            this.value[1] = args[0];
            this.value[2] = args[1];
            this.value[3] = args[2];
        } */
        if (args.length === 1 && Array.isArray(args[0])) {
            var rgba = args[0];
            args = new Array(4);
            args[0] = rgba[0];
            args[1] = rgba[1];
            args[2] = rgba[2];
            args[3] = rgba[3];
        }
        if (this.mode !== constants.RGB &&
            this.mode !== constants.HSL &&
            this.mode !== constants.HSB) {
            throw new Error(this.mode + ' is an invalid colorMode.');
        }
        else {
            this._array = this._parseInputs.apply(this, args);
        }
        // Expose closest screen color.
        this._calculateLevels();
        return this;
    }
    CGColor_1 = CGColor;
    Object.defineProperty(CGColor.prototype, "Levels", {
        get: function () {
            return this.levels;
        },
        enumerable: false,
        configurable: true
    });
    CGColor.FromSketchColor = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var sc = undefined;
        ;
        if (args.length === 1) {
            sc = new _SketchColor__WEBPACK_IMPORTED_MODULE_6__.SketchColor(args[0]);
        }
        else if (args.length === 2) {
            sc = new _SketchColor__WEBPACK_IMPORTED_MODULE_6__.SketchColor(args[0], args[1]);
        }
        else if (args.length === 3) {
            sc = new _SketchColor__WEBPACK_IMPORTED_MODULE_6__.SketchColor(args[0], args[1], args[2]);
        }
        else if (args.length === 4) {
            sc = new _SketchColor__WEBPACK_IMPORTED_MODULE_6__.SketchColor(args[0], args[1], args[2], args[3]);
        }
        return sc.toColor();
    };
    CGColor.prototype._calculateLevels = function () {
        var array = this._array;
        // (loop backwards for performance)
        var levels = (this.levels = new Array(array.length));
        for (var i = array.length - 1; i >= 0; --i) {
            levels[i] = Math.round(array[i] * 255);
        }
    };
    //private _parseInputs(namedColor: string): number[];
    //private _parseInputs(r: number, g: number, b: number, a: number): number[]
    CGColor.prototype._parseInputs = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var r = args[0];
        var g = args[1];
        var b = args[2];
        var a = args[3];
        var numArgs = arguments.length;
        var mode = this.mode;
        var maxes = this.maxes[mode];
        var results = [];
        var i;
        if (numArgs >= 3) {
            // Argument is a list of component values.
            results[0] = r / maxes[0];
            results[1] = g / maxes[1];
            results[2] = b / maxes[2];
            // Alpha may be undefined, so default it to 100%.
            if (typeof a === 'number') {
                results[3] = a / maxes[3];
            }
            else {
                results[3] = 1;
            }
            // Constrain components to the range [0,1].
            // (loop backwards for performance)
            for (i = results.length - 1; i >= 0; --i) {
                var result = results[i];
                if (result < 0) {
                    results[i] = 0;
                }
                else if (result > 1) {
                    results[i] = 1;
                }
            }
            // Convert to RGBA and return.
            if (mode === constants.HSL) {
                return _ColorConversion__WEBPACK_IMPORTED_MODULE_1__.ColorConversion.HslaToRGBA(results);
            }
            else if (mode === constants.HSB) {
                return _ColorConversion__WEBPACK_IMPORTED_MODULE_1__.ColorConversion.HsbaToRGBA(results);
            }
            else {
                return results;
            }
        }
        else if (numArgs === 1 && typeof r === 'string') {
            var str = r.trim().toLowerCase();
            // Return if string is a named colour.
            if (_namedColors__WEBPACK_IMPORTED_MODULE_2__.namedColors[str]) {
                return this._parseInputs(_namedColors__WEBPACK_IMPORTED_MODULE_2__.namedColors[str]);
            }
            // Try RGBA pattern matching.
            if (colorPatterns.HEX3.test(str)) {
                // #rgb
                results = colorPatterns.HEX3.exec(str)
                    .slice(1)
                    .map(function (color) {
                    return parseInt(color + color, 16) / 255;
                });
                results[3] = 1;
                return results;
            }
            else if (colorPatterns.HEX6.test(str)) {
                // #rrggbb
                results = colorPatterns.HEX6.exec(str)
                    .slice(1)
                    .map(function (color) {
                    return parseInt(color, 16) / 255;
                });
                results[3] = 1;
                return results;
            }
            else if (colorPatterns.HEX4.test(str)) {
                // #rgba
                results = colorPatterns.HEX4.exec(str)
                    .slice(1)
                    .map(function (color) {
                    return parseInt(color + color, 16) / 255;
                });
                return results;
            }
            else if (colorPatterns.HEX8.test(str)) {
                // #rrggbbaa
                results = colorPatterns.HEX8.exec(str)
                    .slice(1)
                    .map(function (color) {
                    return parseInt(color, 16) / 255;
                });
                return results;
            }
            else if (colorPatterns.RGB.test(str)) {
                // rgb(R,G,B)
                results = colorPatterns.RGB.exec(str)
                    .slice(1)
                    .map(function (color) {
                    return color / 255;
                });
                results[3] = 1;
                return results;
            }
            else if (colorPatterns.RGB_PERCENT.test(str)) {
                // rgb(R%,G%,B%)
                results = colorPatterns.RGB_PERCENT.exec(str)
                    .slice(1)
                    .map(function (color) {
                    return parseFloat(color) / 100;
                });
                results[3] = 1;
                return results;
            }
            else if (colorPatterns.RGBA.test(str)) {
                // rgba(R,G,B,A)
                results = colorPatterns.RGBA.exec(str)
                    .slice(1)
                    .map(function (color, idx) {
                    if (idx === 3) {
                        return parseFloat(color);
                    }
                    return color / 255;
                });
                return results;
            }
            else if (colorPatterns.RGBA_PERCENT.test(str)) {
                // rgba(R%,G%,B%,A%)
                results = colorPatterns.RGBA_PERCENT.exec(str)
                    .slice(1)
                    .map(function (color, idx) {
                    if (idx === 3) {
                        return parseFloat(color);
                    }
                    return parseFloat(color) / 100;
                });
                return results;
            }
            // Try HSLA pattern matching.
            if (colorPatterns.HSL.test(str)) {
                // hsl(H,S,L)
                results = colorPatterns.HSL.exec(str)
                    .slice(1)
                    .map(function (color, idx) {
                    if (idx === 0) {
                        return parseInt(color, 10) / 360;
                    }
                    return parseInt(color, 10) / 100;
                });
                results[3] = 1;
            }
            else if (colorPatterns.HSLA.test(str)) {
                // hsla(H,S,L,A)
                results = colorPatterns.HSLA.exec(str)
                    .slice(1)
                    .map(function (color, idx) {
                    if (idx === 0) {
                        return parseInt(color, 10) / 360;
                    }
                    else if (idx === 3) {
                        return parseFloat(color);
                    }
                    return parseInt(color, 10) / 100;
                });
            }
            results = results.map(function (value) {
                return Math.max(Math.min(value, 1), 0);
            });
            if (results.length) {
                return _ColorConversion__WEBPACK_IMPORTED_MODULE_1__.ColorConversion.HslaToRGBA(results);
            }
            // Try HSBA pattern matching.
            if (colorPatterns.HSB.test(str)) {
                // hsb(H,S,B)
                results = colorPatterns.HSB.exec(str)
                    .slice(1)
                    .map(function (color, idx) {
                    if (idx === 0) {
                        return parseInt(color, 10) / 360;
                    }
                    return parseInt(color, 10) / 100;
                });
                results[3] = 1;
            }
            else if (colorPatterns.HSBA.test(str)) {
                // hsba(H,S,B,A)
                results = colorPatterns.HSBA.exec(str)
                    .slice(1)
                    .map(function (color, idx) {
                    if (idx === 0) {
                        return parseInt(color, 10) / 360;
                    }
                    else if (idx === 3) {
                        return parseFloat(color);
                    }
                    return parseInt(color, 10) / 100;
                });
            }
            if (results.length) {
                // (loop backwards for performance)
                for (i = results.length - 1; i >= 0; --i) {
                    results[i] = Math.max(Math.min(results[i], 1), 0);
                }
                return _ColorConversion__WEBPACK_IMPORTED_MODULE_1__.ColorConversion.HsbaToRGBA(results);
            }
            // Input did not match any CSS color pattern: default to white.
            results = [1, 1, 1, 1];
        }
        else if ((numArgs === 1 || numArgs === 2) && typeof r === 'number') {
            // 'Grayscale' mode.
            /**
             * For HSB and HSL, interpret the gray level as a brightness/lightness
             * value (they are equivalent when chroma is zero). For RGB, normalize the
             * gray level according to the blue maximum.
             */
            results[0] = r / maxes[2];
            results[1] = r / maxes[2];
            results[2] = r / maxes[2];
            // Alpha may be undefined, so default it to 100%.
            if (typeof g === 'number') {
                results[3] = g / maxes[3];
            }
            else {
                results[3] = 1;
            }
            // Constrain components to the range [0,1].
            results = results.map(function (value) {
                return Math.max(Math.min(value, 1), 0);
            });
        }
        else {
            throw new Error(arguments + 'is not a valid color representation.');
        }
        return results;
    };
    CGColor.FromRgba = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args.length === 1) {
            return CGColor_1.FromRgba(args[0], args[0], args[0], 255);
        }
        else if (args.length === 3) {
            return CGColor_1.FromRgba(args[0], args[1], args[2], 255);
        }
        else if (args.length === 4) {
            if ((args[1] > 255) || (args[1] < 0))
                throw CGColor_1.CreateColorArgumentException(args[0], "red");
            if ((args[2] > 255) || (args[2] < 0))
                throw CGColor_1.CreateColorArgumentException(args[2], "green");
            if ((args[3] > 255) || (args[3] < 0))
                throw CGColor_1.CreateColorArgumentException(args[3], "blue");
            if ((args[0] > 255) || (args[0] < 0))
                throw CGColor_1.CreateColorArgumentException(args[0], "alpha");
            var color = new CGColor_1(args[0], args[1], args[2], args[3]);
            return color;
        }
        else if (args.length === 2) {
            var baseColor = args[0];
            return CGColor_1.FromRgba(baseColor.R, baseColor.G, baseColor.B, args[1]);
        }
        else if (args.length === 1) {
            return new CGColor_1(args[0]);
        }
        return CGColor_1.Empty;
    };
    CGColor.FromHSBA = function (hue, saturation, brightness, alpha) {
        if (alpha === void 0) { alpha = 1; }
        var maxes = [360, 100, 100, 1];
        var h = hue / maxes[0];
        var s = saturation / maxes[1];
        var b = brightness / maxes[2];
        var a = (alpha >= 0 && alpha <= 1) ? alpha : 1;
        var rgba = _ColorConversion__WEBPACK_IMPORTED_MODULE_1__.ColorConversion.HsbaToRGBA([h, s, b, a]);
        return new CGColor_1(Math.round(rgba[0] * 255), Math.round(rgba[1] * 255), Math.round(rgba[2] * 255), Math.round(rgba[3] * 255));
    };
    CGColor.FromHSLA = function (hue, saturation, lightness, alpha) {
        if (alpha === void 0) { alpha = 1; }
        var maxes = [360, 100, 100, 1];
        var h = hue / maxes[0];
        var s = saturation / maxes[1];
        var l = lightness / maxes[2];
        var a = (alpha >= 0 && alpha <= 1) ? alpha : 1;
        var rgba = _ColorConversion__WEBPACK_IMPORTED_MODULE_1__.ColorConversion.HslaToRGBA([h, s, l, a]);
        return new CGColor_1(Math.round(rgba[0] * 255), Math.round(rgba[1] * 255), Math.round(rgba[2] * 255), Math.round(rgba[3] * 255));
    };
    CGColor.prototype.toRgba = function () {
        //FIX ME:
        return [this.R, this.G, this.B, this.A];
    };
    CGColor.prototype.toInt = function () {
        //FIX ME:
        return _tuval_core__WEBPACK_IMPORTED_MODULE_0__.Convert.ToInt32((this.A << 24) + (this.R << 16) + (this.G << 8) + this.B);
    };
    CGColor.prototype.clone = function () {
        return CGColor_1.FromRgba(this.R, this.G, this.B, this.A);
    };
    CGColor.FromKnownColor = function (color) {
        return _KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.FromKnownColor(color);
    };
    CGColor.FromName = function (name) {
        var argb = (0,_tuval_core__WEBPACK_IMPORTED_MODULE_0__.newOutEmpty)();
        if (_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.ArgbByName.tryGetValue(name, argb)) {
            return new CGColor_1(argb.value[1], argb.value[2], argb.value[3]);
        }
        return new CGColor_1([0, 0, 0, 0]);
    };
    Object.defineProperty(CGColor, "Empty", {
        get: function () {
            return new CGColor_1(0, 0, 0, 0);
        },
        enumerable: false,
        configurable: true
    });
    CGColor.GetRGBAString = function (obj) {
        var red = obj.red || 0, green = obj.green || 0, blue = obj.blue || 0, alpha = obj.alpha || 1;
        return ['rgba(', red, ',', green, ',', blue, ',', alpha, ')'].join('');
    };
    CGColor.RgbToHex = function (r, g, b) {
        return ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
        /* function componentToHex(c: number) {
          var hex = c.toString(16);
          return hex.length == 1 ? "0" + hex : hex;
        }
        return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);  */
    };
    CGColor.RgbaToHex = function (r, g, b, a) {
        return ((a << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
    };
    CGColor.HexToRgb = function (hex) {
        var HASH = "#";
        var EMPTY_STRING = "";
        hex = hex.replace(HASH, EMPTY_STRING);
        var bigint = parseInt(hex, 16);
        return {
            r: (bigint >> 16) & 255,
            g: (bigint >> 8) & 255,
            b: bigint & 255
        };
    };
    CGColor.GetRandomColor = function () {
        var randColor = ((Math.random() * 0xffffff) << 0).toString(16);
        while (randColor.length < 6) {
            randColor = '0' + randColor;
        }
        return '#' + randColor;
    };
    CGColor.ColorToRGBA = function (str) {
        str = str || "black";
        return (CGColor_1.NamedColorToRBA(str) ||
            CGColor_1.Hex3ColorToRGBA(str) ||
            CGColor_1.Hex6ColorToRGBA(str) ||
            CGColor_1.RgbColorToRGBA(str) ||
            CGColor_1.RgbaColorToRGBA(str));
    };
    CGColor.NamedColorToRBA = function (str) {
        var c = _colors__WEBPACK_IMPORTED_MODULE_5__.COLORS[str.toLowerCase()];
        if (!c) {
            return null;
        }
        return {
            r: c[0],
            g: c[1],
            b: c[2],
            a: 1
        };
    };
    // Parse rgb(n, n, n)
    CGColor.RgbColorToRGBA = function (str) {
        if (str.indexOf("rgb(") === 0) {
            str = str.match(/rgb\(([^)]+)\)/)[1];
            var parts = str.split(/ *, */).map(Number);
            return {
                r: parts[0],
                g: parts[1],
                b: parts[2],
                a: 1
            };
        }
        return null;
    };
    CGColor.RgbaColorToRGBA = function (str) {
        if (str.indexOf("rgba(") === 0) {
            str = str.match(/rgba\(([^)]+)\)/)[1];
            var parts = str.split(/ *, */).map(Number);
            return {
                r: parts[0],
                g: parts[1],
                b: parts[2],
                a: parts[3]
            };
        }
        return undefined;
    };
    // Parse #nnnnnn
    CGColor.Hex6ColorToRGBA = function (str) {
        if (str[0] === "#" && str.length === 7) {
            return {
                r: parseInt(str.slice(1, 3), 16),
                g: parseInt(str.slice(3, 5), 16),
                b: parseInt(str.slice(5, 7), 16),
                a: 1
            };
        }
        return undefined;
    };
    // Parse #nnn
    CGColor.Hex3ColorToRGBA = function (str) {
        if (str[0] === "#" && str.length === 4) {
            return {
                r: parseInt(str[1] + str[1], 16),
                g: parseInt(str[2] + str[2], 16),
                b: parseInt(str[3] + str[3], 16),
                a: 1
            };
        }
        return undefined;
    };
    CGColor.prototype.getBrightness = function () {
        var minval = (0,_tuval_core__WEBPACK_IMPORTED_MODULE_0__.toByte)(Math.min(this.R, Math.min(this.G, this.B)));
        var maxval = (0,_tuval_core__WEBPACK_IMPORTED_MODULE_0__.toByte)(Math.max(this.R, Math.max(this.G, this.B)));
        return (maxval + minval) / 510;
    };
    CGColor.prototype.getSaturation = function () {
        var minval = (0,_tuval_core__WEBPACK_IMPORTED_MODULE_0__.toByte)(Math.min(this.R, Math.min(this.G, this.B)));
        var maxval = (0,_tuval_core__WEBPACK_IMPORTED_MODULE_0__.toByte)(Math.max(this.R, Math.max(this.G, this.B)));
        if (maxval === minval) {
            return 0.0;
        }
        var sum = maxval + minval;
        if (sum > 255)
            sum = 510 - sum;
        return (maxval - minval) / sum;
    };
    CGColor.prototype.getHue = function () {
        var r = this.R;
        var g = this.G;
        var b = this.B;
        var minval = (0,_tuval_core__WEBPACK_IMPORTED_MODULE_0__.toByte)(Math.min(r, Math.min(g, b)));
        var maxval = (0,_tuval_core__WEBPACK_IMPORTED_MODULE_0__.toByte)(Math.max(r, Math.max(g, b)));
        if (maxval === minval)
            return 0.0;
        var diff = (maxval - minval);
        var rnorm = (maxval - r) / diff;
        var gnorm = (maxval - g) / diff;
        var bnorm = (maxval - b) / diff;
        var hue = 0.0;
        if (r === maxval) {
            hue = 60.0 * (6.0 + bnorm - gnorm);
        }
        if (g === maxval) {
            hue = 60.0 * (2.0 + rnorm - bnorm);
        }
        if (b === maxval) {
            hue = 60.0 * (4.0 + gnorm - rnorm);
        }
        if (hue > 360.0) {
            hue = hue - 360.0;
        }
        return hue;
    };
    CGColor.prototype.getLightness = function () {
        if (!this.hsla) {
            this.hsla = _ColorConversion__WEBPACK_IMPORTED_MODULE_1__.ColorConversion.RgbaToHSLA(this._array);
        }
        return this.hsla[2] * this.maxes[constants.HSL][2];
    };
    CGColor.prototype.ToKnownColor = function () {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGColor.ToKnownColor');
    };
    Object.defineProperty(CGColor.prototype, "IsEmpty", {
        get: function () {
            return this.A === 0 && this.R === 0 && this.G === 0 && this.B === 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor.prototype, "A", {
        get: function () {
            return this._getAlpha();
        },
        set: function (value) {
            this._setAlpha(value);
        },
        enumerable: false,
        configurable: true
    });
    CGColor.prototype._getAlpha = function () {
        return this._array[3] * this.maxes[this.mode][3];
    };
    ;
    CGColor.prototype._setAlpha = function (new_alpha) {
        this._array[3] = new_alpha / this.maxes[this.mode][3];
        this._calculateLevels();
    };
    Object.defineProperty(CGColor.prototype, "R", {
        /**
         * Returns the alpha component value in a Color structure.
         */
        get: function () {
            return this._getRed();
        },
        set: function (value) {
            this._setRed(value);
        },
        enumerable: false,
        configurable: true
    });
    CGColor.prototype._setRed = function (new_red) {
        this._array[0] = new_red / this.maxes[constants.RGB][0];
        this._calculateLevels();
    };
    CGColor.prototype._getRed = function () {
        return this._array[0] * this.maxes[constants.RGB][0];
    };
    ;
    Object.defineProperty(CGColor.prototype, "G", {
        get: function () {
            return this._getGreen();
        },
        set: function (value) {
            this._setGreen(value);
        },
        enumerable: false,
        configurable: true
    });
    CGColor.prototype._setGreen = function (new_green) {
        this._array[1] = new_green / this.maxes[constants.RGB][1];
        this._calculateLevels();
    };
    CGColor.prototype._getGreen = function () {
        return this._array[1] * this.maxes[constants.RGB][1];
    };
    Object.defineProperty(CGColor.prototype, "B", {
        get: function () {
            return this._getBlue();
        },
        set: function (value) {
            this._setBlue(value);
        },
        enumerable: false,
        configurable: true
    });
    CGColor.prototype._getBlue = function () {
        return this._array[2] * this.maxes[constants.RGB][2];
    };
    CGColor.prototype._setBlue = function (new_blue) {
        this._array[2] = new_blue / this.maxes[constants.RGB][2];
        this._calculateLevels();
    };
    ;
    /*  public /*override*/ /*toString(): string {
         if (this.IsEmpty)
             return "Color [Empty]";

         return "Color [A=" + this.A + ", R=" + this.R + ", G=" + this.G + ", B=" + this.B;
     } */
    CGColor.CreateColorArgumentException = function (value, color) {
        return new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.ArgumentException(value + " is not a valid"
            + " value for '" + color + "'. '" + color + "' should be greater or equal to 0 and"
            + " less than or equal to 255.");
    };
    Object.defineProperty(CGColor, "Transparent", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Transparent]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "AliceBlue", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.AliceBlue]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "AntiqueWhite", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.AntiqueWhite]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Aqua", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Aqua]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Aquamarine", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Aquamarine]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Azure", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Azure]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Beige", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Beige]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Bisque", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Bisque]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Black", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Black]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "BlanchedAlmond", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.BlanchedAlmond]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Blue", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Blue]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "BlueViolet", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.BlueViolet]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Brown", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Brown]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "BurlyWood", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.BurlyWood]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "CadetBlue", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.CadetBlue]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Chartreuse", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Chartreuse]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Chocolate", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Coral]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Coral", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Coral]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "CornflowerBlue", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.CornflowerBlue]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Cornsilk", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Cornsilk]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Crimson", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Crimson]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Cyan", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Cyan]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "DarkBlue", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.DarkBlue]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "DarkCyan", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.DarkCyan]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "DarkGoldenrod", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.DarkGoldenrod]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "DarkGray", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.DarkGray]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "DarkGreen", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.DarkGreen]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "DarkKhaki", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.DarkKhaki]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "DarkMagenta", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.DarkMagenta]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "DarkOliveGreen", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.DarkOliveGreen]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "DarkOrange", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.DarkOrange]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "DarkOrchid", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.DarkOrchid]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "DarkRed", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.DarkRed]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "DarkSalmon", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.DarkSalmon]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "DarkSeaGreen", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.DarkSeaGreen]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "DarkSlateBlue", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.DarkSlateBlue]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "DarkSlateGray", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.DarkSlateGray]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "DarkTurquoise", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.DarkTurquoise]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "DarkViolet", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.DarkViolet]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "DeepPink", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.DeepPink]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "DeepSkyBlue", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.DeepSkyBlue]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "DimGray", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.DimGray]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "DodgerBlue", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.DodgerBlue]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Firebrick", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Firebrick]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "FloralWhite", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.FloralWhite]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "ForestGreen", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.ForestGreen]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Fuchsia", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Fuchsia]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Gainsboro", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Gainsboro]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "GhostWhite", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.GhostWhite]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Gold", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Gold]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Goldenrod", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Goldenrod]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Gray", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Gray]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Green", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Green]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "GreenYellow", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.GreenYellow]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Honeydew", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Honeydew]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "HotPink", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.HotPink]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "IndianRed", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.IndianRed]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Indigo", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Indigo]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Ivory", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Ivory]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Khaki", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Khaki]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Lavender", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Lavender]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "LavenderBlush", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.LavenderBlush]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "LawnGreen", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.LawnGreen]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "LemonChiffon", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.LemonChiffon]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "LightBlue", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.LightBlue]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "LightCoral", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.LightCoral]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "LightCyan", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.LightCyan]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "LightGoldenrodYellow", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.LightGoldenrodYellow]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "LightGreen", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.LightGreen]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "LightGray", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.LightGray]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "LightPink", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.LightPink]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "LightSalmon", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.LightSalmon]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "LightSeaGreen", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.LightSeaGreen]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "LightSkyBlue", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.LightSkyBlue]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "LightSlateGray", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.LightSlateGray]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "LightSteelBlue", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.LightSteelBlue]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "LightYellow", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.LightYellow]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Lime", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Lime]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "LimeGreen", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.LimeGreen]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Linen", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Linen]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Magenta", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Magenta]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Maroon", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Maroon]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "MediumAquamarine", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.MediumAquamarine]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "MediumBlue", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.MediumBlue]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "MediumOrchid", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.MediumOrchid]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "MediumPurple", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.MediumPurple]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "MediumSeaGreen", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.MediumSeaGreen]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "MediumSlateBlue", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.MediumSlateBlue]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "MediumSpringGreen", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.MediumSpringGreen]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "MediumTurquoise", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.MediumTurquoise]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "MediumVioletRed", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.MediumVioletRed]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "MidnightBlue", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.MidnightBlue]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "MintCream", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.MintCream]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "MistyRose", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.MistyRose]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Moccasin", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Moccasin]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "NavajoWhite", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.NavajoWhite]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Navy", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Navy]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "OldLace", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.OldLace]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Olive", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Olive]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "OliveDrab", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.OliveDrab]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Orange", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Orange]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "OrangeRed", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.OrangeRed]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Orchid", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Orchid]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "PaleGoldenrod", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.PaleGoldenrod]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "PaleGreen", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.PaleGreen]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "PaleTurquoise", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.PaleTurquoise]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "PaleVioletRed", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.PaleVioletRed]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "PapayaWhip", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.PapayaWhip]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "PeachPuff", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.PeachPuff]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Peru", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Peru]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Pink", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Pink]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Plum", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Plum]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "PowderBlue", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.PowderBlue]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Purple", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Purple]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Red", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Red]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "RosyBrown", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.RosyBrown]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "RoyalBlue", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.RoyalBlue]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "SaddleBrown", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.SaddleBrown]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Salmon", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Salmon]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "SandyBrown", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.SandyBrown]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "SeaGreen", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.SeaGreen]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "SeaShell", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.SeaShell]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Sienna", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Sienna]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Silver", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Silver]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "SkyBlue", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.SkyBlue]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "SlateBlue", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.SlateBlue]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "SlateGray", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.SlateGray]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Snow", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Snow]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "SpringGreen", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.SpringGreen]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "SteelBlue", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.SteelBlue]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Tan", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Tan]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Teal", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Teal]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Thistle", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Thistle]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Tomato", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Tomato]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Turquoise", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Turquoise]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Violet", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Violet]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Wheat", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Wheat]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "White", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.White]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "WhiteSmoke", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.WhiteSmoke]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "Yellow", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.Yellow]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGColor, "YellowGreen", {
        get: function () {
            return new CGColor_1(_KnownColors__WEBPACK_IMPORTED_MODULE_4__.KnownColors.RgbaValues[_KnownColor__WEBPACK_IMPORTED_MODULE_3__.KnownColor.YellowGreen]);
        },
        enumerable: false,
        configurable: true
    });
    CGColor.prototype.getHashCode = function () {
        return this.R * this.G * this.B * this.A;
    };
    CGColor.prototype.toString = function (format) {
        if (this.hsba == null) {
            this.hsba = _ColorConversion__WEBPACK_IMPORTED_MODULE_1__.ColorConversion.RgbaToHSBA(this._array);
        }
        if (this.hsla == null) {
            this.hsla = _ColorConversion__WEBPACK_IMPORTED_MODULE_1__.ColorConversion.RgbaToHSLA(this._array);
        }
        var a = this.levels;
        var f = this._array;
        var alpha = f[3]; // String representation uses normalized alpha
        switch (format) {
            case '#rrggbb':
                return '#'.concat(a[0] < 16 ? '0'.concat(a[0].toString(16)) : a[0].toString(16), a[1] < 16 ? '0'.concat(a[1].toString(16)) : a[1].toString(16), a[2] < 16 ? '0'.concat(a[2].toString(16)) : a[2].toString(16));
            case '#rrggbbaa':
                return '#'.concat(a[0] < 16 ? '0'.concat(a[0].toString(16)) : a[0].toString(16), a[1] < 16 ? '0'.concat(a[1].toString(16)) : a[1].toString(16), a[2] < 16 ? '0'.concat(a[2].toString(16)) : a[2].toString(16), a[3] < 16 ? '0'.concat(a[2].toString(16)) : a[3].toString(16));
            case '#rgb':
                return '#'.concat(Math.round(f[0] * 15).toString(16), Math.round(f[1] * 15).toString(16), Math.round(f[2] * 15).toString(16));
            case '#rgba':
                return '#'.concat(Math.round(f[0] * 15).toString(16), Math.round(f[1] * 15).toString(16), Math.round(f[2] * 15).toString(16), Math.round(f[3] * 15).toString(16));
            case 'rgb':
                return 'rgb('.concat(a[0].toString(), ', ', a[1].toString(), ', ', a[2].toString(), ')');
            case 'rgb%':
                return 'rgb('.concat((100 * f[0]).toPrecision(3), '%, ', (100 * f[1]).toPrecision(3), '%, ', (100 * f[2]).toPrecision(3), '%)');
            case 'rgba%':
                return 'rgba('.concat((100 * f[0]).toPrecision(3), '%, ', (100 * f[1]).toPrecision(3), '%, ', (100 * f[2]).toPrecision(3), '%, ', (100 * f[3]).toPrecision(3), '%)');
            case 'hsb':
            case 'hsv':
                return 'hsb('.concat((this.hsba[0] * this.maxes[constants.HSB][0]).toString(), ', ', (this.hsba[1] * this.maxes[constants.HSB][1]).toString(), ', ', (this.hsba[2] * this.maxes[constants.HSB][2]).toString(), ')');
            case 'hsb%':
            case 'hsv%':
                return 'hsb('.concat((100 * this.hsba[0]).toPrecision(3), '%, ', (100 * this.hsba[1]).toPrecision(3), '%, ', (100 * this.hsba[2]).toPrecision(3), '%)');
            case 'hsba':
            case 'hsva':
                return 'hsba('.concat((this.hsba[0] * this.maxes[constants.HSB][0]).toString(), ', ', (this.hsba[1] * this.maxes[constants.HSB][1]).toString(), ', ', (this.hsba[2] * this.maxes[constants.HSB][2]).toString(), ', ', alpha.toString(), ')');
            case 'hsba%':
            case 'hsva%':
                return 'hsba('.concat((100 * this.hsba[0]).toPrecision(3), '%, ', (100 * this.hsba[1]).toPrecision(3), '%, ', (100 * this.hsba[2]).toPrecision(3), '%, ', (100 * alpha).toPrecision(3), '%)');
            case 'hsl':
                return 'hsl('.concat((this.hsla[0] * this.maxes[constants.HSL][0]).toString(), ', ', (this.hsla[1] * this.maxes[constants.HSL][1]).toString(), ', ', (this.hsla[2] * this.maxes[constants.HSL][2]).toString(), ')');
            case 'hsl%':
                return 'hsl('.concat((100 * this.hsla[0]).toPrecision(3), '%, ', (100 * this.hsla[1]).toPrecision(3), '%, ', (100 * this.hsla[2]).toPrecision(3), '%)');
            case 'hsla':
                return 'hsla('.concat((this.hsla[0] * this.maxes[constants.HSL][0]).toString(), ', ', (this.hsla[1] * this.maxes[constants.HSL][1]).toString(), ', ', (this.hsla[2] * this.maxes[constants.HSL][2]).toString(), ', ', alpha.toString(), ')');
            case 'hsla%':
                return 'hsl('.concat((100 * this.hsla[0]).toPrecision(3), '%, ', (100 * this.hsla[1]).toPrecision(3), '%, ', (100 * this.hsla[2]).toPrecision(3), '%, ', (100 * alpha).toPrecision(3), '%)');
            case 'name':
                var rrggbb = this.toString('#rrggbb');
                for (var key in _namedColors__WEBPACK_IMPORTED_MODULE_2__.namedColors) {
                    if (_namedColors__WEBPACK_IMPORTED_MODULE_2__.namedColors[key] === rrggbb) {
                        return key;
                    }
                }
            case 'rgba':
            default:
                return 'rgba(' + a[0] + ',' + a[1] + ',' + a[2] + ',' + alpha + ')';
        }
    };
    CGColor.Lerp = function (c1, c2, amt) {
        var mode = c1.mode;
        var maxes = c1.maxes;
        var l0, l1, l2, l3;
        var fromArray, toArray;
        if (mode === 'rgb') {
            fromArray = c1.levels.map(function (level) {
                return level / 255;
            });
            toArray = c2.levels.map(function (level) {
                return level / 255;
            });
        }
        else if (mode === 'hsb') {
            c1.hsba = _ColorConversion__WEBPACK_IMPORTED_MODULE_1__.ColorConversion.RgbaToHSBA(c1._array);
            c2.hsba = _ColorConversion__WEBPACK_IMPORTED_MODULE_1__.ColorConversion.RgbaToHSBA(c2._array);
            //c1.getBrightness(); // Cache hsba so it definitely exists.
            //c2.getBrightness();
            fromArray = c1.hsba;
            toArray = c2.hsba;
        }
        else if (mode === 'hsl') {
            c1.hsla = _ColorConversion__WEBPACK_IMPORTED_MODULE_1__.ColorConversion.RgbaToHSLA(c1._array);
            c2.hsla = _ColorConversion__WEBPACK_IMPORTED_MODULE_1__.ColorConversion.RgbaToHSLA(c2._array);
            //c1.getLightness(); // Cache hsla so it definitely exists.
            //c2.getLightness();
            fromArray = c1.hsla;
            toArray = c2.hsla;
        }
        else {
            throw new Error(mode + 'cannot be used for interpolation.');
        }
        // Prevent extrapolation.
        amt = Math.max(Math.min(amt, 1), 0);
        // Perform interpolation.
        l0 = (0,_tuval_core__WEBPACK_IMPORTED_MODULE_0__.lerp)(fromArray[0], toArray[0], amt);
        l1 = (0,_tuval_core__WEBPACK_IMPORTED_MODULE_0__.lerp)(fromArray[1], toArray[1], amt);
        l2 = (0,_tuval_core__WEBPACK_IMPORTED_MODULE_0__.lerp)(fromArray[2], toArray[2], amt);
        l3 = (0,_tuval_core__WEBPACK_IMPORTED_MODULE_0__.lerp)(fromArray[3], toArray[3], amt);
        // Scale components.
        l0 *= maxes[mode][0];
        l1 *= maxes[mode][1];
        l2 *= maxes[mode][2];
        l3 *= maxes[mode][3];
        return new CGColor_1(Math.round(l0), Math.round(l1), Math.round(l2), Math.round(l3));
    };
    var CGColor_1;
    CGColor = CGColor_1 = __decorate([
        (0,_tuval_core__WEBPACK_IMPORTED_MODULE_0__.ClassInfo)({
            fullName: _types__WEBPACK_IMPORTED_MODULE_7__.CoreGraphicTypes.CGColor,
            instanceof: [
                _types__WEBPACK_IMPORTED_MODULE_7__.CoreGraphicTypes.CGColor
            ]
        })
    ], CGColor);
    return CGColor;
}());



/***/ }),

/***/ "./src/CGColor/ColorConversion.ts":
/*!****************************************!*\
  !*** ./src/CGColor/ColorConversion.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ColorConversion": () => (/* binding */ ColorConversion)
/* harmony export */ });
var ColorConversion = /** @class */ (function () {
    function ColorConversion() {
    }
    ColorConversion.HsbaToHSLA = function (hsba) {
        var hue = hsba[0];
        var sat = hsba[1];
        var val = hsba[2];
        // Calculate lightness.
        var li = (2 - sat) * val / 2;
        // Convert saturation.
        if (li !== 0) {
            if (li === 1) {
                sat = 0;
            }
            else if (li < 0.5) {
                sat = sat / (2 - sat);
            }
            else {
                sat = sat * val / (2 - li * 2);
            }
        }
        // Hue and alpha stay the same.
        return [hue, sat, li, hsba[3]];
    };
    ColorConversion.HsbaToRGBA = function (hsba) {
        var hue = hsba[0] * 6; // We will split hue into 6 sectors.
        var sat = hsba[1];
        var val = hsba[2];
        var RGBA = [];
        if (sat === 0) {
            RGBA = [val, val, val, hsba[3]]; // Return early if grayscale.
        }
        else {
            var sector = Math.floor(hue);
            var tint1 = val * (1 - sat);
            var tint2 = val * (1 - sat * (hue - sector));
            var tint3 = val * (1 - sat * (1 + sector - hue));
            var red = void 0, green = void 0, blue = void 0;
            if (sector === 1) {
                // Yellow to green.
                red = tint2;
                green = val;
                blue = tint1;
            }
            else if (sector === 2) {
                // Green to cyan.
                red = tint1;
                green = val;
                blue = tint3;
            }
            else if (sector === 3) {
                // Cyan to blue.
                red = tint1;
                green = tint2;
                blue = val;
            }
            else if (sector === 4) {
                // Blue to magenta.
                red = tint3;
                green = tint1;
                blue = val;
            }
            else if (sector === 5) {
                // Magenta to red.
                red = val;
                green = tint1;
                blue = tint2;
            }
            else {
                // Red to yellow (sector could be 0 or 6).
                red = val;
                green = tint3;
                blue = tint1;
            }
            RGBA = [red, green, blue, hsba[3]];
        }
        return RGBA;
    };
    ColorConversion.HslaToHSBA = function (hsla) {
        var hue = hsla[0];
        var sat = hsla[1];
        var li = hsla[2];
        // Calculate brightness.
        var val;
        if (li < 0.5) {
            val = (1 + sat) * li;
        }
        else {
            val = li + sat - li * sat;
        }
        // Convert saturation.
        sat = 2 * (val - li) / val;
        // Hue and alpha stay the same.
        return [hue, sat, val, hsla[3]];
    };
    ColorConversion.HslaToRGBA = function (hsla) {
        var hue = hsla[0] * 6; // We will split hue into 6 sectors.
        var sat = hsla[1];
        var li = hsla[2];
        var RGBA = [];
        if (sat === 0) {
            RGBA = [li, li, li, hsla[3]]; // Return early if grayscale.
        }
        else {
            // Calculate brightness.
            var val = void 0;
            if (li < 0.5) {
                val = (1 + sat) * li;
            }
            else {
                val = li + sat - li * sat;
            }
            // Define zest.
            var zest = 2 * li - val;
            // Implement projection (project onto green by default).
            var hzvToRGB = function (hue, zest, val) {
                if (hue < 0) {
                    // Hue must wrap to allow projection onto red and blue.
                    hue += 6;
                }
                else if (hue >= 6) {
                    hue -= 6;
                }
                if (hue < 1) {
                    // Red to yellow (increasing green).
                    return zest + (val - zest) * hue;
                }
                else if (hue < 3) {
                    // Yellow to cyan (greatest green).
                    return val;
                }
                else if (hue < 4) {
                    // Cyan to blue (decreasing green).
                    return zest + (val - zest) * (4 - hue);
                }
                else {
                    // Blue to red (least green).
                    return zest;
                }
            };
            // Perform projections, offsetting hue as necessary.
            RGBA = [
                hzvToRGB(hue + 2, zest, val),
                hzvToRGB(hue, zest, val),
                hzvToRGB(hue - 2, zest, val),
                hsla[3]
            ];
        }
        return RGBA;
    };
    ColorConversion.RgbaToHSBA = function (rgba) {
        var red = rgba[0];
        var green = rgba[1];
        var blue = rgba[2];
        var val = Math.max(red, green, blue);
        var chroma = val - Math.min(red, green, blue);
        var hue = 0, sat = 0;
        if (chroma === 0) {
            // Return early if grayscale.
            hue = 0;
            sat = 0;
        }
        else {
            sat = chroma / val;
            if (red === val) {
                // Magenta to yellow.
                hue = (green - blue) / chroma;
            }
            else if (green === val) {
                // Yellow to cyan.
                hue = 2 + (blue - red) / chroma;
            }
            else if (blue === val) {
                // Cyan to magenta.
                hue = 4 + (red - green) / chroma;
            }
            if (hue < 0) {
                // Confine hue to the interval [0, 1).
                hue += 6;
            }
            else if (hue >= 6) {
                hue -= 6;
            }
        }
        return [hue / 6, sat, val, rgba[3]];
    };
    ColorConversion.RgbaToHSLA = function (rgba) {
        var red = rgba[0];
        var green = rgba[1];
        var blue = rgba[2];
        var val = Math.max(red, green, blue);
        var min = Math.min(red, green, blue);
        var li = val + min; // We will halve this later.
        var chroma = val - min;
        var hue = 0, sat = 0;
        if (chroma === 0) {
            // Return early if grayscale.
            hue = 0;
            sat = 0;
        }
        else {
            if (li < 1) {
                sat = chroma / li;
            }
            else {
                sat = chroma / (2 - li);
            }
            if (red === val) {
                // Magenta to yellow.
                hue = (green - blue) / chroma;
            }
            else if (green === val) {
                // Yellow to cyan.
                hue = 2 + (blue - red) / chroma;
            }
            else if (blue === val) {
                // Cyan to magenta.
                hue = 4 + (red - green) / chroma;
            }
            if (hue < 0) {
                // Confine hue to the interval [0, 1).
                hue += 6;
            }
            else if (hue >= 6) {
                hue -= 6;
            }
        }
        return [hue / 6, sat, li / 2, rgba[3]];
    };
    return ColorConversion;
}());



/***/ }),

/***/ "./src/CGColor/KnownColor.ts":
/*!***********************************!*\
  !*** ./src/CGColor/KnownColor.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KnownColor": () => (/* binding */ KnownColor)
/* harmony export */ });
var KnownColor;
(function (KnownColor) {
    KnownColor[KnownColor["ActiveBorder"] = 1] = "ActiveBorder";
    KnownColor[KnownColor["ActiveCaption"] = 2] = "ActiveCaption";
    KnownColor[KnownColor["ActiveCaptionText"] = 3] = "ActiveCaptionText";
    KnownColor[KnownColor["AppWorkspace"] = 4] = "AppWorkspace";
    KnownColor[KnownColor["Control"] = 5] = "Control";
    KnownColor[KnownColor["ControlDark"] = 6] = "ControlDark";
    KnownColor[KnownColor["ControlDarkDark"] = 7] = "ControlDarkDark";
    KnownColor[KnownColor["ControlLight"] = 8] = "ControlLight";
    KnownColor[KnownColor["ControlLightLight"] = 9] = "ControlLightLight";
    KnownColor[KnownColor["ControlText"] = 10] = "ControlText";
    KnownColor[KnownColor["Desktop"] = 11] = "Desktop";
    KnownColor[KnownColor["GrayText"] = 12] = "GrayText";
    KnownColor[KnownColor["Highlight"] = 13] = "Highlight";
    KnownColor[KnownColor["HighlightText"] = 14] = "HighlightText";
    KnownColor[KnownColor["HotTrack"] = 15] = "HotTrack";
    KnownColor[KnownColor["InactiveBorder"] = 16] = "InactiveBorder";
    KnownColor[KnownColor["InactiveCaption"] = 17] = "InactiveCaption";
    KnownColor[KnownColor["InactiveCaptionText"] = 18] = "InactiveCaptionText";
    KnownColor[KnownColor["Info"] = 19] = "Info";
    KnownColor[KnownColor["InfoText"] = 20] = "InfoText";
    KnownColor[KnownColor["Menu"] = 21] = "Menu";
    KnownColor[KnownColor["MenuText"] = 22] = "MenuText";
    KnownColor[KnownColor["ScrollBar"] = 23] = "ScrollBar";
    KnownColor[KnownColor["Window"] = 24] = "Window";
    KnownColor[KnownColor["WindowFrame"] = 25] = "WindowFrame";
    KnownColor[KnownColor["WindowText"] = 26] = "WindowText";
    KnownColor[KnownColor["Transparent"] = 27] = "Transparent";
    KnownColor[KnownColor["AliceBlue"] = 28] = "AliceBlue";
    KnownColor[KnownColor["AntiqueWhite"] = 29] = "AntiqueWhite";
    KnownColor[KnownColor["Aqua"] = 30] = "Aqua";
    KnownColor[KnownColor["Aquamarine"] = 31] = "Aquamarine";
    KnownColor[KnownColor["Azure"] = 32] = "Azure";
    KnownColor[KnownColor["Beige"] = 33] = "Beige";
    KnownColor[KnownColor["Bisque"] = 34] = "Bisque";
    KnownColor[KnownColor["Black"] = 35] = "Black";
    KnownColor[KnownColor["BlanchedAlmond"] = 36] = "BlanchedAlmond";
    KnownColor[KnownColor["Blue"] = 37] = "Blue";
    KnownColor[KnownColor["BlueViolet"] = 38] = "BlueViolet";
    KnownColor[KnownColor["Brown"] = 39] = "Brown";
    KnownColor[KnownColor["BurlyWood"] = 40] = "BurlyWood";
    KnownColor[KnownColor["CadetBlue"] = 41] = "CadetBlue";
    KnownColor[KnownColor["Chartreuse"] = 42] = "Chartreuse";
    KnownColor[KnownColor["Chocolate"] = 43] = "Chocolate";
    KnownColor[KnownColor["Coral"] = 44] = "Coral";
    KnownColor[KnownColor["CornflowerBlue"] = 45] = "CornflowerBlue";
    KnownColor[KnownColor["Cornsilk"] = 46] = "Cornsilk";
    KnownColor[KnownColor["Crimson"] = 47] = "Crimson";
    KnownColor[KnownColor["Cyan"] = 48] = "Cyan";
    KnownColor[KnownColor["DarkBlue"] = 49] = "DarkBlue";
    KnownColor[KnownColor["DarkCyan"] = 50] = "DarkCyan";
    KnownColor[KnownColor["DarkGoldenrod"] = 51] = "DarkGoldenrod";
    KnownColor[KnownColor["DarkGray"] = 52] = "DarkGray";
    KnownColor[KnownColor["DarkGreen"] = 53] = "DarkGreen";
    KnownColor[KnownColor["DarkKhaki"] = 54] = "DarkKhaki";
    KnownColor[KnownColor["DarkMagenta"] = 55] = "DarkMagenta";
    KnownColor[KnownColor["DarkOliveGreen"] = 56] = "DarkOliveGreen";
    KnownColor[KnownColor["DarkOrange"] = 57] = "DarkOrange";
    KnownColor[KnownColor["DarkOrchid"] = 58] = "DarkOrchid";
    KnownColor[KnownColor["DarkRed"] = 59] = "DarkRed";
    KnownColor[KnownColor["DarkSalmon"] = 60] = "DarkSalmon";
    KnownColor[KnownColor["DarkSeaGreen"] = 61] = "DarkSeaGreen";
    KnownColor[KnownColor["DarkSlateBlue"] = 62] = "DarkSlateBlue";
    KnownColor[KnownColor["DarkSlateGray"] = 63] = "DarkSlateGray";
    KnownColor[KnownColor["DarkTurquoise"] = 64] = "DarkTurquoise";
    KnownColor[KnownColor["DarkViolet"] = 65] = "DarkViolet";
    KnownColor[KnownColor["DeepPink"] = 66] = "DeepPink";
    KnownColor[KnownColor["DeepSkyBlue"] = 67] = "DeepSkyBlue";
    KnownColor[KnownColor["DimGray"] = 68] = "DimGray";
    KnownColor[KnownColor["DodgerBlue"] = 69] = "DodgerBlue";
    KnownColor[KnownColor["Firebrick"] = 70] = "Firebrick";
    KnownColor[KnownColor["FloralWhite"] = 71] = "FloralWhite";
    KnownColor[KnownColor["ForestGreen"] = 72] = "ForestGreen";
    KnownColor[KnownColor["Fuchsia"] = 73] = "Fuchsia";
    KnownColor[KnownColor["Gainsboro"] = 74] = "Gainsboro";
    KnownColor[KnownColor["GhostWhite"] = 75] = "GhostWhite";
    KnownColor[KnownColor["Gold"] = 76] = "Gold";
    KnownColor[KnownColor["Goldenrod"] = 77] = "Goldenrod";
    KnownColor[KnownColor["Gray"] = 78] = "Gray";
    KnownColor[KnownColor["Green"] = 79] = "Green";
    KnownColor[KnownColor["GreenYellow"] = 80] = "GreenYellow";
    KnownColor[KnownColor["Honeydew"] = 81] = "Honeydew";
    KnownColor[KnownColor["HotPink"] = 82] = "HotPink";
    KnownColor[KnownColor["IndianRed"] = 83] = "IndianRed";
    KnownColor[KnownColor["Indigo"] = 84] = "Indigo";
    KnownColor[KnownColor["Ivory"] = 85] = "Ivory";
    KnownColor[KnownColor["Khaki"] = 86] = "Khaki";
    KnownColor[KnownColor["Lavender"] = 87] = "Lavender";
    KnownColor[KnownColor["LavenderBlush"] = 88] = "LavenderBlush";
    KnownColor[KnownColor["LawnGreen"] = 89] = "LawnGreen";
    KnownColor[KnownColor["LemonChiffon"] = 90] = "LemonChiffon";
    KnownColor[KnownColor["LightBlue"] = 91] = "LightBlue";
    KnownColor[KnownColor["LightCoral"] = 92] = "LightCoral";
    KnownColor[KnownColor["LightCyan"] = 93] = "LightCyan";
    KnownColor[KnownColor["LightGoldenrodYellow"] = 94] = "LightGoldenrodYellow";
    KnownColor[KnownColor["LightGray"] = 95] = "LightGray";
    KnownColor[KnownColor["LightGreen"] = 96] = "LightGreen";
    KnownColor[KnownColor["LightPink"] = 97] = "LightPink";
    KnownColor[KnownColor["LightSalmon"] = 98] = "LightSalmon";
    KnownColor[KnownColor["LightSeaGreen"] = 99] = "LightSeaGreen";
    KnownColor[KnownColor["LightSkyBlue"] = 100] = "LightSkyBlue";
    KnownColor[KnownColor["LightSlateGray"] = 101] = "LightSlateGray";
    KnownColor[KnownColor["LightSteelBlue"] = 102] = "LightSteelBlue";
    KnownColor[KnownColor["LightYellow"] = 103] = "LightYellow";
    KnownColor[KnownColor["Lime"] = 104] = "Lime";
    KnownColor[KnownColor["LimeGreen"] = 105] = "LimeGreen";
    KnownColor[KnownColor["Linen"] = 106] = "Linen";
    KnownColor[KnownColor["Magenta"] = 107] = "Magenta";
    KnownColor[KnownColor["Maroon"] = 108] = "Maroon";
    KnownColor[KnownColor["MediumAquamarine"] = 109] = "MediumAquamarine";
    KnownColor[KnownColor["MediumBlue"] = 110] = "MediumBlue";
    KnownColor[KnownColor["MediumOrchid"] = 111] = "MediumOrchid";
    KnownColor[KnownColor["MediumPurple"] = 112] = "MediumPurple";
    KnownColor[KnownColor["MediumSeaGreen"] = 113] = "MediumSeaGreen";
    KnownColor[KnownColor["MediumSlateBlue"] = 114] = "MediumSlateBlue";
    KnownColor[KnownColor["MediumSpringGreen"] = 115] = "MediumSpringGreen";
    KnownColor[KnownColor["MediumTurquoise"] = 116] = "MediumTurquoise";
    KnownColor[KnownColor["MediumVioletRed"] = 117] = "MediumVioletRed";
    KnownColor[KnownColor["MidnightBlue"] = 118] = "MidnightBlue";
    KnownColor[KnownColor["MintCream"] = 119] = "MintCream";
    KnownColor[KnownColor["MistyRose"] = 120] = "MistyRose";
    KnownColor[KnownColor["Moccasin"] = 121] = "Moccasin";
    KnownColor[KnownColor["NavajoWhite"] = 122] = "NavajoWhite";
    KnownColor[KnownColor["Navy"] = 123] = "Navy";
    KnownColor[KnownColor["OldLace"] = 124] = "OldLace";
    KnownColor[KnownColor["Olive"] = 125] = "Olive";
    KnownColor[KnownColor["OliveDrab"] = 126] = "OliveDrab";
    KnownColor[KnownColor["Orange"] = 127] = "Orange";
    KnownColor[KnownColor["OrangeRed"] = 128] = "OrangeRed";
    KnownColor[KnownColor["Orchid"] = 129] = "Orchid";
    KnownColor[KnownColor["PaleGoldenrod"] = 130] = "PaleGoldenrod";
    KnownColor[KnownColor["PaleGreen"] = 131] = "PaleGreen";
    KnownColor[KnownColor["PaleTurquoise"] = 132] = "PaleTurquoise";
    KnownColor[KnownColor["PaleVioletRed"] = 133] = "PaleVioletRed";
    KnownColor[KnownColor["PapayaWhip"] = 134] = "PapayaWhip";
    KnownColor[KnownColor["PeachPuff"] = 135] = "PeachPuff";
    KnownColor[KnownColor["Peru"] = 136] = "Peru";
    KnownColor[KnownColor["Pink"] = 137] = "Pink";
    KnownColor[KnownColor["Plum"] = 138] = "Plum";
    KnownColor[KnownColor["PowderBlue"] = 139] = "PowderBlue";
    KnownColor[KnownColor["Purple"] = 140] = "Purple";
    KnownColor[KnownColor["Red"] = 141] = "Red";
    KnownColor[KnownColor["RosyBrown"] = 142] = "RosyBrown";
    KnownColor[KnownColor["RoyalBlue"] = 143] = "RoyalBlue";
    KnownColor[KnownColor["SaddleBrown"] = 144] = "SaddleBrown";
    KnownColor[KnownColor["Salmon"] = 145] = "Salmon";
    KnownColor[KnownColor["SandyBrown"] = 146] = "SandyBrown";
    KnownColor[KnownColor["SeaGreen"] = 147] = "SeaGreen";
    KnownColor[KnownColor["SeaShell"] = 148] = "SeaShell";
    KnownColor[KnownColor["Sienna"] = 149] = "Sienna";
    KnownColor[KnownColor["Silver"] = 150] = "Silver";
    KnownColor[KnownColor["SkyBlue"] = 151] = "SkyBlue";
    KnownColor[KnownColor["SlateBlue"] = 152] = "SlateBlue";
    KnownColor[KnownColor["SlateGray"] = 153] = "SlateGray";
    KnownColor[KnownColor["Snow"] = 154] = "Snow";
    KnownColor[KnownColor["SpringGreen"] = 155] = "SpringGreen";
    KnownColor[KnownColor["SteelBlue"] = 156] = "SteelBlue";
    KnownColor[KnownColor["Tan"] = 157] = "Tan";
    KnownColor[KnownColor["Teal"] = 158] = "Teal";
    KnownColor[KnownColor["Thistle"] = 159] = "Thistle";
    KnownColor[KnownColor["Tomato"] = 160] = "Tomato";
    KnownColor[KnownColor["Turquoise"] = 161] = "Turquoise";
    KnownColor[KnownColor["Violet"] = 162] = "Violet";
    KnownColor[KnownColor["Wheat"] = 163] = "Wheat";
    KnownColor[KnownColor["White"] = 164] = "White";
    KnownColor[KnownColor["WhiteSmoke"] = 165] = "WhiteSmoke";
    KnownColor[KnownColor["Yellow"] = 166] = "Yellow";
    KnownColor[KnownColor["YellowGreen"] = 167] = "YellowGreen";
    KnownColor[KnownColor["ButtonFace"] = 168] = "ButtonFace";
    KnownColor[KnownColor["ButtonHighlight"] = 169] = "ButtonHighlight";
    KnownColor[KnownColor["ButtonShadow"] = 170] = "ButtonShadow";
    KnownColor[KnownColor["GradientActiveCaption"] = 171] = "GradientActiveCaption";
    KnownColor[KnownColor["GradientInactiveCaption"] = 172] = "GradientInactiveCaption";
    KnownColor[KnownColor["MenuBar"] = 173] = "MenuBar";
    KnownColor[KnownColor["MenuHighlight"] = 174] = "MenuHighlight";
})(KnownColor || (KnownColor = {}));


/***/ }),

/***/ "./src/CGColor/KnownColors.ts":
/*!************************************!*\
  !*** ./src/CGColor/KnownColors.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KnownColors": () => (/* binding */ KnownColors)
/* harmony export */ });
/* harmony import */ var _CGColor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CGColor */ "./src/CGColor/CGColor.ts");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_1__);


var KnownColors = /** @class */ (function () {
    function KnownColors() {
    }
    Object.defineProperty(KnownColors, "ArgbByName", {
        get: function () {
            if (KnownColors.argbByName == null) {
                KnownColors.argbByName = new _tuval_core__WEBPACK_IMPORTED_MODULE_1__.SimpleDictionary();
                for (var i = 0; i < KnownColors.RgbaValues.length; ++i)
                    KnownColors.argbByName.set(KnownColors.Names[i], KnownColors.RgbaValues[i]);
            }
            return KnownColors.argbByName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(KnownColors, "NameByArgb", {
        get: function () {
            if (KnownColors.nameByArgb == null) {
                KnownColors.nameByArgb = new _tuval_core__WEBPACK_IMPORTED_MODULE_1__.SimpleDictionary();
                for (var i = 0; i < KnownColors.Names.length; ++i)
                    KnownColors.nameByArgb.set(KnownColors.RgbaValues[i], KnownColors.Names[i]);
            }
            return KnownColors.nameByArgb;
        },
        enumerable: false,
        configurable: true
    });
    KnownColors.FromKnownColor = function (kc) {
        var c;
        var n = kc;
        if ((n <= 0) || (n >= KnownColors.RgbaValues.length))
            c = _CGColor__WEBPACK_IMPORTED_MODULE_0__.CGColor.FromRgba(0, 0, 0, 0);
        else
            c = _CGColor__WEBPACK_IMPORTED_MODULE_0__.CGColor.FromRgba(KnownColors.RgbaValues[n][0], KnownColors.RgbaValues[n][1], KnownColors.RgbaValues[n][2]);
        return c;
    };
    KnownColors.GetName = function (kc) {
        if (kc > 0 && kc < KnownColors.Names.length)
            return KnownColors.Names[kc];
        return '';
    };
    KnownColors.FindColorMatch = function (c) {
        var argb = c.toRgba();
        for (var i = 0; i < KnownColors.RgbaValues.length; i++) {
            if (argb[1] === KnownColors.RgbaValues[i][1] && argb[2] === KnownColors.RgbaValues[i][2] && argb[3] === KnownColors.RgbaValues[i][3])
                return KnownColors.FromKnownColor(i);
        }
        return _CGColor__WEBPACK_IMPORTED_MODULE_0__.CGColor.Empty;
    };
    KnownColors.Update = function (knownColor, color) {
        KnownColors.RgbaValues[knownColor] = color;
    };
    KnownColors.RgbaValues = [
        [0x00, 0x00, 0x00, 0x00],
        [0xD4, 0xD0, 0xC8, 0xFF],
        [0x00, 0x54, 0xE3, 0xFF],
        [0xFF, 0xFF, 0xFF, 0xFF],
        [0x80, 0x80, 0x80, 0xFF],
        [0xEC, 0xE9, 0xD8, 0xFF],
        [0xAC, 0xA8, 0x99, 0xFF],
        [0x71, 0x6F, 0x64, 0xFF],
        [0xF1, 0xEF, 0xE2, 0xFF],
        [0xFF, 0xFF, 0xFF, 0xFF],
        [0x00, 0x00, 0x00, 0xFF],
        [0x00, 0x4E, 0x98, 0xFF],
        [0xAC, 0xA8, 0x99, 0xFF],
        [0x31, 0x6A, 0xC5, 0xFF],
        [0xFF, 0xFF, 0xFF, 0xFF],
        [0x00, 0x00, 0x80, 0xFF],
        [0xD4, 0xD0, 0xC8, 0xFF],
        [0x7A, 0x96, 0xDF, 0xFF],
        [0xD8, 0xE4, 0xF8, 0xFF],
        [0xFF, 0xFF, 0xE1, 0xFF],
        [0x00, 0x00, 0x00, 0xFF],
        [0xFF, 0xFF, 0xFF, 0xFF],
        [0x00, 0x00, 0x00, 0xFF],
        [0xD4, 0xD0, 0xC8, 0xFF],
        [0xFF, 0xFF, 0xFF, 0xFF],
        [0x00, 0x00, 0x00, 0xFF],
        [0x00, 0x00, 0x00, 0xFF],
        [0x00, 0xFF, 0xFF, 0xFF],
        [0xF0, 0xF8, 0xFF, 0xFF],
        [0xFA, 0xEB, 0xD7, 0xFF],
        [0x00, 0xFF, 0xFF, 0xFF],
        [0x7F, 0xFF, 0xD4, 0xFF],
        [0xF0, 0xFF, 0xFF, 0xFF],
        [0xF5, 0xF5, 0xDC, 0xFF],
        [0xFF, 0xE4, 0xC4, 0xFF],
        [0x00, 0x00, 0x00, 0xFF],
        [0xFF, 0xEB, 0xCD, 0xFF],
        [0x00, 0x00, 0xFF, 0xFF],
        [0x8A, 0x2B, 0xE2, 0xFF],
        [0xA5, 0x2A, 0x2A, 0xFF],
        [0xDE, 0xB8, 0x87, 0xFF],
        [0x5F, 0x9E, 0xA0, 0xFF],
        [0x7F, 0xFF, 0x00, 0xFF],
        [0xD2, 0x69, 0x1E, 0xFF],
        [0xFF, 0x7F, 0x50, 0xFF],
        [0x64, 0x95, 0xED, 0xFF],
        [0xFF, 0xF8, 0xDC, 0xFF],
        [0xDC, 0x14, 0x3C, 0xFF],
        [0x00, 0xFF, 0xFF, 0xFF],
        [0x00, 0x00, 0x8B, 0xFF],
        [0x00, 0x8B, 0x8B, 0xFF],
        [0xB8, 0x86, 0x0B, 0xFF],
        [0xA9, 0xA9, 0xA9, 0xFF],
        [0x00, 0x64, 0x00, 0xFF],
        [0xBD, 0xB7, 0x6B, 0xFF],
        [0x8B, 0x00, 0x8B, 0xFF],
        [0x55, 0x6B, 0x2F, 0xFF],
        [0xFF, 0x8C, 0x00, 0xFF],
        [0x99, 0x32, 0xCC, 0xFF],
        [0x8B, 0x00, 0x00, 0xFF],
        [0xE9, 0x96, 0x7A, 0xFF],
        [0x8F, 0xBC, 0x8B, 0xFF],
        [0x48, 0x3D, 0x8B, 0xFF],
        [0x2F, 0x4F, 0x4F, 0xFF],
        [0x00, 0xCE, 0xD1, 0xFF],
        [0x94, 0x00, 0xD3, 0xFF],
        [0xFF, 0x14, 0x93, 0xFF],
        [0x00, 0xBF, 0xFF, 0xFF],
        [0x69, 0x69, 0x69, 0xFF],
        [0x1E, 0x90, 0xFF, 0xFF],
        [0xB2, 0x22, 0x22, 0xFF],
        [0xFF, 0xFA, 0xF0, 0xFF],
        [0x22, 0x8B, 0x22, 0xFF],
        [0xFF, 0x00, 0xFF, 0xFF],
        [0xDC, 0xDC, 0xDC, 0xFF],
        [0xF8, 0xF8, 0xFF, 0xFF],
        [0xFF, 0xD7, 0x00, 0xFF],
        [0xDA, 0xA5, 0x20, 0xFF],
        [0x80, 0x80, 0x80, 0xFF],
        [0x00, 0x80, 0x00, 0xFF],
        [0xAD, 0xFF, 0x2F, 0xFF],
        [0xF0, 0xFF, 0xF0, 0xFF],
        [0xFF, 0x69, 0xB4, 0xFF],
        [0xCD, 0x5C, 0x5C, 0xFF],
        [0x4B, 0x00, 0x82, 0xFF],
        [0xFF, 0xFF, 0xF0, 0xFF],
        [0xF0, 0xE6, 0x8C, 0xFF],
        [0xE6, 0xE6, 0xFA, 0xFF],
        [0xFF, 0xF0, 0xF5, 0xFF],
        [0x7C, 0xFC, 0x00, 0xFF],
        [0xFF, 0xFA, 0xCD, 0xFF],
        [0xAD, 0xD8, 0xE6, 0xFF],
        [0xF0, 0x80, 0x80, 0xFF],
        [0xE0, 0xFF, 0xFF, 0xFF],
        [0xFA, 0xFA, 0xD2, 0xFF],
        [0xD3, 0xD3, 0xD3, 0xFF],
        [0x90, 0xEE, 0x90, 0xFF],
        [0xFF, 0xB6, 0xC1, 0xFF],
        [0xFF, 0xA0, 0x7A, 0xFF],
        [0x20, 0xB2, 0xAA, 0xFF],
        [0x87, 0xCE, 0xFA, 0xFF],
        [0x77, 0x88, 0x99, 0xFF],
        [0xB0, 0xC4, 0xDE, 0xFF],
        [0xFF, 0xFF, 0xE0, 0xFF],
        [0x00, 0xFF, 0x00, 0xFF],
        [0x32, 0xCD, 0x32, 0xFF],
        [0xFA, 0xF0, 0xE6, 0xFF],
        [0xFF, 0x00, 0xFF, 0xFF],
        [0x80, 0x00, 0x00, 0xFF],
        [0x66, 0xCD, 0xAA, 0xFF],
        [0x00, 0x00, 0xCD, 0xFF],
        [0xBA, 0x55, 0xD3, 0xFF],
        [0x93, 0x70, 0xDB, 0xFF],
        [0x3C, 0xB3, 0x71, 0xFF],
        [0x7B, 0x68, 0xEE, 0xFF],
        [0x00, 0xFA, 0x9A, 0xFF],
        [0x48, 0xD1, 0xCC, 0xFF],
        [0xC7, 0x15, 0x85, 0xFF],
        [0x19, 0x19, 0x70, 0xFF],
        [0xF5, 0xFF, 0xFA, 0xFF],
        [0xFF, 0xE4, 0xE1, 0xFF],
        [0xFF, 0xE4, 0xB5, 0xFF],
        [0xFF, 0xDE, 0xAD, 0xFF],
        [0x00, 0x00, 0x80, 0xFF],
        [0xFD, 0xF5, 0xE6, 0xFF],
        [0x80, 0x80, 0x00, 0xFF],
        [0x6B, 0x8E, 0x23, 0xFF],
        [0xFF, 0xA5, 0x00, 0xFF],
        [0xFF, 0x45, 0x00, 0xFF],
        [0xDA, 0x70, 0xD6, 0xFF],
        [0xEE, 0xE8, 0xAA, 0xFF],
        [0x98, 0xFB, 0x98, 0xFF],
        [0xAF, 0xEE, 0xEE, 0xFF],
        [0xDB, 0x70, 0x93, 0xFF],
        [0xFF, 0xEF, 0xD5, 0xFF],
        [0xFF, 0xDA, 0xB9, 0xFF],
        [0xCD, 0x85, 0x3F, 0xFF],
        [0xFF, 0xC0, 0xCB, 0xFF],
        [0xDD, 0xA0, 0xDD, 0xFF],
        [0xB0, 0xE0, 0xE6, 0xFF],
        [0x80, 0x00, 0x80, 0xFF],
        [0xFF, 0x00, 0x00, 0xFF],
        [0xBC, 0x8F, 0x8F, 0xFF],
        [0x41, 0x69, 0xE1, 0xFF],
        [0x8B, 0x45, 0x13, 0xFF],
        [0xFA, 0x80, 0x72, 0xFF],
        [0xF4, 0xA4, 0x60, 0xFF],
        [0x2E, 0x8B, 0x57, 0xFF],
        [0xFF, 0xF5, 0xEE, 0xFF],
        [0xA0, 0x52, 0x2D, 0xFF],
        [0xC0, 0xC0, 0xC0, 0xFF],
        [0x87, 0xCE, 0xEB, 0xFF],
        [0x6A, 0x5A, 0xCD, 0xFF],
        [0x70, 0x80, 0x90, 0xFF],
        [0xFF, 0xFA, 0xFA, 0xFF],
        [0x00, 0xFF, 0x7F, 0xFF],
        [0x46, 0x82, 0xB4, 0xFF],
        [0xD2, 0xB4, 0x8C, 0xFF],
        [0x00, 0x80, 0x80, 0xFF],
        [0xD8, 0xBF, 0xD8, 0xFF],
        [0xFF, 0x63, 0x47, 0xFF],
        [0x40, 0xE0, 0xD0, 0xFF],
        [0xEE, 0x82, 0xEE, 0xFF],
        [0xF5, 0xDE, 0xB3, 0xFF],
        [0xFF, 0xFF, 0xFF, 0xFF],
        [0xF5, 0xF5, 0xF5, 0xFF],
        [0xFF, 0xFF, 0x00, 0xFF],
        [0x9A, 0xCD, 0x32, 0xFF],
        [0xEC, 0xE9, 0xD8, 0xFF],
        [0xFF, 0xFF, 0xFF, 0xFF],
        [0xAC, 0xA8, 0x99, 0xFF],
        [0x3D, 0x95, 0xFF, 0xFF],
        [0x9D, 0xB9, 0xEB, 0xFF],
        [0xEC, 0xE9, 0xD8, 0xFF],
        [0x31, 0x6A, 0xC5, 0xFF], /* 174 - MenuHighlight */
    ];
    KnownColors.Names = [
        '',
        'ActiveBorder',
        'ActiveCaption',
        'ActiveCaptionText',
        'AppWorkspace',
        'Control',
        'ControlDark',
        'ControlDarkDark',
        'ControlLight',
        'ControlLightLight',
        'ControlText',
        'Desktop',
        'GrayText',
        'Highlight',
        'HighlightText',
        'HotTrack',
        'InactiveBorder',
        'InactiveCaption',
        'InactiveCaptionText',
        'Info',
        'InfoText',
        'Menu',
        'MenuText',
        'ScrollBar',
        'Window',
        'WindowFrame',
        'WindowText',
        'Transparent',
        'AliceBlue',
        'AntiqueWhite',
        'Aqua',
        'Aquamarine',
        'Azure',
        'Beige',
        'Bisque',
        'Black',
        'BlanchedAlmond',
        'Blue',
        'BlueViolet',
        'Brown',
        'BurlyWood',
        'CadetBlue',
        'Chartreuse',
        'Chocolate',
        'Coral',
        'CornflowerBlue',
        'Cornsilk',
        'Crimson',
        'Cyan',
        'DarkBlue',
        'DarkCyan',
        'DarkGoldenrod',
        'DarkGray',
        'DarkGreen',
        'DarkKhaki',
        'DarkMagenta',
        'DarkOliveGreen',
        'DarkOrange',
        'DarkOrchid',
        'DarkRed',
        'DarkSalmon',
        'DarkSeaGreen',
        'DarkSlateBlue',
        'DarkSlateGray',
        'DarkTurquoise',
        'DarkViolet',
        'DeepPink',
        'DeepSkyBlue',
        'DimGray',
        'DodgerBlue',
        'Firebrick',
        'FloralWhite',
        'ForestGreen',
        'Fuchsia',
        'Gainsboro',
        'GhostWhite',
        'Gold',
        'Goldenrod',
        'Gray',
        'Green',
        'GreenYellow',
        'Honeydew',
        'HotPink',
        'IndianRed',
        'Indigo',
        'Ivory',
        'Khaki',
        'Lavender',
        'LavenderBlush',
        'LawnGreen',
        'LemonChiffon',
        'LightBlue',
        'LightCoral',
        'LightCyan',
        'LightGoldenrodYellow',
        'LightGray',
        'LightGreen',
        'LightPink',
        'LightSalmon',
        'LightSeaGreen',
        'LightSkyBlue',
        'LightSlateGray',
        'LightSteelBlue',
        'LightYellow',
        'Lime',
        'LimeGreen',
        'Linen',
        'Magenta',
        'Maroon',
        'MediumAquamarine',
        'MediumBlue',
        'MediumOrchid',
        'MediumPurple',
        'MediumSeaGreen',
        'MediumSlateBlue',
        'MediumSpringGreen',
        'MediumTurquoise',
        'MediumVioletRed',
        'MidnightBlue',
        'MintCream',
        'MistyRose',
        'Moccasin',
        'NavajoWhite',
        'Navy',
        'OldLace',
        'Olive',
        'OliveDrab',
        'Orange',
        'OrangeRed',
        'Orchid',
        'PaleGoldenrod',
        'PaleGreen',
        'PaleTurquoise',
        'PaleVioletRed',
        'PapayaWhip',
        'PeachPuff',
        'Peru',
        'Pink',
        'Plum',
        'PowderBlue',
        'Purple',
        'Red',
        'RosyBrown',
        'RoyalBlue',
        'SaddleBrown',
        'Salmon',
        'SandyBrown',
        'SeaGreen',
        'SeaShell',
        'Sienna',
        'Silver',
        'SkyBlue',
        'SlateBlue',
        'SlateGray',
        'Snow',
        'SpringGreen',
        'SteelBlue',
        'Tan',
        'Teal',
        'Thistle',
        'Tomato',
        'Turquoise',
        'Violet',
        'Wheat',
        'White',
        'WhiteSmoke',
        'Yellow',
        'YellowGreen',
    ];
    KnownColors.argbByName = undefined;
    KnownColors.nameByArgb = undefined;
    return KnownColors;
}());

(function staticKnownColorsConstructor() {
    //KnownColors.Update();
    //KnownColors.WatchColorChanges();
})();


/***/ }),

/***/ "./src/CGColor/SketchColor.ts":
/*!************************************!*\
  !*** ./src/CGColor/SketchColor.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SketchColor": () => (/* binding */ SketchColor)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ColorConversion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ColorConversion */ "./src/CGColor/ColorConversion.ts");
/* harmony import */ var _CGColor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CGColor */ "./src/CGColor/CGColor.ts");



/**
 * These regular expressions are used to build up the patterns for matching
 * viable CSS color strings: fragmenting the regexes in this way increases the
 * legibility and comprehensibility of the code.
 *
 * Note that RGB values of .9 are not parsed by IE, but are supported here for
 * color string consistency.
 */
var WHITESPACE = /\s*/; // Match zero or more whitespace characters.
var INTEGER = /(\d{1,3})/; // Match integers: 79, 255, etc.
var DECIMAL = /((?:\d+(?:\.\d+)?)|(?:\.\d+))/; // Match 129.6, 79, .9, etc.
var PERCENT = new RegExp(DECIMAL.source + '%'); // Match 12.9%, 79%, .9%, etc.
/**
 * Full color string patterns. The capture groups are necessary.
 */
var colorPatterns = {
    // Match colors in format #XXX, e.g. #416.
    HEX3: /^#([a-f0-9])([a-f0-9])([a-f0-9])$/i,
    // Match colors in format #XXXX, e.g. #5123.
    HEX4: /^#([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])$/i,
    // Match colors in format #XXXXXX, e.g. #b4d455.
    HEX6: /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i,
    // Match colors in format #XXXXXXXX, e.g. #b4d45535.
    HEX8: /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i,
    // Match colors in format rgb(R, G, B), e.g. rgb(255, 0, 128).
    RGB: new RegExp([
        '^rgb\\(',
        INTEGER.source,
        ',',
        INTEGER.source,
        ',',
        INTEGER.source,
        '\\)$'
    ].join(WHITESPACE.source), 'i'),
    // Match colors in format rgb(R%, G%, B%), e.g. rgb(100%, 0%, 28.9%).
    RGB_PERCENT: new RegExp([
        '^rgb\\(',
        PERCENT.source,
        ',',
        PERCENT.source,
        ',',
        PERCENT.source,
        '\\)$'
    ].join(WHITESPACE.source), 'i'),
    // Match colors in format rgb(R, G, B, A), e.g. rgb(255, 0, 128, 0.25).
    RGBA: new RegExp([
        '^rgba\\(',
        INTEGER.source,
        ',',
        INTEGER.source,
        ',',
        INTEGER.source,
        ',',
        DECIMAL.source,
        '\\)$'
    ].join(WHITESPACE.source), 'i'),
    // Match colors in format rgb(R%, G%, B%, A), e.g. rgb(100%, 0%, 28.9%, 0.5).
    RGBA_PERCENT: new RegExp([
        '^rgba\\(',
        PERCENT.source,
        ',',
        PERCENT.source,
        ',',
        PERCENT.source,
        ',',
        DECIMAL.source,
        '\\)$'
    ].join(WHITESPACE.source), 'i'),
    // Match colors in format hsla(H, S%, L%), e.g. hsl(100, 40%, 28.9%).
    HSL: new RegExp([
        '^hsl\\(',
        INTEGER.source,
        ',',
        PERCENT.source,
        ',',
        PERCENT.source,
        '\\)$'
    ].join(WHITESPACE.source), 'i'),
    // Match colors in format hsla(H, S%, L%, A), e.g. hsla(100, 40%, 28.9%, 0.5).
    HSLA: new RegExp([
        '^hsla\\(',
        INTEGER.source,
        ',',
        PERCENT.source,
        ',',
        PERCENT.source,
        ',',
        DECIMAL.source,
        '\\)$'
    ].join(WHITESPACE.source), 'i'),
    // Match colors in format hsb(H, S%, B%), e.g. hsb(100, 40%, 28.9%).
    HSB: new RegExp([
        '^hsb\\(',
        INTEGER.source,
        ',',
        PERCENT.source,
        ',',
        PERCENT.source,
        '\\)$'
    ].join(WHITESPACE.source), 'i'),
    // Match colors in format hsba(H, S%, B%, A), e.g. hsba(100, 40%, 28.9%, 0.5).
    HSBA: new RegExp([
        '^hsba\\(',
        INTEGER.source,
        ',',
        PERCENT.source,
        ',',
        PERCENT.source,
        ',',
        DECIMAL.source,
        '\\)$'
    ].join(WHITESPACE.source), 'i')
};
var namedColors = {
    aliceblue: '#f0f8ff',
    antiquewhite: '#faebd7',
    aqua: '#00ffff',
    aquamarine: '#7fffd4',
    azure: '#f0ffff',
    beige: '#f5f5dc',
    bisque: '#ffe4c4',
    black: '#000000',
    blanchedalmond: '#ffebcd',
    blue: '#0000ff',
    blueviolet: '#8a2be2',
    brown: '#a52a2a',
    burlywood: '#deb887',
    cadetblue: '#5f9ea0',
    chartreuse: '#7fff00',
    chocolate: '#d2691e',
    coral: '#ff7f50',
    cornflowerblue: '#6495ed',
    cornsilk: '#fff8dc',
    crimson: '#dc143c',
    cyan: '#00ffff',
    darkblue: '#00008b',
    darkcyan: '#008b8b',
    darkgoldenrod: '#b8860b',
    darkgray: '#a9a9a9',
    darkgreen: '#006400',
    darkgrey: '#a9a9a9',
    darkkhaki: '#bdb76b',
    darkmagenta: '#8b008b',
    darkolivegreen: '#556b2f',
    darkorange: '#ff8c00',
    darkorchid: '#9932cc',
    darkred: '#8b0000',
    darksalmon: '#e9967a',
    darkseagreen: '#8fbc8f',
    darkslateblue: '#483d8b',
    darkslategray: '#2f4f4f',
    darkslategrey: '#2f4f4f',
    darkturquoise: '#00ced1',
    darkviolet: '#9400d3',
    deeppink: '#ff1493',
    deepskyblue: '#00bfff',
    dimgray: '#696969',
    dimgrey: '#696969',
    dodgerblue: '#1e90ff',
    firebrick: '#b22222',
    floralwhite: '#fffaf0',
    forestgreen: '#228b22',
    fuchsia: '#ff00ff',
    gainsboro: '#dcdcdc',
    ghostwhite: '#f8f8ff',
    gold: '#ffd700',
    goldenrod: '#daa520',
    gray: '#808080',
    green: '#008000',
    greenyellow: '#adff2f',
    grey: '#808080',
    honeydew: '#f0fff0',
    hotpink: '#ff69b4',
    indianred: '#cd5c5c',
    indigo: '#4b0082',
    ivory: '#fffff0',
    khaki: '#f0e68c',
    lavender: '#e6e6fa',
    lavenderblush: '#fff0f5',
    lawngreen: '#7cfc00',
    lemonchiffon: '#fffacd',
    lightblue: '#add8e6',
    lightcoral: '#f08080',
    lightcyan: '#e0ffff',
    lightgoldenrodyellow: '#fafad2',
    lightgray: '#d3d3d3',
    lightgreen: '#90ee90',
    lightgrey: '#d3d3d3',
    lightpink: '#ffb6c1',
    lightsalmon: '#ffa07a',
    lightseagreen: '#20b2aa',
    lightskyblue: '#87cefa',
    lightslategray: '#778899',
    lightslategrey: '#778899',
    lightsteelblue: '#b0c4de',
    lightyellow: '#ffffe0',
    lime: '#00ff00',
    limegreen: '#32cd32',
    linen: '#faf0e6',
    magenta: '#ff00ff',
    maroon: '#800000',
    mediumaquamarine: '#66cdaa',
    mediumblue: '#0000cd',
    mediumorchid: '#ba55d3',
    mediumpurple: '#9370db',
    mediumseagreen: '#3cb371',
    mediumslateblue: '#7b68ee',
    mediumspringgreen: '#00fa9a',
    mediumturquoise: '#48d1cc',
    mediumvioletred: '#c71585',
    midnightblue: '#191970',
    mintcream: '#f5fffa',
    mistyrose: '#ffe4e1',
    moccasin: '#ffe4b5',
    navajowhite: '#ffdead',
    navy: '#000080',
    oldlace: '#fdf5e6',
    olive: '#808000',
    olivedrab: '#6b8e23',
    orange: '#ffa500',
    orangered: '#ff4500',
    orchid: '#da70d6',
    palegoldenrod: '#eee8aa',
    palegreen: '#98fb98',
    paleturquoise: '#afeeee',
    palevioletred: '#db7093',
    papayawhip: '#ffefd5',
    peachpuff: '#ffdab9',
    peru: '#cd853f',
    pink: '#ffc0cb',
    plum: '#dda0dd',
    powderblue: '#b0e0e6',
    purple: '#800080',
    red: '#ff0000',
    rosybrown: '#bc8f8f',
    royalblue: '#4169e1',
    saddlebrown: '#8b4513',
    salmon: '#fa8072',
    sandybrown: '#f4a460',
    seagreen: '#2e8b57',
    seashell: '#fff5ee',
    sienna: '#a0522d',
    silver: '#c0c0c0',
    skyblue: '#87ceeb',
    slateblue: '#6a5acd',
    slategray: '#708090',
    slategrey: '#708090',
    snow: '#fffafa',
    springgreen: '#00ff7f',
    steelblue: '#4682b4',
    tan: '#d2b48c',
    teal: '#008080',
    thistle: '#d8bfd8',
    tomato: '#ff6347',
    turquoise: '#40e0d0',
    violet: '#ee82ee',
    wheat: '#f5deb3',
    white: '#ffffff',
    whitesmoke: '#f5f5f5',
    yellow: '#ffff00',
    yellowgreen: '#9acd32'
};
/* @ClassInfo({
    fullName: GraphicTypes.SketchColor,
    instanceof: [
        GraphicTypes.SketchColor
    ]
}) */
var SketchColor = /** @class */ (function () {
    function SketchColor() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.mode = 'RGB';
        // this._pInst = args[0];
        // Record color mode and maxes at time of construction.
        /* if (args[0] != null) {
            this._storeModeAndMaxes(args[0]._colorMode, args[0]._colorMaxes);
        } else { */
        this._storeModeAndMaxes('rgb', {
            rgb: [255, 255, 255, 255],
            hsb: [360, 100, 100, 1],
            hsl: [360, 100, 100, 1]
        });
        //}
        if (args.length === 1 && (_tuval_core__WEBPACK_IMPORTED_MODULE_0__.is.number(args[0]) || _tuval_core__WEBPACK_IMPORTED_MODULE_0__.is.string(args[0]))) {
            // Calculate normalized RGBA values.
            if (this.mode !== 'rgb' &&
                this.mode !== 'hsl' &&
                this.mode !== 'hsb') {
                throw new Error(this.mode + ' is an invalid colorMode.');
            }
            else {
                this._array = SketchColor._parseInputs.call(this, args[0]);
            }
        }
        else if (args.length === 1 && _tuval_core__WEBPACK_IMPORTED_MODULE_0__.is.array(args[0])) {
            // Calculate normalized RGBA values.
            if (this.mode !== 'rgb' &&
                this.mode !== 'hsl' &&
                this.mode !== 'hsb') {
                throw new Error(this.mode + ' is an invalid colorMode.');
            }
            else {
                this._array = SketchColor._parseInputs.call(this, args[1][0], args[1][1], args[1][2], args[1][3]);
            }
        }
        else if (args.length === 2 && _tuval_core__WEBPACK_IMPORTED_MODULE_0__.is.number(args[0]) && _tuval_core__WEBPACK_IMPORTED_MODULE_0__.is.number(args[1])) {
            // Calculate normalized RGBA values.
            if (this.mode !== 'rgb' &&
                this.mode !== 'hsl' &&
                this.mode !== 'hsb') {
                throw new Error(this.mode + ' is an invalid colorMode.');
            }
            else {
                this._array = SketchColor._parseInputs.call(this, args[0], args[1]);
            }
        }
        else if (args.length === 3 && _tuval_core__WEBPACK_IMPORTED_MODULE_0__.is.number(args[0]) && _tuval_core__WEBPACK_IMPORTED_MODULE_0__.is.number(args[1]) && _tuval_core__WEBPACK_IMPORTED_MODULE_0__.is.number(args[2])) {
            // Calculate normalized RGBA values.
            if (this.mode !== 'rgb' &&
                this.mode !== 'hsl' &&
                this.mode !== 'hsb') {
                throw new Error(this.mode + ' is an invalid colorMode.');
            }
            else {
                this._array = SketchColor._parseInputs.call(this, args[0], args[1], args[2]);
            }
        }
        else if (args.length === 4 && _tuval_core__WEBPACK_IMPORTED_MODULE_0__.is.number(args[0]) && _tuval_core__WEBPACK_IMPORTED_MODULE_0__.is.number(args[1]) && _tuval_core__WEBPACK_IMPORTED_MODULE_0__.is.number(args[2]) && _tuval_core__WEBPACK_IMPORTED_MODULE_0__.is.number(args[3])) {
            // Calculate normalized RGBA values.
            if (this.mode !== 'rgb' &&
                this.mode !== 'hsl' &&
                this.mode !== 'hsb') {
                throw new Error(this.mode + ' is an invalid colorMode.');
            }
            else {
                this._array = SketchColor._parseInputs.call(this, args[0], args[1], args[2], args[3]);
            }
        }
        // Expose closest screen color.
        this._calculateLevels();
        return this;
    }
    SketchColor.prototype.toString = function (format) {
        if (!this.hsba)
            this.hsba = _ColorConversion__WEBPACK_IMPORTED_MODULE_1__.ColorConversion.RgbaToHSBA(this._array);
        if (!this.hsla)
            this.hsla = _ColorConversion__WEBPACK_IMPORTED_MODULE_1__.ColorConversion.RgbaToHSLA(this._array);
        var a = this.levels;
        var f = this._array;
        var alpha = f[3]; // String representation uses normalized alpha
        switch (format) {
            case '#rrggbb':
                return '#'.concat(a[0] < 16 ? '0'.concat(a[0].toString(16)) : a[0].toString(16), a[1] < 16 ? '0'.concat(a[1].toString(16)) : a[1].toString(16), a[2] < 16 ? '0'.concat(a[2].toString(16)) : a[2].toString(16));
            case '#rrggbbaa':
                return '#'.concat(a[0] < 16 ? '0'.concat(a[0].toString(16)) : a[0].toString(16), a[1] < 16 ? '0'.concat(a[1].toString(16)) : a[1].toString(16), a[2] < 16 ? '0'.concat(a[2].toString(16)) : a[2].toString(16), a[3] < 16 ? '0'.concat(a[2].toString(16)) : a[3].toString(16));
            case '#rgb':
                return '#'.concat(Math.round(f[0] * 15).toString(16), Math.round(f[1] * 15).toString(16), Math.round(f[2] * 15).toString(16));
            case '#rgba':
                return '#'.concat(Math.round(f[0] * 15).toString(16), Math.round(f[1] * 15).toString(16), Math.round(f[2] * 15).toString(16), Math.round(f[3] * 15).toString(16));
            case 'rgb':
                return 'rgb('.concat(a[0], ', ', a[1], ', ', a[2], ')');
            case 'rgb%':
                return 'rgb('.concat((100 * f[0]).toPrecision(3), '%, ', (100 * f[1]).toPrecision(3), '%, ', (100 * f[2]).toPrecision(3), '%)');
            case 'rgba%':
                return 'rgba('.concat((100 * f[0]).toPrecision(3), '%, ', (100 * f[1]).toPrecision(3), '%, ', (100 * f[2]).toPrecision(3), '%, ', (100 * f[3]).toPrecision(3), '%)');
            case 'hsb':
            case 'hsv':
                return 'hsb('.concat((this.hsba[0] * this.maxes['hsb'][0]), ', ', (this.hsba[1] * this.maxes['hsb'][1]), ', ', (this.hsba[2] * this.maxes['hsb'][2]), ')');
            case 'hsb%':
            case 'hsv%':
                return 'hsb('.concat((100 * this.hsba[0]).toPrecision(3), '%, ', (100 * this.hsba[1]).toPrecision(3), '%, ', (100 * this.hsba[2]).toPrecision(3), '%)');
            case 'hsba':
            case 'hsva':
                return 'hsba('.concat((this.hsba[0] * this.maxes['hsb'][0]), ', ', (this.hsba[1] * this.maxes['hsb'][1]), ', ', (this.hsba[2] * this.maxes['hsb'][2]), ', ', alpha, ')');
            case 'hsba%':
            case 'hsva%':
                return 'hsba('.concat((100 * this.hsba[0]).toPrecision(3), '%, ', (100 * this.hsba[1]).toPrecision(3), '%, ', (100 * this.hsba[2]).toPrecision(3), '%, ', (100 * alpha).toPrecision(3), '%)');
            case 'hsl':
                return 'hsl('.concat((this.hsla[0] * this.maxes['hsl'][0]), ', ', (this.hsla[1] * this.maxes['hsl'][1]), ', ', (this.hsla[2] * this.maxes['hsl'][2]), ')');
            case 'hsl%':
                return 'hsl('.concat((100 * this.hsla[0]).toPrecision(3), '%, ', (100 * this.hsla[1]).toPrecision(3), '%, ', (100 * this.hsla[2]).toPrecision(3), '%)');
            case 'hsla':
                return 'hsla('.concat((this.hsla[0] * this.maxes['hsl'][0]), ', ', (this.hsla[1] * this.maxes['hsl'][1]), ', ', (this.hsla[2] * this.maxes['hsl'][2]), ', ', alpha, ')');
            case 'hsla%':
                return 'hsl('.concat((100 * this.hsla[0]).toPrecision(3), '%, ', (100 * this.hsla[1]).toPrecision(3), '%, ', (100 * this.hsla[2]).toPrecision(3), '%, ', (100 * alpha).toPrecision(3), '%)');
            case 'rgba':
            default:
                return 'rgba(' + a[0] + ',' + a[1] + ',' + a[2] + ',' + alpha + ')';
        }
    };
    SketchColor.prototype.setRed = function (new_red) {
        this._array[0] = new_red / this.maxes['rgb'][0];
        this._calculateLevels();
    };
    SketchColor.prototype.setGreen = function (new_green) {
        this._array[1] = new_green / this.maxes['rgb'][1];
        this._calculateLevels();
    };
    SketchColor.prototype.setBlue = function (new_blue) {
        this._array[2] = new_blue / this.maxes['rgb'][2];
        this._calculateLevels();
    };
    SketchColor.prototype.setAlpha = function (new_alpha) {
        this._array[3] = new_alpha / this.maxes[this.mode][3];
        this._calculateLevels();
    };
    SketchColor.prototype._calculateLevels = function () {
        var array = this._array;
        // (loop backwards for performance)
        var levels = (this.levels = new Array(array.length));
        for (var i = array.length - 1; i >= 0; --i) {
            levels[i] = Math.round(array[i] * 255);
        }
    };
    SketchColor.prototype._getAlpha = function () {
        return this._array[3] * this.maxes[this.mode][3];
    };
    SketchColor.prototype._storeModeAndMaxes = function (new_mode, new_maxes) {
        this.mode = new_mode;
        this.maxes = new_maxes;
    };
    SketchColor.prototype._getMode = function () {
        return this.mode;
    };
    SketchColor.prototype._getMaxes = function () {
        return this.maxes;
    };
    SketchColor.prototype._getBlue = function () {
        return this._array[2] * this.maxes['rgb'][2];
    };
    SketchColor.prototype._getBrightness = function () {
        if (!this.hsba) {
            this.hsba = _ColorConversion__WEBPACK_IMPORTED_MODULE_1__.ColorConversion.RgbaToHSBA(this._array);
        }
        return this.hsba[2] * this.maxes['hsb'][2];
    };
    ;
    SketchColor.prototype._getGreen = function () {
        return this._array[1] * this.maxes['rgb'][1];
    };
    ;
    SketchColor.prototype._getHue = function () {
        if (this.mode === 'hsb') {
            if (!this.hsba) {
                this.hsba = _ColorConversion__WEBPACK_IMPORTED_MODULE_1__.ColorConversion.RgbaToHSBA(this._array);
            }
            return this.hsba[0] * this.maxes['hsb'][0];
        }
        else {
            if (!this.hsla) {
                this.hsla = _ColorConversion__WEBPACK_IMPORTED_MODULE_1__.ColorConversion.RgbaToHSLA(this._array);
            }
            return this.hsla[0] * this.maxes['hsl'][0];
        }
    };
    ;
    SketchColor.prototype._getLightness = function () {
        if (!this.hsla) {
            this.hsla = _ColorConversion__WEBPACK_IMPORTED_MODULE_1__.ColorConversion.RgbaToHSLA(this._array);
        }
        return this.hsla[2] * this.maxes['hsl'][2];
    };
    ;
    SketchColor.prototype._getRed = function () {
        return this._array[0] * this.maxes['rgb'][0];
    };
    ;
    SketchColor.prototype._getSaturation = function () {
        if (this.mode === 'hsb') {
            if (!this.hsba) {
                this.hsba = _ColorConversion__WEBPACK_IMPORTED_MODULE_1__.ColorConversion.RgbaToHSBA(this._array);
            }
            return this.hsba[1] * this.maxes['hsb'][1];
        }
        else {
            if (!this.hsla) {
                this.hsla = _ColorConversion__WEBPACK_IMPORTED_MODULE_1__.ColorConversion.RgbaToHSLA(this._array);
            }
            return this.hsla[1] * this.maxes['hsl'][1];
        }
    };
    SketchColor._parseInputs = function (r, g, b, a) {
        var numArgs;
        if (Array.isArray(r)) {
            numArgs = r.length;
            a = r[3];
            b = r[2];
            g = r[1];
            r = r[0];
        }
        else {
            numArgs = arguments.length;
        }
        var mode = this.mode;
        var maxes = this.maxes[mode];
        var results = [];
        var i;
        if (numArgs >= 3) {
            // Argument is a list of component values.
            results[0] = r / maxes[0];
            results[1] = g / maxes[1];
            results[2] = b / maxes[2];
            // Alpha may be undefined, so default it to 100%.
            if (typeof a === 'number') {
                results[3] = a / maxes[3];
            }
            else {
                results[3] = 1;
            }
            // Constrain components to the range [0,1].
            // (loop backwards for performance)
            for (i = results.length - 1; i >= 0; --i) {
                var result = results[i];
                if (result < 0) {
                    results[i] = 0;
                }
                else if (result > 1) {
                    results[i] = 1;
                }
            }
            // Convert to RGBA and return.
            if (mode === 'hsl') {
                return _ColorConversion__WEBPACK_IMPORTED_MODULE_1__.ColorConversion.HslaToRGBA(results);
            }
            else if (mode === 'hsb') {
                return _ColorConversion__WEBPACK_IMPORTED_MODULE_1__.ColorConversion.HsbaToRGBA(results);
            }
            else {
                return results;
            }
        }
        else if (numArgs === 1 && typeof r === 'string') {
            var str = r.trim().toLowerCase();
            // Return if string is a named colour.
            if (namedColors[str]) {
                return SketchColor._parseInputs.call(this, namedColors[str]);
            }
            // Try RGBA pattern matching.
            if (colorPatterns.HEX3.test(str)) {
                // #rgb
                results = colorPatterns.HEX3.exec(str)
                    .slice(1)
                    .map(function (color) {
                    return parseInt(color + color, 16) / 255;
                });
                results[3] = 1;
                return results;
            }
            else if (colorPatterns.HEX6.test(str)) {
                // #rrggbb
                results = colorPatterns.HEX6.exec(str)
                    .slice(1)
                    .map(function (color) {
                    return parseInt(color, 16) / 255;
                });
                results[3] = 1;
                return results;
            }
            else if (colorPatterns.HEX4.test(str)) {
                // #rgba
                results = colorPatterns.HEX4.exec(str)
                    .slice(1)
                    .map(function (color) {
                    return parseInt(color + color, 16) / 255;
                });
                return results;
            }
            else if (colorPatterns.HEX8.test(str)) {
                // #rrggbbaa
                results = colorPatterns.HEX8.exec(str)
                    .slice(1)
                    .map(function (color) {
                    return parseInt(color, 16) / 255;
                });
                return results;
            }
            else if (colorPatterns.RGB.test(str)) {
                // rgb(R,G,B)
                results = colorPatterns.RGB.exec(str)
                    .slice(1)
                    .map(function (color) {
                    return color / 255;
                });
                results[3] = 1;
                return results;
            }
            else if (colorPatterns.RGB_PERCENT.test(str)) {
                // rgb(R%,G%,B%)
                results = colorPatterns.RGB_PERCENT.exec(str)
                    .slice(1)
                    .map(function (color) {
                    return parseFloat(color) / 100;
                });
                results[3] = 1;
                return results;
            }
            else if (colorPatterns.RGBA.test(str)) {
                // rgba(R,G,B,A)
                results = colorPatterns.RGBA.exec(str)
                    .slice(1)
                    .map(function (color, idx) {
                    if (idx === 3) {
                        return parseFloat(color);
                    }
                    return color / 255;
                });
                return results;
            }
            else if (colorPatterns.RGBA_PERCENT.test(str)) {
                // rgba(R%,G%,B%,A%)
                results = colorPatterns.RGBA_PERCENT.exec(str)
                    .slice(1)
                    .map(function (color, idx) {
                    if (idx === 3) {
                        return parseFloat(color);
                    }
                    return parseFloat(color) / 100;
                });
                return results;
            }
            // Try HSLA pattern matching.
            if (colorPatterns.HSL.test(str)) {
                // hsl(H,S,L)
                results = colorPatterns.HSL.exec(str)
                    .slice(1)
                    .map(function (color, idx) {
                    if (idx === 0) {
                        return parseInt(color, 10) / 360;
                    }
                    return parseInt(color, 10) / 100;
                });
                results[3] = 1;
            }
            else if (colorPatterns.HSLA.test(str)) {
                // hsla(H,S,L,A)
                results = colorPatterns.HSLA.exec(str)
                    .slice(1)
                    .map(function (color, idx) {
                    if (idx === 0) {
                        return parseInt(color, 10) / 360;
                    }
                    else if (idx === 3) {
                        return parseFloat(color);
                    }
                    return parseInt(color, 10) / 100;
                });
            }
            results = results.map(function (value) {
                return Math.max(Math.min(value, 1), 0);
            });
            if (results.length) {
                return _ColorConversion__WEBPACK_IMPORTED_MODULE_1__.ColorConversion.HslaToRGBA(results);
            }
            // Try HSBA pattern matching.
            if (colorPatterns.HSB.test(str)) {
                // hsb(H,S,B)
                results = colorPatterns.HSB.exec(str)
                    .slice(1)
                    .map(function (color, idx) {
                    if (idx === 0) {
                        return parseInt(color, 10) / 360;
                    }
                    return parseInt(color, 10) / 100;
                });
                results[3] = 1;
            }
            else if (colorPatterns.HSBA.test(str)) {
                // hsba(H,S,B,A)
                results = colorPatterns.HSBA.exec(str)
                    .slice(1)
                    .map(function (color, idx) {
                    if (idx === 0) {
                        return parseInt(color, 10) / 360;
                    }
                    else if (idx === 3) {
                        return parseFloat(color);
                    }
                    return parseInt(color, 10) / 100;
                });
            }
            if (results.length) {
                // (loop backwards for performance)
                for (i = results.length - 1; i >= 0; --i) {
                    results[i] = Math.max(Math.min(results[i], 1), 0);
                }
                return _ColorConversion__WEBPACK_IMPORTED_MODULE_1__.ColorConversion.HsbaToRGBA(results);
            }
            // Input did not match any CSS color pattern: default to white.
            results = [1, 1, 1, 1];
        }
        else if ((numArgs === 1 || numArgs === 2) && typeof r === 'number') {
            // 'Grayscale' mode.
            /**
             * For HSB and HSL, interpret the gray level as a brightness/lightness
             * value (they are equivalent when chroma is zero). For RGB, normalize the
             * gray level according to the blue maximum.
             */
            results[0] = r / maxes[2];
            results[1] = r / maxes[2];
            results[2] = r / maxes[2];
            // Alpha may be undefined, so default it to 100%.
            if (typeof g === 'number') {
                results[3] = g / maxes[3];
            }
            else {
                results[3] = 1;
            }
            // Constrain components to the range [0,1].
            results = results.map(function (value) {
                return Math.max(Math.min(value, 1), 0);
            });
        }
        else {
            throw new Error(arguments + 'is not a valid color representation.');
        }
        return results;
    };
    SketchColor.prototype.toColor = function () {
        return _CGColor__WEBPACK_IMPORTED_MODULE_2__.CGColor.FromRgba(this.levels[0], this.levels[1], this.levels[2], this.levels[3]);
    };
    return SketchColor;
}());



/***/ }),

/***/ "./src/CGColor/colors.ts":
/*!*******************************!*\
  !*** ./src/CGColor/colors.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "COLORS": () => (/* binding */ COLORS)
/* harmony export */ });
var COLORS = {
    aliceblue: [240, 248, 255],
    antiquewhite: [250, 235, 215],
    aqua: [0, 255, 255],
    aquamarine: [127, 255, 212],
    azure: [240, 255, 255],
    beige: [245, 245, 220],
    bisque: [255, 228, 196],
    black: [0, 0, 0],
    blanchedalmond: [255, 235, 205],
    blue: [0, 0, 255],
    blueviolet: [138, 43, 226],
    brown: [165, 42, 42],
    burlywood: [222, 184, 135],
    cadetblue: [95, 158, 160],
    chartreuse: [127, 255, 0],
    chocolate: [210, 105, 30],
    coral: [255, 127, 80],
    cornflowerblue: [100, 149, 237],
    cornsilk: [255, 248, 220],
    crimson: [220, 20, 60],
    cyan: [0, 255, 255],
    darkblue: [0, 0, 139],
    darkcyan: [0, 139, 139],
    darkgoldenrod: [184, 132, 11],
    darkgray: [169, 169, 169],
    darkgreen: [0, 100, 0],
    darkgrey: [169, 169, 169],
    darkkhaki: [189, 183, 107],
    darkmagenta: [139, 0, 139],
    darkolivegreen: [85, 107, 47],
    darkorange: [255, 140, 0],
    darkorchid: [153, 50, 204],
    darkred: [139, 0, 0],
    darksalmon: [233, 150, 122],
    darkseagreen: [143, 188, 143],
    darkslateblue: [72, 61, 139],
    darkslategray: [47, 79, 79],
    darkslategrey: [47, 79, 79],
    darkturquoise: [0, 206, 209],
    darkviolet: [148, 0, 211],
    deeppink: [255, 20, 147],
    deepskyblue: [0, 191, 255],
    dimgray: [105, 105, 105],
    dimgrey: [105, 105, 105],
    dodgerblue: [30, 144, 255],
    firebrick: [178, 34, 34],
    floralwhite: [255, 255, 240],
    forestgreen: [34, 139, 34],
    fuchsia: [255, 0, 255],
    gainsboro: [220, 220, 220],
    ghostwhite: [248, 248, 255],
    gold: [255, 215, 0],
    goldenrod: [218, 165, 32],
    gray: [128, 128, 128],
    green: [0, 128, 0],
    greenyellow: [173, 255, 47],
    grey: [128, 128, 128],
    honeydew: [240, 255, 240],
    hotpink: [255, 105, 180],
    indianred: [205, 92, 92],
    indigo: [75, 0, 130],
    ivory: [255, 255, 240],
    khaki: [240, 230, 140],
    lavender: [230, 230, 250],
    lavenderblush: [255, 240, 245],
    lawngreen: [124, 252, 0],
    lemonchiffon: [255, 250, 205],
    lightblue: [173, 216, 230],
    lightcoral: [240, 128, 128],
    lightcyan: [224, 255, 255],
    lightgoldenrodyellow: [250, 250, 210],
    lightgray: [211, 211, 211],
    lightgreen: [144, 238, 144],
    lightgrey: [211, 211, 211],
    lightpink: [255, 182, 193],
    lightsalmon: [255, 160, 122],
    lightseagreen: [32, 178, 170],
    lightskyblue: [135, 206, 250],
    lightslategray: [119, 136, 153],
    lightslategrey: [119, 136, 153],
    lightsteelblue: [176, 196, 222],
    lightyellow: [255, 255, 224],
    lime: [0, 255, 0],
    limegreen: [50, 205, 50],
    linen: [250, 240, 230],
    magenta: [255, 0, 255],
    maroon: [128, 0, 0],
    mediumaquamarine: [102, 205, 170],
    mediumblue: [0, 0, 205],
    mediumorchid: [186, 85, 211],
    mediumpurple: [147, 112, 219],
    mediumseagreen: [60, 179, 113],
    mediumslateblue: [123, 104, 238],
    mediumspringgreen: [0, 250, 154],
    mediumturquoise: [72, 209, 204],
    mediumvioletred: [199, 21, 133],
    midnightblue: [25, 25, 112],
    mintcream: [245, 255, 250],
    mistyrose: [255, 228, 225],
    moccasin: [255, 228, 181],
    navajowhite: [255, 222, 173],
    navy: [0, 0, 128],
    oldlace: [253, 245, 230],
    olive: [128, 128, 0],
    olivedrab: [107, 142, 35],
    orange: [255, 165, 0],
    orangered: [255, 69, 0],
    orchid: [218, 112, 214],
    palegoldenrod: [238, 232, 170],
    palegreen: [152, 251, 152],
    paleturquoise: [175, 238, 238],
    palevioletred: [219, 112, 147],
    papayawhip: [255, 239, 213],
    peachpuff: [255, 218, 185],
    peru: [205, 133, 63],
    pink: [255, 192, 203],
    plum: [221, 160, 203],
    powderblue: [176, 224, 230],
    purple: [128, 0, 128],
    rebeccapurple: [102, 51, 153],
    red: [255, 0, 0],
    rosybrown: [188, 143, 143],
    royalblue: [65, 105, 225],
    saddlebrown: [139, 69, 19],
    salmon: [250, 128, 114],
    sandybrown: [244, 164, 96],
    seagreen: [46, 139, 87],
    seashell: [255, 245, 238],
    sienna: [160, 82, 45],
    silver: [192, 192, 192]
};


/***/ }),

/***/ "./src/CGColor/namedColors.ts":
/*!************************************!*\
  !*** ./src/CGColor/namedColors.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "namedColors": () => (/* binding */ namedColors)
/* harmony export */ });
var namedColors = {
    aliceblue: '#f0f8ff',
    antiquewhite: '#faebd7',
    aqua: '#00ffff',
    aquamarine: '#7fffd4',
    azure: '#f0ffff',
    beige: '#f5f5dc',
    bisque: '#ffe4c4',
    black: '#000000',
    blanchedalmond: '#ffebcd',
    blue: '#0000ff',
    blueviolet: '#8a2be2',
    brown: '#a52a2a',
    burlywood: '#deb887',
    cadetblue: '#5f9ea0',
    chartreuse: '#7fff00',
    chocolate: '#d2691e',
    coral: '#ff7f50',
    cornflowerblue: '#6495ed',
    cornsilk: '#fff8dc',
    crimson: '#dc143c',
    cyan: '#00ffff',
    darkblue: '#00008b',
    darkcyan: '#008b8b',
    darkgoldenrod: '#b8860b',
    darkgray: '#a9a9a9',
    darkgreen: '#006400',
    darkgrey: '#a9a9a9',
    darkkhaki: '#bdb76b',
    darkmagenta: '#8b008b',
    darkolivegreen: '#556b2f',
    darkorange: '#ff8c00',
    darkorchid: '#9932cc',
    darkred: '#8b0000',
    darksalmon: '#e9967a',
    darkseagreen: '#8fbc8f',
    darkslateblue: '#483d8b',
    darkslategray: '#2f4f4f',
    darkslategrey: '#2f4f4f',
    darkturquoise: '#00ced1',
    darkviolet: '#9400d3',
    deeppink: '#ff1493',
    deepskyblue: '#00bfff',
    dimgray: '#696969',
    dimgrey: '#696969',
    dodgerblue: '#1e90ff',
    firebrick: '#b22222',
    floralwhite: '#fffaf0',
    forestgreen: '#228b22',
    fuchsia: '#ff00ff',
    gainsboro: '#dcdcdc',
    ghostwhite: '#f8f8ff',
    gold: '#ffd700',
    goldenrod: '#daa520',
    gray: '#808080',
    green: '#008000',
    greenyellow: '#adff2f',
    grey: '#808080',
    honeydew: '#f0fff0',
    hotpink: '#ff69b4',
    indianred: '#cd5c5c',
    indigo: '#4b0082',
    ivory: '#fffff0',
    khaki: '#f0e68c',
    lavender: '#e6e6fa',
    lavenderblush: '#fff0f5',
    lawngreen: '#7cfc00',
    lemonchiffon: '#fffacd',
    lightblue: '#add8e6',
    lightcoral: '#f08080',
    lightcyan: '#e0ffff',
    lightgoldenrodyellow: '#fafad2',
    lightgray: '#d3d3d3',
    lightgreen: '#90ee90',
    lightgrey: '#d3d3d3',
    lightpink: '#ffb6c1',
    lightsalmon: '#ffa07a',
    lightseagreen: '#20b2aa',
    lightskyblue: '#87cefa',
    lightslategray: '#778899',
    lightslategrey: '#778899',
    lightsteelblue: '#b0c4de',
    lightyellow: '#ffffe0',
    lime: '#00ff00',
    limegreen: '#32cd32',
    linen: '#faf0e6',
    magenta: '#ff00ff',
    maroon: '#800000',
    mediumaquamarine: '#66cdaa',
    mediumblue: '#0000cd',
    mediumorchid: '#ba55d3',
    mediumpurple: '#9370db',
    mediumseagreen: '#3cb371',
    mediumslateblue: '#7b68ee',
    mediumspringgreen: '#00fa9a',
    mediumturquoise: '#48d1cc',
    mediumvioletred: '#c71585',
    midnightblue: '#191970',
    mintcream: '#f5fffa',
    mistyrose: '#ffe4e1',
    moccasin: '#ffe4b5',
    navajowhite: '#ffdead',
    navy: '#000080',
    oldlace: '#fdf5e6',
    olive: '#808000',
    olivedrab: '#6b8e23',
    orange: '#ffa500',
    orangered: '#ff4500',
    orchid: '#da70d6',
    palegoldenrod: '#eee8aa',
    palegreen: '#98fb98',
    paleturquoise: '#afeeee',
    palevioletred: '#db7093',
    papayawhip: '#ffefd5',
    peachpuff: '#ffdab9',
    peru: '#cd853f',
    pink: '#ffc0cb',
    plum: '#dda0dd',
    powderblue: '#b0e0e6',
    purple: '#800080',
    red: '#ff0000',
    rosybrown: '#bc8f8f',
    royalblue: '#4169e1',
    saddlebrown: '#8b4513',
    salmon: '#fa8072',
    sandybrown: '#f4a460',
    seagreen: '#2e8b57',
    seashell: '#fff5ee',
    sienna: '#a0522d',
    silver: '#c0c0c0',
    skyblue: '#87ceeb',
    slateblue: '#6a5acd',
    slategray: '#708090',
    slategrey: '#708090',
    snow: '#fffafa',
    springgreen: '#00ff7f',
    steelblue: '#4682b4',
    tan: '#d2b48c',
    teal: '#008080',
    thistle: '#d8bfd8',
    tomato: '#ff6347',
    turquoise: '#40e0d0',
    violet: '#ee82ee',
    wheat: '#f5deb3',
    white: '#ffffff',
    whitesmoke: '#f5f5f5',
    yellow: '#ffff00',
    yellowgreen: '#9acd32'
};


/***/ }),

/***/ "./src/CGCommandContext/CGCommandContext.ts":
/*!**************************************************!*\
  !*** ./src/CGCommandContext/CGCommandContext.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CGCommandContext2D": () => (/* binding */ CGCommandContext2D)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _CGColor_CGColor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../CGColor/CGColor */ "./src/CGColor/CGColor.ts");
/* harmony import */ var _CGContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../CGContext */ "./src/CGContext.ts");
/* harmony import */ var _CGFont_FontFamily__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../CGFont/FontFamily */ "./src/CGFont/FontFamily.ts");
/* harmony import */ var _CGFont_FontStyle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../CGFont/FontStyle */ "./src/CGFont/FontStyle.ts");
/* harmony import */ var _CGInterpolationQuality__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../CGInterpolationQuality */ "./src/CGInterpolationQuality.ts");
/* harmony import */ var _CGRectangle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../CGRectangle */ "./src/CGRectangle.ts");
/* harmony import */ var _CGSize__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../CGSize */ "./src/CGSize.ts");
/* harmony import */ var _StringAlignment__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../StringAlignment */ "./src/StringAlignment.ts");
/* harmony import */ var _WrapMode__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../WrapMode */ "./src/WrapMode.ts");
/* harmony import */ var _Commands_StartCommand__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Commands/StartCommand */ "./src/CGCommandContext/Commands/StartCommand.ts");
/* harmony import */ var _Commands_EndCommand__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Commands/EndCommand */ "./src/CGCommandContext/Commands/EndCommand.ts");
/* harmony import */ var _Commands_ScaleCommand__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Commands/ScaleCommand */ "./src/CGCommandContext/Commands/ScaleCommand.ts");
/* harmony import */ var _Commands_TranslateCommand__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Commands/TranslateCommand */ "./src/CGCommandContext/Commands/TranslateCommand.ts");
/* harmony import */ var _Commands_RotateCommand__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Commands/RotateCommand */ "./src/CGCommandContext/Commands/RotateCommand.ts");
/* harmony import */ var _Commands_TransformCommand__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./Commands/TransformCommand */ "./src/CGCommandContext/Commands/TransformCommand.ts");
/* harmony import */ var _Commands__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./Commands */ "./src/CGCommandContext/Commands/index.ts");
/* harmony import */ var _Commands_SaveStateCommand__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./Commands/SaveStateCommand */ "./src/CGCommandContext/Commands/SaveStateCommand.ts");
/* harmony import */ var _Commands_RestoreStateCommand__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./Commands/RestoreStateCommand */ "./src/CGCommandContext/Commands/RestoreStateCommand.ts");
/* harmony import */ var _Commands_SetLineWidthCommand__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./Commands/SetLineWidthCommand */ "./src/CGCommandContext/Commands/SetLineWidthCommand.ts");
/* harmony import */ var _Commands_SetLineCapCommand__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./Commands/SetLineCapCommand */ "./src/CGCommandContext/Commands/SetLineCapCommand.ts");
/* harmony import */ var _Commands_BeginPathCommand__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./Commands/BeginPathCommand */ "./src/CGCommandContext/Commands/BeginPathCommand.ts");
/* harmony import */ var _Commands_MoveToCommand__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./Commands/MoveToCommand */ "./src/CGCommandContext/Commands/MoveToCommand.ts");
/* harmony import */ var _Commands_AddLineToPointCommand__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./Commands/AddLineToPointCommand */ "./src/CGCommandContext/Commands/AddLineToPointCommand.ts");
/* harmony import */ var _Commands_SetShadowWithColorCommand__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./Commands/SetShadowWithColorCommand */ "./src/CGCommandContext/Commands/SetShadowWithColorCommand.ts");
/* harmony import */ var _Commands_SetStrokeColor__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./Commands/SetStrokeColor */ "./src/CGCommandContext/Commands/SetStrokeColor.ts");
/* harmony import */ var _Commands_SetLineDashCommand__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./Commands/SetLineDashCommand */ "./src/CGCommandContext/Commands/SetLineDashCommand.ts");
/* harmony import */ var _Commands_DrawPathCommand__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./Commands/DrawPathCommand */ "./src/CGCommandContext/Commands/DrawPathCommand.ts");
/* harmony import */ var _Commands_SetFillColorCommand__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./Commands/SetFillColorCommand */ "./src/CGCommandContext/Commands/SetFillColorCommand.ts");
/* harmony import */ var _Commands_AddArcToPointCommand__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./Commands/AddArcToPointCommand */ "./src/CGCommandContext/Commands/AddArcToPointCommand.ts");
/* harmony import */ var _Commands_ClosePathCommand__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./Commands/ClosePathCommand */ "./src/CGCommandContext/Commands/ClosePathCommand.ts");
/* harmony import */ var _Commands_EOFillPathCommand__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./Commands/EOFillPathCommand */ "./src/CGCommandContext/Commands/EOFillPathCommand.ts");
/* harmony import */ var _Commands_AddCurveToPointCommand__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./Commands/AddCurveToPointCommand */ "./src/CGCommandContext/Commands/AddCurveToPointCommand.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

































var POINT = /** @class */ (function (_super) {
    __extends(POINT, _super);
    function POINT() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], POINT.prototype, "X", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], POINT.prototype, "Y", void 0);
    return POINT;
}(_tuval_core__WEBPACK_IMPORTED_MODULE_0__.UMO));
/* export class Command extends UMO {
    @LONG CommandType;
    @LONG NextCommandPointer;
} */
var CGCommandContext2D = /** @class */ (function () {
    function CGCommandContext2D(context) {
        this.m_AddressTable = [];
        this.clipArea = undefined;
        this.m_StartPointer = 0;
        this.m_LastCommand = null;
        this.IsOpened = false;
        this.IsClosed = false;
        this.InterpolationQuality = _CGInterpolationQuality__WEBPACK_IMPORTED_MODULE_5__.CGInterpolationQuality.Default;
        this.TextPosition = undefined;
        this.TextMatrix = undefined;
        if (context == null) {
            // throw new ArgumentNullException("Invalid parameters to context creation");
        }
        this.drawingContext = context;
    }
    CGCommandContext2D.prototype.Begin = function () {
        this.m_LastCommand = new _Commands_StartCommand__WEBPACK_IMPORTED_MODULE_10__.StartCommand();
        this.m_StartPointer = this.m_LastCommand.pointer;
        this.m_AddressTable.push(this.m_StartPointer);
        this.IsOpened = true;
    };
    CGCommandContext2D.prototype.End = function () {
        var endCommand = new _Commands_EndCommand__WEBPACK_IMPORTED_MODULE_11__.EndCommand();
        endCommand.NextCommandPointer = 0;
        this.setLastCommand(endCommand);
        this.IsClosed = true;
    };
    CGCommandContext2D.prototype.GetStartPointer = function () {
        return this.m_StartPointer;
    };
    CGCommandContext2D.prototype.transferToImageBitmap = function () {
        if (_tuval_core__WEBPACK_IMPORTED_MODULE_0__.is.workerContext()) {
            return this.drawingContext.canvas.transferToImageBitmap();
        }
        else {
            throw new Error("For use transferToImageBitmap, you must use offlinecanvas.");
        }
    };
    CGCommandContext2D.prototype.forceToBegin = function () {
        if (!this.IsOpened) {
            this.Begin();
        }
    };
    CGCommandContext2D.prototype.forceToEnd = function () {
        if (!this.IsClosed) {
            this.End();
        }
    };
    CGCommandContext2D.prototype.scaleCTM = function (sx, sy) {
        var scaleCommand = new _Commands_ScaleCommand__WEBPACK_IMPORTED_MODULE_12__.ScaleCommand();
        scaleCommand.SX = sx;
        scaleCommand.SY = sy;
        this.setLastCommand(scaleCommand);
    };
    CGCommandContext2D.prototype.translateCTM = function (tx, ty) {
        var translateCommand = new _Commands_TranslateCommand__WEBPACK_IMPORTED_MODULE_13__.TranslateCommand();
        translateCommand.TX = tx;
        translateCommand.TY = ty;
        this.setLastCommand(translateCommand);
    };
    CGCommandContext2D.prototype.setLastCommand = function (command) {
        if (!this.IsOpened) {
            this.forceToBegin();
        }
        this.m_LastCommand.NextCommandType = command.CommandType;
        this.m_LastCommand.NextCommandPointer = command.pointer;
        this.m_LastCommand = command;
        this.m_AddressTable.push(command.pointer);
    };
    CGCommandContext2D.prototype.rotateCTM = function (angle) {
        //this.drawingContext.rotate(angle);
        var rotateCommand = new _Commands_RotateCommand__WEBPACK_IMPORTED_MODULE_14__.RotateCommand();
        rotateCommand.Angle = angle;
        this.setLastCommand(rotateCommand);
    };
    CGCommandContext2D.prototype.concatCTM = function (transform) {
        var matrix = transform.getMatrix();
        var transformCommand = new _Commands_TransformCommand__WEBPACK_IMPORTED_MODULE_15__.TransformCommand();
        transformCommand.A = matrix[0];
        transformCommand.B = matrix[1];
        transformCommand.C = matrix[2];
        transformCommand.D = matrix[3];
        transformCommand.F = matrix[4];
        transformCommand.E = matrix[5];
        this.setLastCommand(transformCommand);
    };
    CGCommandContext2D.prototype.saveState = function () {
        // this.drawingContext.save();
        var saveStateCommand = new _Commands_SaveStateCommand__WEBPACK_IMPORTED_MODULE_17__.SaveStateCommand();
        this.setLastCommand(saveStateCommand);
    };
    CGCommandContext2D.prototype.restoreState = function () {
        // throw new NotImplementedException('CGContext.restoreState');
        //this.drawingContext.restore();
        var restoreStateCommand = new _Commands_RestoreStateCommand__WEBPACK_IMPORTED_MODULE_18__.RestoreStateCommand();
        this.setLastCommand(restoreStateCommand);
    };
    CGCommandContext2D.prototype.setLineWidth = function (w) {
        var setLineWidthCommand = new _Commands_SetLineWidthCommand__WEBPACK_IMPORTED_MODULE_19__.SetLineWidthCommand();
        setLineWidthCommand.WIDTH = w;
        this.setLastCommand(setLineWidthCommand);
    };
    CGCommandContext2D.prototype.setLineCap = function (cap) {
        // throw new NotImplementedException('CGContext.setLineCap');
        var setLineCapCommand = new _Commands_SetLineCapCommand__WEBPACK_IMPORTED_MODULE_20__.SetLineCapCommand();
        setLineCapCommand.CAP = cap;
        this.setLastCommand(setLineCapCommand);
    };
    CGCommandContext2D.prototype.setLineJoin = function (join) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.setLineJoin');
    };
    CGCommandContext2D.prototype.setMiterLimit = function (limit) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.setMiterLimit');
    };
    CGCommandContext2D.prototype.setLineDash = function (phase, lengths, n) {
        // throw new NotImplementedException('CGContext.setLineDash');
        var dashOffset = (phase != null ? (phase >= 0 ? phase : 1) : 1);
        /* this.drawingContext.lineDashOffset = dashOffset;
        this.drawingContext.setLineDash(lengths); */
        var setLineDashCommand = new _Commands_SetLineDashCommand__WEBPACK_IMPORTED_MODULE_26__.SetLineDashCommand();
        setLineDashCommand.DASHOFFSET = dashOffset;
        setLineDashCommand.DASH_COUNT = lengths.length;
        if (lengths.length > 0) {
            setLineDashCommand.DASH1 = lengths[0];
        }
        if (lengths.length > 1) {
            setLineDashCommand.DASH2 = lengths[1];
        }
        if (lengths.length > 2) {
            setLineDashCommand.DASH2 = lengths[2];
        }
        if (lengths.length > 3) {
            setLineDashCommand.DASH2 = lengths[3];
        }
        this.setLastCommand(setLineDashCommand);
    };
    CGCommandContext2D.prototype.setFlatness = function (flatness) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.setFlatness');
    };
    CGCommandContext2D.prototype.setAlpha = function (alpha) {
        this.drawingContext.globalAlpha = alpha;
    };
    CGCommandContext2D.prototype.setBlendMode = function (mode) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.setBlendMode');
    };
    CGCommandContext2D.prototype.getCTM = function () {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.getCTM');
    };
    CGCommandContext2D.prototype.beginPath = function () {
        this.forceToBegin();
        var beginPathCommand = new _Commands_BeginPathCommand__WEBPACK_IMPORTED_MODULE_21__.BeginPathCommand();
        this.setLastCommand(beginPathCommand);
    };
    CGCommandContext2D.prototype.moveTo = function (x, y) {
        // throw new NotImplementedException('CGContext.moveTo');
        //this.drawingContext.moveTo(x, y);
        var moveToCommand = new _Commands_MoveToCommand__WEBPACK_IMPORTED_MODULE_22__.MoveToCommand();
        moveToCommand.X = x;
        moveToCommand.Y = y;
        this.setLastCommand(moveToCommand);
    };
    CGCommandContext2D.prototype.addLineToPoint = function (x, y) {
        this.forceToBegin();
        var addLineToPointCommand = new _Commands_AddLineToPointCommand__WEBPACK_IMPORTED_MODULE_23__.AddLineToPointCommand();
        addLineToPointCommand.X = x;
        addLineToPointCommand.Y = y;
        this.setLastCommand(addLineToPointCommand);
    };
    CGCommandContext2D.prototype.addCurveToPoint = function (cp1x, cp1y, cp2x, cp2y, x, y) {
        var addCurveToPoint = new _Commands_AddCurveToPointCommand__WEBPACK_IMPORTED_MODULE_32__.AddCurveToPointCommand();
        addCurveToPoint.CP1X = cp1x;
        addCurveToPoint.CP1Y = cp1y;
        addCurveToPoint.CP2X = cp2x;
        addCurveToPoint.CP2Y = cp2y;
        addCurveToPoint.X = x;
        addCurveToPoint.Y = y;
        this.setLastCommand(addCurveToPoint);
    };
    CGCommandContext2D.prototype.addQuadCurveToPoint = function (cpx, cpy, x, y) {
        // throw new NotImplementedException('CGContext.addQuadCurveToPoint');
        this.drawingContext.quadraticCurveTo(cpx, cpy, x, y);
    };
    CGCommandContext2D.prototype.closePath = function () {
        var closePathCommand = new _Commands_ClosePathCommand__WEBPACK_IMPORTED_MODULE_30__.ClosePathCommand();
        this.setLastCommand(closePathCommand);
    };
    CGCommandContext2D.prototype.addRect = function (rect) {
        this.drawingContext.rect(rect.X, rect.Y, rect.Width, rect.Height);
    };
    CGCommandContext2D.prototype.addRects = function (rects) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.addRects');
    };
    CGCommandContext2D.prototype.addLines = function (points) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.addLines');
    };
    CGCommandContext2D.prototype.addEllipseInRect = function (rect) {
        // throw new NotImplementedException('CGContext.addEllipseInRect');
        var centerX = rect.X + (rect.Width / 2);
        var centerY = rect.Y + (rect.Height / 2);
        this.drawingContext.ellipse(centerX, centerY, rect.Width / 2, rect.Height / 2, 0, 0, 2 * Math.PI);
    };
    CGCommandContext2D.prototype.addArc = function (x, y, radius, startAngle, endAngle, clockwise) {
        this.drawingContext.arc(x, y, radius, startAngle, endAngle);
    };
    CGCommandContext2D.prototype.addArcToPoint = function (x1, y1, x2, y2, radius) {
        if (radius >= 0) {
            var addArcToPointCommand = new _Commands_AddArcToPointCommand__WEBPACK_IMPORTED_MODULE_29__.AddArcToPointCommand();
            addArcToPointCommand.X1 = x1;
            addArcToPointCommand.Y1 = y1;
            addArcToPointCommand.X2 = x2;
            addArcToPointCommand.Y2 = y2;
            addArcToPointCommand.RADIUS = radius;
            this.setLastCommand(addArcToPointCommand);
        }
    };
    CGCommandContext2D.prototype.addPath = function (path) {
        setTimeout(function () {
            throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.addPath');
        }, 100);
    };
    CGCommandContext2D.prototype.replacePathWithStrokedPath = function () {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.replacePathWithStrokedPath');
    };
    CGCommandContext2D.prototype.getPathCurrentPoint = function () {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.getPathCurrentPoint');
    };
    CGCommandContext2D.prototype.getPathBoundingBox = function () {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.getPathCurrentPoint');
    };
    CGCommandContext2D.prototype.pathContainsPoint = function (point, mode) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.pathContainsPoint');
    };
    CGCommandContext2D.prototype.drawPath = function (mode) {
        // throw new NotImplementedException('CGContext.drawPath');
        /* if (mode === CGPathDrawingMode.Stroke) {
            this.drawingContext.stroke();
        } */
        var drawPathCommand = new _Commands_DrawPathCommand__WEBPACK_IMPORTED_MODULE_27__.DrawPathCommand();
        drawPathCommand.MODE = mode;
        this.setLastCommand(drawPathCommand);
    };
    CGCommandContext2D.prototype.fillPath = function () {
        // throw new NotImplementedException('CGContext.fillPath');
        this.drawingContext.msFillRule = 'nonzero';
        this.drawingContext.fill();
    };
    CGCommandContext2D.prototype.eOFillPath = function () {
        var eOFillPathCommand = new _Commands_EOFillPathCommand__WEBPACK_IMPORTED_MODULE_31__.EOFillPathCommand();
        this.setLastCommand(eOFillPathCommand);
    };
    CGCommandContext2D.prototype.strokePath = function () {
        // throw new NotImplementedException('CGContext.strokePath');
        this.drawingContext.stroke();
    };
    CGCommandContext2D.prototype.fillRect = function (rect) {
        // throw new NotImplementedException('CGContext.fillRect');
        this.drawingContext.fillRect(rect.X, rect.Y, rect.Width, rect.Height);
    };
    CGCommandContext2D.prototype.contextFillRects = function (rects) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.contextFillRects');
    };
    CGCommandContext2D.prototype.strokeRect = function (rect) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.strokeRect');
    };
    CGCommandContext2D.prototype.strokeRectWithWidth = function (rect, width) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.strokeRectWithWidth');
    };
    CGCommandContext2D.prototype.clearRect = function (rect) {
        var clearRectCommand = new _Commands__WEBPACK_IMPORTED_MODULE_16__.ClearRectCommand();
        clearRectCommand.X = rect.X;
        clearRectCommand.Y = rect.Y;
        clearRectCommand.Width = rect.Width;
        clearRectCommand.Height = rect.Height;
        this.setLastCommand(clearRectCommand);
    };
    CGCommandContext2D.prototype.fillEllipseInRect = function (rect) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.fillEllipseInRect');
    };
    CGCommandContext2D.prototype.strokeEllipseInRect = function (rect) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.strokeEllipseInRect');
    };
    CGCommandContext2D.prototype.strokeLineSegments = function (points) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.strokeLineSegments');
    };
    CGCommandContext2D.prototype.eOClip = function () {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.eOClip');
    };
    CGCommandContext2D.prototype.clipToMask = function (rect, mask /*CGImage*/) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.clipToMask');
    };
    CGCommandContext2D.prototype.getClipBoundingBox = function () {
        //throw new NotImplementedException('CGContext.getClipBoundingBox');
        // FIX ME:
        // return new RectangleF(-1500, -1500, 4500, 4500);
        // const domRect: DOMRect = <any>this.drawingContext.canvas.getBoundingClientRect();
        return new _CGRectangle__WEBPACK_IMPORTED_MODULE_6__.CGRectangle(0, 0, this.drawingContext.canvas.width, this.drawingContext.canvas.height);
    };
    CGCommandContext2D.prototype.clip = function () {
        if (this.clipArea != null) {
            this.drawingContext.beginPath();
            this.drawingContext.rect(this.clipArea.X, this.clipArea.Y, this.clipArea.Width, this.clipArea.Height);
            //this.canvasContext.strokeStyle='red;'
            this.drawingContext.closePath();
            // this.canvasContext.strokeRect(this.clipArea.X, this.clipArea.Y, this.clipArea.Width, this.clipArea.Height);
            this.drawingContext.clip();
            // this.clipArea = undefined;
            /*  const ctx = this.canvasContext;
             ctx.rect(50, 20, 200, 120);
             ctx.stroke();
             ctx.clip();
             // Draw red rectangle after clip()
             ctx.fillStyle = "red";
             ctx.fillRect(0, 0, 150, 100); */
        }
    };
    CGCommandContext2D.prototype.clipToRect = function (rect, debug) {
        //this.clipArea = rect;
        //this.canvasContext.save();
        if (debug === void 0) { debug = true; }
        this.drawingContext.beginPath();
        this.drawingContext.rect(rect.X, rect.Y, rect.Width, rect.Height);
        var oldStrokeStyle;
        if (debug) {
            oldStrokeStyle = this.drawingContext.strokeStyle;
            this.drawingContext.strokeStyle = 'red';
            this.drawingContext.strokeRect(rect.X, rect.Y, rect.Width, rect.Height);
        }
        this.drawingContext.clip();
        if (debug) {
            this.drawingContext.strokeStyle = oldStrokeStyle;
        }
        //this.canvasContext.restore();
    };
    CGCommandContext2D.prototype.clipToRects = function (rects) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.clipToRects');
    };
    CGCommandContext2D.prototype.setFillColor = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        // throw new NotImplementedException('CGContext.setFillColor');
        if (args.length === 4) {
            var color = _CGColor_CGColor__WEBPACK_IMPORTED_MODULE_1__.CGColor.FromRgba(args[0], args[1], args[2], args[3]);
            var setFillColorCommand = new _Commands_SetFillColorCommand__WEBPACK_IMPORTED_MODULE_28__.SetFillColorCommand();
            setFillColorCommand.COLOR = color.toString();
            this.setLastCommand(setFillColorCommand);
        }
        else if (args.length === 1 && args[0] instanceof _CGColor_CGColor__WEBPACK_IMPORTED_MODULE_1__.CGColor) {
            this.setFillColor(args[0].R, args[0].G, args[0].B, args[0].A);
        }
    };
    CGCommandContext2D.prototype.setFillColorWithColor = function (color) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.setFillColorWithColor');
    };
    CGCommandContext2D.prototype.setStrokeColor = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var setStrokeColor = new _Commands_SetStrokeColor__WEBPACK_IMPORTED_MODULE_25__.SetStrokeColor();
        if (args.length === 1 && args[0] instanceof _CGColor_CGColor__WEBPACK_IMPORTED_MODULE_1__.CGColor) {
            var color = args[0];
            var colorString = _CGColor_CGColor__WEBPACK_IMPORTED_MODULE_1__.CGColor.RgbToHex(color.R, color.G, color.B);
            setStrokeColor.COLOR = '#' + colorString;
        }
        else if (args.length === 4) {
            var color = _CGColor_CGColor__WEBPACK_IMPORTED_MODULE_1__.CGColor.RgbToHex(args[0], args[1], args[2]);
            setStrokeColor.COLOR = '#' + color;
        }
        this.setLastCommand(setStrokeColor);
    };
    CGCommandContext2D.prototype.setStrokeColorWithColor = function (color) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.setStrokeColorWithColor');
    };
    CGCommandContext2D.prototype.setFillColorSpace = function (space) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.setFillColorSpace');
    };
    CGCommandContext2D.prototype.setStrokeColorSpace = function (space) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.setStrokeColorSpace');
    };
    CGCommandContext2D.prototype.setFillPattern = function (pattern, components) {
        // throw new NotImplementedException('CGContext.setFillPattern');
        var canvasPattern = document.createElement("canvas");
        canvasPattern.width = pattern.bounds.Width;
        canvasPattern.height = pattern.bounds.Height;
        var contextPattern = canvasPattern.getContext("2d");
        var coreContext = new _CGContext__WEBPACK_IMPORTED_MODULE_2__.CGContext2D(contextPattern);
        coreContext.concatCTM(pattern.matrix);
        // coreContext.canvasContext.fillStyle = 'rgb(0,0,0)';
        // coreContext.canvasContext.fillRect(0, 0, 80, 80);
        if (pattern.drawPattern != null && _tuval_core__WEBPACK_IMPORTED_MODULE_0__.is["function"](pattern.drawPattern)) {
            pattern.drawPattern(coreContext);
        }
        //console.log(coreContext.canvasContext.canvas.toDataURL('image/jpeg', 1.0));
        coreContext.concatCTM(pattern.matrix.invert());
        if (pattern.processImageFunc != null) {
            pattern.processImageFunc(coreContext);
        }
        /*  contextPattern.strokeStyle='rgb(255,255,255)';
         contextPattern.arc(5.5, 5.5, 3, 0, Math.PI);
         contextPattern.rect(3, 3, 1, 1);
         contextPattern.rect(7, 3, 1, 1);
         contextPattern.stroke(); */
        var fillPattern;
        switch (pattern.wrapMode) {
            case _WrapMode__WEBPACK_IMPORTED_MODULE_9__.WrapMode.Tile:
                fillPattern = contextPattern.createPattern(canvasPattern, "repeat");
                break;
            case _WrapMode__WEBPACK_IMPORTED_MODULE_9__.WrapMode.TileFlipX:
                fillPattern = contextPattern.createPattern(canvasPattern, "repeat-x");
                break;
            case _WrapMode__WEBPACK_IMPORTED_MODULE_9__.WrapMode.TileFlipY:
                fillPattern = contextPattern.createPattern(canvasPattern, "repeat-y");
                break;
            case _WrapMode__WEBPACK_IMPORTED_MODULE_9__.WrapMode.Clamp:
                fillPattern = contextPattern.createPattern(canvasPattern, "no-repeat");
                break;
        }
        this.drawingContext.fillStyle = fillPattern;
    };
    CGCommandContext2D.prototype.setStrokePattern = function (pattern, components) {
        //throw new NotImplementedException('CGContext.setStrokePattern');
        var canvasPattern = document.createElement("canvas");
        canvasPattern.width = pattern.bounds.Width;
        canvasPattern.height = pattern.bounds.Height;
        var contextPattern = canvasPattern.getContext("2d");
        var coreContext = new _CGContext__WEBPACK_IMPORTED_MODULE_2__.CGContext2D(contextPattern);
        if (pattern.drawPattern != null && _tuval_core__WEBPACK_IMPORTED_MODULE_0__.is["function"](pattern.drawPattern)) {
            pattern.drawPattern(coreContext);
        }
        var strokePattern = contextPattern.createPattern(canvasPattern, "repeat");
        this.drawingContext.strokeStyle = strokePattern;
    };
    CGCommandContext2D.prototype.setPatternPhase = function (phase) {
        setTimeout(function () {
            throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.setPatternPhase');
        }, 100);
    };
    CGCommandContext2D.prototype.setGrayFillColor = function (gray, alpha) {
        setTimeout(function () {
            throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.setGrayFillColor');
        }, 100);
    };
    CGCommandContext2D.prototype.setGrayStrokeColor = function (gray, alpha) {
        setTimeout(function () {
            throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.setGrayStrokeColor');
        }, 100);
    };
    CGCommandContext2D.prototype.setRGBFillColor = function (red, green, blue, alpha) {
        setTimeout(function () {
            throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.setRGBFillColor');
        }, 100);
    };
    CGCommandContext2D.prototype.setRGBStrokeColor = function (red, green, blue, alpha) {
        setTimeout(function () {
            throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.setRGBStrokeColor');
        }, 100);
    };
    CGCommandContext2D.prototype.setCMYKFillColor = function (cyan, magenta, yellow, black, alpha) {
        setTimeout(function () {
            throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.setCMYKFillColor');
        }, 100);
    };
    CGCommandContext2D.prototype.setCMYKStrokeColor = function (cyan, magenta, yellow, black, alpha) {
        setTimeout(function () {
            throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.setCMYKStrokeColor');
        }, 100);
    };
    CGCommandContext2D.prototype.setRenderingIntent = function (intent /*CGColorRenderingIntent*/) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.setRenderingIntent');
    };
    CGCommandContext2D.prototype.drawImage = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args.length === 3) {
            this.drawingContext.drawImage(args[0], args[1], args[2]);
        }
        else if (args.length === 9) {
            this.drawingContext.drawImage(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]);
        }
    };
    CGCommandContext2D.prototype.drawTiledImage = function (rect, image /*CGImage*/) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.drawTiledImage');
    };
    CGCommandContext2D.prototype.setShadowWithColor = function (offset, blur, color) {
        var setShadowWithColorCommand = new _Commands_SetShadowWithColorCommand__WEBPACK_IMPORTED_MODULE_24__.SetShadowWithColorCommand();
        setShadowWithColorCommand.WIDTH = offset.Width;
        setShadowWithColorCommand.HEIGHT = offset.Height;
        setShadowWithColorCommand.BLUR = blur;
        setShadowWithColorCommand.COLOR = color.toString();
        this.setLastCommand(setShadowWithColorCommand);
    };
    CGCommandContext2D.prototype.setShadow = function (offset, blur) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.setShadow');
    };
    CGCommandContext2D.prototype.drawLinearGradient = function (gradient /*CGGradient*/, startPoint, endPoint, options /*CGGradientDrawingOptions*/) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.drawLinearGradient');
    };
    CGCommandContext2D.prototype.drawRadialGradient = function (gradient /*CGGradient*/, startCenter, startRadius, endCenter, endRadius, options /*CGGradientDrawingOptions*/) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.drawRadialGradient');
    };
    CGCommandContext2D.prototype.setCharacterSpacing = function (spacing) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.setCharacterSpacing');
    };
    CGCommandContext2D.prototype.setTextDrawingMode = function (mode) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.setTextDrawingMode');
    };
    CGCommandContext2D.prototype.setFont = function (font /*CGFont*/) {
        var fontName;
        var opentype = {};
        /*  if (font.FontFamily instanceof opentype.Font) {
             fontName = 'opentype';
         } else */
        if (font.FontFamily instanceof _CGFont_FontFamily__WEBPACK_IMPORTED_MODULE_3__.FontFamily) {
            fontName = font.FontFamily.Name;
        }
        else {
            fontName = font.Name;
        }
        this.drawingContext.font = (font.TextStyle || 'normal') +
            ' ' + (font.Size || 12) + 'px ' + (fontName || 'sans-serif');
        switch (font.HorizAlign) {
            case _StringAlignment__WEBPACK_IMPORTED_MODULE_8__.StringAlignment.Near:
                this.drawingContext.textAlign = "left";
                break;
            case _StringAlignment__WEBPACK_IMPORTED_MODULE_8__.StringAlignment.Center:
                this.drawingContext.textAlign = "center";
                break;
            case _StringAlignment__WEBPACK_IMPORTED_MODULE_8__.StringAlignment.Far:
                this.drawingContext.textAlign = "right";
                break;
        }
        switch (font.VertAlign) {
            case _StringAlignment__WEBPACK_IMPORTED_MODULE_8__.StringAlignment.Near:
                this.drawingContext.textBaseline = "top";
                break;
            case _StringAlignment__WEBPACK_IMPORTED_MODULE_8__.StringAlignment.Center:
                this.drawingContext.textBaseline = "middle";
                break;
            case _StringAlignment__WEBPACK_IMPORTED_MODULE_8__.StringAlignment.Far:
                this.drawingContext.textBaseline = "bottom";
                break;
        }
    };
    CGCommandContext2D.prototype._getFontStyle = function (font) {
        switch (font.TextStyle) {
            case _CGFont_FontStyle__WEBPACK_IMPORTED_MODULE_4__.FontStyle.Regular:
                return 'normal';
            case _CGFont_FontStyle__WEBPACK_IMPORTED_MODULE_4__.FontStyle.Italic:
                return 'italic';
            case _CGFont_FontStyle__WEBPACK_IMPORTED_MODULE_4__.FontStyle.Bold:
                return 'bold';
            case _CGFont_FontStyle__WEBPACK_IMPORTED_MODULE_4__.FontStyle.Underline:
                return 'underline';
        }
        return '';
    };
    CGCommandContext2D.prototype._getFontVariant = function (font) {
        return 'normal';
    };
    CGCommandContext2D.prototype._getFontSize = function (font) {
        return font.Size;
    };
    CGCommandContext2D.prototype._getFontFamily = function (font) {
        return font.Name;
    };
    CGCommandContext2D.prototype._getContextFont = function (font) {
        var PX_SPACE = 'px ';
        var SPACE = ' ';
        // IE don't want to work with usual font style
        // bold was not working
        // removing font variant will solve
        // fix for: https://github.com/konvajs/konva/issues/94
        // TODO ie desteği ekle.
        if (false) {}
        return (this._getFontStyle(font) +
            SPACE +
            this._getFontVariant(font) +
            SPACE +
            this._getFontSize(font) +
            PX_SPACE +
            this._getFontFamily(font));
    };
    CGCommandContext2D.prototype.measureText = function (text, font) {
        var _context = this.drawingContext;
        var metrics;
        _context.save();
        _context.font = this._getContextFont(font);
        metrics = _context.measureText(text);
        _context.restore();
        return new _CGSize__WEBPACK_IMPORTED_MODULE_7__.CGSize({
            width: metrics.width,
            height: parseInt(font.Size.toString(), 10)
        });
    };
    CGCommandContext2D.prototype.selectFont = function (name, size, textEncoding) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.selectFont');
    };
    CGCommandContext2D.prototype.showGlyphsAtPositions = function (glyphs, positions, size_t_count) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.showGlyphsAtPositions');
    };
    CGCommandContext2D.prototype.setTextAlign = function (textAlign) {
        var ta = undefined;
        switch (textAlign) {
            case 'start':
                ta = 'start';
                break;
            case 'end':
                ta = 'end';
                break;
            case 'left':
                ta = 'left';
                break;
            case 'center':
                ta = 'center';
                break;
            case 'right':
                ta = 'right';
                break;
        }
        this.drawingContext.textAlign = ta;
    };
    CGCommandContext2D.prototype.setTextBaseline = function (textAlign) {
        var tbl = 'middle';
        switch (textAlign) {
            case 'top':
                tbl = 'top';
                break;
            case 'bottom':
                tbl = 'bottom';
                break;
            case 'middle':
                tbl = 'middle';
                break;
            case 'alphabetic':
                tbl = 'alphabetic';
                break;
            case 'hanging':
                tbl = 'hanging';
                break;
        }
        this.drawingContext.textBaseline = tbl;
    };
    /* public showText(str: string, count: number): void;
    public showText(str: string): void;
    public showText(bytes: byte[]): void;
    public showText(bytes: byte[], count: number): void;
    public showText(...args: any[]): void {
        throw new NotImplementedException('CGContext.showText');
    } */
    CGCommandContext2D.prototype.showText = function (str, x, y) {
        this.drawingContext.fillText(str, x, y);
    };
    CGCommandContext2D.prototype.showTextAtPoint = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.showTextAtPoint');
    };
    CGCommandContext2D.prototype.showGlyphs = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.showGlyphs');
    };
    CGCommandContext2D.prototype.showGlyphsAtPoint = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.showGlyphsAtPoint');
    };
    CGCommandContext2D.prototype.showGlyphsWithAdvances = function (glyphs, advances, count) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.showGlyphsWithAdvances');
    };
    CGCommandContext2D.prototype.drawPDFPage = function (page /*CGPDFPage*/) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.drawPDFPage');
    };
    CGCommandContext2D.prototype.beginPage = function (rect) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.beginPage');
    };
    CGCommandContext2D.prototype.endPage = function () {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.endPage');
    };
    //[DllImport (Constants.CoreGraphicsLibrary)]
    //extern static IntPtr CGContextRetain(IntPtr c);
    CGCommandContext2D.prototype.flush = function () {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.flush');
    };
    CGCommandContext2D.prototype.synchronize = function () {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.synchronize');
    };
    CGCommandContext2D.prototype.setShouldAntialias = function (shouldAntialias) {
        //throw new NotImplementedException('CGContext.setShouldAntialias');
        console.error('CGContext.setShouldAntialias');
    };
    CGCommandContext2D.prototype.setAllowsAntialiasing = function (allowsAntialiasing) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.setAllowsAntialiasing');
    };
    CGCommandContext2D.prototype.setShouldSmoothFonts = function (shouldSmoothFonts) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.setShouldSmoothFonts');
    };
    CGCommandContext2D.prototype.getUserSpaceToDeviceSpaceTransform = function () {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.getUserSpaceToDeviceSpaceTransform');
    };
    CGCommandContext2D.prototype.pointToDeviceSpace = function (point) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.pointToDeviceSpace');
    };
    CGCommandContext2D.prototype.convertPointToUserSpace = function (point) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.convertPointToUserSpace');
    };
    CGCommandContext2D.prototype.convertSizeToDeviceSpace = function (size) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.convertSizeToDeviceSpace');
    };
    CGCommandContext2D.prototype.convertSizeToUserSpace = function (size) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.convertSizeToUserSpace');
    };
    CGCommandContext2D.prototype.convertRectToDeviceSpace = function (rect) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.convertRectToDeviceSpace');
    };
    CGCommandContext2D.prototype.convertRectToUserSpace = function (rect) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.convertRectToUserSpace');
    };
    CGCommandContext2D.prototype.drawLayer = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.drawLayer');
    };
    CGCommandContext2D.prototype.copyPath = function () {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.copyPath');
    };
    CGCommandContext2D.prototype.setAllowsFontSmoothing = function (allows) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.setAllowsFontSmoothing');
    };
    CGCommandContext2D.prototype.setAllowsSubpixelPositioning = function (allows) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.setAllowsSubpixelPositioning');
    };
    CGCommandContext2D.prototype.setAllowsFontSubpixelQuantization = function (allows) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.setAllowsFontSubpixelQuantization');
    };
    CGCommandContext2D.prototype.setShouldSubpixelPositionFonts = function (shouldSubpixelPositionFonts) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.setShouldSubpixelPositionFonts');
    };
    CGCommandContext2D.prototype.shouldSubpixelQuantizeFonts = function (shouldSubpixelQuantizeFonts) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.shouldSubpixelQuantizeFonts');
    };
    // Graphics2D virtual methods
    CGCommandContext2D.prototype.arc = function (x, y, w, h, start, stop, mode) { };
    CGCommandContext2D.prototype.drawImageBitmap = function (image, x, y) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('CGContext.drawImageBitmap');
    };
    CGCommandContext2D.prototype.Reset = function () {
        this.m_AddressTable.forEach(function (address) {
            (0,_tuval_core__WEBPACK_IMPORTED_MODULE_0__.free)(address);
        });
        this.m_AddressTable = [];
        this.IsOpened = false;
        this.IsClosed = false;
        this.m_StartPointer = 0;
        this.m_LastCommand = null;
        /*    const rect = new CGRectangle(0, 0, canvasContext.canvas.width, canvasContext.canvas.height);
           canvasContext.clearRect(rect.X, rect.Y, rect.Width, rect.Height); */
    };
    return CGCommandContext2D;
}());



/***/ }),

/***/ "./src/CGCommandContext/CommandContextPilot.ts":
/*!*****************************************************!*\
  !*** ./src/CGCommandContext/CommandContextPilot.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CommandContextPilot": () => (/* binding */ CommandContextPilot)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Commands_Commands__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Commands/Commands */ "./src/CGCommandContext/Commands/Commands.ts");


var CommandContextPilot = /** @class */ (function () {
    function CommandContextPilot(context) {
        this.m_Context = null;
        this.m_Context = context;
    }
    CommandContextPilot.prototype.Reset = function (canvasContext) {
        // console.log('ressssserrrt');
        this.m_Context.m_AddressTable.forEach(function (address) {
            try {
                (0,_tuval_core__WEBPACK_IMPORTED_MODULE_0__.free)(address);
            }
            catch (_a) {
                console.log('Adres serbest bırakılamadı. ' + address);
            }
        });
        this.m_Context.m_AddressTable = [];
        this.m_Context.IsOpened = false;
        this.m_Context.IsClosed = false;
        this.m_Context.m_StartPointer = 0;
        this.m_Context.m_LastCommand = null;
        /*    const rect = new CGRectangle(0, 0, canvasContext.canvas.width, canvasContext.canvas.height);
           canvasContext.clearRect(rect.X, rect.Y, rect.Width, rect.Height); */
    };
    CommandContextPilot.prototype.Drive = function (canvasContext) {
        if (!this.m_Context.IsOpened) {
            throw new _tuval_core__WEBPACK_IMPORTED_MODULE_0__.Exception(' Command context must be closed before drive. Use End method.');
        }
        else if (!this.m_Context.IsClosed) {
            this.m_Context.forceToEnd();
        }
        var startPtr = this.m_Context.GetStartPointer();
        var currentCommand = new _Commands_Commands__WEBPACK_IMPORTED_MODULE_1__.Commands[0](startPtr);
        currentCommand.ExecuteCommand(canvasContext);
        while (currentCommand.CommandType !== 1 && currentCommand.NextCommandPointer !== 0) {
            currentCommand = new _Commands_Commands__WEBPACK_IMPORTED_MODULE_1__.Commands[currentCommand.NextCommandType](currentCommand.NextCommandPointer);
            currentCommand.ExecuteCommand(canvasContext);
        }
    };
    return CommandContextPilot;
}());



/***/ }),

/***/ "./src/CGCommandContext/CommandContextPilotWithPointer.ts":
/*!****************************************************************!*\
  !*** ./src/CGCommandContext/CommandContextPilotWithPointer.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CommandContextPilotWithPointer": () => (/* binding */ CommandContextPilotWithPointer)
/* harmony export */ });
/* harmony import */ var _Commands__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Commands */ "./src/CGCommandContext/Commands/index.ts");

var CommandContextPilotWithPointer = /** @class */ (function () {
    function CommandContextPilotWithPointer(pointer) {
        this.m_StartPointer = 0;
        this.m_StartPointer = pointer;
    }
    CommandContextPilotWithPointer.prototype.Drive = function (canvasContext) {
        var currentCommand = new _Commands__WEBPACK_IMPORTED_MODULE_0__.Commands[0](this.m_StartPointer);
        currentCommand.ExecuteCommand(canvasContext);
        while (currentCommand.CommandType !== 1 && currentCommand.NextCommandPointer !== 0) {
            currentCommand = new _Commands__WEBPACK_IMPORTED_MODULE_0__.Commands[currentCommand.NextCommandType](currentCommand.NextCommandPointer);
            currentCommand.ExecuteCommand(canvasContext);
        }
    };
    return CommandContextPilotWithPointer;
}());



/***/ }),

/***/ "./src/CGCommandContext/Commands/AddArcToPointCommand.ts":
/*!***************************************************************!*\
  !*** ./src/CGCommandContext/Commands/AddArcToPointCommand.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddArcToPointCommand": () => (/* binding */ AddArcToPointCommand)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ICommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ICommand */ "./src/CGCommandContext/Commands/ICommand.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var AddArcToPointCommand = /** @class */ (function (_super) {
    __extends(AddArcToPointCommand, _super);
    function AddArcToPointCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CommandType = 19;
        return _this;
    }
    AddArcToPointCommand.prototype.ExecuteCommand = function (drawingContext) {
        drawingContext.arcTo(this.X1, this.Y1, this.X2, this.Y2, this.RADIUS);
        if (_ICommand__WEBPACK_IMPORTED_MODULE_1__.IsDebug) {
            console.log("AddArcToPointCommand");
        }
    };
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], AddArcToPointCommand.prototype, "CommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.FLOAT
    ], AddArcToPointCommand.prototype, "X1", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.FLOAT
    ], AddArcToPointCommand.prototype, "Y1", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.FLOAT
    ], AddArcToPointCommand.prototype, "X2", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.FLOAT
    ], AddArcToPointCommand.prototype, "Y2", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.FLOAT
    ], AddArcToPointCommand.prototype, "RADIUS", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], AddArcToPointCommand.prototype, "NextCommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], AddArcToPointCommand.prototype, "NextCommandPointer", void 0);
    return AddArcToPointCommand;
}(_tuval_core__WEBPACK_IMPORTED_MODULE_0__.UMO));



/***/ }),

/***/ "./src/CGCommandContext/Commands/AddCurveToPointCommand.ts":
/*!*****************************************************************!*\
  !*** ./src/CGCommandContext/Commands/AddCurveToPointCommand.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddCurveToPointCommand": () => (/* binding */ AddCurveToPointCommand)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ICommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ICommand */ "./src/CGCommandContext/Commands/ICommand.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var AddCurveToPointCommand = /** @class */ (function (_super) {
    __extends(AddCurveToPointCommand, _super);
    function AddCurveToPointCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CommandType = 22;
        return _this;
    }
    AddCurveToPointCommand.prototype.ExecuteCommand = function (drawingContext) {
        drawingContext.bezierCurveTo(this.CP1X, this.CP1Y, this.CP2X, this.CP2Y, this.X, this.Y);
        if (_ICommand__WEBPACK_IMPORTED_MODULE_1__.IsDebug) {
            console.log("AddCurveToPointCommand");
        }
    };
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], AddCurveToPointCommand.prototype, "CommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.FLOAT
    ], AddCurveToPointCommand.prototype, "CP1X", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.FLOAT
    ], AddCurveToPointCommand.prototype, "CP1Y", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.FLOAT
    ], AddCurveToPointCommand.prototype, "CP2X", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.FLOAT
    ], AddCurveToPointCommand.prototype, "CP2Y", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.FLOAT
    ], AddCurveToPointCommand.prototype, "X", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.FLOAT
    ], AddCurveToPointCommand.prototype, "Y", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], AddCurveToPointCommand.prototype, "NextCommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], AddCurveToPointCommand.prototype, "NextCommandPointer", void 0);
    return AddCurveToPointCommand;
}(_tuval_core__WEBPACK_IMPORTED_MODULE_0__.UMO));



/***/ }),

/***/ "./src/CGCommandContext/Commands/AddLineToPointCommand.ts":
/*!****************************************************************!*\
  !*** ./src/CGCommandContext/Commands/AddLineToPointCommand.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddLineToPointCommand": () => (/* binding */ AddLineToPointCommand)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ICommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ICommand */ "./src/CGCommandContext/Commands/ICommand.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var AddLineToPointCommand = /** @class */ (function (_super) {
    __extends(AddLineToPointCommand, _super);
    function AddLineToPointCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CommandType = 13;
        return _this;
    }
    AddLineToPointCommand.prototype.ExecuteCommand = function (drawingContext) {
        drawingContext.lineTo(this.X, this.Y);
        if (_ICommand__WEBPACK_IMPORTED_MODULE_1__.IsDebug) {
            console.log("AddLineToPointCommand x: " + this.X + ", y:" + this.Y);
        }
    };
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], AddLineToPointCommand.prototype, "CommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], AddLineToPointCommand.prototype, "X", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], AddLineToPointCommand.prototype, "Y", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], AddLineToPointCommand.prototype, "NextCommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], AddLineToPointCommand.prototype, "NextCommandPointer", void 0);
    return AddLineToPointCommand;
}(_tuval_core__WEBPACK_IMPORTED_MODULE_0__.UMO));



/***/ }),

/***/ "./src/CGCommandContext/Commands/BeginPathCommand.ts":
/*!***********************************************************!*\
  !*** ./src/CGCommandContext/Commands/BeginPathCommand.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BeginPathCommand": () => (/* binding */ BeginPathCommand)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ICommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ICommand */ "./src/CGCommandContext/Commands/ICommand.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var BeginPathCommand = /** @class */ (function (_super) {
    __extends(BeginPathCommand, _super);
    function BeginPathCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CommandType = 11;
        return _this;
    }
    BeginPathCommand.prototype.ExecuteCommand = function (drawingContext) {
        drawingContext.beginPath();
        if (_ICommand__WEBPACK_IMPORTED_MODULE_1__.IsDebug) {
            console.log("BeginPathCommand");
        }
    };
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], BeginPathCommand.prototype, "CommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], BeginPathCommand.prototype, "NextCommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], BeginPathCommand.prototype, "NextCommandPointer", void 0);
    return BeginPathCommand;
}(_tuval_core__WEBPACK_IMPORTED_MODULE_0__.UMO));



/***/ }),

/***/ "./src/CGCommandContext/Commands/ClearRectCommand.ts":
/*!***********************************************************!*\
  !*** ./src/CGCommandContext/Commands/ClearRectCommand.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ClearRectCommand": () => (/* binding */ ClearRectCommand)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ICommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ICommand */ "./src/CGCommandContext/Commands/ICommand.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var ClearRectCommand = /** @class */ (function (_super) {
    __extends(ClearRectCommand, _super);
    function ClearRectCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CommandType = 2;
        return _this;
    }
    ClearRectCommand.prototype.ExecuteCommand = function (drawingContext) {
        drawingContext.clearRect(this.X, this.Y, this.Width, this.Height);
        if (_ICommand__WEBPACK_IMPORTED_MODULE_1__.IsDebug) {
            console.log('ClearRect');
        }
    };
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], ClearRectCommand.prototype, "CommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], ClearRectCommand.prototype, "X", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], ClearRectCommand.prototype, "Y", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], ClearRectCommand.prototype, "Width", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], ClearRectCommand.prototype, "Height", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], ClearRectCommand.prototype, "NextCommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], ClearRectCommand.prototype, "NextCommandPointer", void 0);
    return ClearRectCommand;
}(_tuval_core__WEBPACK_IMPORTED_MODULE_0__.UMO));



/***/ }),

/***/ "./src/CGCommandContext/Commands/ClosePathCommand.ts":
/*!***********************************************************!*\
  !*** ./src/CGCommandContext/Commands/ClosePathCommand.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ClosePathCommand": () => (/* binding */ ClosePathCommand)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ICommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ICommand */ "./src/CGCommandContext/Commands/ICommand.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var ClosePathCommand = /** @class */ (function (_super) {
    __extends(ClosePathCommand, _super);
    function ClosePathCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CommandType = 20;
        return _this;
    }
    ClosePathCommand.prototype.ExecuteCommand = function (drawingContext) {
        drawingContext.closePath();
        if (_ICommand__WEBPACK_IMPORTED_MODULE_1__.IsDebug) {
            console.log("AddArcToPointCommand");
        }
    };
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], ClosePathCommand.prototype, "CommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], ClosePathCommand.prototype, "NextCommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], ClosePathCommand.prototype, "NextCommandPointer", void 0);
    return ClosePathCommand;
}(_tuval_core__WEBPACK_IMPORTED_MODULE_0__.UMO));



/***/ }),

/***/ "./src/CGCommandContext/Commands/Commands.ts":
/*!***************************************************!*\
  !*** ./src/CGCommandContext/Commands/Commands.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Commands": () => (/* binding */ Commands)
/* harmony export */ });
/* harmony import */ var _AddCurveToPointCommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AddCurveToPointCommand */ "./src/CGCommandContext/Commands/AddCurveToPointCommand.ts");
/* harmony import */ var _AddArcToPointCommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AddArcToPointCommand */ "./src/CGCommandContext/Commands/AddArcToPointCommand.ts");
/* harmony import */ var _AddLineToPointCommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AddLineToPointCommand */ "./src/CGCommandContext/Commands/AddLineToPointCommand.ts");
/* harmony import */ var _BeginPathCommand__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BeginPathCommand */ "./src/CGCommandContext/Commands/BeginPathCommand.ts");
/* harmony import */ var _ClearRectCommand__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ClearRectCommand */ "./src/CGCommandContext/Commands/ClearRectCommand.ts");
/* harmony import */ var _ClosePathCommand__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ClosePathCommand */ "./src/CGCommandContext/Commands/ClosePathCommand.ts");
/* harmony import */ var _DrawPathCommand__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./DrawPathCommand */ "./src/CGCommandContext/Commands/DrawPathCommand.ts");
/* harmony import */ var _EndCommand__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./EndCommand */ "./src/CGCommandContext/Commands/EndCommand.ts");
/* harmony import */ var _EOFillPathCommand__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./EOFillPathCommand */ "./src/CGCommandContext/Commands/EOFillPathCommand.ts");
/* harmony import */ var _MoveToCommand__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./MoveToCommand */ "./src/CGCommandContext/Commands/MoveToCommand.ts");
/* harmony import */ var _RestoreStateCommand__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./RestoreStateCommand */ "./src/CGCommandContext/Commands/RestoreStateCommand.ts");
/* harmony import */ var _RotateCommand__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./RotateCommand */ "./src/CGCommandContext/Commands/RotateCommand.ts");
/* harmony import */ var _SaveStateCommand__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./SaveStateCommand */ "./src/CGCommandContext/Commands/SaveStateCommand.ts");
/* harmony import */ var _ScaleCommand__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./ScaleCommand */ "./src/CGCommandContext/Commands/ScaleCommand.ts");
/* harmony import */ var _SetFillColorCommand__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./SetFillColorCommand */ "./src/CGCommandContext/Commands/SetFillColorCommand.ts");
/* harmony import */ var _SetLineCapCommand__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./SetLineCapCommand */ "./src/CGCommandContext/Commands/SetLineCapCommand.ts");
/* harmony import */ var _SetLineDashCommand__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./SetLineDashCommand */ "./src/CGCommandContext/Commands/SetLineDashCommand.ts");
/* harmony import */ var _SetLineWidthCommand__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./SetLineWidthCommand */ "./src/CGCommandContext/Commands/SetLineWidthCommand.ts");
/* harmony import */ var _SetShadowWithColorCommand__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./SetShadowWithColorCommand */ "./src/CGCommandContext/Commands/SetShadowWithColorCommand.ts");
/* harmony import */ var _SetStrokeColor__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./SetStrokeColor */ "./src/CGCommandContext/Commands/SetStrokeColor.ts");
/* harmony import */ var _StartCommand__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./StartCommand */ "./src/CGCommandContext/Commands/StartCommand.ts");
/* harmony import */ var _TransformCommand__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./TransformCommand */ "./src/CGCommandContext/Commands/TransformCommand.ts");
/* harmony import */ var _TranslateCommand__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./TranslateCommand */ "./src/CGCommandContext/Commands/TranslateCommand.ts");























var Commands = [
    _StartCommand__WEBPACK_IMPORTED_MODULE_20__.StartCommand,
    _EndCommand__WEBPACK_IMPORTED_MODULE_7__.EndCommand,
    _ClearRectCommand__WEBPACK_IMPORTED_MODULE_4__.ClearRectCommand,
    _ScaleCommand__WEBPACK_IMPORTED_MODULE_13__.ScaleCommand,
    _TranslateCommand__WEBPACK_IMPORTED_MODULE_22__.TranslateCommand,
    _RotateCommand__WEBPACK_IMPORTED_MODULE_11__.RotateCommand,
    _TransformCommand__WEBPACK_IMPORTED_MODULE_21__.TransformCommand,
    _SaveStateCommand__WEBPACK_IMPORTED_MODULE_12__.SaveStateCommand,
    _RestoreStateCommand__WEBPACK_IMPORTED_MODULE_10__.RestoreStateCommand,
    _SetLineWidthCommand__WEBPACK_IMPORTED_MODULE_17__.SetLineWidthCommand,
    _SetLineCapCommand__WEBPACK_IMPORTED_MODULE_15__.SetLineCapCommand,
    _BeginPathCommand__WEBPACK_IMPORTED_MODULE_3__.BeginPathCommand,
    _MoveToCommand__WEBPACK_IMPORTED_MODULE_9__.MoveToCommand,
    _AddLineToPointCommand__WEBPACK_IMPORTED_MODULE_2__.AddLineToPointCommand,
    _SetShadowWithColorCommand__WEBPACK_IMPORTED_MODULE_18__.SetShadowWithColorCommand,
    _SetStrokeColor__WEBPACK_IMPORTED_MODULE_19__.SetStrokeColor,
    _SetLineDashCommand__WEBPACK_IMPORTED_MODULE_16__.SetLineDashCommand,
    _DrawPathCommand__WEBPACK_IMPORTED_MODULE_6__.DrawPathCommand,
    _SetFillColorCommand__WEBPACK_IMPORTED_MODULE_14__.SetFillColorCommand,
    _AddArcToPointCommand__WEBPACK_IMPORTED_MODULE_1__.AddArcToPointCommand,
    _ClosePathCommand__WEBPACK_IMPORTED_MODULE_5__.ClosePathCommand,
    _EOFillPathCommand__WEBPACK_IMPORTED_MODULE_8__.EOFillPathCommand,
    _AddCurveToPointCommand__WEBPACK_IMPORTED_MODULE_0__.AddCurveToPointCommand //22
];


/***/ }),

/***/ "./src/CGCommandContext/Commands/DrawPathCommand.ts":
/*!**********************************************************!*\
  !*** ./src/CGCommandContext/Commands/DrawPathCommand.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DrawPathCommand": () => (/* binding */ DrawPathCommand)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _CGPath_CGPathDrawingMode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CGPath/CGPathDrawingMode */ "./src/CGPath/CGPathDrawingMode.ts");
/* harmony import */ var _ICommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ICommand */ "./src/CGCommandContext/Commands/ICommand.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



var DrawPathCommand = /** @class */ (function (_super) {
    __extends(DrawPathCommand, _super);
    function DrawPathCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CommandType = 17;
        _this.MODE = _CGPath_CGPathDrawingMode__WEBPACK_IMPORTED_MODULE_1__.CGPathDrawingMode.Stroke;
        return _this;
    }
    DrawPathCommand.prototype.ExecuteCommand = function (drawingContext) {
        //this.drawingContext.translate(tx, ty);
        if (this.MODE === _CGPath_CGPathDrawingMode__WEBPACK_IMPORTED_MODULE_1__.CGPathDrawingMode.Stroke) {
            drawingContext.stroke();
        }
        if (_ICommand__WEBPACK_IMPORTED_MODULE_2__.IsDebug) {
            console.log("DrawPathCommand");
        }
    };
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], DrawPathCommand.prototype, "CommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], DrawPathCommand.prototype, "MODE", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], DrawPathCommand.prototype, "NextCommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], DrawPathCommand.prototype, "NextCommandPointer", void 0);
    return DrawPathCommand;
}(_tuval_core__WEBPACK_IMPORTED_MODULE_0__.UMO));



/***/ }),

/***/ "./src/CGCommandContext/Commands/EOFillPathCommand.ts":
/*!************************************************************!*\
  !*** ./src/CGCommandContext/Commands/EOFillPathCommand.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EOFillPathCommand": () => (/* binding */ EOFillPathCommand)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ICommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ICommand */ "./src/CGCommandContext/Commands/ICommand.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var EOFillPathCommand = /** @class */ (function (_super) {
    __extends(EOFillPathCommand, _super);
    function EOFillPathCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CommandType = 21;
        return _this;
    }
    EOFillPathCommand.prototype.ExecuteCommand = function (drawingContext) {
        drawingContext.msFillRule = 'evenodd';
        drawingContext.fill();
        if (_ICommand__WEBPACK_IMPORTED_MODULE_1__.IsDebug) {
            console.log("EOFillPathCommand");
        }
    };
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], EOFillPathCommand.prototype, "CommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], EOFillPathCommand.prototype, "NextCommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], EOFillPathCommand.prototype, "NextCommandPointer", void 0);
    return EOFillPathCommand;
}(_tuval_core__WEBPACK_IMPORTED_MODULE_0__.UMO));



/***/ }),

/***/ "./src/CGCommandContext/Commands/EndCommand.ts":
/*!*****************************************************!*\
  !*** ./src/CGCommandContext/Commands/EndCommand.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EndCommand": () => (/* binding */ EndCommand)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ICommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ICommand */ "./src/CGCommandContext/Commands/ICommand.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var EndCommand = /** @class */ (function (_super) {
    __extends(EndCommand, _super);
    function EndCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CommandType = 1;
        return _this;
    }
    EndCommand.prototype.ExecuteCommand = function (drawingContext) {
        if (_ICommand__WEBPACK_IMPORTED_MODULE_1__.IsDebug) {
            console.log('EndCommand');
        }
    };
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], EndCommand.prototype, "CommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], EndCommand.prototype, "NextCommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], EndCommand.prototype, "NextCommandPointer", void 0);
    return EndCommand;
}(_tuval_core__WEBPACK_IMPORTED_MODULE_0__.UMO));



/***/ }),

/***/ "./src/CGCommandContext/Commands/ICommand.ts":
/*!***************************************************!*\
  !*** ./src/CGCommandContext/Commands/ICommand.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IsDebug": () => (/* binding */ IsDebug)
/* harmony export */ });
var IsDebug = false;


/***/ }),

/***/ "./src/CGCommandContext/Commands/MoveToCommand.ts":
/*!********************************************************!*\
  !*** ./src/CGCommandContext/Commands/MoveToCommand.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MoveToCommand": () => (/* binding */ MoveToCommand)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ICommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ICommand */ "./src/CGCommandContext/Commands/ICommand.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var MoveToCommand = /** @class */ (function (_super) {
    __extends(MoveToCommand, _super);
    function MoveToCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CommandType = 12;
        return _this;
    }
    MoveToCommand.prototype.ExecuteCommand = function (drawingContext) {
        drawingContext.moveTo(this.X, this.Y);
        if (_ICommand__WEBPACK_IMPORTED_MODULE_1__.IsDebug) {
            console.log("MoveToCommand x: " + this.X + ", y:" + this.Y);
        }
    };
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], MoveToCommand.prototype, "CommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], MoveToCommand.prototype, "X", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], MoveToCommand.prototype, "Y", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], MoveToCommand.prototype, "NextCommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], MoveToCommand.prototype, "NextCommandPointer", void 0);
    return MoveToCommand;
}(_tuval_core__WEBPACK_IMPORTED_MODULE_0__.UMO));



/***/ }),

/***/ "./src/CGCommandContext/Commands/RestoreStateCommand.ts":
/*!**************************************************************!*\
  !*** ./src/CGCommandContext/Commands/RestoreStateCommand.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RestoreStateCommand": () => (/* binding */ RestoreStateCommand)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ICommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ICommand */ "./src/CGCommandContext/Commands/ICommand.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var RestoreStateCommand = /** @class */ (function (_super) {
    __extends(RestoreStateCommand, _super);
    function RestoreStateCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CommandType = 8;
        return _this;
    }
    RestoreStateCommand.prototype.ExecuteCommand = function (drawingContext) {
        drawingContext.restore();
        if (_ICommand__WEBPACK_IMPORTED_MODULE_1__.IsDebug) {
            console.log("Restore State");
        }
    };
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], RestoreStateCommand.prototype, "CommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], RestoreStateCommand.prototype, "NextCommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], RestoreStateCommand.prototype, "NextCommandPointer", void 0);
    return RestoreStateCommand;
}(_tuval_core__WEBPACK_IMPORTED_MODULE_0__.UMO));



/***/ }),

/***/ "./src/CGCommandContext/Commands/RotateCommand.ts":
/*!********************************************************!*\
  !*** ./src/CGCommandContext/Commands/RotateCommand.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RotateCommand": () => (/* binding */ RotateCommand)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ICommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ICommand */ "./src/CGCommandContext/Commands/ICommand.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var RotateCommand = /** @class */ (function (_super) {
    __extends(RotateCommand, _super);
    function RotateCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CommandType = 5;
        return _this;
    }
    RotateCommand.prototype.ExecuteCommand = function (drawingContext) {
        drawingContext.rotate(this.Angle);
        if (_ICommand__WEBPACK_IMPORTED_MODULE_1__.IsDebug) {
            console.log("Rotate angle: " + this.Angle);
        }
    };
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], RotateCommand.prototype, "CommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.FLOAT
    ], RotateCommand.prototype, "Angle", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], RotateCommand.prototype, "NextCommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], RotateCommand.prototype, "NextCommandPointer", void 0);
    return RotateCommand;
}(_tuval_core__WEBPACK_IMPORTED_MODULE_0__.UMO));



/***/ }),

/***/ "./src/CGCommandContext/Commands/SaveStateCommand.ts":
/*!***********************************************************!*\
  !*** ./src/CGCommandContext/Commands/SaveStateCommand.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SaveStateCommand": () => (/* binding */ SaveStateCommand)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ICommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ICommand */ "./src/CGCommandContext/Commands/ICommand.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var SaveStateCommand = /** @class */ (function (_super) {
    __extends(SaveStateCommand, _super);
    function SaveStateCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CommandType = 7;
        return _this;
    }
    SaveStateCommand.prototype.ExecuteCommand = function (drawingContext) {
        drawingContext.save();
        if (_ICommand__WEBPACK_IMPORTED_MODULE_1__.IsDebug) {
            console.log("Save State");
        }
    };
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SaveStateCommand.prototype, "CommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SaveStateCommand.prototype, "NextCommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SaveStateCommand.prototype, "NextCommandPointer", void 0);
    return SaveStateCommand;
}(_tuval_core__WEBPACK_IMPORTED_MODULE_0__.UMO));



/***/ }),

/***/ "./src/CGCommandContext/Commands/ScaleCommand.ts":
/*!*******************************************************!*\
  !*** ./src/CGCommandContext/Commands/ScaleCommand.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ScaleCommand": () => (/* binding */ ScaleCommand)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ICommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ICommand */ "./src/CGCommandContext/Commands/ICommand.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var ScaleCommand = /** @class */ (function (_super) {
    __extends(ScaleCommand, _super);
    function ScaleCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CommandType = 3;
        return _this;
    }
    ScaleCommand.prototype.ExecuteCommand = function (drawingContext) {
        //drawingContext.scale(this.SX, this.SY);
        drawingContext.scale(this.SX, this.SY);
        if (_ICommand__WEBPACK_IMPORTED_MODULE_1__.IsDebug) {
            console.log("Scale x: " + this.SX + ", y : " + this.SY);
        }
    };
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], ScaleCommand.prototype, "CommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.FLOAT
    ], ScaleCommand.prototype, "SX", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.FLOAT
    ], ScaleCommand.prototype, "SY", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], ScaleCommand.prototype, "NextCommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], ScaleCommand.prototype, "NextCommandPointer", void 0);
    return ScaleCommand;
}(_tuval_core__WEBPACK_IMPORTED_MODULE_0__.UMO));



/***/ }),

/***/ "./src/CGCommandContext/Commands/SetFillColorCommand.ts":
/*!**************************************************************!*\
  !*** ./src/CGCommandContext/Commands/SetFillColorCommand.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SetFillColorCommand": () => (/* binding */ SetFillColorCommand)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ICommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ICommand */ "./src/CGCommandContext/Commands/ICommand.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var SetFillColorCommand = /** @class */ (function (_super) {
    __extends(SetFillColorCommand, _super);
    function SetFillColorCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CommandType = 18;
        return _this;
    }
    SetFillColorCommand.prototype.ExecuteCommand = function (drawingContext) {
        drawingContext.fillStyle = this.COLOR;
        if (_ICommand__WEBPACK_IMPORTED_MODULE_1__.IsDebug) {
            console.log("SetFillColorCommand color:" + this.COLOR);
        }
    };
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SetFillColorCommand.prototype, "CommandType", void 0);
    __decorate([
        (0,_tuval_core__WEBPACK_IMPORTED_MODULE_0__.STRING)(20)
    ], SetFillColorCommand.prototype, "COLOR", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SetFillColorCommand.prototype, "NextCommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SetFillColorCommand.prototype, "NextCommandPointer", void 0);
    return SetFillColorCommand;
}(_tuval_core__WEBPACK_IMPORTED_MODULE_0__.UMO));



/***/ }),

/***/ "./src/CGCommandContext/Commands/SetLineCapCommand.ts":
/*!************************************************************!*\
  !*** ./src/CGCommandContext/Commands/SetLineCapCommand.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SetLineCapCommand": () => (/* binding */ SetLineCapCommand)
/* harmony export */ });
/* harmony import */ var _CGLineCap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../CGLineCap */ "./src/CGLineCap.ts");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ICommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ICommand */ "./src/CGCommandContext/Commands/ICommand.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



var SetLineCapCommand = /** @class */ (function (_super) {
    __extends(SetLineCapCommand, _super);
    function SetLineCapCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CommandType = 10;
        _this.CAP = _CGLineCap__WEBPACK_IMPORTED_MODULE_0__.CGLineCap.Butt;
        return _this;
    }
    SetLineCapCommand.prototype.ExecuteCommand = function (drawingContext) {
        switch (this.CAP) {
            case _CGLineCap__WEBPACK_IMPORTED_MODULE_0__.CGLineCap.Round:
                drawingContext.lineCap = 'round';
                break;
            case _CGLineCap__WEBPACK_IMPORTED_MODULE_0__.CGLineCap.Butt:
                drawingContext.lineCap = 'butt';
                break;
            default:
                drawingContext.lineCap = 'square';
                break;
        }
        if (_ICommand__WEBPACK_IMPORTED_MODULE_2__.IsDebug) {
            console.log("SetLineWidthCommand  cap: " + _CGLineCap__WEBPACK_IMPORTED_MODULE_0__.CGLineCap[this.CAP]);
        }
    };
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_1__.LONG
    ], SetLineCapCommand.prototype, "CommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_1__.LONG
    ], SetLineCapCommand.prototype, "CAP", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_1__.LONG
    ], SetLineCapCommand.prototype, "NextCommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_1__.LONG
    ], SetLineCapCommand.prototype, "NextCommandPointer", void 0);
    return SetLineCapCommand;
}(_tuval_core__WEBPACK_IMPORTED_MODULE_1__.UMO));



/***/ }),

/***/ "./src/CGCommandContext/Commands/SetLineDashCommand.ts":
/*!*************************************************************!*\
  !*** ./src/CGCommandContext/Commands/SetLineDashCommand.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SetLineDashCommand": () => (/* binding */ SetLineDashCommand)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ICommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ICommand */ "./src/CGCommandContext/Commands/ICommand.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var SetLineDashCommand = /** @class */ (function (_super) {
    __extends(SetLineDashCommand, _super);
    function SetLineDashCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CommandType = 16;
        return _this;
    }
    SetLineDashCommand.prototype.ExecuteCommand = function (drawingContext) {
        drawingContext.lineDashOffset = this.DASHOFFSET;
        var dashArray = [];
        if (this.DASH_COUNT > 5) {
            dashArray = [this.DASH1, this.DASH2, this.DASH3, this.DASH4, this.DASH5, this.DASH6];
        }
        else if (this.DASH_COUNT > 4) {
            dashArray = [this.DASH1, this.DASH2, this.DASH3, this.DASH4, this.DASH5];
        }
        else if (this.DASH_COUNT > 3) {
            dashArray = [this.DASH1, this.DASH2, this.DASH3, this.DASH4];
        }
        else if (this.DASH_COUNT > 2) {
            dashArray = [this.DASH1, this.DASH2, this.DASH3];
        }
        else if (this.DASH_COUNT > 1) {
            dashArray = [this.DASH1, this.DASH2];
        }
        if (this.DASH_COUNT > 0) {
            dashArray = [this.DASH1];
        }
        drawingContext.setLineDash(dashArray);
        if (_ICommand__WEBPACK_IMPORTED_MODULE_1__.IsDebug) {
            console.log("SetLineDashCommand");
        }
    };
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SetLineDashCommand.prototype, "CommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.FLOAT
    ], SetLineDashCommand.prototype, "DASHOFFSET", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SetLineDashCommand.prototype, "DASH_COUNT", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SetLineDashCommand.prototype, "DASH1", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SetLineDashCommand.prototype, "DASH2", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SetLineDashCommand.prototype, "DASH3", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SetLineDashCommand.prototype, "DASH4", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SetLineDashCommand.prototype, "DASH5", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SetLineDashCommand.prototype, "DASH6", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SetLineDashCommand.prototype, "NextCommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SetLineDashCommand.prototype, "NextCommandPointer", void 0);
    return SetLineDashCommand;
}(_tuval_core__WEBPACK_IMPORTED_MODULE_0__.UMO));



/***/ }),

/***/ "./src/CGCommandContext/Commands/SetLineWidthCommand.ts":
/*!**************************************************************!*\
  !*** ./src/CGCommandContext/Commands/SetLineWidthCommand.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SetLineWidthCommand": () => (/* binding */ SetLineWidthCommand)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ICommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ICommand */ "./src/CGCommandContext/Commands/ICommand.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var SetLineWidthCommand = /** @class */ (function (_super) {
    __extends(SetLineWidthCommand, _super);
    function SetLineWidthCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CommandType = 9;
        return _this;
    }
    SetLineWidthCommand.prototype.ExecuteCommand = function (drawingContext) {
        drawingContext.lineWidth = this.WIDTH;
        if (_ICommand__WEBPACK_IMPORTED_MODULE_1__.IsDebug) {
            console.log("SetLineWidth  width: " + this.WIDTH);
        }
    };
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SetLineWidthCommand.prototype, "CommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SetLineWidthCommand.prototype, "WIDTH", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SetLineWidthCommand.prototype, "NextCommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SetLineWidthCommand.prototype, "NextCommandPointer", void 0);
    return SetLineWidthCommand;
}(_tuval_core__WEBPACK_IMPORTED_MODULE_0__.UMO));



/***/ }),

/***/ "./src/CGCommandContext/Commands/SetShadowWithColorCommand.ts":
/*!********************************************************************!*\
  !*** ./src/CGCommandContext/Commands/SetShadowWithColorCommand.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SetShadowWithColorCommand": () => (/* binding */ SetShadowWithColorCommand)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ICommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ICommand */ "./src/CGCommandContext/Commands/ICommand.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var SetShadowWithColorCommand = /** @class */ (function (_super) {
    __extends(SetShadowWithColorCommand, _super);
    function SetShadowWithColorCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CommandType = 14;
        return _this;
    }
    SetShadowWithColorCommand.prototype.ExecuteCommand = function (drawingContext) {
        var ctx = drawingContext;
        ctx.shadowColor = this.COLOR;
        ctx.shadowOffsetX = this.WIDTH;
        ctx.shadowOffsetY = this.HEIGHT;
        ctx.shadowBlur = this.BLUR;
        if (_ICommand__WEBPACK_IMPORTED_MODULE_1__.IsDebug) {
            console.log("SetShadowWithColorCommand Width: " + this.WIDTH + ", height:" + this.HEIGHT + ", Color: " + this.COLOR);
        }
    };
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SetShadowWithColorCommand.prototype, "CommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SetShadowWithColorCommand.prototype, "WIDTH", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SetShadowWithColorCommand.prototype, "HEIGHT", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.FLOAT
    ], SetShadowWithColorCommand.prototype, "BLUR", void 0);
    __decorate([
        (0,_tuval_core__WEBPACK_IMPORTED_MODULE_0__.STRING)(20)
    ], SetShadowWithColorCommand.prototype, "COLOR", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SetShadowWithColorCommand.prototype, "NextCommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SetShadowWithColorCommand.prototype, "NextCommandPointer", void 0);
    return SetShadowWithColorCommand;
}(_tuval_core__WEBPACK_IMPORTED_MODULE_0__.UMO));



/***/ }),

/***/ "./src/CGCommandContext/Commands/SetStrokeColor.ts":
/*!*********************************************************!*\
  !*** ./src/CGCommandContext/Commands/SetStrokeColor.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SetStrokeColor": () => (/* binding */ SetStrokeColor)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ICommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ICommand */ "./src/CGCommandContext/Commands/ICommand.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var SetStrokeColor = /** @class */ (function (_super) {
    __extends(SetStrokeColor, _super);
    function SetStrokeColor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CommandType = 15;
        return _this;
    }
    SetStrokeColor.prototype.ExecuteCommand = function (drawingContext) {
        drawingContext.strokeStyle = this.COLOR;
        if (_ICommand__WEBPACK_IMPORTED_MODULE_1__.IsDebug) {
            console.log("SetStrokeColor Color: " + this.COLOR);
        }
    };
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SetStrokeColor.prototype, "CommandType", void 0);
    __decorate([
        (0,_tuval_core__WEBPACK_IMPORTED_MODULE_0__.STRING)(20)
    ], SetStrokeColor.prototype, "COLOR", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SetStrokeColor.prototype, "NextCommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], SetStrokeColor.prototype, "NextCommandPointer", void 0);
    return SetStrokeColor;
}(_tuval_core__WEBPACK_IMPORTED_MODULE_0__.UMO));



/***/ }),

/***/ "./src/CGCommandContext/Commands/StartCommand.ts":
/*!*******************************************************!*\
  !*** ./src/CGCommandContext/Commands/StartCommand.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StartCommand": () => (/* binding */ StartCommand)
/* harmony export */ });
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../types */ "./src/types.ts");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ICommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ICommand */ "./src/CGCommandContext/Commands/ICommand.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



var StartCommand = /** @class */ (function (_super) {
    __extends(StartCommand, _super);
    function StartCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CommandType = 0;
        return _this;
    }
    StartCommand.prototype.ExecuteCommand = function (drawingContext) {
        if (_ICommand__WEBPACK_IMPORTED_MODULE_2__.IsDebug) {
            console.log('StartCommand');
        }
    };
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_1__.LONG
    ], StartCommand.prototype, "CommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_1__.LONG
    ], StartCommand.prototype, "NextCommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_1__.LONG
    ], StartCommand.prototype, "NextCommandPointer", void 0);
    StartCommand = __decorate([
        (0,_tuval_core__WEBPACK_IMPORTED_MODULE_1__.ClassInfo)({
            fullName: _types__WEBPACK_IMPORTED_MODULE_0__.CoreGraphicTypes.StartCommand,
            instanceof: [
                _types__WEBPACK_IMPORTED_MODULE_0__.CoreGraphicTypes.StartCommand
            ]
        })
    ], StartCommand);
    return StartCommand;
}(_tuval_core__WEBPACK_IMPORTED_MODULE_1__.UMO));



/***/ }),

/***/ "./src/CGCommandContext/Commands/TransformCommand.ts":
/*!***********************************************************!*\
  !*** ./src/CGCommandContext/Commands/TransformCommand.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TransformCommand": () => (/* binding */ TransformCommand)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ICommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ICommand */ "./src/CGCommandContext/Commands/ICommand.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var TransformCommand = /** @class */ (function (_super) {
    __extends(TransformCommand, _super);
    function TransformCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CommandType = 6;
        return _this;
    }
    TransformCommand.prototype.ExecuteCommand = function (drawingContext) {
        drawingContext.transform(this.A, this.B, this.C, this.D, this.E, this.F);
        if (_ICommand__WEBPACK_IMPORTED_MODULE_1__.IsDebug) {
            console.log("TransformCommand a: " + this.A + ", b: " + this.B + ", c: " + this.C);
        }
    };
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], TransformCommand.prototype, "CommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.FLOAT
    ], TransformCommand.prototype, "A", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.FLOAT
    ], TransformCommand.prototype, "B", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.FLOAT
    ], TransformCommand.prototype, "C", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.FLOAT
    ], TransformCommand.prototype, "D", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.FLOAT
    ], TransformCommand.prototype, "E", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.FLOAT
    ], TransformCommand.prototype, "F", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], TransformCommand.prototype, "NextCommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], TransformCommand.prototype, "NextCommandPointer", void 0);
    return TransformCommand;
}(_tuval_core__WEBPACK_IMPORTED_MODULE_0__.UMO));



/***/ }),

/***/ "./src/CGCommandContext/Commands/TranslateCommand.ts":
/*!***********************************************************!*\
  !*** ./src/CGCommandContext/Commands/TranslateCommand.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TranslateCommand": () => (/* binding */ TranslateCommand)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ICommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ICommand */ "./src/CGCommandContext/Commands/ICommand.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var TranslateCommand = /** @class */ (function (_super) {
    __extends(TranslateCommand, _super);
    function TranslateCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CommandType = 4;
        return _this;
    }
    TranslateCommand.prototype.ExecuteCommand = function (drawingContext) {
        drawingContext.translate(this.TX, this.TY);
        if (_ICommand__WEBPACK_IMPORTED_MODULE_1__.IsDebug) {
            console.log("Translate x: " + this.TX + ", y : " + this.TY);
        }
    };
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], TranslateCommand.prototype, "CommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.FLOAT
    ], TranslateCommand.prototype, "TX", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.FLOAT
    ], TranslateCommand.prototype, "TY", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], TranslateCommand.prototype, "NextCommandType", void 0);
    __decorate([
        _tuval_core__WEBPACK_IMPORTED_MODULE_0__.LONG
    ], TranslateCommand.prototype, "NextCommandPointer", void 0);
    return TranslateCommand;
}(_tuval_core__WEBPACK_IMPORTED_MODULE_0__.UMO));



/***/ }),

/***/ "./src/CGCommandContext/Commands/index.ts":
/*!************************************************!*\
  !*** ./src/CGCommandContext/Commands/index.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ClearRectCommand": () => (/* reexport safe */ _ClearRectCommand__WEBPACK_IMPORTED_MODULE_0__.ClearRectCommand),
/* harmony export */   "Commands": () => (/* reexport safe */ _Commands__WEBPACK_IMPORTED_MODULE_1__.Commands),
/* harmony export */   "EndCommand": () => (/* reexport safe */ _EndCommand__WEBPACK_IMPORTED_MODULE_2__.EndCommand),
/* harmony export */   "IsDebug": () => (/* reexport safe */ _ICommand__WEBPACK_IMPORTED_MODULE_3__.IsDebug),
/* harmony export */   "RotateCommand": () => (/* reexport safe */ _RotateCommand__WEBPACK_IMPORTED_MODULE_4__.RotateCommand),
/* harmony export */   "ScaleCommand": () => (/* reexport safe */ _ScaleCommand__WEBPACK_IMPORTED_MODULE_5__.ScaleCommand),
/* harmony export */   "StartCommand": () => (/* reexport safe */ _StartCommand__WEBPACK_IMPORTED_MODULE_6__.StartCommand),
/* harmony export */   "TransformCommand": () => (/* reexport safe */ _TransformCommand__WEBPACK_IMPORTED_MODULE_7__.TransformCommand),
/* harmony export */   "TranslateCommand": () => (/* reexport safe */ _TranslateCommand__WEBPACK_IMPORTED_MODULE_8__.TranslateCommand)
/* harmony export */ });
/* harmony import */ var _ClearRectCommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ClearRectCommand */ "./src/CGCommandContext/Commands/ClearRectCommand.ts");
/* harmony import */ var _Commands__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Commands */ "./src/CGCommandContext/Commands/Commands.ts");
/* harmony import */ var _EndCommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EndCommand */ "./src/CGCommandContext/Commands/EndCommand.ts");
/* harmony import */ var _ICommand__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ICommand */ "./src/CGCommandContext/Commands/ICommand.ts");
/* harmony import */ var _RotateCommand__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./RotateCommand */ "./src/CGCommandContext/Commands/RotateCommand.ts");
/* harmony import */ var _ScaleCommand__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ScaleCommand */ "./src/CGCommandContext/Commands/ScaleCommand.ts");
/* harmony import */ var _StartCommand__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./StartCommand */ "./src/CGCommandContext/Commands/StartCommand.ts");
/* harmony import */ var _TransformCommand__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./TransformCommand */ "./src/CGCommandContext/Commands/TransformCommand.ts");
/* harmony import */ var _TranslateCommand__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./TranslateCommand */ "./src/CGCommandContext/Commands/TranslateCommand.ts");











/***/ }),

/***/ "./src/CGCommandContext/index.ts":
/*!***************************************!*\
  !*** ./src/CGCommandContext/index.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CGCommandContext2D": () => (/* reexport safe */ _CGCommandContext__WEBPACK_IMPORTED_MODULE_0__.CGCommandContext2D),
/* harmony export */   "CommandContextPilot": () => (/* reexport safe */ _CommandContextPilot__WEBPACK_IMPORTED_MODULE_1__.CommandContextPilot),
/* harmony export */   "CommandContextPilotWithPointer": () => (/* reexport safe */ _CommandContextPilotWithPointer__WEBPACK_IMPORTED_MODULE_2__.CommandContextPilotWithPointer),
/* harmony export */   "ClearRectCommand": () => (/* reexport safe */ _Commands__WEBPACK_IMPORTED_MODULE_3__.ClearRectCommand),
/* harmony export */   "Commands": () => (/* reexport safe */ _Commands__WEBPACK_IMPORTED_MODULE_3__.Commands),
/* harmony export */   "EndCommand": () => (/* reexport safe */ _Commands__WEBPACK_IMPORTED_MODULE_3__.EndCommand),
/* harmony export */   "IsDebug": () => (/* reexport safe */ _Commands__WEBPACK_IMPORTED_MODULE_3__.IsDebug),
/* harmony export */   "RotateCommand": () => (/* reexport safe */ _Commands__WEBPACK_IMPORTED_MODULE_3__.RotateCommand),
/* harmony export */   "ScaleCommand": () => (/* reexport safe */ _Commands__WEBPACK_IMPORTED_MODULE_3__.ScaleCommand),
/* harmony export */   "StartCommand": () => (/* reexport safe */ _Commands__WEBPACK_IMPORTED_MODULE_3__.StartCommand),
/* harmony export */   "TransformCommand": () => (/* reexport safe */ _Commands__WEBPACK_IMPORTED_MODULE_3__.TransformCommand),
/* harmony export */   "TranslateCommand": () => (/* reexport safe */ _Commands__WEBPACK_IMPORTED_MODULE_3__.TranslateCommand)
/* harmony export */ });
/* harmony import */ var _CGCommandContext__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CGCommandContext */ "./src/CGCommandContext/CGCommandContext.ts");
/* harmony import */ var _CommandContextPilot__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CommandContextPilot */ "./src/CGCommandContext/CommandContextPilot.ts");
/* harmony import */ var _CommandContextPilotWithPointer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CommandContextPilotWithPointer */ "./src/CGCommandContext/CommandContextPilotWithPointer.ts");
/* harmony import */ var _Commands__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Commands */ "./src/CGCommandContext/Commands/index.ts");






/***/ }),

/***/ "./src/CGContext.ts":
/*!**************************!*\
  !*** ./src/CGContext.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CGContext2D": () => (/* binding */ CGContext2D)
/* harmony export */ });
/* harmony import */ var _FontStyle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FontStyle */ "./src/FontStyle.ts");
/* harmony import */ var _CGRectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CGRectangle */ "./src/CGRectangle.ts");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _CGLineCap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CGLineCap */ "./src/CGLineCap.ts");
/* harmony import */ var _CGPath_CGPathDrawingMode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CGPath/CGPathDrawingMode */ "./src/CGPath/CGPathDrawingMode.ts");
/* harmony import */ var _CGColor_CGColor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CGColor/CGColor */ "./src/CGColor/CGColor.ts");
/* harmony import */ var _WrapMode__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./WrapMode */ "./src/WrapMode.ts");
/* harmony import */ var _CGSize__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./CGSize */ "./src/CGSize.ts");
/* harmony import */ var _CGInterpolationQuality__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./CGInterpolationQuality */ "./src/CGInterpolationQuality.ts");
/* harmony import */ var _StringAlignment__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./StringAlignment */ "./src/StringAlignment.ts");
/* harmony import */ var _CGFont_FontFamily__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./CGFont/FontFamily */ "./src/CGFont/FontFamily.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./types */ "./src/types.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};












var CGContext2D = /** @class */ (function () {
    function CGContext2D(context) {
        this.clipArea = undefined;
        this.InterpolationQuality = _CGInterpolationQuality__WEBPACK_IMPORTED_MODULE_8__.CGInterpolationQuality.Default;
        this.TextPosition = undefined;
        this.TextMatrix = undefined;
        if (context == null) {
            throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.ArgumentNullException("Invalid parameters to context creation");
        }
        this.drawingContext = context;
    }
    CGContext2D_1 = CGContext2D;
    CGContext2D.prototype.transferToImageBitmap = function () {
        if (_tuval_core__WEBPACK_IMPORTED_MODULE_2__.is.workerContext()) {
            return this.drawingContext.canvas.transferToImageBitmap();
        }
        else {
            throw new Error("For use transferToImageBitmap, you must use offlinecanvas.");
        }
    };
    CGContext2D.prototype.scaleCTM = function (sx, sy) {
        this.drawingContext.scale(sx, sy);
    };
    CGContext2D.prototype.translateCTM = function (tx, ty) {
        // throw new NotImplementedException('CGContext.translateCTM');
        this.drawingContext.translate(tx, ty);
    };
    CGContext2D.prototype.rotateCTM = function (angle) {
        this.drawingContext.rotate(angle);
    };
    CGContext2D.prototype.concatCTM = function (transform) {
        // throw new NotImplementedException('CGContext.concatCTM');
        var matrix = transform.getMatrix();
        this.drawingContext.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);
    };
    CGContext2D.prototype.saveState = function () {
        this.drawingContext.save();
    };
    CGContext2D.prototype.restoreState = function () {
        // throw new NotImplementedException('CGContext.restoreState');
        this.drawingContext.restore();
    };
    CGContext2D.prototype.setLineWidth = function (w) {
        // throw new NotImplementedException('CGContext.setLineWidth');
        this.drawingContext.lineWidth = w;
    };
    CGContext2D.prototype.setLineCap = function (cap) {
        // throw new NotImplementedException('CGContext.setLineCap');
        switch (cap) {
            case _CGLineCap__WEBPACK_IMPORTED_MODULE_3__.CGLineCap.Round:
                this.drawingContext.lineCap = 'round';
                break;
            case _CGLineCap__WEBPACK_IMPORTED_MODULE_3__.CGLineCap.Butt:
                this.drawingContext.lineCap = 'butt';
                break;
            default:
                this.drawingContext.lineCap = 'square';
                break;
        }
    };
    CGContext2D.prototype.setLineJoin = function (join) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.setLineJoin');
    };
    CGContext2D.prototype.setMiterLimit = function (limit) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.setMiterLimit');
    };
    CGContext2D.prototype.setLineDash = function (phase, lengths, n) {
        // throw new NotImplementedException('CGContext.setLineDash');
        var dashOffset = (phase != null ? (phase >= 0 ? phase : 1) : 1);
        this.drawingContext.lineDashOffset = dashOffset;
        this.drawingContext.setLineDash(lengths);
    };
    CGContext2D.prototype.setFlatness = function (flatness) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.setFlatness');
    };
    CGContext2D.prototype.setAlpha = function (alpha) {
        this.drawingContext.globalAlpha = alpha;
    };
    CGContext2D.prototype.setBlendMode = function (mode) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.setBlendMode');
    };
    CGContext2D.prototype.getCTM = function () {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.getCTM');
    };
    CGContext2D.prototype.beginPath = function () {
        // throw new NotImplementedException('CGContext.beginPath');
        this.drawingContext.beginPath();
    };
    CGContext2D.prototype.moveTo = function (x, y) {
        // throw new NotImplementedException('CGContext.moveTo');
        this.drawingContext.moveTo(x, y);
    };
    CGContext2D.prototype.addLineToPoint = function (x, y) {
        // throw new NotImplementedException('CGContext.addLineToPoint');
        this.drawingContext.lineTo(x, y);
    };
    CGContext2D.prototype.addCurveToPoint = function (cp1x, cp1y, cp2x, cp2y, x, y) {
        // throw new NotImplementedException('CGContext.addCurveToPoint');
        this.drawingContext.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
    };
    CGContext2D.prototype.addQuadCurveToPoint = function (cpx, cpy, x, y) {
        // throw new NotImplementedException('CGContext.addQuadCurveToPoint');
        this.drawingContext.quadraticCurveTo(cpx, cpy, x, y);
    };
    CGContext2D.prototype.closePath = function () {
        // throw new NotImplementedException('CGContext.closePath');
        this.drawingContext.closePath();
    };
    CGContext2D.prototype.addRect = function (rect) {
        this.drawingContext.rect(rect.X, rect.Y, rect.Width, rect.Height);
    };
    CGContext2D.prototype.addRects = function (rects) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.addRects');
    };
    CGContext2D.prototype.addLines = function (points) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.addLines');
    };
    CGContext2D.prototype.addEllipseInRect = function (rect) {
        // throw new NotImplementedException('CGContext.addEllipseInRect');
        var centerX = rect.X + (rect.Width / 2);
        var centerY = rect.Y + (rect.Height / 2);
        this.drawingContext.ellipse(centerX, centerY, rect.Width / 2, rect.Height / 2, 0, 0, 2 * Math.PI);
    };
    CGContext2D.prototype.addArc = function (x, y, radius, startAngle, endAngle, clockwise) {
        this.drawingContext.arc(x, y, radius, startAngle, endAngle);
    };
    CGContext2D.prototype.addArcToPoint = function (x1, y1, x2, y2, radius) {
        if (radius >= 0) {
            this.drawingContext.arcTo(x1, y1, x2, y2, radius);
        }
    };
    CGContext2D.prototype.addPath = function (path) {
        setTimeout(function () {
            throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.addPath');
        }, 100);
    };
    CGContext2D.prototype.replacePathWithStrokedPath = function () {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.replacePathWithStrokedPath');
    };
    CGContext2D.prototype.getPathCurrentPoint = function () {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.getPathCurrentPoint');
    };
    CGContext2D.prototype.getPathBoundingBox = function () {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.getPathCurrentPoint');
    };
    CGContext2D.prototype.pathContainsPoint = function (point, mode) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.pathContainsPoint');
    };
    CGContext2D.prototype.drawPath = function (mode) {
        // throw new NotImplementedException('CGContext.drawPath');
        if (mode === _CGPath_CGPathDrawingMode__WEBPACK_IMPORTED_MODULE_4__.CGPathDrawingMode.Stroke) {
            this.drawingContext.stroke();
        }
    };
    CGContext2D.prototype.fillPath = function () {
        // throw new NotImplementedException('CGContext.fillPath');
        this.drawingContext.msFillRule = 'nonzero';
        this.drawingContext.fill();
    };
    CGContext2D.prototype.eOFillPath = function () {
        //throw new NotImplementedException('CGContext.eOFillPath');
        this.drawingContext.msFillRule = 'evenodd';
        this.drawingContext.fill();
    };
    CGContext2D.prototype.strokePath = function () {
        // throw new NotImplementedException('CGContext.strokePath');
        this.drawingContext.stroke();
    };
    CGContext2D.prototype.fillRect = function (rect) {
        // throw new NotImplementedException('CGContext.fillRect');
        this.drawingContext.fillRect(rect.X, rect.Y, rect.Width, rect.Height);
    };
    CGContext2D.prototype.contextFillRects = function (rects) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.contextFillRects');
    };
    CGContext2D.prototype.strokeRect = function (rect) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.strokeRect');
    };
    CGContext2D.prototype.strokeRectWithWidth = function (rect, width) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.strokeRectWithWidth');
    };
    CGContext2D.prototype.clearRect = function (rect) {
        this.drawingContext.clearRect(rect.X, rect.Y, rect.Width, rect.Height);
    };
    CGContext2D.prototype.fillEllipseInRect = function (rect) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.fillEllipseInRect');
    };
    CGContext2D.prototype.strokeEllipseInRect = function (rect) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.strokeEllipseInRect');
    };
    CGContext2D.prototype.strokeLineSegments = function (points) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.strokeLineSegments');
    };
    CGContext2D.prototype.eOClip = function () {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.eOClip');
    };
    CGContext2D.prototype.clipToMask = function (rect, mask /*CGImage*/) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.clipToMask');
    };
    CGContext2D.prototype.getClipBoundingBox = function () {
        //throw new NotImplementedException('CGContext.getClipBoundingBox');
        // FIX ME:
        // return new RectangleF(-1500, -1500, 4500, 4500);
        // const domRect: DOMRect = <any>this.drawingContext.canvas.getBoundingClientRect();
        return new _CGRectangle__WEBPACK_IMPORTED_MODULE_1__.CGRectangle(0, 0, this.drawingContext.canvas.width, this.drawingContext.canvas.height);
    };
    CGContext2D.prototype.clip = function () {
        if (this.clipArea != null) {
            this.drawingContext.beginPath();
            this.drawingContext.rect(this.clipArea.X, this.clipArea.Y, this.clipArea.Width, this.clipArea.Height);
            //this.canvasContext.strokeStyle='red;'
            this.drawingContext.closePath();
            // this.canvasContext.strokeRect(this.clipArea.X, this.clipArea.Y, this.clipArea.Width, this.clipArea.Height);
            this.drawingContext.clip();
            // this.clipArea = undefined;
            /*  const ctx = this.canvasContext;
             ctx.rect(50, 20, 200, 120);
             ctx.stroke();
             ctx.clip();
             // Draw red rectangle after clip()
             ctx.fillStyle = "red";
             ctx.fillRect(0, 0, 150, 100); */
        }
    };
    CGContext2D.prototype.clipToRect = function (rect, debug) {
        //this.clipArea = rect;
        //this.canvasContext.save();
        if (debug === void 0) { debug = true; }
        this.drawingContext.beginPath();
        this.drawingContext.rect(rect.X, rect.Y, rect.Width, rect.Height);
        var oldStrokeStyle;
        if (debug) {
            oldStrokeStyle = this.drawingContext.strokeStyle;
            this.drawingContext.strokeStyle = 'red';
            this.drawingContext.strokeRect(rect.X, rect.Y, rect.Width, rect.Height);
        }
        this.drawingContext.clip();
        if (debug) {
            this.drawingContext.strokeStyle = oldStrokeStyle;
        }
        //this.canvasContext.restore();
    };
    CGContext2D.prototype.clipToRects = function (rects) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.clipToRects');
    };
    CGContext2D.prototype.setFillColor = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        // throw new NotImplementedException('CGContext.setFillColor');
        if (args.length === 4) {
            var color = _CGColor_CGColor__WEBPACK_IMPORTED_MODULE_5__.CGColor.FromRgba(args[0], args[1], args[2], args[3]);
            this.drawingContext.fillStyle = color.toString();
        }
        else if (args.length === 1 && args[0] instanceof _CGColor_CGColor__WEBPACK_IMPORTED_MODULE_5__.CGColor) {
            this.setFillColor(args[0].R, args[0].G, args[0].B, args[0].A);
        }
    };
    CGContext2D.prototype.setFillColorWithColor = function (color) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.setFillColorWithColor');
    };
    CGContext2D.prototype.setStrokeColor = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        // throw new NotImplementedException('CGContext.setStrokeColor');
        if (args.length === 1 && args[0] instanceof _CGColor_CGColor__WEBPACK_IMPORTED_MODULE_5__.CGColor) {
            var color = args[0];
            var colorString = _CGColor_CGColor__WEBPACK_IMPORTED_MODULE_5__.CGColor.RgbToHex(color.R, color.G, color.B);
            this.drawingContext.strokeStyle = '#' + colorString;
        }
        else if (args.length === 4) {
            var color = _CGColor_CGColor__WEBPACK_IMPORTED_MODULE_5__.CGColor.RgbToHex(args[0], args[1], args[2]);
            this.drawingContext.strokeStyle = '#' + color;
        }
    };
    CGContext2D.prototype.setStrokeColorWithColor = function (color) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.setStrokeColorWithColor');
    };
    CGContext2D.prototype.setFillColorSpace = function (space) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.setFillColorSpace');
    };
    CGContext2D.prototype.setStrokeColorSpace = function (space) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.setStrokeColorSpace');
    };
    CGContext2D.prototype.setFillPattern = function (pattern, components) {
        // throw new NotImplementedException('CGContext.setFillPattern');
        var canvasPattern = document.createElement("canvas");
        canvasPattern.width = pattern.bounds.Width;
        canvasPattern.height = pattern.bounds.Height;
        var contextPattern = canvasPattern.getContext("2d");
        var coreContext = new CGContext2D_1(contextPattern);
        coreContext.concatCTM(pattern.matrix);
        // coreContext.canvasContext.fillStyle = 'rgb(0,0,0)';
        // coreContext.canvasContext.fillRect(0, 0, 80, 80);
        if (pattern.drawPattern != null && _tuval_core__WEBPACK_IMPORTED_MODULE_2__.is["function"](pattern.drawPattern)) {
            pattern.drawPattern(coreContext);
        }
        //console.log(coreContext.canvasContext.canvas.toDataURL('image/jpeg', 1.0));
        coreContext.concatCTM(pattern.matrix.invert());
        if (pattern.processImageFunc != null) {
            pattern.processImageFunc(coreContext);
        }
        /*  contextPattern.strokeStyle='rgb(255,255,255)';
         contextPattern.arc(5.5, 5.5, 3, 0, Math.PI);
         contextPattern.rect(3, 3, 1, 1);
         contextPattern.rect(7, 3, 1, 1);
         contextPattern.stroke(); */
        var fillPattern;
        switch (pattern.wrapMode) {
            case _WrapMode__WEBPACK_IMPORTED_MODULE_6__.WrapMode.Tile:
                fillPattern = contextPattern.createPattern(canvasPattern, "repeat");
                break;
            case _WrapMode__WEBPACK_IMPORTED_MODULE_6__.WrapMode.TileFlipX:
                fillPattern = contextPattern.createPattern(canvasPattern, "repeat-x");
                break;
            case _WrapMode__WEBPACK_IMPORTED_MODULE_6__.WrapMode.TileFlipY:
                fillPattern = contextPattern.createPattern(canvasPattern, "repeat-y");
                break;
            case _WrapMode__WEBPACK_IMPORTED_MODULE_6__.WrapMode.Clamp:
                fillPattern = contextPattern.createPattern(canvasPattern, "no-repeat");
                break;
        }
        this.drawingContext.fillStyle = fillPattern;
    };
    CGContext2D.prototype.setStrokePattern = function (pattern, components) {
        //throw new NotImplementedException('CGContext.setStrokePattern');
        var canvasPattern = document.createElement("canvas");
        canvasPattern.width = pattern.bounds.Width;
        canvasPattern.height = pattern.bounds.Height;
        var contextPattern = canvasPattern.getContext("2d");
        var coreContext = new CGContext2D_1(contextPattern);
        if (pattern.drawPattern != null && _tuval_core__WEBPACK_IMPORTED_MODULE_2__.is["function"](pattern.drawPattern)) {
            pattern.drawPattern(coreContext);
        }
        var strokePattern = contextPattern.createPattern(canvasPattern, "repeat");
        this.drawingContext.strokeStyle = strokePattern;
    };
    CGContext2D.prototype.setPatternPhase = function (phase) {
        setTimeout(function () {
            throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.setPatternPhase');
        }, 100);
    };
    CGContext2D.prototype.setGrayFillColor = function (gray, alpha) {
        setTimeout(function () {
            throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.setGrayFillColor');
        }, 100);
    };
    CGContext2D.prototype.setGrayStrokeColor = function (gray, alpha) {
        setTimeout(function () {
            throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.setGrayStrokeColor');
        }, 100);
    };
    CGContext2D.prototype.setRGBFillColor = function (red, green, blue, alpha) {
        setTimeout(function () {
            throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.setRGBFillColor');
        }, 100);
    };
    CGContext2D.prototype.setRGBStrokeColor = function (red, green, blue, alpha) {
        setTimeout(function () {
            throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.setRGBStrokeColor');
        }, 100);
    };
    CGContext2D.prototype.setCMYKFillColor = function (cyan, magenta, yellow, black, alpha) {
        setTimeout(function () {
            throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.setCMYKFillColor');
        }, 100);
    };
    CGContext2D.prototype.setCMYKStrokeColor = function (cyan, magenta, yellow, black, alpha) {
        setTimeout(function () {
            throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.setCMYKStrokeColor');
        }, 100);
    };
    CGContext2D.prototype.setRenderingIntent = function (intent /*CGColorRenderingIntent*/) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.setRenderingIntent');
    };
    CGContext2D.prototype.drawImage = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args.length === 3) {
            this.drawingContext.drawImage(args[0], args[1], args[2]);
        }
        else if (args.length === 9) {
            this.drawingContext.drawImage(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]);
        }
    };
    CGContext2D.prototype.drawTiledImage = function (rect, image /*CGImage*/) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.drawTiledImage');
    };
    CGContext2D.prototype.setShadowWithColor = function (offset, blur, color) {
        var ctx = this.drawingContext;
        ctx.shadowColor = color.toString();
        ctx.shadowOffsetX = offset.Width;
        ctx.shadowOffsetY = offset.Height;
        ctx.shadowBlur = blur;
    };
    CGContext2D.prototype.setShadow = function (offset, blur) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.setShadow');
    };
    CGContext2D.prototype.drawLinearGradient = function (gradient /*CGGradient*/, startPoint, endPoint, options /*CGGradientDrawingOptions*/) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.drawLinearGradient');
    };
    CGContext2D.prototype.drawRadialGradient = function (gradient /*CGGradient*/, startCenter, startRadius, endCenter, endRadius, options /*CGGradientDrawingOptions*/) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.drawRadialGradient');
    };
    CGContext2D.prototype.setCharacterSpacing = function (spacing) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.setCharacterSpacing');
    };
    CGContext2D.prototype.setTextDrawingMode = function (mode) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.setTextDrawingMode');
    };
    CGContext2D.prototype.setFont = function (font /*CGFont*/) {
        var fontName;
        var opentype = {};
        /*  if (font.FontFamily instanceof opentype.Font) {
             fontName = 'opentype';
         } else */
        if (font.FontFamily instanceof _CGFont_FontFamily__WEBPACK_IMPORTED_MODULE_10__.FontFamily) {
            fontName = font.FontFamily.Name;
        }
        else {
            fontName = font.Name;
        }
        this.drawingContext.font = (font.TextStyle || 'normal') +
            ' ' + (font.Size || 12) + 'px ' + (fontName || 'sans-serif');
        switch (font.HorizAlign) {
            case _StringAlignment__WEBPACK_IMPORTED_MODULE_9__.StringAlignment.Near:
                this.drawingContext.textAlign = "left";
                break;
            case _StringAlignment__WEBPACK_IMPORTED_MODULE_9__.StringAlignment.Center:
                this.drawingContext.textAlign = "center";
                break;
            case _StringAlignment__WEBPACK_IMPORTED_MODULE_9__.StringAlignment.Far:
                this.drawingContext.textAlign = "right";
                break;
        }
        switch (font.VertAlign) {
            case _StringAlignment__WEBPACK_IMPORTED_MODULE_9__.StringAlignment.Near:
                this.drawingContext.textBaseline = "top";
                break;
            case _StringAlignment__WEBPACK_IMPORTED_MODULE_9__.StringAlignment.Center:
                this.drawingContext.textBaseline = "middle";
                break;
            case _StringAlignment__WEBPACK_IMPORTED_MODULE_9__.StringAlignment.Far:
                this.drawingContext.textBaseline = "bottom";
                break;
        }
    };
    CGContext2D.prototype._getFontStyle = function (font) {
        switch (font.TextStyle) {
            case _FontStyle__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Regular:
                return 'normal';
            case _FontStyle__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Italic:
                return 'italic';
            case _FontStyle__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Bold:
                return 'bold';
            case _FontStyle__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Underline:
                return 'underline';
        }
        return '';
    };
    CGContext2D.prototype._getFontVariant = function (font) {
        return 'normal';
    };
    CGContext2D.prototype._getFontSize = function (font) {
        return font.Size;
    };
    CGContext2D.prototype._getFontFamily = function (font) {
        return font.Name;
    };
    CGContext2D.prototype._getContextFont = function (font) {
        var PX_SPACE = 'px ';
        var SPACE = ' ';
        // IE don't want to work with usual font style
        // bold was not working
        // removing font variant will solve
        // fix for: https://github.com/konvajs/konva/issues/94
        // TODO ie desteği ekle.
        if (false) {}
        return (this._getFontStyle(font) +
            SPACE +
            this._getFontVariant(font) +
            SPACE +
            this._getFontSize(font) +
            PX_SPACE +
            this._getFontFamily(font));
    };
    CGContext2D.prototype.measureText = function (text, font) {
        var _context = this.drawingContext;
        var metrics;
        _context.save();
        _context.font = this._getContextFont(font);
        metrics = _context.measureText(text);
        _context.restore();
        return new _CGSize__WEBPACK_IMPORTED_MODULE_7__.CGSize({
            width: metrics.width,
            height: parseInt(font.Size.toString(), 10)
        });
    };
    CGContext2D.prototype.selectFont = function (name, size, textEncoding) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.selectFont');
    };
    CGContext2D.prototype.showGlyphsAtPositions = function (glyphs, positions, size_t_count) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.showGlyphsAtPositions');
    };
    CGContext2D.prototype.setTextAlign = function (textAlign) {
        var ta = undefined;
        switch (textAlign) {
            case 'start':
                ta = 'start';
                break;
            case 'end':
                ta = 'end';
                break;
            case 'left':
                ta = 'left';
                break;
            case 'center':
                ta = 'center';
                break;
            case 'right':
                ta = 'right';
                break;
        }
        this.drawingContext.textAlign = ta;
    };
    CGContext2D.prototype.setTextBaseline = function (textAlign) {
        var tbl = 'middle';
        switch (textAlign) {
            case 'top':
                tbl = 'top';
                break;
            case 'bottom':
                tbl = 'bottom';
                break;
            case 'middle':
                tbl = 'middle';
                break;
            case 'alphabetic':
                tbl = 'alphabetic';
                break;
            case 'hanging':
                tbl = 'hanging';
                break;
        }
        this.drawingContext.textBaseline = tbl;
    };
    /* public showText(str: string, count: number): void;
    public showText(str: string): void;
    public showText(bytes: byte[]): void;
    public showText(bytes: byte[], count: number): void;
    public showText(...args: any[]): void {
        throw new NotImplementedException('CGContext.showText');
    } */
    CGContext2D.prototype.showText = function (str, x, y) {
        this.drawingContext.fillText(str, x, y);
    };
    CGContext2D.prototype.showTextAtPoint = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.showTextAtPoint');
    };
    CGContext2D.prototype.showGlyphs = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.showGlyphs');
    };
    CGContext2D.prototype.showGlyphsAtPoint = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.showGlyphsAtPoint');
    };
    CGContext2D.prototype.showGlyphsWithAdvances = function (glyphs, advances, count) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.showGlyphsWithAdvances');
    };
    CGContext2D.prototype.drawPDFPage = function (page /*CGPDFPage*/) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.drawPDFPage');
    };
    CGContext2D.prototype.beginPage = function (rect) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.beginPage');
    };
    CGContext2D.prototype.endPage = function () {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.endPage');
    };
    //[DllImport (Constants.CoreGraphicsLibrary)]
    //extern static IntPtr CGContextRetain(IntPtr c);
    CGContext2D.prototype.flush = function () {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.flush');
    };
    CGContext2D.prototype.synchronize = function () {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.synchronize');
    };
    CGContext2D.prototype.setShouldAntialias = function (shouldAntialias) {
        //throw new NotImplementedException('CGContext.setShouldAntialias');
        console.error('CGContext.setShouldAntialias');
    };
    CGContext2D.prototype.setAllowsAntialiasing = function (allowsAntialiasing) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.setAllowsAntialiasing');
    };
    CGContext2D.prototype.setShouldSmoothFonts = function (shouldSmoothFonts) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.setShouldSmoothFonts');
    };
    CGContext2D.prototype.getUserSpaceToDeviceSpaceTransform = function () {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.getUserSpaceToDeviceSpaceTransform');
    };
    CGContext2D.prototype.pointToDeviceSpace = function (point) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.pointToDeviceSpace');
    };
    CGContext2D.prototype.convertPointToUserSpace = function (point) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.convertPointToUserSpace');
    };
    CGContext2D.prototype.convertSizeToDeviceSpace = function (size) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.convertSizeToDeviceSpace');
    };
    CGContext2D.prototype.convertSizeToUserSpace = function (size) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.convertSizeToUserSpace');
    };
    CGContext2D.prototype.convertRectToDeviceSpace = function (rect) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.convertRectToDeviceSpace');
    };
    CGContext2D.prototype.convertRectToUserSpace = function (rect) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.convertRectToUserSpace');
    };
    CGContext2D.prototype.drawLayer = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.drawLayer');
    };
    CGContext2D.prototype.copyPath = function () {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.copyPath');
    };
    CGContext2D.prototype.setAllowsFontSmoothing = function (allows) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.setAllowsFontSmoothing');
    };
    CGContext2D.prototype.setAllowsSubpixelPositioning = function (allows) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.setAllowsSubpixelPositioning');
    };
    CGContext2D.prototype.setAllowsFontSubpixelQuantization = function (allows) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.setAllowsFontSubpixelQuantization');
    };
    CGContext2D.prototype.setShouldSubpixelPositionFonts = function (shouldSubpixelPositionFonts) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.setShouldSubpixelPositionFonts');
    };
    CGContext2D.prototype.shouldSubpixelQuantizeFonts = function (shouldSubpixelQuantizeFonts) {
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_2__.NotImplementedException('CGContext.shouldSubpixelQuantizeFonts');
    };
    // Graphics2D virtual methods
    CGContext2D.prototype.arc = function (x, y, w, h, start, stop, mode) { };
    CGContext2D.prototype.drawImageBitmap = function (image, x, y) {
        this.drawingContext.drawImage(image, x, y);
    };
    var CGContext2D_1;
    CGContext2D = CGContext2D_1 = __decorate([
        (0,_tuval_core__WEBPACK_IMPORTED_MODULE_2__.ClassInfo)({
            fullName: _types__WEBPACK_IMPORTED_MODULE_11__.CoreGraphicTypes.CGContext2D,
            instanceof: [
                _types__WEBPACK_IMPORTED_MODULE_11__.CoreGraphicTypes.CGContext2D
            ]
        })
    ], CGContext2D);
    return CGContext2D;
}());



/***/ }),

/***/ "./src/CGFont/CGFont.ts":
/*!******************************!*\
  !*** ./src/CGFont/CGFont.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CGFont": () => (/* binding */ CGFont)
/* harmony export */ });
/* harmony import */ var _FontFamily__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FontFamily */ "./src/CGFont/FontFamily.ts");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _FontStyle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../FontStyle */ "./src/FontStyle.ts");
/* harmony import */ var _StringAlignment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../StringAlignment */ "./src/StringAlignment.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../types */ "./src/types.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


// import * as opentype from 'opentype.js'




/* import 'tiny-inflate';
import 'opentype.js'; */
var CGFont = /** @class */ (function (_super) {
    __extends(CGFont, _super);
    function CGFont(fontFamily, size) {
        var _this = _super.call(this) || this;
        _this.fontFamily = undefined;
        _this.textLeading = 0;
        _this.textSize = 0;
        _this.textStyle = _FontStyle__WEBPACK_IMPORTED_MODULE_2__.FontStyle.Regular;
        _this.horizAlign = _StringAlignment__WEBPACK_IMPORTED_MODULE_3__.StringAlignment.Near;
        _this.vertAlign = _StringAlignment__WEBPACK_IMPORTED_MODULE_3__.StringAlignment.Near;
        _this.myName = '';
        if (fontFamily instanceof _FontFamily__WEBPACK_IMPORTED_MODULE_0__.FontFamily) {
            _this.fontFamily = fontFamily;
            _this.Name = fontFamily.Name;
            _this.Size = size;
        }
        else if (typeof fontFamily === 'string') {
            _this.Name = fontFamily;
            _this.Size = size;
        }
        return _this;
    }
    Object.defineProperty(CGFont.prototype, "Name", {
        get: function () {
            return this.myName;
        },
        set: function (value) {
            this.myName = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGFont.prototype, "Size", {
        get: function () {
            return this.textSize;
        },
        set: function (value) {
            this.textSize = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGFont.prototype, "Style", {
        get: function () {
            return this.textStyle;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGFont.prototype, "GdiCharSet", {
        get: function () {
            console.error('font.GdiCharSet not implemented.');
            return 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGFont.prototype, "TextLeading", {
        get: function () {
            return this.textLeading;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGFont.prototype, "TextStyle", {
        get: function () {
            return this.textStyle;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGFont.prototype, "HorizAlign", {
        get: function () {
            return this.horizAlign;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGFont.prototype, "VertAlign", {
        get: function () {
            return this.vertAlign;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGFont.prototype, "FontFamily", {
        get: function () {
            return this.fontFamily;
        },
        enumerable: false,
        configurable: true
    });
    CGFont.prototype.equals = function (font) {
        return false;
    };
    CGFont = __decorate([
        (0,_tuval_core__WEBPACK_IMPORTED_MODULE_1__.ClassInfo)({
            fullName: _types__WEBPACK_IMPORTED_MODULE_4__.CoreGraphicTypes.CGFont,
            instanceof: [
                _types__WEBPACK_IMPORTED_MODULE_4__.CoreGraphicTypes.CGFont
            ]
        })
    ], CGFont);
    return CGFont;
}(_tuval_core__WEBPACK_IMPORTED_MODULE_1__.DisposableBase));



/***/ }),

/***/ "./src/CGFont/FontFamily.ts":
/*!**********************************!*\
  !*** ./src/CGFont/FontFamily.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FontFamily": () => (/* binding */ FontFamily)
/* harmony export */ });
var FontFamily = /** @class */ (function () {
    function FontFamily(name) {
        this.familyName = name;
    }
    Object.defineProperty(FontFamily.prototype, "Name", {
        get: function () {
            return this.familyName;
        },
        enumerable: false,
        configurable: true
    });
    FontFamily.prototype.getLineSpacing = function (style) {
        console.error('FontFamily.getLineSpacing not implemented.');
        return undefined;
    };
    FontFamily.prototype.getEmHeight = function (style) {
        console.error('font.getEmHeight not implemented.');
        return undefined;
    };
    FontFamily.prototype.toString = function () {
        return "FontFamily: Name=" + this.Name;
    };
    return FontFamily;
}());



/***/ }),

/***/ "./src/CGFont/FontStyle.ts":
/*!*********************************!*\
  !*** ./src/CGFont/FontStyle.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FontStyle": () => (/* binding */ FontStyle)
/* harmony export */ });
var FontStyle;
(function (FontStyle) {
    FontStyle[FontStyle["Regular"] = 0] = "Regular";
    FontStyle[FontStyle["Bold"] = 1] = "Bold";
    FontStyle[FontStyle["Italic"] = 2] = "Italic";
    FontStyle[FontStyle["Underline"] = 4] = "Underline";
    FontStyle[FontStyle["Strikeout"] = 8] = "Strikeout";
})(FontStyle || (FontStyle = {}));


/***/ }),

/***/ "./src/CGImage/CGImage.ts":
/*!********************************!*\
  !*** ./src/CGImage/CGImage.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CGImage": () => (/* binding */ CGImage)
/* harmony export */ });
/* harmony import */ var _CGColor_CGColor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../CGColor/CGColor */ "./src/CGColor/CGColor.ts");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _CGAffineTransform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../CGAffineTransform */ "./src/CGAffineTransform.ts");
/* harmony import */ var _Filters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Filters */ "./src/CGImage/Filters.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../types */ "./src/types.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};






var CGImage = /** @class */ (function () {
    function CGImage() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.mySize = undefined;
        this.onLoad = undefined;
        this.IsImageLoaded = false;
        this.canvas = undefined;
        this.drawingContext = undefined;
        this.imageData = undefined;
        this.myPixels = undefined;
        this.myHeight = 0;
        this.myWidth = 0;
        if (args.length === 1 && _tuval_core__WEBPACK_IMPORTED_MODULE_1__.is.string(args[0])) {
            var filename = args[0];
            if (!_tuval_core__WEBPACK_IMPORTED_MODULE_1__.File.Exists(filename)) {
                throw new _tuval_core__WEBPACK_IMPORTED_MODULE_1__.FileNotFoundException(filename + ' not found.');
            }
            var buffer_1;
            (0,_tuval_core__WEBPACK_IMPORTED_MODULE_1__.using)(_tuval_core__WEBPACK_IMPORTED_MODULE_1__.File.OpenRead(filename), function (fs) {
                buffer_1 = _tuval_core__WEBPACK_IMPORTED_MODULE_1__.New.ByteArray(fs.Length);
                fs.Read(buffer_1, 0, fs.Length);
                fs.Close();
            });
            var readBuffer = new _tuval_core__WEBPACK_IMPORTED_MODULE_1__.TBuffer(buffer_1);
            this.Width = readBuffer.readUint32();
            this.Height = readBuffer.readUint32();
            var context = _tuval_core__WEBPACK_IMPORTED_MODULE_1__.Browser.CreateRenderingContext(this.Width, this.Height);
            var imageData = new ImageData(new Uint8ClampedArray(readBuffer.readBytes(readBuffer.readUint32())), this.Width, this.Height);
            context.putImageData(imageData, 0, 0);
            this.canvas = context.canvas;
            this.drawingContext = context;
        }
        if (args.length === 1 && _tuval_core__WEBPACK_IMPORTED_MODULE_1__.is.ByteArray(args[0])) {
            var buffer = args[0];
            var readBuffer = new _tuval_core__WEBPACK_IMPORTED_MODULE_1__.TBuffer(buffer);
            this.Width = readBuffer.readUint32();
            this.Height = readBuffer.readUint32();
            var context = _tuval_core__WEBPACK_IMPORTED_MODULE_1__.Browser.CreateRenderingContext(this.Width, this.Height);
            var imageData = new ImageData(new Uint8ClampedArray(readBuffer.readBytes(readBuffer.readUint32())), this.Width, this.Height);
            context.putImageData(imageData, 0, 0);
            this.canvas = context.canvas;
            this.drawingContext = context;
        }
        else if (args.length === 2) {
            var width = args[0];
            var height = args[1];
            this.Width = width;
            this.Height = height;
            this.canvas = document.createElement('canvas');
            this.canvas.width = this.Width;
            this.canvas.height = this.Height;
            this.drawingContext = this.canvas.getContext('2d');
        }
        else if (args.length === 1 && args[0] instanceof CanvasRenderingContext2D) {
            var ctx = args[0];
            this.Width = ctx.canvas.width;
            this.Height = ctx.canvas.height;
            this.canvas = ctx.canvas;
            this.drawingContext = ctx;
        }
        this._pixelDensity = 1;
        //used for webgl texturing only
        this._modified = false;
        this._pixelsDirty = true;
        this.Pixels = [];
        this.imageTransform = _CGAffineTransform__WEBPACK_IMPORTED_MODULE_2__.CGAffineTransform.MakeIdentity();
    }
    CGImage_1 = CGImage;
    Object.defineProperty(CGImage.prototype, "Pixels", {
        get: function () {
            return this.myPixels;
        },
        set: function (value) {
            this.myPixels = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGImage.prototype, "Height", {
        get: function () {
            return this.myHeight;
        },
        set: function (value) {
            this.myHeight = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGImage.prototype, "Width", {
        get: function () {
            return this.myWidth;
        },
        set: function (value) {
            this.myWidth = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGImage.prototype, "Size", {
        get: function () {
            return this.mySize;
        },
        set: function (value) {
            this.mySize = value;
        },
        enumerable: false,
        configurable: true
    });
    CGImage.prototype.loadPixels = function () {
        if (!this._pixelsDirty)
            return;
        this._pixelsDirty = false;
        var pd = this._pixelDensity;
        var w = this.Width * pd;
        var h = this.Height * pd;
        this.imageData = this.drawingContext.getImageData(0, 0, w, h);
        this.Pixels = this.imageData.data;
        this.setModified(true);
    };
    CGImage.prototype.updatePixels = function (x, y, w, h) {
        var pd = this._pixelDensity;
        if (x === undefined && y === undefined && w === undefined && h === undefined) {
            x = 0;
            y = 0;
            w = this.Width;
            h = this.Height;
        }
        w *= pd;
        h *= pd;
        this.drawingContext.putImageData(this.imageData, x, y, 0, 0, w, h);
        if (x !== 0 || y !== 0 || w !== this.Width || h !== this.Height) {
            this._pixelsDirty = true;
        }
    };
    CGImage.prototype.get = function (x, y, w, h) {
        if (typeof w === 'undefined' && typeof h === 'undefined') {
            if (typeof x === 'undefined' && typeof y === 'undefined') {
                x = y = 0;
                w = this.Width;
                h = this.Height;
            }
            else {
                w = h = 1;
            }
        }
        // if the section does not overlap the canvas
        if (x + w < 0 || y + h < 0 || x >= this.Width || y >= this.Height) {
            // TODO: is this valid for w,h > 1 ?
            return [0, 0, 0, 255];
        }
        var pd = this._pixelDensity;
        // round down to get integer numbers
        x = Math.floor(x);
        y = Math.floor(y);
        w = Math.floor(w);
        h = Math.floor(h);
        var sx = x * pd;
        var sy = y * pd;
        if (w === 1 && h === 1 && !(this.drawingContext instanceof WebGLRenderingContext)) {
            var imageData, index;
            if (this._pixelsDirty) {
                imageData = this.drawingContext.getImageData(sx, sy, 1, 1).data;
                index = 0;
            }
            else {
                imageData = this.Pixels;
                index = (sx + sy * this.Width * pd) * 4;
            }
            return [
                imageData[index + 0],
                imageData[index + 1],
                imageData[index + 2],
                imageData[index + 3]
            ];
        }
        else {
            //auto constrain the width and height to
            //dimensions of the source image
            var dw = Math.min(w, this.Width);
            var dh = Math.min(h, this.Height);
            var sw = dw * pd;
            var sh = dh * pd;
            var region = new CGImage_1(dw, dh);
            region.canvas.getContext('2d').drawImage(this.canvas, sx, sy, sw, sh, 0, 0, dw, dh);
            return region;
        }
    };
    CGImage.prototype.set = function (x, y, imgOrCol) {
        // round down to get integer numbers
        x = Math.floor(x);
        y = Math.floor(y);
        if (imgOrCol instanceof CGImage_1) {
            this.drawingContext.save();
            this.drawingContext.setTransform(1, 0, 0, 1, 0, 0);
            this.drawingContext.scale(this._pixelDensity, this._pixelDensity);
            this.drawingContext.drawImage(imgOrCol.canvas, x, y);
            this.drawingContext.restore();
            this._pixelsDirty = true;
        }
        else {
            var r = 0, g = 0, b = 0, a = 0;
            var idx = 4 *
                (y * this._pixelDensity * (this.Width * this._pixelDensity) +
                    x * this._pixelDensity);
            if (!this.imageData || this._pixelsDirty) {
                this.loadPixels();
            }
            if (typeof imgOrCol === 'number') {
                if (idx < this.Pixels.length) {
                    r = imgOrCol;
                    g = imgOrCol;
                    b = imgOrCol;
                    a = 255;
                    //this.updatePixels.call(this);
                }
            }
            else if (imgOrCol instanceof Array) {
                if (imgOrCol.length < 4) {
                    throw new Error('pixel array must be of the form [R, G, B, A]');
                }
                if (idx < this.Pixels.length) {
                    r = imgOrCol[0];
                    g = imgOrCol[1];
                    b = imgOrCol[2];
                    a = imgOrCol[3];
                    //this.updatePixels.call(this);
                }
            }
            else if (imgOrCol instanceof _CGColor_CGColor__WEBPACK_IMPORTED_MODULE_0__.CGColor) {
                if (idx < this.Pixels.length) {
                    r = imgOrCol.R;
                    g = imgOrCol.G;
                    b = imgOrCol.B;
                    a = imgOrCol.A;
                    //this.updatePixels.call(this);
                }
            }
            // loop over pixelDensity * pixelDensity
            for (var i = 0; i < this._pixelDensity; i++) {
                for (var j = 0; j < this._pixelDensity; j++) {
                    // loop over
                    idx =
                        4 *
                            ((y * this._pixelDensity + j) * this.Width * this._pixelDensity +
                                (x * this._pixelDensity + i));
                    this.Pixels[idx] = r;
                    this.Pixels[idx + 1] = g;
                    this.Pixels[idx + 2] = b;
                    this.Pixels[idx + 3] = a;
                }
            }
        }
    };
    CGImage.prototype.getPixelColor = function (x, y) {
        var pixelData = this.get(x, y, 1, 1);
        return new _CGColor_CGColor__WEBPACK_IMPORTED_MODULE_0__.CGColor(pixelData[0], pixelData[1], pixelData[2], pixelData[3]);
    };
    CGImage.prototype.resize = function (width, height) {
        if (width === 0 && height === 0) {
            width = this.canvas.width;
            height = this.canvas.height;
        }
        else if (width === 0) {
            width = this.canvas.width * height / this.canvas.height;
        }
        else if (height === 0) {
            height = this.canvas.height * width / this.canvas.width;
        }
        width = Math.floor(width);
        height = Math.floor(height);
        var tempCanvas = document.createElement('canvas');
        tempCanvas.width = width;
        tempCanvas.height = height;
        // prettier-ignore
        tempCanvas.getContext('2d').drawImage(this.canvas, 0, 0, this.canvas.width, this.canvas.height, 0, 0, tempCanvas.width, tempCanvas.height);
        // Resize the original canvas, which will clear its contents
        this.canvas.width = this.Width = width;
        this.canvas.height = this.Height = height;
        this.drawingContext.drawImage(tempCanvas, 0, 0, width, height, 0, 0, width, height);
        if (this.Pixels.length > 0) {
            this.loadPixels();
        }
        this.setModified(true);
        this._pixelsDirty = true;
    };
    CGImage.prototype.copy = function (srcImage, sx, sy, sw, sh, dx, dy, dw, dh) {
        //let srcImage, sx, sy, sw, sh, dx, dy, dw, dh;
        if (arguments.length === 9) {
            srcImage = arguments[0];
            sx = arguments[1];
            sy = arguments[2];
            sw = arguments[3];
            sh = arguments[4];
            dx = arguments[5];
            dy = arguments[6];
            dw = arguments[7];
            dh = arguments[8];
        }
        else if (arguments.length === 8) {
            srcImage = this;
            sx = arguments[0];
            sy = arguments[1];
            sw = arguments[2];
            sh = arguments[3];
            dx = arguments[4];
            dy = arguments[5];
            dw = arguments[6];
            dh = arguments[7];
        }
        else {
            throw new Error('Signature not supported');
        }
        CGImage_1._copyHelper(this, srcImage, sx, sy, sw, sh, dx, dy, dw, dh);
        this._pixelsDirty = true;
    };
    CGImage._copyHelper = function (dstImage, srcImage, sx, sy, sw, sh, dx, dy, dw, dh) {
        srcImage.loadPixels();
        var s = srcImage.canvas.width / srcImage.width;
        dstImage.drawingContext.drawImage(srcImage.canvas, s * sx, s * sy, s * sw, s * sh, dx, dy, dw, dh);
    };
    CGImage.prototype.mask = function (cgImage) {
        if (cgImage === undefined) {
            cgImage = this;
        }
        var currBlend = this.drawingContext.globalCompositeOperation;
        var scaleFactor = 1;
        this.drawingContext.globalCompositeOperation = 'destination-in';
        this.copy(cgImage, 0, 0, scaleFactor * cgImage.Width, scaleFactor * cgImage.Height, 0, 0, this.Width, this.Height);
        this.drawingContext.globalCompositeOperation = currBlend;
        this.setModified(true);
    };
    CGImage.prototype.setModified = function (val) {
        this._modified = val;
    };
    CGImage.LoadFromUrl = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            var img, pImg;
            return __generator(this, function (_a) {
                img = new Image();
                pImg = new CGImage_1(1, 1);
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        img.addEventListener("load", function () {
                            pImg.Width = pImg.canvas.width = img.width;
                            pImg.Height = pImg.canvas.height = img.height;
                            // Draw the image into the backing canvas of the p5.Image
                            pImg.drawingContext.drawImage(img, 0, 0);
                            pImg._modified = true;
                            resolve(pImg);
                        });
                        img.addEventListener("error", function (err) {
                            reject(err);
                        });
                        // Set crossOrigin in case image is served with CORS headers.
                        // This will let us draw to the canvas without tainting it.
                        // See https://developer.mozilla.org/en-US/docs/HTML/CORS_Enabled_Image
                        // When using data-uris the file will be loaded locally
                        // so we don't need to worry about crossOrigin with base64 file types.
                        if (path.indexOf('data:image/') !== 0) {
                            img.crossOrigin = 'Anonymous';
                        }
                        // start loading the image
                        img.src = path;
                    })];
            });
        });
    };
    CGImage.prototype.filter = function (operation, value) {
        _Filters__WEBPACK_IMPORTED_MODULE_3__.Filters.apply(this.canvas, _Filters__WEBPACK_IMPORTED_MODULE_3__.Filters[operation.toLowerCase()], value);
        this.setModified(true);
    };
    CGImage.FromStream = function (stream) {
        throw (0,_tuval_core__WEBPACK_IMPORTED_MODULE_1__.error)('FromStream is not implemented.');
    };
    /* public static FromBitmap(bmp: Bitmap): CGImage {
        throw error('FromBitmap is not implemented.');
    } */
    CGImage.prototype.getCanvas = function () {
        return this.canvas;
    };
    CGImage.prototype.getContext = function () {
        return this.drawingContext;
    };
    var CGImage_1;
    CGImage = CGImage_1 = __decorate([
        (0,_tuval_core__WEBPACK_IMPORTED_MODULE_1__.ClassInfo)({
            fullName: _types__WEBPACK_IMPORTED_MODULE_4__.CoreGraphicTypes.CGImage,
            instanceof: [
                _types__WEBPACK_IMPORTED_MODULE_4__.CoreGraphicTypes.CGImage
            ]
        })
    ], CGImage);
    return CGImage;
}());



/***/ }),

/***/ "./src/CGImage/Filters.ts":
/*!********************************!*\
  !*** ./src/CGImage/Filters.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Filters": () => (/* binding */ Filters)
/* harmony export */ });
var Filters = {};
/*
 * Helper functions
 */
/**
 * Returns the pixel buffer for a canvas
 *
 * @private
 *
 * @param  {Canvas|ImageData} canvas the canvas to get pixels from
 * @return {Uint8ClampedArray}       a one-dimensional array containing
 *                                   the data in thc RGBA order, with integer
 *                                   values between 0 and 255
 */
Filters._toPixels = function (canvas) {
    if (canvas instanceof ImageData) {
        return canvas.data;
    }
    else {
        return canvas
            .getContext('2d')
            .getImageData(0, 0, canvas.width, canvas.height).data;
    }
};
/**
 * Returns a 32 bit number containing ARGB data at ith pixel in the
 * 1D array containing pixels data.
 *
 * @private
 *
 * @param  {Uint8ClampedArray} data array returned by _toPixels()
 * @param  {Integer}           i    index of a 1D Image Array
 * @return {Integer}                32 bit integer value representing
 *                                  ARGB value.
 */
Filters._getARGB = function (data, i) {
    var offset = i * 4;
    return (((data[offset + 3] << 24) & 0xff000000) |
        ((data[offset] << 16) & 0x00ff0000) |
        ((data[offset + 1] << 8) & 0x0000ff00) |
        (data[offset + 2] & 0x000000ff));
};
/**
 * Modifies pixels RGBA values to values contained in the data object.
 *
 * @private
 *
 * @param {Uint8ClampedArray} pixels array returned by _toPixels()
 * @param {Int32Array}        data   source 1D array where each value
 *                                   represents ARGB values
 */
Filters._setPixels = function (pixels, data) {
    var offset = 0;
    for (var i = 0, al = pixels.length; i < al; i++) {
        offset = i * 4;
        pixels[offset + 0] = (data[i] & 0x00ff0000) >>> 16;
        pixels[offset + 1] = (data[i] & 0x0000ff00) >>> 8;
        pixels[offset + 2] = data[i] & 0x000000ff;
        pixels[offset + 3] = (data[i] & 0xff000000) >>> 24;
    }
};
/**
 * Returns the ImageData object for a canvas
 * https://developer.mozilla.org/en-US/docs/Web/API/ImageData
 *
 * @private
 *
 * @param  {Canvas|ImageData} canvas canvas to get image data from
 * @return {ImageData}               Holder of pixel data (and width and
 *                                   height) for a canvas
 */
Filters._toImageData = function (canvas) {
    if (canvas instanceof ImageData) {
        return canvas;
    }
    else {
        return canvas
            .getContext('2d')
            .getImageData(0, 0, canvas.width, canvas.height);
    }
};
/**
 * Returns a blank ImageData object.
 *
 * @private
 *
 * @param  {Integer} width
 * @param  {Integer} height
 * @return {ImageData}
 */
Filters._createImageData = function (width, height) {
    Filters._tmpCanvas = document.createElement('canvas');
    Filters._tmpCtx = Filters._tmpCanvas.getContext('2d');
    return this._tmpCtx.createImageData(width, height);
};
/**
 * Applys a filter function to a canvas.
 *
 * The difference between this and the actual filter functions defined below
 * is that the filter functions generally modify the pixel buffer but do
 * not actually put that data back to the canvas (where it would actually
 * update what is visible). By contrast this method does make the changes
 * actually visible in the canvas.
 *
 * The apply method is the method that callers of this module would generally
 * use. It has been separated from the actual filters to support an advanced
 * use case of creating a filter chain that executes without actually updating
 * the canvas in between everystep.
 *
 * @private
 * @param  {HTMLCanvasElement} canvas [description]
 * @param  {function(ImageData,Object)} func   [description]
 * @param  {Object} filterParam  [description]
 */
Filters.apply = function (canvas, func, filterParam) {
    var ctx = canvas.getContext('2d');
    var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
    //Filters can either return a new ImageData object, or just modify
    //the one they received.
    var newImageData = func(imageData, filterParam);
    if (newImageData instanceof ImageData) {
        ctx.putImageData(newImageData, 0, 0, 0, 0, canvas.width, canvas.height);
    }
    else {
        ctx.putImageData(imageData, 0, 0, 0, 0, canvas.width, canvas.height);
    }
};
/*
 * Filters
 */
/**
 * Converts the image to black and white pixels depending if they are above or
 * below the threshold defined by the level parameter. The parameter must be
 * between 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.
 *
 * Borrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/
 *
 * @private
 * @param  {Canvas} canvas
 * @param  {Float} level
 */
Filters.threshold = function (canvas, level) {
    var pixels = Filters._toPixels(canvas);
    if (level === undefined) {
        level = 0.5;
    }
    var thresh = Math.floor(level * 255);
    for (var i = 0; i < pixels.length; i += 4) {
        var r = pixels[i];
        var g = pixels[i + 1];
        var b = pixels[i + 2];
        var gray = 0.2126 * r + 0.7152 * g + 0.0722 * b;
        var val;
        if (gray >= thresh) {
            val = 255;
        }
        else {
            val = 0;
        }
        pixels[i] = pixels[i + 1] = pixels[i + 2] = val;
    }
};
/**
 * Converts any colors in the image to grayscale equivalents.
 * No parameter is used.
 *
 * Borrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/
 *
 * @private
 * @param {Canvas} canvas
 */
Filters.gray = function (canvas) {
    var pixels = Filters._toPixels(canvas);
    for (var i = 0; i < pixels.length; i += 4) {
        var r = pixels[i];
        var g = pixels[i + 1];
        var b = pixels[i + 2];
        // CIE luminance for RGB
        var gray = 0.2126 * r + 0.7152 * g + 0.0722 * b;
        pixels[i] = pixels[i + 1] = pixels[i + 2] = gray;
    }
};
/**
 * Sets the alpha channel to entirely opaque. No parameter is used.
 *
 * @private
 * @param {Canvas} canvas
 */
Filters.opaque = function (canvas) {
    var pixels = Filters._toPixels(canvas);
    for (var i = 0; i < pixels.length; i += 4) {
        pixels[i + 3] = 255;
    }
    return pixels;
};
/**
 * Sets each pixel to its inverse value. No parameter is used.
 * @private
 * @param  {Canvas} canvas
 */
Filters.invert = function (canvas) {
    var pixels = Filters._toPixels(canvas);
    for (var i = 0; i < pixels.length; i += 4) {
        pixels[i] = 255 - pixels[i];
        pixels[i + 1] = 255 - pixels[i + 1];
        pixels[i + 2] = 255 - pixels[i + 2];
    }
};
/**
 * Limits each channel of the image to the number of colors specified as
 * the parameter. The parameter can be set to values between 2 and 255, but
 * results are most noticeable in the lower ranges.
 *
 * Adapted from java based processing implementation
 *
 * @private
 * @param  {Canvas} canvas
 * @param  {Integer} level
 */
Filters.posterize = function (canvas, level) {
    var pixels = Filters._toPixels(canvas);
    if (level < 2 || level > 255) {
        throw new Error('Level must be greater than 2 and less than 255 for posterize');
    }
    var levels1 = level - 1;
    for (var i = 0; i < pixels.length; i += 4) {
        var rlevel = pixels[i];
        var glevel = pixels[i + 1];
        var blevel = pixels[i + 2];
        pixels[i] = ((rlevel * level) >> 8) * 255 / levels1;
        pixels[i + 1] = ((glevel * level) >> 8) * 255 / levels1;
        pixels[i + 2] = ((blevel * level) >> 8) * 255 / levels1;
    }
};
/**
 * reduces the bright areas in an image
 * @private
 * @param  {Canvas} canvas
 *
 */
Filters.dilate = function (canvas) {
    var pixels = Filters._toPixels(canvas);
    var currIdx = 0;
    var maxIdx = pixels.length ? pixels.length / 4 : 0;
    var out = new Int32Array(maxIdx);
    var currRowIdx, maxRowIdx, colOrig, colOut, currLum;
    var idxRight, idxLeft, idxUp, idxDown;
    var colRight, colLeft, colUp, colDown;
    var lumRight, lumLeft, lumUp, lumDown;
    while (currIdx < maxIdx) {
        currRowIdx = currIdx;
        maxRowIdx = currIdx + canvas.width;
        while (currIdx < maxRowIdx) {
            colOrig = colOut = Filters._getARGB(pixels, currIdx);
            idxLeft = currIdx - 1;
            idxRight = currIdx + 1;
            idxUp = currIdx - canvas.width;
            idxDown = currIdx + canvas.width;
            if (idxLeft < currRowIdx) {
                idxLeft = currIdx;
            }
            if (idxRight >= maxRowIdx) {
                idxRight = currIdx;
            }
            if (idxUp < 0) {
                idxUp = 0;
            }
            if (idxDown >= maxIdx) {
                idxDown = currIdx;
            }
            colUp = Filters._getARGB(pixels, idxUp);
            colLeft = Filters._getARGB(pixels, idxLeft);
            colDown = Filters._getARGB(pixels, idxDown);
            colRight = Filters._getARGB(pixels, idxRight);
            //compute luminance
            currLum =
                77 * ((colOrig >> 16) & 0xff) +
                    151 * ((colOrig >> 8) & 0xff) +
                    28 * (colOrig & 0xff);
            lumLeft =
                77 * ((colLeft >> 16) & 0xff) +
                    151 * ((colLeft >> 8) & 0xff) +
                    28 * (colLeft & 0xff);
            lumRight =
                77 * ((colRight >> 16) & 0xff) +
                    151 * ((colRight >> 8) & 0xff) +
                    28 * (colRight & 0xff);
            lumUp =
                77 * ((colUp >> 16) & 0xff) +
                    151 * ((colUp >> 8) & 0xff) +
                    28 * (colUp & 0xff);
            lumDown =
                77 * ((colDown >> 16) & 0xff) +
                    151 * ((colDown >> 8) & 0xff) +
                    28 * (colDown & 0xff);
            if (lumLeft > currLum) {
                colOut = colLeft;
                currLum = lumLeft;
            }
            if (lumRight > currLum) {
                colOut = colRight;
                currLum = lumRight;
            }
            if (lumUp > currLum) {
                colOut = colUp;
                currLum = lumUp;
            }
            if (lumDown > currLum) {
                colOut = colDown;
                currLum = lumDown;
            }
            out[currIdx++] = colOut;
        }
    }
    Filters._setPixels(pixels, out);
};
/**
 * increases the bright areas in an image
 * @private
 * @param  {Canvas} canvas
 *
 */
Filters.erode = function (canvas) {
    var pixels = Filters._toPixels(canvas);
    var currIdx = 0;
    var maxIdx = pixels.length ? pixels.length / 4 : 0;
    var out = new Int32Array(maxIdx);
    var currRowIdx, maxRowIdx, colOrig, colOut, currLum;
    var idxRight, idxLeft, idxUp, idxDown;
    var colRight, colLeft, colUp, colDown;
    var lumRight, lumLeft, lumUp, lumDown;
    while (currIdx < maxIdx) {
        currRowIdx = currIdx;
        maxRowIdx = currIdx + canvas.width;
        while (currIdx < maxRowIdx) {
            colOrig = colOut = Filters._getARGB(pixels, currIdx);
            idxLeft = currIdx - 1;
            idxRight = currIdx + 1;
            idxUp = currIdx - canvas.width;
            idxDown = currIdx + canvas.width;
            if (idxLeft < currRowIdx) {
                idxLeft = currIdx;
            }
            if (idxRight >= maxRowIdx) {
                idxRight = currIdx;
            }
            if (idxUp < 0) {
                idxUp = 0;
            }
            if (idxDown >= maxIdx) {
                idxDown = currIdx;
            }
            colUp = Filters._getARGB(pixels, idxUp);
            colLeft = Filters._getARGB(pixels, idxLeft);
            colDown = Filters._getARGB(pixels, idxDown);
            colRight = Filters._getARGB(pixels, idxRight);
            //compute luminance
            currLum =
                77 * ((colOrig >> 16) & 0xff) +
                    151 * ((colOrig >> 8) & 0xff) +
                    28 * (colOrig & 0xff);
            lumLeft =
                77 * ((colLeft >> 16) & 0xff) +
                    151 * ((colLeft >> 8) & 0xff) +
                    28 * (colLeft & 0xff);
            lumRight =
                77 * ((colRight >> 16) & 0xff) +
                    151 * ((colRight >> 8) & 0xff) +
                    28 * (colRight & 0xff);
            lumUp =
                77 * ((colUp >> 16) & 0xff) +
                    151 * ((colUp >> 8) & 0xff) +
                    28 * (colUp & 0xff);
            lumDown =
                77 * ((colDown >> 16) & 0xff) +
                    151 * ((colDown >> 8) & 0xff) +
                    28 * (colDown & 0xff);
            if (lumLeft < currLum) {
                colOut = colLeft;
                currLum = lumLeft;
            }
            if (lumRight < currLum) {
                colOut = colRight;
                currLum = lumRight;
            }
            if (lumUp < currLum) {
                colOut = colUp;
                currLum = lumUp;
            }
            if (lumDown < currLum) {
                colOut = colDown;
                currLum = lumDown;
            }
            out[currIdx++] = colOut;
        }
    }
    Filters._setPixels(pixels, out);
};
// BLUR
// internal kernel stuff for the gaussian blur filter
var blurRadius;
var blurKernelSize;
var blurKernel;
var blurMult;
/*
 * Port of https://github.com/processing/processing/blob/
 * master/core/src/processing/core/PImage.java#L1250
 *
 * Optimized code for building the blur kernel.
 * further optimized blur code (approx. 15% for radius=20)
 * bigger speed gains for larger radii (~30%)
 * added support for various image types (ALPHA, RGB, ARGB)
 * [toxi 050728]
 */
function buildBlurKernel(r) {
    var radius = (r * 3.5) | 0;
    radius = radius < 1 ? 1 : radius < 248 ? radius : 248;
    if (blurRadius !== radius) {
        blurRadius = radius;
        blurKernelSize = (1 + blurRadius) << 1;
        blurKernel = new Int32Array(blurKernelSize);
        blurMult = new Array(blurKernelSize);
        for (var l = 0; l < blurKernelSize; l++) {
            blurMult[l] = new Int32Array(256);
        }
        var bk, bki;
        var bm, bmi;
        for (var i = 1, radiusi = radius - 1; i < radius; i++) {
            blurKernel[radius + i] = blurKernel[radiusi] = bki = radiusi * radiusi;
            bm = blurMult[radius + i];
            bmi = blurMult[radiusi--];
            for (var j = 0; j < 256; j++) {
                bm[j] = bmi[j] = bki * j;
            }
        }
        bk = blurKernel[radius] = radius * radius;
        bm = blurMult[radius];
        for (var k = 0; k < 256; k++) {
            bm[k] = bk * k;
        }
    }
}
// Port of https://github.com/processing/processing/blob/
// master/core/src/processing/core/PImage.java#L1433
function blurARGB(canvas, radius) {
    var pixels = Filters._toPixels(canvas);
    var width = canvas.width;
    var height = canvas.height;
    var numPackedPixels = width * height;
    var argb = new Int32Array(numPackedPixels);
    for (var j = 0; j < numPackedPixels; j++) {
        argb[j] = Filters._getARGB(pixels, j);
    }
    var sum, cr, cg, cb, ca;
    var read, ri, ym, ymi, bk0;
    var a2 = new Int32Array(numPackedPixels);
    var r2 = new Int32Array(numPackedPixels);
    var g2 = new Int32Array(numPackedPixels);
    var b2 = new Int32Array(numPackedPixels);
    var yi = 0;
    buildBlurKernel(radius);
    var x, y, i;
    var bm;
    for (y = 0; y < height; y++) {
        for (x = 0; x < width; x++) {
            cb = cg = cr = ca = sum = 0;
            read = x - blurRadius;
            if (read < 0) {
                bk0 = -read;
                read = 0;
            }
            else {
                if (read >= width) {
                    break;
                }
                bk0 = 0;
            }
            for (i = bk0; i < blurKernelSize; i++) {
                if (read >= width) {
                    break;
                }
                var c = argb[read + yi];
                bm = blurMult[i];
                ca += bm[(c & -16777216) >>> 24];
                cr += bm[(c & 16711680) >> 16];
                cg += bm[(c & 65280) >> 8];
                cb += bm[c & 255];
                sum += blurKernel[i];
                read++;
            }
            ri = yi + x;
            a2[ri] = ca / sum;
            r2[ri] = cr / sum;
            g2[ri] = cg / sum;
            b2[ri] = cb / sum;
        }
        yi += width;
    }
    yi = 0;
    ym = -blurRadius;
    ymi = ym * width;
    for (y = 0; y < height; y++) {
        for (x = 0; x < width; x++) {
            cb = cg = cr = ca = sum = 0;
            if (ym < 0) {
                bk0 = ri = -ym;
                read = x;
            }
            else {
                if (ym >= height) {
                    break;
                }
                bk0 = 0;
                ri = ym;
                read = x + ymi;
            }
            for (i = bk0; i < blurKernelSize; i++) {
                if (ri >= height) {
                    break;
                }
                bm = blurMult[i];
                ca += bm[a2[read]];
                cr += bm[r2[read]];
                cg += bm[g2[read]];
                cb += bm[b2[read]];
                sum += blurKernel[i];
                ri++;
                read += width;
            }
            argb[x + yi] =
                ((ca / sum) << 24) |
                    ((cr / sum) << 16) |
                    ((cg / sum) << 8) |
                    (cb / sum);
        }
        yi += width;
        ymi += width;
        ym++;
    }
    Filters._setPixels(pixels, argb);
}
Filters.blur = function (canvas, radius) {
    blurARGB(canvas, radius);
};


/***/ }),

/***/ "./src/CGInterpolationQuality.ts":
/*!***************************************!*\
  !*** ./src/CGInterpolationQuality.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CGInterpolationQuality": () => (/* binding */ CGInterpolationQuality)
/* harmony export */ });
var CGInterpolationQuality;
(function (CGInterpolationQuality) {
    CGInterpolationQuality[CGInterpolationQuality["Default"] = 0] = "Default";
    CGInterpolationQuality[CGInterpolationQuality["None"] = 1] = "None";
    CGInterpolationQuality[CGInterpolationQuality["Low"] = 2] = "Low";
    CGInterpolationQuality[CGInterpolationQuality["High"] = 3] = "High";
    CGInterpolationQuality[CGInterpolationQuality["Medium"] = 4] = "Medium"; /* Yes, in this order, since Medium was added in 4 */
})(CGInterpolationQuality || (CGInterpolationQuality = {}));


/***/ }),

/***/ "./src/CGLineCap.ts":
/*!**************************!*\
  !*** ./src/CGLineCap.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CGLineCap": () => (/* binding */ CGLineCap)
/* harmony export */ });
var CGLineCap;
(function (CGLineCap) {
    CGLineCap[CGLineCap["Butt"] = 0] = "Butt";
    CGLineCap[CGLineCap["Round"] = 1] = "Round";
    CGLineCap[CGLineCap["Square"] = 2] = "Square";
})(CGLineCap || (CGLineCap = {}));


/***/ }),

/***/ "./src/CGLineJoin.ts":
/*!***************************!*\
  !*** ./src/CGLineJoin.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CGLineJoin": () => (/* binding */ CGLineJoin)
/* harmony export */ });
var CGLineJoin;
(function (CGLineJoin) {
    CGLineJoin[CGLineJoin["Miter"] = 0] = "Miter";
    CGLineJoin[CGLineJoin["Round"] = 1] = "Round";
    CGLineJoin[CGLineJoin["Bevel"] = 2] = "Bevel";
})(CGLineJoin || (CGLineJoin = {}));


/***/ }),

/***/ "./src/CGPath/CGPath.ts":
/*!******************************!*\
  !*** ./src/CGPath/CGPath.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "supportsSvgPathArgument": () => (/* binding */ supportsSvgPathArgument),
/* harmony export */   "CGPath": () => (/* binding */ CGPath)
/* harmony export */ });
/* harmony import */ var _parsePath__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parsePath */ "./src/CGPath/parsePath.ts");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _arxToBezier__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./arxToBezier */ "./src/CGPath/arxToBezier.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../types */ "./src/types.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};




/**
 * Work around for https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8438884/
 * @ignore
 */
function supportsSvgPathArgument(window) {
    _tuval_core__WEBPACK_IMPORTED_MODULE_1__.is.boolean(true);
    var canvas = window.document.createElement('canvas');
    var g = canvas.getContext('2d');
    var p = new window.Path2D('M0 0 L1 1');
    g.strokeStyle = 'red';
    g.lineWidth = 1;
    g.stroke(p);
    var imgData = g.getImageData(0, 0, 1, 1);
    return imgData.data[0] === 255; // Check if pixel is red
}
function rotatePoint(point, angle) {
    var nx = (point.x * Math.cos(angle)) - (point.y * Math.sin(angle));
    var ny = (point.y * Math.cos(angle)) + (point.x * Math.sin(angle));
    point.x = nx;
    point.y = ny;
}
function translatePoint(point, dx, dy) {
    point.x += dx;
    point.y += dy;
}
function scalePoint(point, s) {
    point.x *= s;
    point.y *= s;
}
var CGPath = /** @class */ (function () {
    function CGPath(path) {
        var _a;
        this.segments = [];
        if (path && path instanceof CGPath_1) {
            (_a = this.segments).push.apply(_a, path.segments);
        }
        else if (path) {
            this.segments = (0,_parsePath__WEBPACK_IMPORTED_MODULE_0__.parse)(path);
        }
    }
    CGPath_1 = CGPath;
    CGPath.prototype.addPath = function (path) {
        var _a;
        if (path && path instanceof CGPath_1) {
            (_a = this.segments).push.apply(_a, path.segments);
        }
    };
    CGPath.prototype.moveTo = function (x, y) {
        this.segments.push(['M', x, y]);
    };
    CGPath.prototype.lineTo = function (x, y) {
        this.segments.push(['L', x, y]);
    };
    CGPath.prototype.arc = function (x, y, r, start, end, ccw) {
        this.segments.push(['AC', x, y, r, start, end, !!ccw]);
    };
    CGPath.prototype.arcTo = function (x1, y1, x2, y2, r) {
        this.segments.push(['AT', x1, y1, x2, y2, r]);
    };
    CGPath.prototype.ellipse = function (x, y, rx, ry, angle, start, end, ccw) {
        this.segments.push(['E', x, y, rx, ry, angle, start, end, !!ccw]);
    };
    CGPath.prototype.losePath = function () {
        this.segments.push(['Z']);
    };
    CGPath.prototype.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {
        this.segments.push(['C', cp1x, cp1y, cp2x, cp2y, x, y]);
    };
    CGPath.prototype.quadraticCurveTo = function (cpx, cpy, x, y) {
        this.segments.push(['Q', cpx, cpy, x, y]);
    };
    CGPath.prototype.rect = function (x, y, width, height) {
        this.segments.push(['R', x, y, width, height]);
    };
    CGPath.prototype.abs = function () {
        var startX = 0;
        var startY = 0;
        var x = 0;
        var y = 0;
        this.segments = this.segments.map(function (seg) {
            seg = seg.slice();
            var type = seg[0];
            var command = type.toUpperCase();
            // is relative
            if (type != command) {
                seg[0] = command;
                switch (type) {
                    case 'a':
                        seg[6] += x;
                        seg[7] += y;
                        break;
                    case 'v':
                        seg[1] += y;
                        break;
                    case 'h':
                        seg[1] += x;
                        break;
                    default:
                        for (var i = 1; i < seg.length;) {
                            seg[i++] += x;
                            seg[i++] += y;
                        }
                }
            }
            // update cursor state
            switch (command) {
                case 'Z':
                    x = startX;
                    y = startY;
                    break;
                case 'H':
                    x = seg[1];
                    break;
                case 'V':
                    y = seg[1];
                    break;
                case 'M':
                    x = startX = seg[1];
                    y = startY = seg[2];
                    break;
                default:
                    x = seg[seg.length - 2];
                    y = seg[seg.length - 1];
            }
            return seg;
        });
        return this;
    };
    CGPath.prototype.normalize = function () {
        function line(x1, y1, x2, y2) {
            return ['C', x1, y1, x2, y2, x2, y2];
        }
        function quadratic(x1, y1, cx, cy, x2, y2) {
            return [
                'C',
                x1 / 3 + (2 / 3) * cx,
                y1 / 3 + (2 / 3) * cy,
                x2 / 3 + (2 / 3) * cx,
                y2 / 3 + (2 / 3) * cy,
                x2,
                y2
            ];
        }
        // init state
        var prev;
        var result = [];
        var bezierX = 0;
        var bezierY = 0;
        var startX = 0;
        var startY = 0;
        var quadX = null;
        var quadY = null;
        var x = 0;
        var y = 0;
        for (var i = 0, len = this.segments.length; i < len; i++) {
            var seg = this.segments[i];
            var command = seg[0];
            switch (command) {
                case 'M':
                    startX = seg[1];
                    startY = seg[2];
                    break;
                case 'A':
                    var curves = (0,_arxToBezier__WEBPACK_IMPORTED_MODULE_2__.arcToBezier)({
                        px: x,
                        py: y,
                        cx: seg[6],
                        cy: seg[7],
                        rx: seg[1],
                        ry: seg[2],
                        xAxisRotation: seg[3],
                        largeArcFlag: seg[4],
                        sweepFlag: seg[5]
                    });
                    // null-curves
                    if (!curves.length)
                        continue;
                    for (var j = 0, c; j < curves.length; j++) {
                        c = curves[j];
                        seg = ['C', c.x1, c.y1, c.x2, c.y2, c.x, c.y];
                        if (j < curves.length - 1)
                            result.push(seg);
                    }
                    break;
                case 'S':
                    // default control point
                    var cx = x;
                    var cy = y;
                    if (prev == 'C' || prev == 'S') {
                        cx += cx - bezierX; // reflect the previous command's control
                        cy += cy - bezierY; // point relative to the current point
                    }
                    seg = ['C', cx, cy, seg[1], seg[2], seg[3], seg[4]];
                    break;
                case 'T':
                    if (prev == 'Q' || prev == 'T') {
                        quadX = x * 2 - quadX; // as with 'S' reflect previous control point
                        quadY = y * 2 - quadY;
                    }
                    else {
                        quadX = x;
                        quadY = y;
                    }
                    seg = quadratic(x, y, quadX, quadY, seg[1], seg[2]);
                    break;
                case 'Q':
                    quadX = seg[1];
                    quadY = seg[2];
                    seg = quadratic(x, y, seg[1], seg[2], seg[3], seg[4]);
                    break;
                case 'L':
                    seg = line(x, y, seg[1], seg[2]);
                    break;
                case 'H':
                    seg = line(x, y, seg[1], y);
                    break;
                case 'V':
                    seg = line(x, y, x, seg[1]);
                    break;
                case 'Z':
                    seg = line(x, y, startX, startY);
                    break;
            }
            // update state
            prev = command;
            x = seg[seg.length - 2];
            y = seg[seg.length - 1];
            if (seg.length > 4) {
                bezierX = seg[seg.length - 4];
                bezierY = seg[seg.length - 3];
            }
            else {
                bezierX = x;
                bezierY = y;
            }
            result.push(seg);
        }
        this.segments = result;
        return this;
    };
    CGPath.prototype.bounds = function () {
        this.abs();
        this.normalize();
        if (!this.segments.length) {
            return [0, 0, 0, 0];
        }
        var bounds = [Infinity, Infinity, -Infinity, -Infinity];
        for (var i = 0, l = this.segments.length; i < l; i++) {
            var points = this.segments[i].slice(1);
            for (var j = 0; j < points.length; j += 2) {
                if (points[j + 0] < bounds[0]) {
                    bounds[0] = points[j + 0];
                }
                if (points[j + 1] < bounds[1]) {
                    bounds[1] = points[j + 1];
                }
                if (points[j + 0] > bounds[2]) {
                    bounds[2] = points[j + 0];
                }
                if (points[j + 1] > bounds[3]) {
                    bounds[3] = points[j + 1];
                }
            }
        }
        return bounds;
    };
    CGPath.prototype.pilotPath = function (canvas) {
        var endAngle;
        var startAngle;
        var largeArcFlag;
        var sweepFlag;
        var endPoint;
        var midPoint;
        var angle;
        var lambda;
        var t1;
        var t2;
        var x;
        var x1;
        var y;
        var y1;
        var r;
        var rx;
        var ry;
        var w;
        var h;
        var pathType;
        var centerPoint;
        var cpx;
        var cpy;
        var qcpx;
        var qcpy;
        var ccw;
        var startPoint = { x: 0, y: 0 };
        var currentPoint = { x: 0, y: 0 };
        canvas.beginPath();
        for (var i = 0; i < this.segments.length; ++i) {
            var s = this.segments[i];
            pathType = s[0];
            // Reset control point if command is not cubic
            if (pathType !== 'S' && pathType !== 's' && pathType !== 'C' && pathType !== 'c') {
                cpx = null;
                cpy = null;
            }
            if (pathType !== 'T' && pathType !== 't' && pathType !== 'Q' && pathType !== 'q') {
                qcpx = null;
                qcpy = null;
            }
            switch (pathType) {
                case 'm':
                case 'M':
                    if (pathType === 'm') {
                        x += s[1];
                        y += s[2];
                    }
                    else {
                        x = s[1];
                        y = s[2];
                    }
                    if (pathType === 'M' || !startPoint) {
                        startPoint = { x: x, y: y };
                    }
                    canvas.moveTo(x, y);
                    break;
                case 'l':
                    x += s[1];
                    y += s[2];
                    canvas.lineTo(x, y);
                    break;
                case 'L':
                    x = s[1];
                    y = s[2];
                    canvas.lineTo(x, y);
                    break;
                case 'H':
                    x = s[1];
                    canvas.lineTo(x, y);
                    break;
                case 'h':
                    x += s[1];
                    canvas.lineTo(x, y);
                    break;
                case 'V':
                    y = s[1];
                    canvas.lineTo(x, y);
                    break;
                case 'v':
                    y += s[1];
                    canvas.lineTo(x, y);
                    break;
                case 'a':
                case 'A':
                    if (pathType === 'a') {
                        x += s[6];
                        y += s[7];
                    }
                    else {
                        x = s[6];
                        y = s[7];
                    }
                    rx = s[1]; // rx
                    ry = s[2]; // ry
                    angle = (s[3] * Math.PI) / 180;
                    largeArcFlag = !!s[4];
                    sweepFlag = !!s[5];
                    endPoint = { x: x, y: y };
                    // https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes
                    midPoint = {
                        x: (currentPoint.x - endPoint.x) / 2,
                        y: (currentPoint.y - endPoint.y) / 2,
                    };
                    rotatePoint(midPoint, -angle);
                    // radius correction
                    lambda = ((midPoint.x * midPoint.x) / (rx * rx))
                        + ((midPoint.y * midPoint.y) / (ry * ry));
                    if (lambda > 1) {
                        lambda = Math.sqrt(lambda);
                        rx *= lambda;
                        ry *= lambda;
                    }
                    centerPoint = {
                        x: (rx * midPoint.y) / ry,
                        y: -(ry * midPoint.x) / rx,
                    };
                    t1 = rx * rx * ry * ry;
                    t2 = (rx * rx * midPoint.y * midPoint.y)
                        + (ry * ry * midPoint.x * midPoint.x);
                    if (sweepFlag !== largeArcFlag) {
                        scalePoint(centerPoint, Math.sqrt((t1 - t2) / t2) || 0);
                    }
                    else {
                        scalePoint(centerPoint, -Math.sqrt((t1 - t2) / t2) || 0);
                    }
                    startAngle = Math.atan2((midPoint.y - centerPoint.y) / ry, (midPoint.x - centerPoint.x) / rx);
                    endAngle = Math.atan2(-(midPoint.y + centerPoint.y) / ry, -(midPoint.x + centerPoint.x) / rx);
                    rotatePoint(centerPoint, angle);
                    translatePoint(centerPoint, (endPoint.x + currentPoint.x) / 2, (endPoint.y + currentPoint.y) / 2);
                    canvas.save();
                    canvas.translate(centerPoint.x, centerPoint.y);
                    canvas.rotate(angle);
                    canvas.scale(rx, ry);
                    canvas.arc(0, 0, 1, startAngle, endAngle, !sweepFlag);
                    canvas.restore();
                    break;
                case 'C':
                    cpx = s[3]; // Last control point
                    cpy = s[4];
                    x = s[5];
                    y = s[6];
                    canvas.bezierCurveTo(s[1], s[2], cpx, cpy, x, y);
                    break;
                case 'c':
                    canvas.bezierCurveTo(s[1] + x, s[2] + y, s[3] + x, s[4] + y, s[5] + x, s[6] + y);
                    cpx = s[3] + x; // Last control point
                    cpy = s[4] + y;
                    x += s[5];
                    y += s[6];
                    break;
                case 'S':
                    if (cpx === null || cpx === null) {
                        cpx = x;
                        cpy = y;
                    }
                    canvas.bezierCurveTo((2 * x) - cpx, (2 * y) - cpy, s[1], s[2], s[3], s[4]);
                    cpx = s[1]; // last control point
                    cpy = s[2];
                    x = s[3];
                    y = s[4];
                    break;
                case 's':
                    if (cpx === null || cpx === null) {
                        cpx = x;
                        cpy = y;
                    }
                    canvas.bezierCurveTo((2 * x) - cpx, (2 * y) - cpy, s[1] + x, s[2] + y, s[3] + x, s[4] + y);
                    cpx = s[1] + x; // last control point
                    cpy = s[2] + y;
                    x += s[3];
                    y += s[4];
                    break;
                case 'Q':
                    qcpx = s[1]; // last control point
                    qcpy = s[2];
                    x = s[3];
                    y = s[4];
                    canvas.quadraticCurveTo(qcpx, qcpy, x, y);
                    break;
                case 'q':
                    qcpx = s[1] + x; // last control point
                    qcpy = s[2] + y;
                    x += s[3];
                    y += s[4];
                    canvas.quadraticCurveTo(qcpx, qcpy, x, y);
                    break;
                case 'T':
                    if (qcpx === null || qcpx === null) {
                        qcpx = x;
                        qcpy = y;
                    }
                    qcpx = (2 * x) - qcpx; // last control point
                    qcpy = (2 * y) - qcpy;
                    x = s[1];
                    y = s[2];
                    canvas.quadraticCurveTo(qcpx, qcpy, x, y);
                    break;
                case 't':
                    if (qcpx === null || qcpx === null) {
                        qcpx = x;
                        qcpy = y;
                    }
                    qcpx = (2 * x) - qcpx; // last control point
                    qcpy = (2 * y) - qcpy;
                    x += s[1];
                    y += s[2];
                    canvas.quadraticCurveTo(qcpx, qcpy, x, y);
                    break;
                case 'z':
                case 'Z':
                    x = startPoint.x;
                    y = startPoint.y;
                    startPoint = undefined;
                    canvas.closePath();
                    break;
                case 'AC': // arc
                    x = s[1];
                    y = s[2];
                    r = s[3];
                    startAngle = s[4];
                    endAngle = s[5];
                    ccw = s[6];
                    canvas.arc(x, y, r, startAngle, endAngle, ccw);
                    break;
                case 'AT': // arcTo
                    x1 = s[1];
                    y1 = s[2];
                    x = s[3];
                    y = s[4];
                    r = s[5];
                    canvas.arcTo(x1, y1, x, y, r);
                    break;
                case 'E': // ellipse
                    x = s[1];
                    y = s[2];
                    rx = s[3];
                    ry = s[4];
                    angle = s[5];
                    startAngle = s[6];
                    endAngle = s[7];
                    ccw = s[8];
                    canvas.save();
                    canvas.translate(x, y);
                    canvas.rotate(angle);
                    canvas.scale(rx, ry);
                    canvas.arc(0, 0, 1, startAngle, endAngle, ccw);
                    canvas.restore();
                    break;
                case 'R': // rect
                    x = s[1];
                    y = s[2];
                    w = s[3];
                    h = s[4];
                    startPoint = { x: x, y: y };
                    canvas.rect(x, y, w, h);
                    break;
                default:
                // throw new Error(`${pathType} is not implemented`); ?
            }
            currentPoint.x = x;
            currentPoint.y = y;
        }
    };
    var CGPath_1;
    CGPath = CGPath_1 = __decorate([
        (0,_tuval_core__WEBPACK_IMPORTED_MODULE_1__.ClassInfo)({
            fullName: _types__WEBPACK_IMPORTED_MODULE_3__.CoreGraphicTypes.CGPath,
            instanceof: [
                _types__WEBPACK_IMPORTED_MODULE_3__.CoreGraphicTypes.CGPath
            ]
        })
        /**
           * Crates a Path2D polyfill object
           * @constructor
           * @ignore
           * @param {String} path
           */
    ], CGPath);
    return CGPath;
}());



/***/ }),

/***/ "./src/CGPath/CGPathDrawingMode.ts":
/*!*****************************************!*\
  !*** ./src/CGPath/CGPathDrawingMode.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CGPathDrawingMode": () => (/* binding */ CGPathDrawingMode)
/* harmony export */ });
var CGPathDrawingMode;
(function (CGPathDrawingMode) {
    CGPathDrawingMode[CGPathDrawingMode["Fill"] = 0] = "Fill";
    CGPathDrawingMode[CGPathDrawingMode["EOFill"] = 1] = "EOFill";
    CGPathDrawingMode[CGPathDrawingMode["Stroke"] = 2] = "Stroke";
    CGPathDrawingMode[CGPathDrawingMode["FillStroke"] = 3] = "FillStroke";
    CGPathDrawingMode[CGPathDrawingMode["EOFillStroke"] = 4] = "EOFillStroke";
})(CGPathDrawingMode || (CGPathDrawingMode = {}));


/***/ }),

/***/ "./src/CGPath/arxToBezier.ts":
/*!***********************************!*\
  !*** ./src/CGPath/arxToBezier.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "arcToBezier": () => (/* binding */ arcToBezier)
/* harmony export */ });
var TAU = Math.PI * 2;
var mapToEllipse = function (_a, rx, ry, cosphi, sinphi, centerx, centery) {
    var x = _a.x, y = _a.y;
    x *= rx;
    y *= ry;
    var xp = cosphi * x - sinphi * y;
    var yp = sinphi * x + cosphi * y;
    return {
        x: xp + centerx,
        y: yp + centery
    };
};
var approxUnitArc = function (ang1, ang2) {
    // If 90 degree circular arc, use a constant
    // as derived from http://spencermortensen.com/articles/bezier-circle
    var a = ang2 === 1.5707963267948966
        ? 0.551915024494
        : ang2 === -1.5707963267948966
            ? -0.551915024494
            : 4 / 3 * Math.tan(ang2 / 4);
    var x1 = Math.cos(ang1);
    var y1 = Math.sin(ang1);
    var x2 = Math.cos(ang1 + ang2);
    var y2 = Math.sin(ang1 + ang2);
    return [
        {
            x: x1 - y1 * a,
            y: y1 + x1 * a
        },
        {
            x: x2 + y2 * a,
            y: y2 - x2 * a
        },
        {
            x: x2,
            y: y2
        }
    ];
};
var vectorAngle = function (ux, uy, vx, vy) {
    var sign = (ux * vy - uy * vx < 0) ? -1 : 1;
    var dot = ux * vx + uy * vy;
    if (dot > 1) {
        dot = 1;
    }
    if (dot < -1) {
        dot = -1;
    }
    return sign * Math.acos(dot);
};
var getArcCenter = function (px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp) {
    var rxsq = Math.pow(rx, 2);
    var rysq = Math.pow(ry, 2);
    var pxpsq = Math.pow(pxp, 2);
    var pypsq = Math.pow(pyp, 2);
    var radicant = (rxsq * rysq) - (rxsq * pypsq) - (rysq * pxpsq);
    if (radicant < 0) {
        radicant = 0;
    }
    radicant /= (rxsq * pypsq) + (rysq * pxpsq);
    radicant = Math.sqrt(radicant) * (largeArcFlag === sweepFlag ? -1 : 1);
    var centerxp = radicant * rx / ry * pyp;
    var centeryp = radicant * -ry / rx * pxp;
    var centerx = cosphi * centerxp - sinphi * centeryp + (px + cx) / 2;
    var centery = sinphi * centerxp + cosphi * centeryp + (py + cy) / 2;
    var vx1 = (pxp - centerxp) / rx;
    var vy1 = (pyp - centeryp) / ry;
    var vx2 = (-pxp - centerxp) / rx;
    var vy2 = (-pyp - centeryp) / ry;
    var ang1 = vectorAngle(1, 0, vx1, vy1);
    var ang2 = vectorAngle(vx1, vy1, vx2, vy2);
    if (sweepFlag === 0 && ang2 > 0) {
        ang2 -= TAU;
    }
    if (sweepFlag === 1 && ang2 < 0) {
        ang2 += TAU;
    }
    return [centerx, centery, ang1, ang2];
};
var arcToBezier = function (_a) {
    var px = _a.px, py = _a.py, cx = _a.cx, cy = _a.cy, rx = _a.rx, ry = _a.ry, _b = _a.xAxisRotation, xAxisRotation = _b === void 0 ? 0 : _b, _c = _a.largeArcFlag, largeArcFlag = _c === void 0 ? 0 : _c, _d = _a.sweepFlag, sweepFlag = _d === void 0 ? 0 : _d;
    var curves = [];
    if (rx === 0 || ry === 0) {
        return [];
    }
    var sinphi = Math.sin(xAxisRotation * TAU / 360);
    var cosphi = Math.cos(xAxisRotation * TAU / 360);
    var pxp = cosphi * (px - cx) / 2 + sinphi * (py - cy) / 2;
    var pyp = -sinphi * (px - cx) / 2 + cosphi * (py - cy) / 2;
    if (pxp === 0 && pyp === 0) {
        return [];
    }
    rx = Math.abs(rx);
    ry = Math.abs(ry);
    var lambda = Math.pow(pxp, 2) / Math.pow(rx, 2) +
        Math.pow(pyp, 2) / Math.pow(ry, 2);
    if (lambda > 1) {
        rx *= Math.sqrt(lambda);
        ry *= Math.sqrt(lambda);
    }
    var _e = getArcCenter(px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp), centerx = _e[0], centery = _e[1], ang1 = _e[2], ang2 = _e[3];
    // If 'ang2' == 90.0000000001, then `ratio` will evaluate to
    // 1.0000000001. This causes `segments` to be greater than one, which is an
    // unecessary split, and adds extra points to the bezier curve. To alleviate
    // this issue, we round to 1.0 when the ratio is close to 1.0.
    var ratio = Math.abs(ang2) / (TAU / 4);
    if (Math.abs(1.0 - ratio) < 0.0000001) {
        ratio = 1.0;
    }
    var segments = Math.max(Math.ceil(ratio), 1);
    ang2 /= segments;
    for (var i = 0; i < segments; i++) {
        curves.push(approxUnitArc(ang1, ang2));
        ang1 += ang2;
    }
    return curves.map(function (curve) {
        var _a = mapToEllipse(curve[0], rx, ry, cosphi, sinphi, centerx, centery), x1 = _a.x, y1 = _a.y;
        var _b = mapToEllipse(curve[1], rx, ry, cosphi, sinphi, centerx, centery), x2 = _b.x, y2 = _b.y;
        var _c = mapToEllipse(curve[2], rx, ry, cosphi, sinphi, centerx, centery), x = _c.x, y = _c.y;
        return { x1: x1, y1: y1, x2: x2, y2: y2, x: x, y: y };
    });
};


/***/ }),

/***/ "./src/CGPath/parsePath.ts":
/*!*********************************!*\
  !*** ./src/CGPath/parsePath.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parse": () => (/* binding */ parse)
/* harmony export */ });
var ARG_LENGTH = {
    a: 7,
    c: 6,
    h: 1,
    l: 2,
    m: 2,
    q: 4,
    s: 4,
    t: 2,
    v: 1,
    z: 0,
};
var SEGMENT_PATTERN = /([astvzqmhlc])([^astvzqmhlc]*)/ig;
var NUMBER = /-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/ig;
function parseValues(args) {
    var numbers = args.match(NUMBER);
    return numbers ? numbers.map(Number) : [];
}
/**
 * parse an svg path data string. Generates an Array
 * of commands where each command is an Array of the
 * form `[command, arg1, arg2, ...]`
 *
 * https://www.w3.org/TR/SVG/paths.html#PathDataGeneralInformation
 * @ignore
 *
 * @param {string} path
 * @returns {array}
 */
function parse(path) {
    var data = [];
    var p = String(path).trim();
    // A path data segment (if there is one) must begin with a "moveto" command
    if (p[0] !== 'M' && p[0] !== 'm') {
        return data;
    }
    p.replace(SEGMENT_PATTERN, function (_, command, args) {
        var type = command.toLowerCase();
        var theArgs = parseValues(args);
        var theCommand = command;
        // overloaded moveTo
        if (type === 'm' && theArgs.length > 2) {
            var a = [theCommand].concat(theArgs.splice(0, 2));
            data.push(a);
            type = 'l';
            theCommand = theCommand === 'm' ? 'l' : 'L';
        }
        // Ignore invalid commands
        if (theArgs.length < ARG_LENGTH[type]) {
            return '';
        }
        data.push([theCommand].concat(theArgs.splice(0, ARG_LENGTH[type])));
        // The command letter can be eliminated on subsequent commands if the
        // same command is used multiple times in a row (e.g., you can drop the
        // second "L" in "M 100 200 L 200 100 L -100 -200" and use
        // "M 100 200 L 200 100 -100 -200" instead).
        while (theArgs.length >= ARG_LENGTH[type] && theArgs.length && ARG_LENGTH[type]) {
            data.push([theCommand].concat(theArgs.splice(0, ARG_LENGTH[type])));
        }
        return '';
    });
    return data;
}


/***/ }),

/***/ "./src/CGPoint.ts":
/*!************************!*\
  !*** ./src/CGPoint.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CGPoint": () => (/* binding */ CGPoint)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ "./src/types.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var CGPoint = /** @class */ (function () {
    function CGPoint(x, y) {
        var _this = this;
        this.x = 0;
        this.y = 0;
        this.add = function (sz) { return CGPoint_1.Add(_this, sz); };
        this.subtract = function (sz) { return CGPoint_1.Subtract(_this, sz); };
        this.Equals = function (pt) { return _this.x === pt.x && _this.y === pt.y; };
        this.notEquals = function (pt) { return _this.x !== pt.x || _this.y !== pt.y; };
        this.sub = function (p) { return new CGPoint_1(_this.X - p.X, _this.Y - p.Y); };
        this._add = function (p) { return new CGPoint_1(_this.X + p.X, _this.Y + p.Y); };
        function isPoint(val) {
            if (val) {
                return val.x !== undefined && val.y !== undefined;
            }
            else {
                return false;
            }
        }
        if (typeof x === 'number' && typeof y === 'number') {
            this.x = x;
            this.y = y;
        }
        else if (isPoint(x)) {
            this.x = x.x;
            this.y = x.y;
        }
    }
    CGPoint_1 = CGPoint;
    Object.defineProperty(CGPoint, "Empty", {
        get: function () {
            return new CGPoint_1();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGPoint.prototype, "IsEmpty", {
        get: function () {
            return this.x === 0 && this.y === 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGPoint.prototype, "X", {
        get: function () {
            return this.x;
        },
        set: function (value) {
            this.x = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGPoint.prototype, "Y", {
        get: function () {
            return this.y;
        },
        set: function (value) {
            this.y = value;
        },
        enumerable: false,
        configurable: true
    });
    CGPoint.prototype.Offset = function (dx, dy) {
        var x = this;
        x.X = x.X + dx;
        var y = this;
        y.Y = y.Y + dy;
    };
    CGPoint.Add = function (pt, sz) {
        return new CGPoint_1(pt.X + sz.Width, pt.Y + sz.Height);
    };
    ;
    CGPoint.Subtract = function (pt, sz) {
        return new CGPoint_1(pt.X - sz.Width, pt.Y - sz.Height);
    };
    CGPoint.prototype.clone = function () {
        return new CGPoint_1(this.X, this.Y);
    };
    var CGPoint_1;
    CGPoint = CGPoint_1 = __decorate([
        (0,_tuval_core__WEBPACK_IMPORTED_MODULE_0__.ClassInfo)({
            fullName: _types__WEBPACK_IMPORTED_MODULE_1__.CoreGraphicTypes.CGPoint,
            instanceof: [
                _types__WEBPACK_IMPORTED_MODULE_1__.CoreGraphicTypes.CGPoint
            ]
        })
    ], CGPoint);
    return CGPoint;
}());



/***/ }),

/***/ "./src/CGRectangle.ts":
/*!****************************!*\
  !*** ./src/CGRectangle.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Rect": () => (/* binding */ Rect),
/* harmony export */   "CGRectangle": () => (/* binding */ CGRectangle)
/* harmony export */ });
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ "./src/types.ts");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _CGPoint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CGPoint */ "./src/CGPoint.ts");
/* harmony import */ var _CGSize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CGSize */ "./src/CGSize.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};





function Rect(X1, Y1, X2, Y2) {
    return new CGRectangle(X1, Y1, X2 - X1, Y2 - Y1);
}
var CGRectangle = /** @class */ (function () {
    function CGRectangle(param1, param2, param3, param4) {
        var _this = this;
        this.myX = 0;
        this.myY = 0;
        this.myWidth = 0;
        this.myHeight = 0;
        this.myRotation = 0;
        this.Equals = function (rect) {
            return _this.X === rect.X && _this.Y === rect.Y && _this.Width === rect.Width && _this.Height === rect.Height;
        };
        this.intersectsWith = function (rect) {
            return rect.X < _this.X + _this.Width && _this.X < rect.X + rect.Width && rect.Y < _this.Y + _this.Height && _this.Y < rect.Y + rect.Height;
        };
        this.toString = function () {
            return '{X=' + _this.X.toString() + ',Y=' + _this.Y.toString() + ',Width=' + _this.Width.toString() + ',Height=' + _this.Height.toString() + '}';
        };
        if (param1 instanceof _CGPoint__WEBPACK_IMPORTED_MODULE_2__.CGPoint && param2 instanceof _CGSize__WEBPACK_IMPORTED_MODULE_3__.CGSize) {
            this.myX = param1.X;
            this.myY = param1.Y;
            this.myWidth = param2.Width;
            this.myHeight = param2.Height;
        }
        if (typeof param1 === 'number' && typeof param2 === 'number' && typeof param3 === 'number' && typeof param4 === 'number') {
            this.myX = param1;
            this.myY = param2;
            this.myWidth = param3;
            this.myHeight = param4;
        }
        function isRectangle(val) {
            if (val) {
                return val.x !== undefined && val.y !== undefined && val.width !== undefined && val.height !== undefined;
            }
            else {
                return false;
            }
        }
        if (isRectangle(param1)) {
            this.myX = param1.x;
            this.myY = param1.y;
            this.myWidth = param1.width;
            this.myHeight = param1.height;
        }
    }
    CGRectangle_1 = CGRectangle;
    CGRectangle.prototype.x = function (x, y, width, height) {
        throw new Error("Method not implemented.");
    };
    CGRectangle.prototype.y = function (x, y, width, height) {
        throw new Error("Method not implemented.");
    };
    CGRectangle.prototype.width = function (x, y, width, height) {
        throw new Error("Method not implemented.");
    };
    CGRectangle.prototype.height = function (x, y, width, height) {
        throw new Error("Method not implemented.");
    };
    Object.defineProperty(CGRectangle, "Empty", {
        get: function () {
            return new CGRectangle_1(0, 0, 0, 0);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGRectangle.prototype, "X", {
        get: function () {
            return this.myX;
        },
        set: function (value) {
            this.myX = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGRectangle.prototype, "Y", {
        get: function () {
            return this.myY;
        },
        set: function (value) {
            this.myY = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGRectangle.prototype, "X1", {
        get: function () {
            return this.myX;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGRectangle.prototype, "Y1", {
        get: function () {
            return this.myY;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGRectangle.prototype, "X2", {
        get: function () {
            return this.myX + this.myWidth;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGRectangle.prototype, "Y2", {
        get: function () {
            return this.myY + this.myHeight;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGRectangle.prototype, "Width", {
        get: function () {
            return this.myWidth;
        },
        set: function (value) {
            this.myWidth = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGRectangle.prototype, "Height", {
        get: function () {
            return this.myHeight;
        },
        set: function (value) {
            this.myHeight = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGRectangle.prototype, "Rotation", {
        get: function () {
            return this.myRotation;
        },
        set: function (value) {
            this.myRotation = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGRectangle.prototype, "Location", {
        get: function () {
            return new _CGPoint__WEBPACK_IMPORTED_MODULE_2__.CGPoint(this.X, this.Y);
        },
        set: function (value) {
            this.X = value.X;
            this.Y = value.Y;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGRectangle.prototype, "Size", {
        get: function () {
            return new _CGSize__WEBPACK_IMPORTED_MODULE_3__.CGSize(this.Width, this.Height);
        },
        set: function (value) {
            this.Width = value.Width;
            this.Height = value.Height;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGRectangle.prototype, "Left", {
        get: function () {
            return this.X;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGRectangle.prototype, "Top", {
        get: function () {
            return this.Y;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGRectangle.prototype, "Right", {
        get: function () {
            return this.X + this.Width;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGRectangle.prototype, "Bottom", {
        get: function () {
            return this.Y + this.Height;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGRectangle.prototype, "IsEmpty", {
        get: function () {
            return this.Width <= 0 || this.Height <= 0;
        },
        enumerable: false,
        configurable: true
    });
    /**
    * Extends the rectangle's bounds to include the described point or rectangle.
    * @param {Number} x X position of the point or rectangle.
    * @param {Number} y Y position of the point or rectangle.
    * @param {Number} [width=0] The width of the rectangle.
    * @param {Number} [height=0] The height of the rectangle.
    * @return {easeljs.Rectangle} This instance. Useful for chaining method calls.
    * @chainable
   */
    CGRectangle.prototype.extend = function (x, y, width, height) {
        if (width === void 0) { width = 0; }
        if (height === void 0) { height = 0; }
        if (x + width > this.X + this.Width) {
            this.Width = x + width - this.X;
        }
        if (y + height > this.Y + this.Height) {
            this.Height = y + height - this.Y;
        }
        if (x < this.X) {
            this.Width += this.X - x;
            this.X = x;
        }
        if (y < this.Y) {
            this.Height += this.Y - y;
            this.Y = y;
        }
        return this;
    };
    CGRectangle.prototype.contains = function (param1, param2) {
        if (_tuval_core__WEBPACK_IMPORTED_MODULE_1__.is["typeof"](param1, _types__WEBPACK_IMPORTED_MODULE_0__.CoreGraphicTypes.CGRectangle)) {
            return (this.X <= param1.X &&
                param1.X + param1.Width <= this.X + this.Width &&
                this.Y <= param1.Y &&
                param1.Y + param1.Height <= this.Y + this.Height);
        }
        else if (_tuval_core__WEBPACK_IMPORTED_MODULE_1__.is["typeof"](param1, _types__WEBPACK_IMPORTED_MODULE_0__.CoreGraphicTypes.CGPoint)) {
            return this.contains(param1.X, param1.Y);
        }
        else {
            return this.X <= param1 && param1 < this.X + this.Width && this.Y <= param2 && param2 < this.Y + this.Height;
        }
    };
    CGRectangle.prototype.inflate = function (param1, param2) {
        if (param1 instanceof _CGSize__WEBPACK_IMPORTED_MODULE_3__.CGSize) {
            return this.inflate(param1.Width, param1.Height);
        }
        else {
            return new CGRectangle_1(this.X - param1, this.Y - param2, this.Width + 2 * param1, this.Height + 2 * param2);
        }
        throw new _tuval_core__WEBPACK_IMPORTED_MODULE_1__.ArgumentException('inflate');
    };
    CGRectangle.Inflate = function (rect, x, y) {
        var r = rect;
        r.inflate(x, y);
        return r;
    };
    CGRectangle.prototype.intersect = function (rect) {
        var result = CGRectangle_1.Intersect(rect, this);
        this.X = result.X;
        this.Y = result.Y;
        this.Width = result.Width;
        this.Height = result.Height;
    };
    CGRectangle.Intersect = function (a, b) {
        var x1 = Math.max(a.X, b.X);
        var x2 = Math.min(a.X + a.Width, b.X + b.Width);
        var y1 = Math.max(a.Y, b.Y);
        var y2 = Math.min(a.Y + a.Height, b.Y + b.Height);
        if (x2 >= x1 && y2 >= y1) {
            return new CGRectangle_1(x1, y1, x2 - x1, y2 - y1);
        }
        return CGRectangle_1.Empty;
    };
    CGRectangle.Union = function (a, b) {
        var x1 = Math.min(a.X, b.X);
        var x2 = Math.max(a.X + a.Width, b.X + b.Width);
        var y1 = Math.min(a.Y, b.Y);
        var y2 = Math.max(a.Y + a.Height, b.Y + b.Height);
        return new CGRectangle_1(x1, y1, x2 - x1, y2 - y1);
    };
    CGRectangle.prototype.offset = function (param1, param2) {
        if (param1 instanceof _CGPoint__WEBPACK_IMPORTED_MODULE_2__.CGPoint) {
            this.offset(param1.X, param1.Y);
        }
        else {
            this.X += param1;
            this.Y += param2;
        }
    };
    /**
 * Sets the specified values on this instance.
 * @param {Number} [x=0] X position.
 * @param {Number} [y=0] Y position.
 * @param {Number} [width=0] The width of the Rectangle.
 * @param {Number} [height=0] The height of the Rectangle.
 * @return {easeljs.Rectangle} This instance. Useful for chaining method calls.
 * @chainable
*/
    CGRectangle.prototype.setValues = function (x, y, width, height) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (width === void 0) { width = 0; }
        if (height === void 0) { height = 0; }
        this.X = x;
        this.Y = y;
        this.Width = width;
        this.Height = height;
        return this;
    };
    CGRectangle.prototype.copy = function (rect) {
        return this.setValues(rect.X, rect.Y, rect.Width, rect.Height);
    };
    CGRectangle.prototype.transform = function (matrix) {
        var rectangle = this;
        var transform = matrix.transform;
        var x = rectangle.X;
        var y = rectangle.Y;
        rectangle.X = transform.m[0] * x + transform.m[2] * y + transform.m[4];
        rectangle.Y = transform.m[1] * x + transform.m[3] * y + transform.m[5];
        x = rectangle.Width;
        y = rectangle.Height;
        rectangle.Width = transform.m[0] * x + transform.m[2] * y + transform.m[4];
        rectangle.Height = transform.m[1] * x + transform.m[3] * y + transform.m[5];
        return new CGRectangle_1(rectangle.Location, rectangle.Size);
    };
    CGRectangle.prototype.scale = function (factor) {
        return new CGRectangle_1(this.X, this.Y, this.Width * factor, this.Height * factor);
    };
    CGRectangle.prototype.isEqual = function (rect) {
        return (this === rect) ||
            (this.X === rect.X && this.Y === rect.Y &&
                this.Width === rect.Width && this.Height === rect.Height);
    };
    CGRectangle.prototype.clone = function () {
        return new CGRectangle_1(this.X, this.Y, this.Width, this.Height);
    };
    CGRectangle.prototype.pos = function () {
        return new _CGPoint__WEBPACK_IMPORTED_MODULE_2__.CGPoint(this.X, this.Y);
    };
    CGRectangle.prototype.size = function () {
        return new _CGSize__WEBPACK_IMPORTED_MODULE_3__.CGSize(this.X2 - this.X1, this.Y2 - this.Y1);
    };
    CGRectangle.prototype.translate = function (offsetX, offsetY) {
        return new CGRectangle_1(this.X1 + offsetX, this.Y1 + offsetY, this.Width, this.Height);
    };
    //Rect translate(Point const & offset) const { return Rect(X1 + offset.X, Y1 + offset.Y, X2 + offset.X, Y2 + offset.Y); }
    //Rect move(Point const & position) const { return Rect(position.X, position.Y, position.X + width() - 1, position.Y + height() - 1); }
    CGRectangle.prototype.move = function (x, y) {
        return new CGRectangle_1(x, y, this.Width, this.Height);
    };
    CGRectangle.prototype.shrink = function (value) {
        return new CGRectangle_1(this.X1 + value, this.Y1 + value, (this.X2 - value) - (this.X1 + value), (this.Y2 - value) - (this.Y1 + value));
    };
    CGRectangle.prototype.hShrink = function (value) {
        return new CGRectangle_1(this.X1 + value, this.Y1, this.X2 - value, this.Y2);
    };
    CGRectangle.prototype.vShrink = function (value) {
        return new CGRectangle_1(this.X1, this.Y1 + value, this.X2, this.Y2 - value);
    };
    CGRectangle.prototype.resize = function (width, height) {
        return new CGRectangle_1(this.X1, this.Y1, width, height);
    };
    //Rect resize(Size size) const { return Rect(X1, Y1, X1 + size.width - 1, Y1 + size.height - 1); }
    CGRectangle.prototype.intersection = function (rect) {
        return new CGRectangle_1(Math.max(this.X1, rect.X1), Math.max(this.Y1, rect.Y1), Math.min(this.X2, rect.X2) - Math.max(this.X1, rect.X1), Math.min(this.Y2, rect.Y2) - Math.max(this.Y1, rect.Y1));
    };
    CGRectangle.prototype.intersects = function (rect) {
        return this.X1 <= rect.X2 && this.X2 >= rect.X1 && this.Y1 <= rect.Y2 && this.Y2 >= rect.Y1;
    };
    CGRectangle.prototype.intersectsNotEqual = function (rect) {
        return this.X1 < rect.X2 && this.X2 > rect.X1 && this.Y1 < rect.Y2 && this.Y2 > rect.Y1;
    };
    var CGRectangle_1;
    CGRectangle.FromLTRB = function (left, top, right, bottom) {
        return new CGRectangle_1(left, top, right - left, bottom - top);
    };
    CGRectangle = CGRectangle_1 = __decorate([
        (0,_tuval_core__WEBPACK_IMPORTED_MODULE_1__.ClassInfo)({
            fullName: _types__WEBPACK_IMPORTED_MODULE_0__.CoreGraphicTypes.CGRectangle,
            instanceof: [
                _types__WEBPACK_IMPORTED_MODULE_0__.CoreGraphicTypes.CGRectangle
            ]
        })
    ], CGRectangle);
    return CGRectangle;
}());



/***/ }),

/***/ "./src/CGSize.ts":
/*!***********************!*\
  !*** ./src/CGSize.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CGSize": () => (/* binding */ CGSize)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _CGPoint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CGPoint */ "./src/CGPoint.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */ "./src/types.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};




var CGSize = /** @class */ (function () {
    function CGSize(sizeOrPoint, height) {
        var _this = this;
        this.width = 0;
        this.height = 0;
        this.Equals = function (pt) { return _this.width === pt.width && _this.height === pt.height; };
        this.NotEquals = function (pt) { return _this.width !== pt.width || _this.height !== pt.height; };
        function isSize(val) {
            if (val) {
                return val.width !== undefined && val.height !== undefined;
            }
            else {
                return false;
            }
        }
        if (sizeOrPoint instanceof CGSize_1) {
            this.width = sizeOrPoint.Width;
            this.height = sizeOrPoint.Height;
        }
        else if (sizeOrPoint instanceof _CGPoint__WEBPACK_IMPORTED_MODULE_1__.CGPoint) {
            this.width = sizeOrPoint.X;
            this.height = sizeOrPoint.Y;
        }
        else if (typeof sizeOrPoint === 'number' && typeof height === 'number') {
            this.width = sizeOrPoint;
            this.height = height;
        }
        else if (isSize(sizeOrPoint)) {
            this.width = sizeOrPoint.width;
            this.height = sizeOrPoint.height;
        }
    }
    CGSize_1 = CGSize;
    Object.defineProperty(CGSize.prototype, "IsEmpty", {
        get: function () {
            return this.width === 0 && this.height === 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGSize.prototype, "Width", {
        get: function () {
            return this.width;
        },
        set: function (value) {
            this.width = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGSize.prototype, "Height", {
        get: function () {
            return this.height;
        },
        set: function (value) {
            this.height = value;
        },
        enumerable: false,
        configurable: true
    });
    CGSize.prototype.Add = function (size) {
        this.Width += size.Width;
        this.Height += size.Height;
        return this;
    };
    CGSize.prototype.Substruct = function (size) {
        this.Width -= size.Width;
        this.Height -= size.Height;
    };
    CGSize.prototype.Clone = function () {
        return new CGSize_1(this.width, this.height);
    };
    CGSize.Add = function (sz1, sz2) {
        return new CGSize_1(sz1.Width + sz2.Width, sz1.Height + sz2.Height);
    };
    CGSize.Subtract = function (sz1, sz2) {
        return new CGSize_1(sz1.Width - sz2.Width, sz1.Height - sz2.Height);
    };
    CGSize.Ceiling = function (value) {
        return new CGSize_1(_tuval_core__WEBPACK_IMPORTED_MODULE_0__.Convert.ToInt32(Math.ceil(value.Width), _tuval_core__WEBPACK_IMPORTED_MODULE_0__.Convert.ToInt32(Math.ceil(value.Height))));
    };
    var CGSize_1;
    CGSize.Empty = new CGSize_1();
    CGSize = CGSize_1 = __decorate([
        (0,_tuval_core__WEBPACK_IMPORTED_MODULE_0__.ClassInfo)({
            fullName: _types__WEBPACK_IMPORTED_MODULE_2__.CoreGraphicTypes.CGSize,
            instanceof: [
                _types__WEBPACK_IMPORTED_MODULE_2__.CoreGraphicTypes.CGSize
            ]
        })
    ], CGSize);
    return CGSize;
}());



/***/ }),

/***/ "./src/CGTextMetrics.ts":
/*!******************************!*\
  !*** ./src/CGTextMetrics.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CGTextMetrics": () => (/* binding */ CGTextMetrics)
/* harmony export */ });
/**
 * The TextMetrics object represents the measurement of a block of text with a specified style.
 *
 * ```js
 * let style = new PIXI.TextStyle({fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'})
 * let textMetrics = PIXI.TextMetrics.measureText('Your text', style)
 * ```
 *
 * @class
 * @memberof PIXI
 */
var CGTextMetrics = /** @class */ (function () {
    /**
     * @param {string} text - the text that was measured
     * @param {PIXI.TextStyle} style - the style that was measured
     * @param {number} width - the measured width of the text
     * @param {number} height - the measured height of the text
     * @param {string[]} lines - an array of the lines of text broken by new lines and wrapping if specified in style
     * @param {number[]} lineWidths - an array of the line widths for each line matched to `lines`
     * @param {number} lineHeight - the measured line height for this style
     * @param {number} maxLineWidth - the maximum line width for all measured lines
     * @param {Object} fontProperties - the font properties object from TextMetrics.measureFont
     */
    function CGTextMetrics(text, style, width, height, lines, lineWidths, lineHeight, maxLineWidth, fontProperties) {
        /**
         * The text that was measured
         *
         * @member {string}
         */
        this.text = text;
        /**
         * The style that was measured
         *
         * @member {PIXI.TextStyle}
         */
        this.style = style;
        /**
         * The measured width of the text
         *
         * @member {number}
         */
        this.width = width;
        /**
         * The measured height of the text
         *
         * @member {number}
         */
        this.height = height;
        /**
         * An array of lines of the text broken by new lines and wrapping is specified in style
         *
         * @member {string[]}
         */
        this.lines = lines;
        /**
         * An array of the line widths for each line matched to `lines`
         *
         * @member {number[]}
         */
        this.lineWidths = lineWidths;
        /**
         * The measured line height for this style
         *
         * @member {number}
         */
        this.lineHeight = lineHeight;
        /**
         * The maximum line width for all measured lines
         *
         * @member {number}
         */
        this.maxLineWidth = maxLineWidth;
        /**
         * The font properties object from TextMetrics.measureFont
         *
         * @member {PIXI.IFontMetrics}
         */
        this.fontProperties = fontProperties;
    }
    /**
     * Measures the supplied string of text and returns a Rectangle.
     *
     * @param {string} text - the text to measure.
     * @param {PIXI.TextStyle} style - the text style to use for measuring
     * @param {boolean} [wordWrap] - optional override for if word-wrap should be applied to the text.
     * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.
     * @return {PIXI.TextMetrics} measured width and height of the text.
     */
    CGTextMetrics.measureText = function (text, style, wordWrap, canvas) {
        if (canvas === void 0) { canvas = CGTextMetrics._canvas; }
        wordWrap = (wordWrap === undefined || wordWrap === null) ? style.wordWrap : wordWrap;
        var font = style.toFontString();
        var fontProperties = CGTextMetrics.measureFont(font);
        // fallback in case UA disallow canvas data extraction
        // (toDataURI, getImageData functions)
        if (fontProperties.fontSize === 0) {
            fontProperties.fontSize = style.fontSize;
            fontProperties.ascent = style.fontSize;
        }
        var context = canvas.getContext('2d');
        context.font = font;
        var outputText = wordWrap ? CGTextMetrics.wordWrap(text, style, canvas) : text;
        var lines = outputText.split(/(?:\r\n|\r|\n)/);
        var lineWidths = new Array(lines.length);
        var maxLineWidth = 0;
        for (var i = 0; i < lines.length; i++) {
            var lineWidth = context.measureText(lines[i]).width + ((lines[i].length - 1) * style.letterSpacing);
            lineWidths[i] = lineWidth;
            maxLineWidth = Math.max(maxLineWidth, lineWidth);
        }
        var width = maxLineWidth + style.strokeThickness;
        if (style.dropShadow) {
            width += style.dropShadowDistance;
        }
        var lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;
        var height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness)
            + ((lines.length - 1) * (lineHeight + style.leading));
        if (style.dropShadow) {
            height += style.dropShadowDistance;
        }
        return new CGTextMetrics(text, style, width, height, lines, lineWidths, lineHeight + style.leading, maxLineWidth, fontProperties);
    };
    /**
     * Applies newlines to a string to have it optimally fit into the horizontal
     * bounds set by the Text object's wordWrapWidth property.
     *
     * @private
     * @param {string} text - String to apply word wrapping to
     * @param {PIXI.TextStyle} style - the style to use when wrapping
     * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.
     * @return {string} New string with new lines applied where required
     */
    CGTextMetrics.wordWrap = function (text, style, canvas) {
        if (canvas === void 0) { canvas = CGTextMetrics._canvas; }
        var context = canvas.getContext('2d');
        var width = 0;
        var line = '';
        var lines = '';
        var cache = {};
        var letterSpacing = style.letterSpacing, whiteSpace = style.whiteSpace;
        // How to handle whitespaces
        var collapseSpaces = CGTextMetrics.collapseSpaces(whiteSpace);
        var collapseNewlines = CGTextMetrics.collapseNewlines(whiteSpace);
        // whether or not spaces may be added to the beginning of lines
        var canPrependSpaces = !collapseSpaces;
        // There is letterSpacing after every char except the last one
        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!
        // so for convenience the above needs to be compared to width + 1 extra letterSpace
        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_
        // ________________________________________________
        // And then the final space is simply no appended to each line
        var wordWrapWidth = style.wordWrapWidth + letterSpacing;
        // break text into words, spaces and newline chars
        var tokens = CGTextMetrics.tokenize(text);
        for (var i = 0; i < tokens.length; i++) {
            // get the word, space or newlineChar
            var token = tokens[i];
            // if word is a new line
            if (CGTextMetrics.isNewline(token)) {
                // keep the new line
                if (!collapseNewlines) {
                    lines += CGTextMetrics.addLine(line);
                    canPrependSpaces = !collapseSpaces;
                    line = '';
                    width = 0;
                    continue;
                }
                // if we should collapse new lines
                // we simply convert it into a space
                token = ' ';
            }
            // if we should collapse repeated whitespaces
            if (collapseSpaces) {
                // check both this and the last tokens for spaces
                var currIsBreakingSpace = CGTextMetrics.isBreakingSpace(token);
                var lastIsBreakingSpace = CGTextMetrics.isBreakingSpace(line[line.length - 1]);
                if (currIsBreakingSpace && lastIsBreakingSpace) {
                    continue;
                }
            }
            // get word width from cache if possible
            var tokenWidth = CGTextMetrics.getFromCache(token, letterSpacing, cache, context);
            // word is longer than desired bounds
            if (tokenWidth > wordWrapWidth) {
                // if we are not already at the beginning of a line
                if (line !== '') {
                    // start newlines for overflow words
                    lines += CGTextMetrics.addLine(line);
                    line = '';
                    width = 0;
                }
                // break large word over multiple lines
                if (CGTextMetrics.canBreakWords(token, style.breakWords)) {
                    // break word into characters
                    var characters = CGTextMetrics.wordWrapSplit(token);
                    // loop the characters
                    for (var j = 0; j < characters.length; j++) {
                        var char = characters[j];
                        var k = 1;
                        // we are not at the end of the token
                        while (characters[j + k]) {
                            var nextChar = characters[j + k];
                            var lastChar = char[char.length - 1];
                            // should not split chars
                            if (!CGTextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords)) {
                                // combine chars & move forward one
                                char += nextChar;
                            }
                            else {
                                break;
                            }
                            k++;
                        }
                        j += char.length - 1;
                        var characterWidth = CGTextMetrics.getFromCache(char, letterSpacing, cache, context);
                        if (characterWidth + width > wordWrapWidth) {
                            lines += CGTextMetrics.addLine(line);
                            canPrependSpaces = false;
                            line = '';
                            width = 0;
                        }
                        line += char;
                        width += characterWidth;
                    }
                }
                // run word out of the bounds
                else {
                    // if there are words in this line already
                    // finish that line and start a new one
                    if (line.length > 0) {
                        lines += CGTextMetrics.addLine(line);
                        line = '';
                        width = 0;
                    }
                    var isLastToken = i === tokens.length - 1;
                    // give it its own line if it's not the end
                    lines += CGTextMetrics.addLine(token, !isLastToken);
                    canPrependSpaces = false;
                    line = '';
                    width = 0;
                }
            }
            // word could fit
            else {
                // word won't fit because of existing words
                // start a new line
                if (tokenWidth + width > wordWrapWidth) {
                    // if its a space we don't want it
                    canPrependSpaces = false;
                    // add a new line
                    lines += CGTextMetrics.addLine(line);
                    // start a new line
                    line = '';
                    width = 0;
                }
                // don't add spaces to the beginning of lines
                if (line.length > 0 || !CGTextMetrics.isBreakingSpace(token) || canPrependSpaces) {
                    // add the word to the current line
                    line += token;
                    // update width counter
                    width += tokenWidth;
                }
            }
        }
        lines += CGTextMetrics.addLine(line, false);
        return lines;
    };
    /**
     * Convienience function for logging each line added during the wordWrap
     * method
     *
     * @private
     * @param  {string}   line        - The line of text to add
     * @param  {boolean}  newLine     - Add new line character to end
     * @return {string}   A formatted line
     */
    CGTextMetrics.addLine = function (line, newLine) {
        if (newLine === void 0) { newLine = true; }
        line = CGTextMetrics.trimRight(line);
        line = (newLine) ? line + "\n" : line;
        return line;
    };
    /**
     * Gets & sets the widths of calculated characters in a cache object
     *
     * @private
     * @param  {string}                    key            The key
     * @param  {number}                    letterSpacing  The letter spacing
     * @param  {object}                    cache          The cache
     * @param  {CanvasRenderingContext2D}  context        The canvas context
     * @return {number}                    The from cache.
     */
    CGTextMetrics.getFromCache = function (key, letterSpacing, cache, context) {
        var width = cache[key];
        if (width === undefined) {
            var spacing = ((key.length) * letterSpacing);
            width = context.measureText(key).width + spacing;
            cache[key] = width;
        }
        return width;
    };
    /**
     * Determines whether we should collapse breaking spaces
     *
     * @private
     * @param  {string}   whiteSpace  The TextStyle property whiteSpace
     * @return {boolean}  should collapse
     */
    CGTextMetrics.collapseSpaces = function (whiteSpace) {
        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');
    };
    /**
     * Determines whether we should collapse newLine chars
     *
     * @private
     * @param  {string}   whiteSpace  The white space
     * @return {boolean}  should collapse
     */
    CGTextMetrics.collapseNewlines = function (whiteSpace) {
        return (whiteSpace === 'normal');
    };
    /**
     * trims breaking whitespaces from string
     *
     * @private
     * @param  {string}  text  The text
     * @return {string}  trimmed string
     */
    CGTextMetrics.trimRight = function (text) {
        if (typeof text !== 'string') {
            return '';
        }
        for (var i = text.length - 1; i >= 0; i--) {
            var char = text[i];
            if (!CGTextMetrics.isBreakingSpace(char)) {
                break;
            }
            text = text.slice(0, -1);
        }
        return text;
    };
    /**
     * Determines if char is a newline.
     *
     * @private
     * @param  {string}  char  The character
     * @return {boolean}  True if newline, False otherwise.
     */
    CGTextMetrics.isNewline = function (char) {
        if (typeof char !== 'string') {
            return false;
        }
        return (CGTextMetrics._newlines.indexOf(char.charCodeAt(0)) >= 0);
    };
    /**
     * Determines if char is a breaking whitespace.
     *
     * @private
     * @param  {string}  char  The character
     * @return {boolean}  True if whitespace, False otherwise.
     */
    CGTextMetrics.isBreakingSpace = function (char) {
        if (typeof char !== 'string') {
            return false;
        }
        return (CGTextMetrics._breakingSpaces.indexOf(char.charCodeAt(0)) >= 0);
    };
    /**
     * Splits a string into words, breaking-spaces and newLine characters
     *
     * @private
     * @param  {string}  text       The text
     * @return {string[]}  A tokenized array
     */
    CGTextMetrics.tokenize = function (text) {
        var tokens = [];
        var token = '';
        if (typeof text !== 'string') {
            return tokens;
        }
        for (var i = 0; i < text.length; i++) {
            var char = text[i];
            if (CGTextMetrics.isBreakingSpace(char) || CGTextMetrics.isNewline(char)) {
                if (token !== '') {
                    tokens.push(token);
                    token = '';
                }
                tokens.push(char);
                continue;
            }
            token += char;
        }
        if (token !== '') {
            tokens.push(token);
        }
        return tokens;
    };
    /**
     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.
     *
     * It allows one to customise which words should break
     * Examples are if the token is CJK or numbers.
     * It must return a boolean.
     *
     * @param  {string}  token       The token
     * @param  {boolean}  breakWords  The style attr break words
     * @return {boolean} whether to break word or not
     */
    CGTextMetrics.canBreakWords = function (_token, breakWords) {
        return breakWords;
    };
    /**
     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.
     *
     * It allows one to determine whether a pair of characters
     * should be broken by newlines
     * For example certain characters in CJK langs or numbers.
     * It must return a boolean.
     *
     * @param  {string}  char      The character
     * @param  {string}  nextChar  The next character
     * @param  {string}  token     The token/word the characters are from
     * @param  {number}  index     The index in the token of the char
     * @param  {boolean}  breakWords  The style attr break words
     * @return {boolean} whether to break word or not
     */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    CGTextMetrics.canBreakChars = function (_char, _nextChar, _token, _index, _breakWords) {
        return true;
    };
    /**
     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.
     *
     * It is called when a token (usually a word) has to be split into separate pieces
     * in order to determine the point to break a word.
     * It must return an array of characters.
     *
     * @example
     * // Correctly splits emojis, eg "🤪🤪" will result in two element array, each with one emoji.
     * TextMetrics.wordWrapSplit = (token) => [...token];
     *
     * @param  {string}  token The token to split
     * @return {string[]} The characters of the token
     */
    CGTextMetrics.wordWrapSplit = function (token) {
        return token.split('');
    };
    /**
     * Calculates the ascent, descent and fontSize of a given font-style
     *
     * @static
     * @param {string} font - String representing the style of the font
     * @return {PIXI.IFontMetrics} Font properties object
     */
    CGTextMetrics.measureFont = function (font) {
        // as this method is used for preparing assets, don't recalculate things if we don't need to
        if (CGTextMetrics._fonts[font]) {
            return CGTextMetrics._fonts[font];
        }
        var properties = {
            ascent: 0,
            descent: 0,
            fontSize: 0,
        };
        var canvas = CGTextMetrics._canvas;
        var context = CGTextMetrics._context;
        context.font = font;
        var metricsString = CGTextMetrics.METRICS_STRING + CGTextMetrics.BASELINE_SYMBOL;
        var width = Math.ceil(context.measureText(metricsString).width);
        var baseline = Math.ceil(context.measureText(CGTextMetrics.BASELINE_SYMBOL).width);
        var height = 2 * baseline;
        baseline = baseline * CGTextMetrics.BASELINE_MULTIPLIER | 0;
        canvas.width = width;
        canvas.height = height;
        context.fillStyle = '#f00';
        context.fillRect(0, 0, width, height);
        context.font = font;
        context.textBaseline = 'alphabetic';
        context.fillStyle = '#000';
        context.fillText(metricsString, 0, baseline);
        var imagedata = context.getImageData(0, 0, width, height).data;
        var pixels = imagedata.length;
        var line = width * 4;
        var i = 0;
        var idx = 0;
        var stop = false;
        // ascent. scan from top to bottom until we find a non red pixel
        for (i = 0; i < baseline; ++i) {
            for (var j = 0; j < line; j += 4) {
                if (imagedata[idx + j] !== 255) {
                    stop = true;
                    break;
                }
            }
            if (!stop) {
                idx += line;
            }
            else {
                break;
            }
        }
        properties.ascent = baseline - i;
        idx = pixels - line;
        stop = false;
        // descent. scan from bottom to top until we find a non red pixel
        for (i = height; i > baseline; --i) {
            for (var j = 0; j < line; j += 4) {
                if (imagedata[idx + j] !== 255) {
                    stop = true;
                    break;
                }
            }
            if (!stop) {
                idx -= line;
            }
            else {
                break;
            }
        }
        properties.descent = i - baseline;
        properties.fontSize = properties.ascent + properties.descent;
        CGTextMetrics._fonts[font] = properties;
        return properties;
    };
    /**
     * Clear font metrics in metrics cache.
     *
     * @static
     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.
     */
    CGTextMetrics.clearMetrics = function (font) {
        if (font === void 0) { font = ''; }
        if (font) {
            delete CGTextMetrics._fonts[font];
        }
        else {
            CGTextMetrics._fonts = {};
        }
    };
    return CGTextMetrics;
}());

/**
 * Internal return object for {@link PIXI.TextMetrics.measureFont `TextMetrics.measureFont`}.
 *
 * @typedef {object} FontMetrics
 * @property {number} ascent - The ascent distance
 * @property {number} descent - The descent distance
 * @property {number} fontSize - Font size from ascent to descent
 * @memberof PIXI.TextMetrics
 * @private
 */
var canvas = (function () {
    try {
        // OffscreenCanvas2D measureText can be up to 40% faster.
        var c = new OffscreenCanvas(0, 0);
        var context = c.getContext('2d');
        if (context && context.measureText) {
            return c;
        }
        return document.createElement('canvas');
    }
    catch (ex) {
        return document.createElement('canvas');
    }
})();
canvas.width = canvas.height = 10;
/**
 * Cached canvas element for measuring text
 *
 * @memberof PIXI.TextMetrics
 * @type {HTMLCanvasElement}
 * @private
 */
CGTextMetrics._canvas = canvas;
/**
 * Cache for context to use.
 *
 * @memberof PIXI.TextMetrics
 * @type {CanvasRenderingContext2D}
 * @private
 */
CGTextMetrics._context = canvas.getContext('2d');
/**
 * Cache of {@see PIXI.TextMetrics.FontMetrics} objects.
 *
 * @memberof PIXI.TextMetrics
 * @type {Object}
 * @private
 */
CGTextMetrics._fonts = {};
/**
 * String used for calculate font metrics.
 * These characters are all tall to help calculate the height required for text.
 *
 * @static
 * @memberof PIXI.TextMetrics
 * @name METRICS_STRING
 * @type {string}
 * @default |ÉqÅ
 */
CGTextMetrics.METRICS_STRING = '|ÉqÅ';
/**
 * Baseline symbol for calculate font metrics.
 *
 * @static
 * @memberof PIXI.TextMetrics
 * @name BASELINE_SYMBOL
 * @type {string}
 * @default M
 */
CGTextMetrics.BASELINE_SYMBOL = 'M';
/**
 * Baseline multiplier for calculate font metrics.
 *
 * @static
 * @memberof PIXI.TextMetrics
 * @name BASELINE_MULTIPLIER
 * @type {number}
 * @default 1.4
 */
CGTextMetrics.BASELINE_MULTIPLIER = 1.4;
/**
 * Cache of new line chars.
 *
 * @memberof PIXI.TextMetrics
 * @type {number[]}
 * @private
 */
CGTextMetrics._newlines = [
    0x000A,
    0x000D, // carriage return
];
/**
 * Cache of breaking spaces.
 *
 * @memberof PIXI.TextMetrics
 * @type {number[]}
 * @private
 */
CGTextMetrics._breakingSpaces = [
    0x0009,
    0x0020,
    0x2000,
    0x2001,
    0x2002,
    0x2003,
    0x2004,
    0x2005,
    0x2006,
    0x2008,
    0x2009,
    0x200A,
    0x205F,
    0x3000, // ideographic space
];
/**
 * A number, or a string containing a number.
 *
 * @memberof PIXI
 * @typedef IFontMetrics
 * @property {number} ascent - Font ascent
 * @property {number} descent - Font descent
 * @property {number} fontSize - Font size
 */ 


/***/ }),

/***/ "./src/CGTextStyle.ts":
/*!****************************!*\
  !*** ./src/CGTextStyle.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TEXT_GRADIENT": () => (/* binding */ TEXT_GRADIENT),
/* harmony export */   "hex2string": () => (/* binding */ hex2string),
/* harmony export */   "CGTextStyle": () => (/* binding */ CGTextStyle)
/* harmony export */ });
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_0__);

var TEXT_GRADIENT;
(function (TEXT_GRADIENT) {
    TEXT_GRADIENT[TEXT_GRADIENT["LINEAR_VERTICAL"] = 0] = "LINEAR_VERTICAL";
    TEXT_GRADIENT[TEXT_GRADIENT["LINEAR_HORIZONTAL"] = 1] = "LINEAR_HORIZONTAL";
})(TEXT_GRADIENT || (TEXT_GRADIENT = {}));
function hex2string(hex) {
    var hexString = hex.toString(16);
    hexString = '000000'.substr(0, 6 - hexString.length) + hexString;
    return "#" + hexString;
}
var defaultStyle = {
    align: 'left',
    breakWords: false,
    dropShadow: false,
    dropShadowAlpha: 1,
    dropShadowAngle: Math.PI / 6,
    dropShadowBlur: 0,
    dropShadowColor: 'black',
    dropShadowDistance: 5,
    fill: 'black',
    fillGradientType: TEXT_GRADIENT.LINEAR_VERTICAL,
    fillGradientStops: [],
    fontFamily: 'Arial',
    fontSize: 26,
    fontStyle: 'normal',
    fontVariant: 'normal',
    fontWeight: 'normal',
    letterSpacing: 0,
    lineHeight: 0,
    lineJoin: 'miter',
    miterLimit: 10,
    padding: 0,
    stroke: 'black',
    strokeThickness: 0,
    textBaseline: 'alphabetic',
    trim: false,
    whiteSpace: 'pre',
    wordWrap: false,
    wordWrapWidth: 100,
    leading: 0,
};
var genericFontFamilies = [
    'serif',
    'sans-serif',
    'monospace',
    'cursive',
    'fantasy',
    'system-ui',
];
/**
 * A TextStyle Object contains information to decorate a Text objects.
 *
 * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.
 *
 * A tool can be used to generate a text style [here](https://pixijs.io/pixi-text-style).
 *
 * @class
 * @memberof PIXI
 */
var CGTextStyle = /** @class */ (function () {
    /**
     * @param {object} [style] - The style parameters
     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center' or 'right'),
     *  does not affect single line text
     * @param {boolean} [style.breakWords=false] - Indicates if lines can be wrapped within words, it
     *  needs wordWrap to be set to true
     * @param {boolean} [style.dropShadow=false] - Set a drop shadow for the text
     * @param {number} [style.dropShadowAlpha=1] - Set alpha for the drop shadow
     * @param {number} [style.dropShadowAngle=Math.PI/6] - Set a angle of the drop shadow
     * @param {number} [style.dropShadowBlur=0] - Set a shadow blur radius
     * @param {string|number} [style.dropShadowColor='black'] - A fill style to be used on the dropshadow e.g 'red', '#00FF00'
     * @param {number} [style.dropShadowDistance=5] - Set a distance of the drop shadow
     * @param {string|string[]|number|number[]|CanvasGradient|CanvasPattern} [style.fill='black'] - A canvas
     *  fillstyle that will be used on the text e.g 'red', '#00FF00'. Can be an array to create a gradient
     *  eg ['#000000','#FFFFFF']
     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}
     * @param {number} [style.fillGradientType=PIXI.TEXT_GRADIENT.LINEAR_VERTICAL] - If fill is an array of colours
     *  to create a gradient, this can change the type/direction of the gradient. See {@link PIXI.TEXT_GRADIENT}
     * @param {number[]} [style.fillGradientStops] - If fill is an array of colours to create a gradient, this array can set
     * the stop points (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.
     * @param {string|string[]} [style.fontFamily='Arial'] - The font family
     * @param {number|string} [style.fontSize=26] - The font size (as a number it converts to px, but as a string,
     *  equivalents are '26px','20pt','160%' or '1.6em')
     * @param {string} [style.fontStyle='normal'] - The font style ('normal', 'italic' or 'oblique')
     * @param {string} [style.fontVariant='normal'] - The font variant ('normal' or 'small-caps')
     * @param {string} [style.fontWeight='normal'] - The font weight ('normal', 'bold', 'bolder', 'lighter' and '100',
     *  '200', '300', '400', '500', '600', '700', '800' or '900')
     * @param {number} [style.leading=0] - The space between lines
     * @param {number} [style.letterSpacing=0] - The amount of spacing between letters, default is 0
     * @param {number} [style.lineHeight] - The line height, a number that represents the vertical space that a letter uses
     * @param {string} [style.lineJoin='miter'] - The lineJoin property sets the type of corner created, it can resolve
     *      spiked text issues. Possible values "miter" (creates a sharp corner), "round" (creates a round corner) or "bevel"
     *      (creates a squared corner).
     * @param {number} [style.miterLimit=10] - The miter limit to use when using the 'miter' lineJoin mode. This can reduce
     *      or increase the spikiness of rendered text.
     * @param {number} [style.padding=0] - Occasionally some fonts are cropped. Adding some padding will prevent this from
     *     happening by adding padding to all sides of the text.
     * @param {string|number} [style.stroke='black'] - A canvas fillstyle that will be used on the text stroke
     *  e.g 'blue', '#FCFF00'
     * @param {number} [style.strokeThickness=0] - A number that represents the thickness of the stroke.
     *  Default is 0 (no stroke)
     * @param {boolean} [style.trim=false] - Trim transparent borders
     * @param {string} [style.textBaseline='alphabetic'] - The baseline of the text that is rendered.
     * @param {string} [style.whiteSpace='pre'] - Determines whether newlines & spaces are collapsed or preserved "normal"
     *      (collapse, collapse), "pre" (preserve, preserve) | "pre-line" (preserve, collapse). It needs wordWrap to be set to true
     * @param {boolean} [style.wordWrap=false] - Indicates if word wrap should be used
     * @param {number} [style.wordWrapWidth=100] - The width at which text will wrap, it needs wordWrap to be set to true
     */
    function CGTextStyle(style) {
        this._align = 'left';
        this._breakWords = false;
        this._dropShadow = false;
        this._dropShadowAlpha = 0;
        this._dropShadowAngle = 0;
        this._dropShadowBlur = 0;
        this._dropShadowColor = undefined;
        this._dropShadowDistance = 0;
        this._fill = undefined;
        this._fillGradientType = TEXT_GRADIENT.LINEAR_VERTICAL;
        this._fillGradientStops = undefined;
        this._fontFamily = _tuval_core__WEBPACK_IMPORTED_MODULE_0__.TString.Empty;
        this._fontSize = 0;
        this._fontStyle = 'normal';
        this._fontVariant = 'normal';
        this._fontWeight = 'normal';
        this._letterSpacing = 0;
        this._lineHeight = 0;
        this._lineJoin = 'miter';
        this._miterLimit = 0;
        this._padding = 0;
        this._stroke = undefined;
        this._strokeThickness = 0;
        this._textBaseline = 'alphabetic';
        this._trim = false;
        this._whiteSpace = 'normal';
        this._wordWrap = false;
        this._wordWrapWidth = 0;
        this._leading = 0;
        this.styleID = 0;
        this.reset();
        deepCopyProperties(this, style, style);
    }
    ;
    ;
    /**
     * Creates a new TextStyle object with the same values as this one.
     * Note that the only the properties of the object are cloned.
     *
     * @return {PIXI.TextStyle} New cloned TextStyle object
     */
    CGTextStyle.prototype.clone = function () {
        var clonedProperties = {};
        deepCopyProperties(clonedProperties, this, defaultStyle);
        return new CGTextStyle(clonedProperties);
    };
    /**
     * Resets all properties to the defaults specified in TextStyle.prototype._default
     */
    CGTextStyle.prototype.reset = function () {
        deepCopyProperties(this, defaultStyle, defaultStyle);
    };
    Object.defineProperty(CGTextStyle.prototype, "align", {
        /**
         * Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text
         *
         * @member {string}
         */
        get: function () {
            return this._align;
        },
        set: function (align) {
            if (this._align !== align) {
                this._align = align;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "breakWords", {
        /**
         * Indicates if lines can be wrapped within words, it needs wordWrap to be set to true
         *
         * @member {boolean}
         */
        get: function () {
            return this._breakWords;
        },
        set: function (breakWords) {
            if (this._breakWords !== breakWords) {
                this._breakWords = breakWords;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "dropShadow", {
        /**
         * Set a drop shadow for the text
         *
         * @member {boolean}
         */
        get: function () {
            return this._dropShadow;
        },
        set: function (dropShadow) {
            if (this._dropShadow !== dropShadow) {
                this._dropShadow = dropShadow;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "dropShadowAlpha", {
        /**
         * Set alpha for the drop shadow
         *
         * @member {number}
         */
        get: function () {
            return this._dropShadowAlpha;
        },
        set: function (dropShadowAlpha) {
            if (this._dropShadowAlpha !== dropShadowAlpha) {
                this._dropShadowAlpha = dropShadowAlpha;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "dropShadowAngle", {
        /**
         * Set a angle of the drop shadow
         *
         * @member {number}
         */
        get: function () {
            return this._dropShadowAngle;
        },
        set: function (dropShadowAngle) {
            if (this._dropShadowAngle !== dropShadowAngle) {
                this._dropShadowAngle = dropShadowAngle;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "dropShadowBlur", {
        /**
         * Set a shadow blur radius
         *
         * @member {number}
         */
        get: function () {
            return this._dropShadowBlur;
        },
        set: function (dropShadowBlur) {
            if (this._dropShadowBlur !== dropShadowBlur) {
                this._dropShadowBlur = dropShadowBlur;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "dropShadowColor", {
        /**
         * A fill style to be used on the dropshadow e.g 'red', '#00FF00'
         *
         * @member {string|number}
         */
        get: function () {
            return this._dropShadowColor;
        },
        set: function (dropShadowColor) {
            var outputColor = getColor(dropShadowColor);
            if (this._dropShadowColor !== outputColor) {
                this._dropShadowColor = outputColor;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "dropShadowDistance", {
        /**
         * Set a distance of the drop shadow
         *
         * @member {number}
         */
        get: function () {
            return this._dropShadowDistance;
        },
        set: function (dropShadowDistance) {
            if (this._dropShadowDistance !== dropShadowDistance) {
                this._dropShadowDistance = dropShadowDistance;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "fill", {
        /**
         * A canvas fillstyle that will be used on the text e.g 'red', '#00FF00'.
         * Can be an array to create a gradient eg ['#000000','#FFFFFF']
         * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}
         *
         * @member {string|string[]|number|number[]|CanvasGradient|CanvasPattern}
         */
        get: function () {
            return this._fill;
        },
        set: function (fill) {
            // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as
            //       the setter converts to string. See this thread for more details:
            //       https://github.com/microsoft/TypeScript/issues/2521
            // TODO: Not sure if getColor works properly with CanvasGradient and/or CanvasPattern, can't pass in
            //       without casting here.
            var outputColor = getColor(fill);
            if (this._fill !== outputColor) {
                this._fill = outputColor;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "fillGradientType", {
        /**
         * If fill is an array of colours to create a gradient, this can change the type/direction of the gradient.
         * See {@link PIXI.TEXT_GRADIENT}
         *
         * @member {number}
         */
        get: function () {
            return this._fillGradientType;
        },
        set: function (fillGradientType) {
            if (this._fillGradientType !== fillGradientType) {
                this._fillGradientType = fillGradientType;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "fillGradientStops", {
        /**
         * If fill is an array of colours to create a gradient, this array can set the stop points
         * (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.
         *
         * @member {number[]}
         */
        get: function () {
            return this._fillGradientStops;
        },
        set: function (fillGradientStops) {
            if (!areArraysEqual(this._fillGradientStops, fillGradientStops)) {
                this._fillGradientStops = fillGradientStops;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "fontFamily", {
        /**
         * The font family
         *
         * @member {string|string[]}
         */
        get: function () {
            return this._fontFamily;
        },
        set: function (fontFamily) {
            if (this.fontFamily !== fontFamily) {
                this._fontFamily = fontFamily;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "fontSize", {
        /**
         * The font size
         * (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em')
         *
         * @member {number|string}
         */
        get: function () {
            return this._fontSize;
        },
        set: function (fontSize) {
            if (this._fontSize !== fontSize) {
                this._fontSize = fontSize;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "fontStyle", {
        /**
         * The font style
         * ('normal', 'italic' or 'oblique')
         *
         * @member {string}
         */
        get: function () {
            return this._fontStyle;
        },
        set: function (fontStyle) {
            if (this._fontStyle !== fontStyle) {
                this._fontStyle = fontStyle;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "fontVariant", {
        /**
         * The font variant
         * ('normal' or 'small-caps')
         *
         * @member {string}
         */
        get: function () {
            return this._fontVariant;
        },
        set: function (fontVariant) {
            if (this._fontVariant !== fontVariant) {
                this._fontVariant = fontVariant;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "fontWeight", {
        /**
         * The font weight
         * ('normal', 'bold', 'bolder', 'lighter' and '100', '200', '300', '400', '500', '600', '700', 800' or '900')
         *
         * @member {string}
         */
        get: function () {
            return this._fontWeight;
        },
        set: function (fontWeight) {
            if (this._fontWeight !== fontWeight) {
                this._fontWeight = fontWeight;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "letterSpacing", {
        /**
         * The amount of spacing between letters, default is 0
         *
         * @member {number}
         */
        get: function () {
            return this._letterSpacing;
        },
        set: function (letterSpacing) {
            if (this._letterSpacing !== letterSpacing) {
                this._letterSpacing = letterSpacing;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "lineHeight", {
        /**
         * The line height, a number that represents the vertical space that a letter uses
         *
         * @member {number}
         */
        get: function () {
            return this._lineHeight;
        },
        set: function (lineHeight) {
            if (this._lineHeight !== lineHeight) {
                this._lineHeight = lineHeight;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "leading", {
        /**
         * The space between lines
         *
         * @member {number}
         */
        get: function () {
            return this._leading;
        },
        set: function (leading) {
            if (this._leading !== leading) {
                this._leading = leading;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "lineJoin", {
        /**
         * The lineJoin property sets the type of corner created, it can resolve spiked text issues.
         * Default is 'miter' (creates a sharp corner).
         *
         * @member {string}
         */
        get: function () {
            return this._lineJoin;
        },
        set: function (lineJoin) {
            if (this._lineJoin !== lineJoin) {
                this._lineJoin = lineJoin;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "miterLimit", {
        /**
         * The miter limit to use when using the 'miter' lineJoin mode
         * This can reduce or increase the spikiness of rendered text.
         *
         * @member {number}
         */
        get: function () {
            return this._miterLimit;
        },
        set: function (miterLimit) {
            if (this._miterLimit !== miterLimit) {
                this._miterLimit = miterLimit;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "padding", {
        /**
         * Occasionally some fonts are cropped. Adding some padding will prevent this from happening
         * by adding padding to all sides of the text.
         *
         * @member {number}
         */
        get: function () {
            return this._padding;
        },
        set: function (padding) {
            if (this._padding !== padding) {
                this._padding = padding;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "stroke", {
        /**
         * A canvas fillstyle that will be used on the text stroke
         * e.g 'blue', '#FCFF00'
         *
         * @member {string|number}
         */
        get: function () {
            return this._stroke;
        },
        set: function (stroke) {
            // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as
            //       the setter converts to string. See this thread for more details:
            //       https://github.com/microsoft/TypeScript/issues/2521
            var outputColor = getColor(stroke);
            if (this._stroke !== outputColor) {
                this._stroke = outputColor;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "strokeThickness", {
        /**
         * A number that represents the thickness of the stroke.
         * Default is 0 (no stroke)
         *
         * @member {number}
         */
        get: function () {
            return this._strokeThickness;
        },
        set: function (strokeThickness) {
            if (this._strokeThickness !== strokeThickness) {
                this._strokeThickness = strokeThickness;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "textBaseline", {
        /**
         * The baseline of the text that is rendered.
         *
         * @member {string}
         */
        get: function () {
            return this._textBaseline;
        },
        set: function (textBaseline) {
            if (this._textBaseline !== textBaseline) {
                this._textBaseline = textBaseline;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "trim", {
        /**
         * Trim transparent borders
         *
         * @member {boolean}
         */
        get: function () {
            return this._trim;
        },
        set: function (trim) {
            if (this._trim !== trim) {
                this._trim = trim;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "whiteSpace", {
        /**
         * How newlines and spaces should be handled.
         * Default is 'pre' (preserve, preserve).
         *
         *  value       | New lines     |   Spaces
         *  ---         | ---           |   ---
         * 'normal'     | Collapse      |   Collapse
         * 'pre'        | Preserve      |   Preserve
         * 'pre-line'   | Preserve      |   Collapse
         *
         * @member {string}
         */
        get: function () {
            return this._whiteSpace;
        },
        set: function (whiteSpace) {
            if (this._whiteSpace !== whiteSpace) {
                this._whiteSpace = whiteSpace;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "wordWrap", {
        /**
         * Indicates if word wrap should be used
         *
         * @member {boolean}
         */
        get: function () {
            return this._wordWrap;
        },
        set: function (wordWrap) {
            if (this._wordWrap !== wordWrap) {
                this._wordWrap = wordWrap;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CGTextStyle.prototype, "wordWrapWidth", {
        /**
         * The width at which text will wrap, it needs wordWrap to be set to true
         *
         * @member {number}
         */
        get: function () {
            return this._wordWrapWidth;
        },
        set: function (wordWrapWidth) {
            if (this._wordWrapWidth !== wordWrapWidth) {
                this._wordWrapWidth = wordWrapWidth;
                this.styleID++;
            }
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Generates a font style string to use for `TextMetrics.measureFont()`.
     *
     * @return {string} Font style string, for passing to `TextMetrics.measureFont()`
     */
    CGTextStyle.prototype.toFontString = function () {
        // build canvas api font setting from individual components. Convert a numeric this.fontSize to px
        var fontSizeString = (typeof this.fontSize === 'number') ? this.fontSize + "px" : this.fontSize;
        // Clean-up fontFamily property by quoting each font name
        // this will support font names with spaces
        var fontFamilies = this.fontFamily;
        if (!Array.isArray(this.fontFamily)) {
            fontFamilies = this.fontFamily.split(',');
        }
        for (var i = fontFamilies.length - 1; i >= 0; i--) {
            // Trim any extra white-space
            var fontFamily = fontFamilies[i].trim();
            // Check if font already contains strings
            if (!(/([\"\'])[^\'\"]+\1/).test(fontFamily) && genericFontFamilies.indexOf(fontFamily) < 0) {
                fontFamily = "\"" + fontFamily + "\"";
            }
            fontFamilies[i] = fontFamily;
        }
        return this.fontStyle + " " + this.fontVariant + " " + this.fontWeight + " " + fontSizeString + " " + fontFamilies.join(',');
    };
    return CGTextStyle;
}());

/**
 * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.
 * @private
 * @param {string|number} color
 * @return {string} The color as a string.
 */
function getSingleColor(color) {
    if (typeof color === 'number') {
        return hex2string(color);
    }
    else if (typeof color === 'string') {
        if (color.indexOf('0x') === 0) {
            color = color.replace('0x', '#');
        }
    }
    return color;
}
function getColor(color) {
    if (!Array.isArray(color)) {
        return getSingleColor(color);
    }
    else {
        for (var i = 0; i < color.length; ++i) {
            color[i] = getSingleColor(color[i]);
        }
        return color;
    }
}
/**
 * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.
 * This version can also convert array of colors
 * @private
 * @param {Array} array1 First array to compare
 * @param {Array} array2 Second array to compare
 * @return {boolean} Do the arrays contain the same values in the same order
 */
function areArraysEqual(array1, array2) {
    if (!Array.isArray(array1) || !Array.isArray(array2)) {
        return false;
    }
    if (array1.length !== array2.length) {
        return false;
    }
    for (var i = 0; i < array1.length; ++i) {
        if (array1[i] !== array2[i]) {
            return false;
        }
    }
    return true;
}
/**
 * Utility function to ensure that object properties are copied by value, and not by reference
 * @private
 * @param {Object} target Target object to copy properties into
 * @param {Object} source Source object for the properties to copy
 * @param {string} propertyObj Object containing properties names we want to loop over
 */
function deepCopyProperties(target, source, propertyObj) {
    for (var prop in propertyObj) {
        if (Array.isArray(source[prop])) {
            target[prop] = source[prop].slice();
        }
        else {
            target[prop] = source[prop];
        }
    }
}


/***/ }),

/***/ "./src/FontStyle.ts":
/*!**************************!*\
  !*** ./src/FontStyle.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FontStyle": () => (/* binding */ FontStyle)
/* harmony export */ });
var FontStyle;
(function (FontStyle) {
    FontStyle[FontStyle["Regular"] = 0] = "Regular";
    FontStyle[FontStyle["Bold"] = 1] = "Bold";
    FontStyle[FontStyle["Italic"] = 2] = "Italic";
    FontStyle[FontStyle["Underline"] = 4] = "Underline";
    FontStyle[FontStyle["Strikeout"] = 8] = "Strikeout";
})(FontStyle || (FontStyle = {}));


/***/ }),

/***/ "./src/IContext2D.ts":
/*!***************************!*\
  !*** ./src/IContext2D.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./src/StringAlignment.ts":
/*!********************************!*\
  !*** ./src/StringAlignment.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StringAlignment": () => (/* binding */ StringAlignment)
/* harmony export */ });
var StringAlignment;
(function (StringAlignment) {
    StringAlignment[StringAlignment["Near"] = 0] = "Near";
    StringAlignment[StringAlignment["Center"] = 1] = "Center";
    StringAlignment[StringAlignment["Far"] = 2] = "Far";
})(StringAlignment || (StringAlignment = {}));


/***/ }),

/***/ "./src/WrapMode.ts":
/*!*************************!*\
  !*** ./src/WrapMode.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WrapMode": () => (/* binding */ WrapMode)
/* harmony export */ });
var WrapMode;
(function (WrapMode) {
    WrapMode[WrapMode["Tile"] = 0] = "Tile";
    WrapMode[WrapMode["TileFlipX"] = 1] = "TileFlipX";
    WrapMode[WrapMode["TileFlipY"] = 2] = "TileFlipY";
    WrapMode[WrapMode["TileFlipXY"] = 3] = "TileFlipXY";
    WrapMode[WrapMode["Clamp"] = 4] = "Clamp";
})(WrapMode || (WrapMode = {}));


/***/ }),

/***/ "./src/exports.ts":
/*!************************!*\
  !*** ./src/exports.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ "./src/index.ts");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tuval/core */ "@tuval/core");
/* harmony import */ var _tuval_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_tuval_core__WEBPACK_IMPORTED_MODULE_1__);


var globalObject = undefined;
if (_tuval_core__WEBPACK_IMPORTED_MODULE_1__.is.workerContext()) {
    globalObject = self;
}
else {
    globalObject = window;
}
globalObject['tuval$core$graphics'] = _index__WEBPACK_IMPORTED_MODULE_0__;
if (_tuval_core__WEBPACK_IMPORTED_MODULE_1__.is.workerContext()) {
    console.log('tuval core graphics yüklendi.');
    console.log(globalObject['tuval$core']);
    console.log(globalObject['tuval$core$graphics']);
}


/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CGPath": () => (/* reexport safe */ _CGPath_CGPath__WEBPACK_IMPORTED_MODULE_0__.CGPath),
/* harmony export */   "supportsSvgPathArgument": () => (/* reexport safe */ _CGPath_CGPath__WEBPACK_IMPORTED_MODULE_0__.supportsSvgPathArgument),
/* harmony export */   "CGColor": () => (/* reexport safe */ _CGColor_CGColor__WEBPACK_IMPORTED_MODULE_1__.CGColor),
/* harmony export */   "KnownColor": () => (/* reexport safe */ _CGColor_KnownColor__WEBPACK_IMPORTED_MODULE_2__.KnownColor),
/* harmony export */   "KnownColors": () => (/* reexport safe */ _CGColor_KnownColors__WEBPACK_IMPORTED_MODULE_3__.KnownColors),
/* harmony export */   "CGRectangle": () => (/* reexport safe */ _CGRectangle__WEBPACK_IMPORTED_MODULE_4__.CGRectangle),
/* harmony export */   "Rect": () => (/* reexport safe */ _CGRectangle__WEBPACK_IMPORTED_MODULE_4__.Rect),
/* harmony export */   "CGPoint": () => (/* reexport safe */ _CGPoint__WEBPACK_IMPORTED_MODULE_5__.CGPoint),
/* harmony export */   "CGSize": () => (/* reexport safe */ _CGSize__WEBPACK_IMPORTED_MODULE_6__.CGSize),
/* harmony export */   "CGContext2D": () => (/* reexport safe */ _CGContext__WEBPACK_IMPORTED_MODULE_7__.CGContext2D),
/* harmony export */   "CGFont": () => (/* reexport safe */ _CGFont_CGFont__WEBPACK_IMPORTED_MODULE_9__.CGFont),
/* harmony export */   "CGAffineTransform": () => (/* reexport safe */ _CGAffineTransform__WEBPACK_IMPORTED_MODULE_10__.CGAffineTransform),
/* harmony export */   "CGImage": () => (/* reexport safe */ _CGImage_CGImage__WEBPACK_IMPORTED_MODULE_11__.CGImage),
/* harmony export */   "CoreGraphicTypes": () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_12__.CoreGraphicTypes),
/* harmony export */   "CGLineCap": () => (/* reexport safe */ _CGLineCap__WEBPACK_IMPORTED_MODULE_13__.CGLineCap),
/* harmony export */   "CGLineJoin": () => (/* reexport safe */ _CGLineJoin__WEBPACK_IMPORTED_MODULE_14__.CGLineJoin),
/* harmony export */   "CGBlendMode": () => (/* reexport safe */ _CGBlendMode__WEBPACK_IMPORTED_MODULE_15__.CGBlendMode),
/* harmony export */   "CGPathDrawingMode": () => (/* reexport safe */ _CGPath_CGPathDrawingMode__WEBPACK_IMPORTED_MODULE_16__.CGPathDrawingMode),
/* harmony export */   "CGTextStyle": () => (/* reexport safe */ _CGTextStyle__WEBPACK_IMPORTED_MODULE_17__.CGTextStyle),
/* harmony export */   "TEXT_GRADIENT": () => (/* reexport safe */ _CGTextStyle__WEBPACK_IMPORTED_MODULE_17__.TEXT_GRADIENT),
/* harmony export */   "hex2string": () => (/* reexport safe */ _CGTextStyle__WEBPACK_IMPORTED_MODULE_17__.hex2string),
/* harmony export */   "CGTextMetrics": () => (/* reexport safe */ _CGTextMetrics__WEBPACK_IMPORTED_MODULE_18__.CGTextMetrics),
/* harmony export */   "CGCommandContext2D": () => (/* reexport safe */ _CGCommandContext__WEBPACK_IMPORTED_MODULE_19__.CGCommandContext2D),
/* harmony export */   "ClearRectCommand": () => (/* reexport safe */ _CGCommandContext__WEBPACK_IMPORTED_MODULE_19__.ClearRectCommand),
/* harmony export */   "CommandContextPilot": () => (/* reexport safe */ _CGCommandContext__WEBPACK_IMPORTED_MODULE_19__.CommandContextPilot),
/* harmony export */   "CommandContextPilotWithPointer": () => (/* reexport safe */ _CGCommandContext__WEBPACK_IMPORTED_MODULE_19__.CommandContextPilotWithPointer),
/* harmony export */   "Commands": () => (/* reexport safe */ _CGCommandContext__WEBPACK_IMPORTED_MODULE_19__.Commands),
/* harmony export */   "EndCommand": () => (/* reexport safe */ _CGCommandContext__WEBPACK_IMPORTED_MODULE_19__.EndCommand),
/* harmony export */   "IsDebug": () => (/* reexport safe */ _CGCommandContext__WEBPACK_IMPORTED_MODULE_19__.IsDebug),
/* harmony export */   "RotateCommand": () => (/* reexport safe */ _CGCommandContext__WEBPACK_IMPORTED_MODULE_19__.RotateCommand),
/* harmony export */   "ScaleCommand": () => (/* reexport safe */ _CGCommandContext__WEBPACK_IMPORTED_MODULE_19__.ScaleCommand),
/* harmony export */   "StartCommand": () => (/* reexport safe */ _CGCommandContext__WEBPACK_IMPORTED_MODULE_19__.StartCommand),
/* harmony export */   "TransformCommand": () => (/* reexport safe */ _CGCommandContext__WEBPACK_IMPORTED_MODULE_19__.TransformCommand),
/* harmony export */   "TranslateCommand": () => (/* reexport safe */ _CGCommandContext__WEBPACK_IMPORTED_MODULE_19__.TranslateCommand),
/* harmony export */   "CGInterpolationQuality": () => (/* reexport safe */ _CGInterpolationQuality__WEBPACK_IMPORTED_MODULE_20__.CGInterpolationQuality)
/* harmony export */ });
/* harmony import */ var _CGPath_CGPath__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CGPath/CGPath */ "./src/CGPath/CGPath.ts");
/* harmony import */ var _CGColor_CGColor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CGColor/CGColor */ "./src/CGColor/CGColor.ts");
/* harmony import */ var _CGColor_KnownColor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CGColor/KnownColor */ "./src/CGColor/KnownColor.ts");
/* harmony import */ var _CGColor_KnownColors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CGColor/KnownColors */ "./src/CGColor/KnownColors.ts");
/* harmony import */ var _CGRectangle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CGRectangle */ "./src/CGRectangle.ts");
/* harmony import */ var _CGPoint__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CGPoint */ "./src/CGPoint.ts");
/* harmony import */ var _CGSize__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./CGSize */ "./src/CGSize.ts");
/* harmony import */ var _CGContext__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./CGContext */ "./src/CGContext.ts");
/* harmony import */ var _IContext2D__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./IContext2D */ "./src/IContext2D.ts");
/* harmony import */ var _CGFont_CGFont__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./CGFont/CGFont */ "./src/CGFont/CGFont.ts");
/* harmony import */ var _CGAffineTransform__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./CGAffineTransform */ "./src/CGAffineTransform.ts");
/* harmony import */ var _CGImage_CGImage__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./CGImage/CGImage */ "./src/CGImage/CGImage.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./types */ "./src/types.ts");
/* harmony import */ var _CGLineCap__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./CGLineCap */ "./src/CGLineCap.ts");
/* harmony import */ var _CGLineJoin__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./CGLineJoin */ "./src/CGLineJoin.ts");
/* harmony import */ var _CGBlendMode__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./CGBlendMode */ "./src/CGBlendMode.ts");
/* harmony import */ var _CGPath_CGPathDrawingMode__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./CGPath/CGPathDrawingMode */ "./src/CGPath/CGPathDrawingMode.ts");
/* harmony import */ var _CGTextStyle__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./CGTextStyle */ "./src/CGTextStyle.ts");
/* harmony import */ var _CGTextMetrics__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./CGTextMetrics */ "./src/CGTextMetrics.ts");
/* harmony import */ var _CGCommandContext__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./CGCommandContext */ "./src/CGCommandContext/index.ts");
/* harmony import */ var _CGInterpolationQuality__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./CGInterpolationQuality */ "./src/CGInterpolationQuality.ts");
/* harmony import */ var _exports__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./exports */ "./src/exports.ts");

























/***/ }),

/***/ "./src/types.ts":
/*!**********************!*\
  !*** ./src/types.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CoreGraphicTypes": () => (/* binding */ CoreGraphicTypes)
/* harmony export */ });
var CoreGraphicTypes = {
    StartCommand: Symbol('tuval.coregraphics.StartCommand'),
    CGFont: Symbol('tuval.coregraphics.CGFont'),
    CGPoint: Symbol('tuval.coregraphics.CGPoint'),
    CGRectangle: Symbol('tuval.coregraphics.CGRectangle'),
    CGColor: Symbol('tuval.coregraphics.CGColor'),
    CGImage: Symbol('tuval.coregraphics.CGImage'),
    CGPath: Symbol('tuval.coregraphics.CGPath'),
    CGContext2D: Symbol('tuval.coregraphics.CGContext2D'),
    CGPattern: Symbol('tuval.coregraphics.CGPattern'),
    CGSize: Symbol('tuval.coregraphics.CGSize'),
};


/***/ }),

/***/ "@tuval/core":
/*!******************************!*\
  !*** external "@tuval/core" ***!
  \******************************/
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_MODULE__tuval_core__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=index.js.map
tuval$core.EventBus.Default.on('error', (event) => {
   setTimeout(()=>console.error(event.error),1);
   return false;
});
tuval$core.EventBus.Default.fire('module.loaded.cg', {});
